
IMS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000438  00800200  00003cb2  00003d46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  00800638  00800638  0000417e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000417e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b0  00000000  00000000  0000421c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009598  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002679  00000000  00000000  0000de64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000463f  00000000  00000000  000104dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001624  00000000  00000000  00014b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003143  00000000  00000000  00016140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000080d7  00000000  00000000  00019283  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  0002135a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c2       	rjmp	.+1290   	; 0x50c <__ctors_end>
       2:	00 00       	nop
       4:	a4 c2       	rjmp	.+1352   	; 0x54e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c2       	rjmp	.+1348   	; 0x54e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c2       	rjmp	.+1344   	; 0x54e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c2       	rjmp	.+1340   	; 0x54e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c2       	rjmp	.+1336   	; 0x54e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c2       	rjmp	.+1332   	; 0x54e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c2       	rjmp	.+1328   	; 0x54e <__bad_interrupt>
      1e:	00 00       	nop
      20:	96 c2       	rjmp	.+1324   	; 0x54e <__bad_interrupt>
      22:	00 00       	nop
      24:	94 c2       	rjmp	.+1320   	; 0x54e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c2       	rjmp	.+1316   	; 0x54e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	90 c2       	rjmp	.+1312   	; 0x54e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c4       	rjmp	.+2420   	; 0x9a6 <__vector_12>
      32:	00 00       	nop
      34:	8c c2       	rjmp	.+1304   	; 0x54e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c2       	rjmp	.+1300   	; 0x54e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c2       	rjmp	.+1296   	; 0x54e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c2       	rjmp	.+1292   	; 0x54e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c2       	rjmp	.+1288   	; 0x54e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c2       	rjmp	.+1284   	; 0x54e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c2       	rjmp	.+1280   	; 0x54e <__bad_interrupt>
      4e:	00 00       	nop
      50:	7e c2       	rjmp	.+1276   	; 0x54e <__bad_interrupt>
      52:	00 00       	nop
      54:	7c c2       	rjmp	.+1272   	; 0x54e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c2       	rjmp	.+1268   	; 0x54e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	78 c2       	rjmp	.+1264   	; 0x54e <__bad_interrupt>
      5e:	00 00       	nop
      60:	76 c2       	rjmp	.+1260   	; 0x54e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__vector_25>
      68:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__vector_26>
      6c:	70 c2       	rjmp	.+1248   	; 0x54e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c2       	rjmp	.+1244   	; 0x54e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c2       	rjmp	.+1240   	; 0x54e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c2       	rjmp	.+1236   	; 0x54e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	68 c2       	rjmp	.+1232   	; 0x54e <__bad_interrupt>
      7e:	00 00       	nop
      80:	66 c2       	rjmp	.+1228   	; 0x54e <__bad_interrupt>
      82:	00 00       	nop
      84:	64 c2       	rjmp	.+1224   	; 0x54e <__bad_interrupt>
      86:	00 00       	nop
      88:	62 c2       	rjmp	.+1220   	; 0x54e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	60 c2       	rjmp	.+1216   	; 0x54e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_36>
      94:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__vector_37>
      98:	5a c2       	rjmp	.+1204   	; 0x54e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__vector_39>
      a0:	56 c2       	rjmp	.+1196   	; 0x54e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	54 c2       	rjmp	.+1192   	; 0x54e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	52 c2       	rjmp	.+1188   	; 0x54e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	50 c2       	rjmp	.+1184   	; 0x54e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4e c2       	rjmp	.+1180   	; 0x54e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4c c2       	rjmp	.+1176   	; 0x54e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4a c2       	rjmp	.+1172   	; 0x54e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	48 c2       	rjmp	.+1168   	; 0x54e <__bad_interrupt>
      be:	00 00       	nop
      c0:	46 c2       	rjmp	.+1164   	; 0x54e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	44 c2       	rjmp	.+1160   	; 0x54e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	42 c2       	rjmp	.+1156   	; 0x54e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__vector_51>
      d0:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__vector_52>
      d4:	3c c2       	rjmp	.+1144   	; 0x54e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__vector_54>
      dc:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__vector_55>
      e0:	36 c2       	rjmp	.+1132   	; 0x54e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 02       	muls	r17, r22
      e6:	16 02       	muls	r17, r22
      e8:	16 02       	muls	r17, r22
      ea:	45 02       	muls	r20, r21
      ec:	4d 02       	muls	r20, r29
      ee:	5c 02       	muls	r21, r28
      f0:	16 02       	muls	r17, r22
      f2:	16 02       	muls	r17, r22
      f4:	45 02       	muls	r20, r21
      f6:	4d 02       	muls	r20, r29
      f8:	71 18       	sub	r7, r1
      fa:	e1 18       	sub	r14, r1
      fc:	e1 18       	sub	r14, r1
      fe:	e1 18       	sub	r14, r1
     100:	e1 18       	sub	r14, r1
     102:	e1 18       	sub	r14, r1
     104:	e1 18       	sub	r14, r1
     106:	e1 18       	sub	r14, r1
     108:	71 18       	sub	r7, r1
     10a:	e1 18       	sub	r14, r1
     10c:	e1 18       	sub	r14, r1
     10e:	e1 18       	sub	r14, r1
     110:	e1 18       	sub	r14, r1
     112:	e1 18       	sub	r14, r1
     114:	e1 18       	sub	r14, r1
     116:	e1 18       	sub	r14, r1
     118:	73 18       	sub	r7, r3
     11a:	e1 18       	sub	r14, r1
     11c:	e1 18       	sub	r14, r1
     11e:	e1 18       	sub	r14, r1
     120:	e1 18       	sub	r14, r1
     122:	e1 18       	sub	r14, r1
     124:	e1 18       	sub	r14, r1
     126:	e1 18       	sub	r14, r1
     128:	e1 18       	sub	r14, r1
     12a:	e1 18       	sub	r14, r1
     12c:	e1 18       	sub	r14, r1
     12e:	e1 18       	sub	r14, r1
     130:	e1 18       	sub	r14, r1
     132:	e1 18       	sub	r14, r1
     134:	e1 18       	sub	r14, r1
     136:	e1 18       	sub	r14, r1
     138:	73 18       	sub	r7, r3
     13a:	e1 18       	sub	r14, r1
     13c:	e1 18       	sub	r14, r1
     13e:	e1 18       	sub	r14, r1
     140:	e1 18       	sub	r14, r1
     142:	e1 18       	sub	r14, r1
     144:	e1 18       	sub	r14, r1
     146:	e1 18       	sub	r14, r1
     148:	e1 18       	sub	r14, r1
     14a:	e1 18       	sub	r14, r1
     14c:	e1 18       	sub	r14, r1
     14e:	e1 18       	sub	r14, r1
     150:	e1 18       	sub	r14, r1
     152:	e1 18       	sub	r14, r1
     154:	e1 18       	sub	r14, r1
     156:	e1 18       	sub	r14, r1
     158:	dd 18       	sub	r13, r13
     15a:	e1 18       	sub	r14, r1
     15c:	e1 18       	sub	r14, r1
     15e:	e1 18       	sub	r14, r1
     160:	e1 18       	sub	r14, r1
     162:	e1 18       	sub	r14, r1
     164:	e1 18       	sub	r14, r1
     166:	e1 18       	sub	r14, r1
     168:	a8 18       	sub	r10, r8
     16a:	e1 18       	sub	r14, r1
     16c:	e1 18       	sub	r14, r1
     16e:	e1 18       	sub	r14, r1
     170:	e1 18       	sub	r14, r1
     172:	e1 18       	sub	r14, r1
     174:	e1 18       	sub	r14, r1
     176:	e1 18       	sub	r14, r1
     178:	e1 18       	sub	r14, r1
     17a:	e1 18       	sub	r14, r1
     17c:	e1 18       	sub	r14, r1
     17e:	e1 18       	sub	r14, r1
     180:	e1 18       	sub	r14, r1
     182:	e1 18       	sub	r14, r1
     184:	e1 18       	sub	r14, r1
     186:	e1 18       	sub	r14, r1
     188:	9c 18       	sub	r9, r12
     18a:	e1 18       	sub	r14, r1
     18c:	e1 18       	sub	r14, r1
     18e:	e1 18       	sub	r14, r1
     190:	e1 18       	sub	r14, r1
     192:	e1 18       	sub	r14, r1
     194:	e1 18       	sub	r14, r1
     196:	e1 18       	sub	r14, r1
     198:	c0 18       	sub	r12, r0

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     29c:	00 e5       	ldi	r16, 0x50	; 80
     29e:	16 e0       	ldi	r17, 0x06	; 6
     2a0:	0f 2e       	mov	r0, r31
     2a2:	f8 e7       	ldi	r31, 0x78	; 120
     2a4:	ef 2e       	mov	r14, r31
     2a6:	f6 e0       	ldi	r31, 0x06	; 6
     2a8:	ff 2e       	mov	r15, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <uxDeletedTasksWaitingCleanUp>
     2b0:	88 23       	and	r24, r24
     2b2:	11 f1       	breq	.+68     	; 0x2f8 <prvIdleTask+0x5c>
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	0f 92       	push	r0
     2ba:	d8 01       	movw	r26, r16
     2bc:	15 96       	adiw	r26, 0x05	; 5
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	16 97       	sbiw	r26, 0x06	; 6
     2c4:	c6 81       	ldd	r28, Z+6	; 0x06
     2c6:	d7 81       	ldd	r29, Z+7	; 0x07
     2c8:	ce 01       	movw	r24, r28
     2ca:	02 96       	adiw	r24, 0x02	; 2
     2cc:	d4 d1       	rcall	.+936    	; 0x676 <uxListRemove>
     2ce:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <uxCurrentNumberOfTasks>
     2d2:	81 50       	subi	r24, 0x01	; 1
     2d4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <uxCurrentNumberOfTasks>
     2d8:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <uxDeletedTasksWaitingCleanUp>
     2dc:	81 50       	subi	r24, 0x01	; 1
     2de:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <uxDeletedTasksWaitingCleanUp>
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	8f 89       	ldd	r24, Y+23	; 0x17
     2e8:	98 8d       	ldd	r25, Y+24	; 0x18
     2ea:	54 d1       	rcall	.+680    	; 0x594 <vPortFree>
     2ec:	ce 01       	movw	r24, r28
     2ee:	52 d1       	rcall	.+676    	; 0x594 <vPortFree>
     2f0:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <uxDeletedTasksWaitingCleanUp>
     2f4:	81 11       	cpse	r24, r1
     2f6:	de cf       	rjmp	.-68     	; 0x2b4 <prvIdleTask+0x18>
     2f8:	f7 01       	movw	r30, r14
     2fa:	80 81       	ld	r24, Z
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	08 f0       	brcs	.+2      	; 0x302 <prvIdleTask+0x66>
     300:	8f d2       	rcall	.+1310   	; 0x820 <vPortYield>
     302:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <vApplicationIdleHook>
     306:	d2 cf       	rjmp	.-92     	; 0x2ac <prvIdleTask+0x10>

00000308 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <prvTimerTask+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <prvTimerTask+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     31a:	44 24       	eor	r4, r4
     31c:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     31e:	e1 2c       	mov	r14, r1
     320:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     322:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     324:	c8 2e       	mov	r12, r24
     326:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     328:	e0 91 a6 06 	lds	r30, 0x06A6	; 0x8006a6 <pxCurrentTimerList>
     32c:	f0 91 a7 06 	lds	r31, 0x06A7	; 0x8006a7 <pxCurrentTimerList+0x1>
     330:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     332:	88 23       	and	r24, r24
     334:	09 f4       	brne	.+2      	; 0x338 <prvTimerTask+0x30>
     336:	d7 c0       	rjmp	.+430    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     338:	05 80       	ldd	r0, Z+5	; 0x05
     33a:	f6 81       	ldd	r31, Z+6	; 0x06
     33c:	e0 2d       	mov	r30, r0
     33e:	a0 80       	ld	r10, Z
     340:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     342:	0e 94 05 0a 	call	0x140a	; 0x140a <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     346:	c4 01       	movw	r24, r8
     348:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <prvSampleTimeNow>
     34c:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	81 11       	cpse	r24, r1
     352:	48 c0       	rjmp	.+144    	; 0x3e4 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     354:	0a 15       	cp	r16, r10
     356:	1b 05       	cpc	r17, r11
     358:	b0 f1       	brcs	.+108    	; 0x3c6 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     35a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     35e:	e0 91 a6 06 	lds	r30, 0x06A6	; 0x8006a6 <pxCurrentTimerList>
     362:	f0 91 a7 06 	lds	r31, 0x06A7	; 0x8006a7 <pxCurrentTimerList+0x1>
     366:	05 80       	ldd	r0, Z+5	; 0x05
     368:	f6 81       	ldd	r31, Z+6	; 0x06
     36a:	e0 2d       	mov	r30, r0
     36c:	66 80       	ldd	r6, Z+6	; 0x06
     36e:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     370:	c3 01       	movw	r24, r6
     372:	02 96       	adiw	r24, 0x02	; 2
     374:	80 d1       	rcall	.+768    	; 0x676 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     376:	d3 01       	movw	r26, r6
     378:	53 96       	adiw	r26, 0x13	; 19
     37a:	8c 91       	ld	r24, X
     37c:	53 97       	sbiw	r26, 0x13	; 19
     37e:	82 ff       	sbrs	r24, 2
     380:	17 c0       	rjmp	.+46     	; 0x3b0 <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     382:	1c 96       	adiw	r26, 0x0c	; 12
     384:	6d 91       	ld	r22, X+
     386:	7c 91       	ld	r23, X
     388:	1d 97       	sbiw	r26, 0x0d	; 13
     38a:	6a 0d       	add	r22, r10
     38c:	7b 1d       	adc	r23, r11
     38e:	95 01       	movw	r18, r10
     390:	a8 01       	movw	r20, r16
     392:	c3 01       	movw	r24, r6
     394:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <prvInsertTimerInActiveList>
     398:	88 23       	and	r24, r24
     39a:	69 f0       	breq	.+26     	; 0x3b6 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     39c:	0e 2d       	mov	r16, r14
     39e:	1f 2d       	mov	r17, r15
     3a0:	2e 2d       	mov	r18, r14
     3a2:	3f 2d       	mov	r19, r15
     3a4:	a5 01       	movw	r20, r10
     3a6:	65 2d       	mov	r22, r5
     3a8:	c3 01       	movw	r24, r6
     3aa:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xTimerGenericCommand>
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3b0:	8e 7f       	andi	r24, 0xFE	; 254
     3b2:	f3 01       	movw	r30, r6
     3b4:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     3b6:	d3 01       	movw	r26, r6
     3b8:	50 96       	adiw	r26, 0x10	; 16
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	51 97       	sbiw	r26, 0x11	; 17
     3c0:	c3 01       	movw	r24, r6
     3c2:	19 95       	eicall
     3c4:	84 c0       	rjmp	.+264    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     3c6:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     3c8:	b5 01       	movw	r22, r10
     3ca:	60 1b       	sub	r22, r16
     3cc:	71 0b       	sbc	r23, r17
     3ce:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <xTimerQueue>
     3d2:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
     3d6:	4c d6       	rcall	.+3224   	; 0x1070 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     3d8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <xTaskResumeAll>
     3dc:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     3de:	77 c0       	rjmp	.+238    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     3e0:	1f d2       	rcall	.+1086   	; 0x820 <vPortYield>
     3e2:	75 c0       	rjmp	.+234    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     3e4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <xTaskResumeAll>
     3e8:	72 c0       	rjmp	.+228    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	88 23       	and	r24, r24
     3ee:	0c f4       	brge	.+2      	; 0x3f2 <prvTimerTask+0xea>
     3f0:	6e c0       	rjmp	.+220    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     3f2:	ac 80       	ldd	r10, Y+4	; 0x04
     3f4:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     3f6:	f5 01       	movw	r30, r10
     3f8:	82 85       	ldd	r24, Z+10	; 0x0a
     3fa:	93 85       	ldd	r25, Z+11	; 0x0b
     3fc:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     400:	c5 01       	movw	r24, r10
     402:	02 96       	adiw	r24, 0x02	; 2
     404:	38 d1       	rcall	.+624    	; 0x676 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     406:	ce 01       	movw	r24, r28
     408:	06 96       	adiw	r24, 0x06	; 6
     40a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <prvSampleTimeNow>
     40e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     410:	e9 81       	ldd	r30, Y+1	; 0x01
     412:	0e 2e       	mov	r0, r30
     414:	00 0c       	add	r0, r0
     416:	ff 0b       	sbc	r31, r31
     418:	ea 30       	cpi	r30, 0x0A	; 10
     41a:	f1 05       	cpc	r31, r1
     41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	57 c0       	rjmp	.+174    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     420:	88 27       	eor	r24, r24
     422:	ee 58       	subi	r30, 0x8E	; 142
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	8f 4f       	sbci	r24, 0xFF	; 255
     428:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     42c:	d5 01       	movw	r26, r10
     42e:	53 96       	adiw	r26, 0x13	; 19
     430:	8c 91       	ld	r24, X
     432:	53 97       	sbiw	r26, 0x13	; 19
     434:	81 60       	ori	r24, 0x01	; 1
     436:	53 96       	adiw	r26, 0x13	; 19
     438:	8c 93       	st	X, r24
     43a:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     43c:	2a 81       	ldd	r18, Y+2	; 0x02
     43e:	3b 81       	ldd	r19, Y+3	; 0x03
     440:	1c 96       	adiw	r26, 0x0c	; 12
     442:	6d 91       	ld	r22, X+
     444:	7c 91       	ld	r23, X
     446:	1d 97       	sbiw	r26, 0x0d	; 13
     448:	62 0f       	add	r22, r18
     44a:	73 1f       	adc	r23, r19
     44c:	c5 01       	movw	r24, r10
     44e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <prvInsertTimerInActiveList>
     452:	88 23       	and	r24, r24
     454:	e1 f1       	breq	.+120    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     456:	d5 01       	movw	r26, r10
     458:	50 96       	adiw	r26, 0x10	; 16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	51 97       	sbiw	r26, 0x11	; 17
     460:	c5 01       	movw	r24, r10
     462:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     464:	f5 01       	movw	r30, r10
     466:	83 89       	ldd	r24, Z+19	; 0x13
     468:	82 ff       	sbrs	r24, 2
     46a:	31 c0       	rjmp	.+98     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     46c:	4a 81       	ldd	r20, Y+2	; 0x02
     46e:	5b 81       	ldd	r21, Y+3	; 0x03
     470:	84 85       	ldd	r24, Z+12	; 0x0c
     472:	95 85       	ldd	r25, Z+13	; 0x0d
     474:	48 0f       	add	r20, r24
     476:	59 1f       	adc	r21, r25
     478:	0e 2d       	mov	r16, r14
     47a:	1f 2d       	mov	r17, r15
     47c:	2e 2d       	mov	r18, r14
     47e:	3f 2d       	mov	r19, r15
     480:	65 2d       	mov	r22, r5
     482:	c5 01       	movw	r24, r10
     484:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xTimerGenericCommand>
     488:	22 c0       	rjmp	.+68     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     48a:	d5 01       	movw	r26, r10
     48c:	53 96       	adiw	r26, 0x13	; 19
     48e:	8c 91       	ld	r24, X
     490:	53 97       	sbiw	r26, 0x13	; 19
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	53 96       	adiw	r26, 0x13	; 19
     496:	8c 93       	st	X, r24
     498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     49a:	f5 01       	movw	r30, r10
     49c:	83 89       	ldd	r24, Z+19	; 0x13
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     4a2:	6a 81       	ldd	r22, Y+2	; 0x02
     4a4:	7b 81       	ldd	r23, Y+3	; 0x03
     4a6:	75 87       	std	Z+13, r23	; 0x0d
     4a8:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     4aa:	64 0f       	add	r22, r20
     4ac:	75 1f       	adc	r23, r21
     4ae:	9a 01       	movw	r18, r20
     4b0:	c5 01       	movw	r24, r10
     4b2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <prvInsertTimerInActiveList>
     4b6:	0b c0       	rjmp	.+22     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     4b8:	d5 01       	movw	r26, r10
     4ba:	53 96       	adiw	r26, 0x13	; 19
     4bc:	8c 91       	ld	r24, X
     4be:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c2:	c5 01       	movw	r24, r10
     4c4:	67 d0       	rcall	.+206    	; 0x594 <vPortFree>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     4c8:	8e 7f       	andi	r24, 0xFE	; 254
     4ca:	f5 01       	movw	r30, r10
     4cc:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     4ce:	4e 2d       	mov	r20, r14
     4d0:	5f 2d       	mov	r21, r15
     4d2:	6c 2d       	mov	r22, r12
     4d4:	7d 2d       	mov	r23, r13
     4d6:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <xTimerQueue>
     4da:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
     4de:	84 d4       	rcall	.+2312   	; 0xde8 <xQueueReceive>
     4e0:	81 11       	cpse	r24, r1
     4e2:	83 cf       	rjmp	.-250    	; 0x3ea <prvTimerTask+0xe2>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     4e4:	21 cf       	rjmp	.-446    	; 0x328 <prvTimerTask+0x20>
     4e6:	91 d7       	rcall	.+3874   	; 0x140a <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     4e8:	c4 01       	movw	r24, r8
     4ea:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <prvSampleTimeNow>
     4ee:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	81 11       	cpse	r24, r1
     4f4:	77 cf       	rjmp	.-274    	; 0x3e4 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     4f6:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <pxOverflowTimerList>
     4fa:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <pxOverflowTimerList+0x1>
     4fe:	80 81       	ld	r24, Z
     500:	44 2d       	mov	r20, r4
     502:	81 11       	cpse	r24, r1
     504:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     506:	ae 2c       	mov	r10, r14
     508:	bf 2c       	mov	r11, r15
     50a:	5e cf       	rjmp	.-324    	; 0x3c8 <prvTimerTask+0xc0>

0000050c <__ctors_end>:
     50c:	11 24       	eor	r1, r1
     50e:	1f be       	out	0x3f, r1	; 63
     510:	cf ef       	ldi	r28, 0xFF	; 255
     512:	d1 e2       	ldi	r29, 0x21	; 33
     514:	de bf       	out	0x3e, r29	; 62
     516:	cd bf       	out	0x3d, r28	; 61
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	0c bf       	out	0x3c, r16	; 60

0000051c <__do_copy_data>:
     51c:	16 e0       	ldi	r17, 0x06	; 6
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	e2 eb       	ldi	r30, 0xB2	; 178
     524:	fc e3       	ldi	r31, 0x3C	; 60
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0b bf       	out	0x3b, r16	; 59
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__do_copy_data+0x14>
     52c:	07 90       	elpm	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	a8 33       	cpi	r26, 0x38	; 56
     532:	b1 07       	cpc	r27, r17
     534:	d9 f7       	brne	.-10     	; 0x52c <__do_copy_data+0x10>

00000536 <__do_clear_bss>:
     536:	26 e0       	ldi	r18, 0x06	; 6
     538:	a8 e3       	ldi	r26, 0x38	; 56
     53a:	b6 e0       	ldi	r27, 0x06	; 6
     53c:	01 c0       	rjmp	.+2      	; 0x540 <.do_clear_bss_start>

0000053e <.do_clear_bss_loop>:
     53e:	1d 92       	st	X+, r1

00000540 <.do_clear_bss_start>:
     540:	a5 3f       	cpi	r26, 0xF5	; 245
     542:	b2 07       	cpc	r27, r18
     544:	e1 f7       	brne	.-8      	; 0x53e <.do_clear_bss_loop>
     546:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <main>
     54a:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <_exit>

0000054e <__bad_interrupt>:
     54e:	58 cd       	rjmp	.-1360   	; 0x0 <__vectors>

00000550 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     550:	e8 e0       	ldi	r30, 0x08	; 8
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	90 81       	ld	r25, Z
     556:	90 7f       	andi	r25, 0xF0	; 240
     558:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     55a:	90 81       	ld	r25, Z
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	98 2b       	or	r25, r24
     560:	90 83       	st	Z, r25
     562:	08 95       	ret

00000564 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     564:	e8 e0       	ldi	r30, 0x08	; 8
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	80 81       	ld	r24, Z
     56a:	80 7f       	andi	r24, 0xF0	; 240
     56c:	80 83       	st	Z, r24
     56e:	08 95       	ret

00000570 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     576:	49 d7       	rcall	.+3730   	; 0x140a <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     578:	ce 01       	movw	r24, r28
     57a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <malloc>
     57e:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     580:	0e 94 cc 0a 	call	0x1598	; 0x1598 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     584:	20 97       	sbiw	r28, 0x00	; 0
     586:	11 f4       	brne	.+4      	; 0x58c <pvPortMalloc+0x1c>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     588:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     58c:	ce 01       	movw	r24, r28
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
    if( pv )
     598:	00 97       	sbiw	r24, 0x00	; 0
     59a:	31 f0       	breq	.+12     	; 0x5a8 <vPortFree+0x14>
     59c:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     59e:	35 d7       	rcall	.+3690   	; 0x140a <vTaskSuspendAll>
        {
            free( pv );
     5a0:	ce 01       	movw	r24, r28
     5a2:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     5a6:	f8 d7       	rcall	.+4080   	; 0x1598 <xTaskResumeAll>
    }
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5ae:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5b0:	03 96       	adiw	r24, 0x03	; 3
     5b2:	92 83       	std	Z+2, r25	; 0x02
     5b4:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     5b6:	2f ef       	ldi	r18, 0xFF	; 255
     5b8:	3f ef       	ldi	r19, 0xFF	; 255
     5ba:	34 83       	std	Z+4, r19	; 0x04
     5bc:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5be:	96 83       	std	Z+6, r25	; 0x06
     5c0:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5c2:	90 87       	std	Z+8, r25	; 0x08
     5c4:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5c6:	10 82       	st	Z, r1
     5c8:	08 95       	ret

000005ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     5ca:	fc 01       	movw	r30, r24
     5cc:	11 86       	std	Z+9, r1	; 0x09
     5ce:	10 86       	std	Z+8, r1	; 0x08
     5d0:	08 95       	ret

000005d2 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	9c 01       	movw	r18, r24
     5d8:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     5da:	dc 01       	movw	r26, r24
     5dc:	11 96       	adiw	r26, 0x01	; 1
     5de:	cd 91       	ld	r28, X+
     5e0:	dc 91       	ld	r29, X
     5e2:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     5e4:	d3 83       	std	Z+3, r29	; 0x03
     5e6:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5e8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ea:	9d 81       	ldd	r25, Y+5	; 0x05
     5ec:	95 83       	std	Z+5, r25	; 0x05
     5ee:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     5f0:	8c 81       	ldd	r24, Y+4	; 0x04
     5f2:	9d 81       	ldd	r25, Y+5	; 0x05
     5f4:	dc 01       	movw	r26, r24
     5f6:	13 96       	adiw	r26, 0x03	; 3
     5f8:	7c 93       	st	X, r23
     5fa:	6e 93       	st	-X, r22
     5fc:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     5fe:	7d 83       	std	Y+5, r23	; 0x05
     600:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     602:	31 87       	std	Z+9, r19	; 0x09
     604:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     606:	f9 01       	movw	r30, r18
     608:	80 81       	ld	r24, Z
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	80 83       	st	Z, r24
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     61a:	48 81       	ld	r20, Y
     61c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     61e:	4f 3f       	cpi	r20, 0xFF	; 255
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	52 07       	cpc	r21, r18
     624:	21 f4       	brne	.+8      	; 0x62e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     626:	fc 01       	movw	r30, r24
     628:	a7 81       	ldd	r26, Z+7	; 0x07
     62a:	b0 85       	ldd	r27, Z+8	; 0x08
     62c:	0d c0       	rjmp	.+26     	; 0x648 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     62e:	dc 01       	movw	r26, r24
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	01 c0       	rjmp	.+2      	; 0x636 <vListInsert+0x22>
     634:	df 01       	movw	r26, r30
     636:	12 96       	adiw	r26, 0x02	; 2
     638:	ed 91       	ld	r30, X+
     63a:	fc 91       	ld	r31, X
     63c:	13 97       	sbiw	r26, 0x03	; 3
     63e:	20 81       	ld	r18, Z
     640:	31 81       	ldd	r19, Z+1	; 0x01
     642:	42 17       	cp	r20, r18
     644:	53 07       	cpc	r21, r19
     646:	b0 f7       	brcc	.-20     	; 0x634 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     648:	12 96       	adiw	r26, 0x02	; 2
     64a:	ed 91       	ld	r30, X+
     64c:	fc 91       	ld	r31, X
     64e:	13 97       	sbiw	r26, 0x03	; 3
     650:	fb 83       	std	Y+3, r31	; 0x03
     652:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     654:	d5 83       	std	Z+5, r29	; 0x05
     656:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     658:	bd 83       	std	Y+5, r27	; 0x05
     65a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     65c:	13 96       	adiw	r26, 0x03	; 3
     65e:	dc 93       	st	X, r29
     660:	ce 93       	st	-X, r28
     662:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     664:	99 87       	std	Y+9, r25	; 0x09
     666:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	20 83       	st	Z, r18
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     67c:	a0 85       	ldd	r26, Z+8	; 0x08
     67e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     680:	c2 81       	ldd	r28, Z+2	; 0x02
     682:	d3 81       	ldd	r29, Z+3	; 0x03
     684:	84 81       	ldd	r24, Z+4	; 0x04
     686:	95 81       	ldd	r25, Z+5	; 0x05
     688:	9d 83       	std	Y+5, r25	; 0x05
     68a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     68c:	c4 81       	ldd	r28, Z+4	; 0x04
     68e:	d5 81       	ldd	r29, Z+5	; 0x05
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	9b 83       	std	Y+3, r25	; 0x03
     696:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	8d 91       	ld	r24, X+
     69c:	9c 91       	ld	r25, X
     69e:	12 97       	sbiw	r26, 0x02	; 2
     6a0:	e8 17       	cp	r30, r24
     6a2:	f9 07       	cpc	r31, r25
     6a4:	31 f4       	brne	.+12     	; 0x6b2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6a6:	84 81       	ldd	r24, Z+4	; 0x04
     6a8:	95 81       	ldd	r25, Z+5	; 0x05
     6aa:	12 96       	adiw	r26, 0x02	; 2
     6ac:	9c 93       	st	X, r25
     6ae:	8e 93       	st	-X, r24
     6b0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6b2:	11 86       	std	Z+9, r1	; 0x09
     6b4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     6b6:	8c 91       	ld	r24, X
     6b8:	81 50       	subi	r24, 0x01	; 1
     6ba:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6bc:	8c 91       	ld	r24, X
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     6c4:	31 e1       	ldi	r19, 0x11	; 17
     6c6:	fc 01       	movw	r30, r24
     6c8:	30 83       	st	Z, r19
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	22 e2       	ldi	r18, 0x22	; 34
     6ce:	20 83       	st	Z, r18
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	a3 e3       	ldi	r26, 0x33	; 51
     6d4:	a0 83       	st	Z, r26
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	60 83       	st	Z, r22
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	70 83       	st	Z, r23
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	10 82       	st	Z, r1
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	10 82       	st	Z, r1
     6e6:	31 97       	sbiw	r30, 0x01	; 1
     6e8:	60 e8       	ldi	r22, 0x80	; 128
     6ea:	60 83       	st	Z, r22
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	10 82       	st	Z, r1
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	10 82       	st	Z, r1
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	62 e0       	ldi	r22, 0x02	; 2
     6fc:	60 83       	st	Z, r22
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	60 83       	st	Z, r22
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	64 e0       	ldi	r22, 0x04	; 4
     708:	60 83       	st	Z, r22
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	60 83       	st	Z, r22
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	66 e0       	ldi	r22, 0x06	; 6
     714:	60 83       	st	Z, r22
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	67 e0       	ldi	r22, 0x07	; 7
     71a:	60 83       	st	Z, r22
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	68 e0       	ldi	r22, 0x08	; 8
     720:	60 83       	st	Z, r22
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	69 e0       	ldi	r22, 0x09	; 9
     726:	60 83       	st	Z, r22
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	60 e1       	ldi	r22, 0x10	; 16
     72c:	60 83       	st	Z, r22
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	30 83       	st	Z, r19
     732:	31 97       	sbiw	r30, 0x01	; 1
     734:	32 e1       	ldi	r19, 0x12	; 18
     736:	30 83       	st	Z, r19
     738:	31 97       	sbiw	r30, 0x01	; 1
     73a:	33 e1       	ldi	r19, 0x13	; 19
     73c:	30 83       	st	Z, r19
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	34 e1       	ldi	r19, 0x14	; 20
     742:	30 83       	st	Z, r19
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	35 e1       	ldi	r19, 0x15	; 21
     748:	30 83       	st	Z, r19
     74a:	31 97       	sbiw	r30, 0x01	; 1
     74c:	36 e1       	ldi	r19, 0x16	; 22
     74e:	30 83       	st	Z, r19
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	37 e1       	ldi	r19, 0x17	; 23
     754:	30 83       	st	Z, r19
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	38 e1       	ldi	r19, 0x18	; 24
     75a:	30 83       	st	Z, r19
     75c:	31 97       	sbiw	r30, 0x01	; 1
     75e:	39 e1       	ldi	r19, 0x19	; 25
     760:	30 83       	st	Z, r19
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	30 e2       	ldi	r19, 0x20	; 32
     766:	30 83       	st	Z, r19
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	31 e2       	ldi	r19, 0x21	; 33
     76c:	30 83       	st	Z, r19
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	20 83       	st	Z, r18
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	23 e2       	ldi	r18, 0x23	; 35
     776:	20 83       	st	Z, r18
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	40 83       	st	Z, r20
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	50 83       	st	Z, r21
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	26 e2       	ldi	r18, 0x26	; 38
     784:	20 83       	st	Z, r18
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	27 e2       	ldi	r18, 0x27	; 39
     78a:	20 83       	st	Z, r18
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	28 e2       	ldi	r18, 0x28	; 40
     790:	20 83       	st	Z, r18
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	29 e2       	ldi	r18, 0x29	; 41
     796:	20 83       	st	Z, r18
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	20 e3       	ldi	r18, 0x30	; 48
     79c:	20 83       	st	Z, r18
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	21 e3       	ldi	r18, 0x31	; 49
     7a2:	20 83       	st	Z, r18
     7a4:	89 97       	sbiw	r24, 0x29	; 41
     7a6:	08 95       	ret

000007a8 <xPortStartScheduler>:
     7a8:	a8 95       	wdr
     7aa:	90 ec       	ldi	r25, 0xC0	; 192
     7ac:	88 e1       	ldi	r24, 0x18	; 24
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	a8 95       	wdr
     7b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7be:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
     7c2:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
     7c6:	cd 91       	ld	r28, X+
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	dd 91       	ld	r29, X+
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	bf 90       	pop	r11
     7f8:	af 90       	pop	r10
     7fa:	9f 90       	pop	r9
     7fc:	8f 90       	pop	r8
     7fe:	7f 90       	pop	r7
     800:	6f 90       	pop	r6
     802:	5f 90       	pop	r5
     804:	4f 90       	pop	r4
     806:	3f 90       	pop	r3
     808:	2f 90       	pop	r2
     80a:	1f 90       	pop	r1
     80c:	0f 90       	pop	r0
     80e:	0c be       	out	0x3c, r0	; 60
     810:	0f 90       	pop	r0
     812:	0b be       	out	0x3b, r0	; 59
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	08 95       	ret
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	08 95       	ret

00000820 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	0f 92       	push	r0
     828:	0b b6       	in	r0, 0x3b	; 59
     82a:	0f 92       	push	r0
     82c:	0c b6       	in	r0, 0x3c	; 60
     82e:	0f 92       	push	r0
     830:	1f 92       	push	r1
     832:	11 24       	eor	r1, r1
     834:	2f 92       	push	r2
     836:	3f 92       	push	r3
     838:	4f 92       	push	r4
     83a:	5f 92       	push	r5
     83c:	6f 92       	push	r6
     83e:	7f 92       	push	r7
     840:	8f 92       	push	r8
     842:	9f 92       	push	r9
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	2f 93       	push	r18
     856:	3f 93       	push	r19
     858:	4f 93       	push	r20
     85a:	5f 93       	push	r21
     85c:	6f 93       	push	r22
     85e:	7f 93       	push	r23
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	af 93       	push	r26
     866:	bf 93       	push	r27
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
     874:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
     878:	0d b6       	in	r0, 0x3d	; 61
     87a:	0d 92       	st	X+, r0
     87c:	0e b6       	in	r0, 0x3e	; 62
     87e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     880:	05 d7       	rcall	.+3594   	; 0x168c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     882:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
     886:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
     88a:	cd 91       	ld	r28, X+
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	dd 91       	ld	r29, X+
     890:	de bf       	out	0x3e, r29	; 62
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	bf 91       	pop	r27
     89c:	af 91       	pop	r26
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	7f 91       	pop	r23
     8a4:	6f 91       	pop	r22
     8a6:	5f 91       	pop	r21
     8a8:	4f 91       	pop	r20
     8aa:	3f 91       	pop	r19
     8ac:	2f 91       	pop	r18
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	bf 90       	pop	r11
     8bc:	af 90       	pop	r10
     8be:	9f 90       	pop	r9
     8c0:	8f 90       	pop	r8
     8c2:	7f 90       	pop	r7
     8c4:	6f 90       	pop	r6
     8c6:	5f 90       	pop	r5
     8c8:	4f 90       	pop	r4
     8ca:	3f 90       	pop	r3
     8cc:	2f 90       	pop	r2
     8ce:	1f 90       	pop	r1
     8d0:	0f 90       	pop	r0
     8d2:	0c be       	out	0x3c, r0	; 60
     8d4:	0f 90       	pop	r0
     8d6:	0b be       	out	0x3b, r0	; 59
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8de:	08 95       	ret

000008e0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	0b b6       	in	r0, 0x3b	; 59
     8ea:	0f 92       	push	r0
     8ec:	0c b6       	in	r0, 0x3c	; 60
     8ee:	0f 92       	push	r0
     8f0:	1f 92       	push	r1
     8f2:	11 24       	eor	r1, r1
     8f4:	2f 92       	push	r2
     8f6:	3f 92       	push	r3
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	4f 93       	push	r20
     91a:	5f 93       	push	r21
     91c:	6f 93       	push	r22
     91e:	7f 93       	push	r23
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	ef 93       	push	r30
     92e:	ff 93       	push	r31
     930:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
     934:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
     938:	0d b6       	in	r0, 0x3d	; 61
     93a:	0d 92       	st	X+, r0
     93c:	0e b6       	in	r0, 0x3e	; 62
     93e:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     940:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     942:	73 d5       	rcall	.+2790   	; 0x142a <xTaskIncrementTick>
     944:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     946:	a2 d6       	rcall	.+3396   	; 0x168c <vTaskSwitchContext>
     948:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     94c:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
     950:	cd 91       	ld	r28, X+
     952:	cd bf       	out	0x3d, r28	; 61
     954:	dd 91       	ld	r29, X+
     956:	de bf       	out	0x3e, r29	; 62
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	7f 90       	pop	r7
     98a:	6f 90       	pop	r6
     98c:	5f 90       	pop	r5
     98e:	4f 90       	pop	r4
     990:	3f 90       	pop	r3
     992:	2f 90       	pop	r2
     994:	1f 90       	pop	r1
     996:	0f 90       	pop	r0
     998:	0c be       	out	0x3c, r0	; 60
     99a:	0f 90       	pop	r0
     99c:	0b be       	out	0x3b, r0	; 59
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	08 95       	ret

000009a6 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     9a6:	9c df       	rcall	.-200    	; 0x8e0 <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     9a8:	18 95       	reti

000009aa <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	0f 92       	push	r0
     9b0:	fc 01       	movw	r30, r24
     9b2:	92 8d       	ldd	r25, Z+26	; 0x1a
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	91 11       	cpse	r25, r1
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret

000009c0 <prvCopyDataToQueue>:
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
     9ca:	04 2f       	mov	r16, r20
     9cc:	1a 8d       	ldd	r17, Y+26	; 0x1a
     9ce:	4c 8d       	ldd	r20, Y+28	; 0x1c
     9d0:	41 11       	cpse	r20, r1
     9d2:	0c c0       	rjmp	.+24     	; 0x9ec <prvCopyDataToQueue+0x2c>
     9d4:	88 81       	ld	r24, Y
     9d6:	99 81       	ldd	r25, Y+1	; 0x01
     9d8:	89 2b       	or	r24, r25
     9da:	09 f0       	breq	.+2      	; 0x9de <prvCopyDataToQueue+0x1e>
     9dc:	42 c0       	rjmp	.+132    	; 0xa62 <prvCopyDataToQueue+0xa2>
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	9d 81       	ldd	r25, Y+5	; 0x05
     9e2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <xTaskPriorityDisinherit>
     9e6:	1d 82       	std	Y+5, r1	; 0x05
     9e8:	1c 82       	std	Y+4, r1	; 0x04
     9ea:	42 c0       	rjmp	.+132    	; 0xa70 <prvCopyDataToQueue+0xb0>
     9ec:	01 11       	cpse	r16, r1
     9ee:	17 c0       	rjmp	.+46     	; 0xa1e <prvCopyDataToQueue+0x5e>
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	9b 81       	ldd	r25, Y+3	; 0x03
     9f6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <memcpy>
     9fa:	2c 8d       	ldd	r18, Y+28	; 0x1c
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	82 0f       	add	r24, r18
     a02:	91 1d       	adc	r25, r1
     a04:	9b 83       	std	Y+3, r25	; 0x03
     a06:	8a 83       	std	Y+2, r24	; 0x02
     a08:	2c 81       	ldd	r18, Y+4	; 0x04
     a0a:	3d 81       	ldd	r19, Y+5	; 0x05
     a0c:	82 17       	cp	r24, r18
     a0e:	93 07       	cpc	r25, r19
     a10:	50 f1       	brcs	.+84     	; 0xa66 <prvCopyDataToQueue+0xa6>
     a12:	88 81       	ld	r24, Y
     a14:	99 81       	ldd	r25, Y+1	; 0x01
     a16:	9b 83       	std	Y+3, r25	; 0x03
     a18:	8a 83       	std	Y+2, r24	; 0x02
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	29 c0       	rjmp	.+82     	; 0xa70 <prvCopyDataToQueue+0xb0>
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	8e 81       	ldd	r24, Y+6	; 0x06
     a22:	9f 81       	ldd	r25, Y+7	; 0x07
     a24:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <memcpy>
     a28:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	91 95       	neg	r25
     a2e:	81 95       	neg	r24
     a30:	91 09       	sbc	r25, r1
     a32:	2e 81       	ldd	r18, Y+6	; 0x06
     a34:	3f 81       	ldd	r19, Y+7	; 0x07
     a36:	28 0f       	add	r18, r24
     a38:	39 1f       	adc	r19, r25
     a3a:	3f 83       	std	Y+7, r19	; 0x07
     a3c:	2e 83       	std	Y+6, r18	; 0x06
     a3e:	48 81       	ld	r20, Y
     a40:	59 81       	ldd	r21, Y+1	; 0x01
     a42:	24 17       	cp	r18, r20
     a44:	35 07       	cpc	r19, r21
     a46:	30 f4       	brcc	.+12     	; 0xa54 <prvCopyDataToQueue+0x94>
     a48:	2c 81       	ldd	r18, Y+4	; 0x04
     a4a:	3d 81       	ldd	r19, Y+5	; 0x05
     a4c:	82 0f       	add	r24, r18
     a4e:	93 1f       	adc	r25, r19
     a50:	9f 83       	std	Y+7, r25	; 0x07
     a52:	8e 83       	std	Y+6, r24	; 0x06
     a54:	02 30       	cpi	r16, 0x02	; 2
     a56:	49 f4       	brne	.+18     	; 0xa6a <prvCopyDataToQueue+0xaa>
     a58:	11 23       	and	r17, r17
     a5a:	49 f0       	breq	.+18     	; 0xa6e <prvCopyDataToQueue+0xae>
     a5c:	11 50       	subi	r17, 0x01	; 1
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <prvCopyDataToQueue+0xb0>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <prvCopyDataToQueue+0xb0>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <prvCopyDataToQueue+0xb0>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <prvCopyDataToQueue+0xb0>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	1f 5f       	subi	r17, 0xFF	; 255
     a72:	1a 8f       	std	Y+26, r17	; 0x1a
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <prvCopyDataFromQueue>:
     a7e:	fc 01       	movw	r30, r24
     a80:	44 8d       	ldd	r20, Z+28	; 0x1c
     a82:	44 23       	and	r20, r20
     a84:	a9 f0       	breq	.+42     	; 0xab0 <prvCopyDataFromQueue+0x32>
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	26 81       	ldd	r18, Z+6	; 0x06
     a8a:	37 81       	ldd	r19, Z+7	; 0x07
     a8c:	24 0f       	add	r18, r20
     a8e:	35 1f       	adc	r19, r21
     a90:	37 83       	std	Z+7, r19	; 0x07
     a92:	26 83       	std	Z+6, r18	; 0x06
     a94:	84 81       	ldd	r24, Z+4	; 0x04
     a96:	95 81       	ldd	r25, Z+5	; 0x05
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	20 f0       	brcs	.+8      	; 0xaa6 <prvCopyDataFromQueue+0x28>
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	97 83       	std	Z+7, r25	; 0x07
     aa4:	86 83       	std	Z+6, r24	; 0x06
     aa6:	cb 01       	movw	r24, r22
     aa8:	66 81       	ldd	r22, Z+6	; 0x06
     aaa:	77 81       	ldd	r23, Z+7	; 0x07
     aac:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <memcpy>
     ab0:	08 95       	ret

00000ab2 <prvUnlockQueue>:
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	8c 01       	movw	r16, r24
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	0f 92       	push	r0
     ac4:	fc 01       	movw	r30, r24
     ac6:	c6 8d       	ldd	r28, Z+30	; 0x1e
     ac8:	1c 16       	cp	r1, r28
     aca:	9c f4       	brge	.+38     	; 0xaf2 <prvUnlockQueue+0x40>
     acc:	81 89       	ldd	r24, Z+17	; 0x11
     ace:	81 11       	cpse	r24, r1
     ad0:	06 c0       	rjmp	.+12     	; 0xade <prvUnlockQueue+0x2c>
     ad2:	0f c0       	rjmp	.+30     	; 0xaf2 <prvUnlockQueue+0x40>
     ad4:	f8 01       	movw	r30, r16
     ad6:	81 89       	ldd	r24, Z+17	; 0x11
     ad8:	81 11       	cpse	r24, r1
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <prvUnlockQueue+0x34>
     adc:	0a c0       	rjmp	.+20     	; 0xaf2 <prvUnlockQueue+0x40>
     ade:	78 01       	movw	r14, r16
     ae0:	f1 e1       	ldi	r31, 0x11	; 17
     ae2:	ef 0e       	add	r14, r31
     ae4:	f1 1c       	adc	r15, r1
     ae6:	c7 01       	movw	r24, r14
     ae8:	88 d6       	rcall	.+3344   	; 0x17fa <xTaskRemoveFromEventList>
     aea:	81 11       	cpse	r24, r1
     aec:	0e d7       	rcall	.+3612   	; 0x190a <vTaskMissedYield>
     aee:	c1 50       	subi	r28, 0x01	; 1
     af0:	89 f7       	brne	.-30     	; 0xad4 <prvUnlockQueue+0x22>
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	f8 01       	movw	r30, r16
     af6:	86 8f       	std	Z+30, r24	; 0x1e
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	0f 92       	push	r0
     b02:	c5 8d       	ldd	r28, Z+29	; 0x1d
     b04:	1c 16       	cp	r1, r28
     b06:	9c f4       	brge	.+38     	; 0xb2e <prvUnlockQueue+0x7c>
     b08:	80 85       	ldd	r24, Z+8	; 0x08
     b0a:	81 11       	cpse	r24, r1
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <prvUnlockQueue+0x68>
     b0e:	0f c0       	rjmp	.+30     	; 0xb2e <prvUnlockQueue+0x7c>
     b10:	f8 01       	movw	r30, r16
     b12:	80 85       	ldd	r24, Z+8	; 0x08
     b14:	81 11       	cpse	r24, r1
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <prvUnlockQueue+0x70>
     b18:	0a c0       	rjmp	.+20     	; 0xb2e <prvUnlockQueue+0x7c>
     b1a:	78 01       	movw	r14, r16
     b1c:	f8 e0       	ldi	r31, 0x08	; 8
     b1e:	ef 0e       	add	r14, r31
     b20:	f1 1c       	adc	r15, r1
     b22:	c7 01       	movw	r24, r14
     b24:	6a d6       	rcall	.+3284   	; 0x17fa <xTaskRemoveFromEventList>
     b26:	81 11       	cpse	r24, r1
     b28:	f0 d6       	rcall	.+3552   	; 0x190a <vTaskMissedYield>
     b2a:	c1 50       	subi	r28, 0x01	; 1
     b2c:	89 f7       	brne	.-30     	; 0xb10 <prvUnlockQueue+0x5e>
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	f8 01       	movw	r30, r16
     b32:	85 8f       	std	Z+29, r24	; 0x1d
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <xQueueGenericReset>:
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	0f 92       	push	r0
     b50:	e8 81       	ld	r30, Y
     b52:	f9 81       	ldd	r31, Y+1	; 0x01
     b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b56:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	82 9f       	mul	r24, r18
     b5e:	a0 01       	movw	r20, r0
     b60:	83 9f       	mul	r24, r19
     b62:	50 0d       	add	r21, r0
     b64:	92 9f       	mul	r25, r18
     b66:	50 0d       	add	r21, r0
     b68:	11 24       	eor	r1, r1
     b6a:	4e 0f       	add	r20, r30
     b6c:	5f 1f       	adc	r21, r31
     b6e:	5d 83       	std	Y+5, r21	; 0x05
     b70:	4c 83       	std	Y+4, r20	; 0x04
     b72:	1a 8e       	std	Y+26, r1	; 0x1a
     b74:	fb 83       	std	Y+3, r31	; 0x03
     b76:	ea 83       	std	Y+2, r30	; 0x02
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	82 9f       	mul	r24, r18
     b7c:	a0 01       	movw	r20, r0
     b7e:	83 9f       	mul	r24, r19
     b80:	50 0d       	add	r21, r0
     b82:	92 9f       	mul	r25, r18
     b84:	50 0d       	add	r21, r0
     b86:	11 24       	eor	r1, r1
     b88:	cf 01       	movw	r24, r30
     b8a:	84 0f       	add	r24, r20
     b8c:	95 1f       	adc	r25, r21
     b8e:	9f 83       	std	Y+7, r25	; 0x07
     b90:	8e 83       	std	Y+6, r24	; 0x06
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	8d 8f       	std	Y+29, r24	; 0x1d
     b96:	8e 8f       	std	Y+30, r24	; 0x1e
     b98:	61 11       	cpse	r22, r1
     b9a:	0a c0       	rjmp	.+20     	; 0xbb0 <xQueueGenericReset+0x6c>
     b9c:	88 85       	ldd	r24, Y+8	; 0x08
     b9e:	88 23       	and	r24, r24
     ba0:	69 f0       	breq	.+26     	; 0xbbc <xQueueGenericReset+0x78>
     ba2:	ce 01       	movw	r24, r28
     ba4:	08 96       	adiw	r24, 0x08	; 8
     ba6:	29 d6       	rcall	.+3154   	; 0x17fa <xTaskRemoveFromEventList>
     ba8:	88 23       	and	r24, r24
     baa:	41 f0       	breq	.+16     	; 0xbbc <xQueueGenericReset+0x78>
     bac:	39 de       	rcall	.-910    	; 0x820 <vPortYield>
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <xQueueGenericReset+0x78>
     bb0:	ce 01       	movw	r24, r28
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	fc dc       	rcall	.-1544   	; 0x5ae <vListInitialise>
     bb6:	ce 01       	movw	r24, r28
     bb8:	41 96       	adiw	r24, 0x11	; 17
     bba:	f9 dc       	rcall	.-1550   	; 0x5ae <vListInitialise>
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <xQueueGenericCreate>:
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	08 2f       	mov	r16, r24
     bd4:	16 2f       	mov	r17, r22
     bd6:	f4 2e       	mov	r15, r20
     bd8:	66 23       	and	r22, r22
     bda:	b9 f0       	breq	.+46     	; 0xc0a <xQueueGenericCreate+0x42>
     bdc:	86 9f       	mul	r24, r22
     bde:	c0 01       	movw	r24, r0
     be0:	11 24       	eor	r1, r1
     be2:	81 96       	adiw	r24, 0x21	; 33
     be4:	c5 dc       	rcall	.-1654   	; 0x570 <pvPortMalloc>
     be6:	ec 01       	movw	r28, r24
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	41 f4       	brne	.+16     	; 0xbfc <xQueueGenericCreate+0x34>
     bec:	14 c0       	rjmp	.+40     	; 0xc16 <xQueueGenericCreate+0x4e>
     bee:	0b 8f       	std	Y+27, r16	; 0x1b
     bf0:	1c 8f       	std	Y+28, r17	; 0x1c
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	ce 01       	movw	r24, r28
     bf6:	a6 df       	rcall	.-180    	; 0xb44 <xQueueGenericReset>
     bf8:	f8 a2       	std	Y+32, r15	; 0x20
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <xQueueGenericCreate+0x4e>
     bfc:	81 96       	adiw	r24, 0x21	; 33
     bfe:	99 83       	std	Y+1, r25	; 0x01
     c00:	88 83       	st	Y, r24
     c02:	f5 cf       	rjmp	.-22     	; 0xbee <xQueueGenericCreate+0x26>
     c04:	d9 83       	std	Y+1, r29	; 0x01
     c06:	c8 83       	st	Y, r28
     c08:	f2 cf       	rjmp	.-28     	; 0xbee <xQueueGenericCreate+0x26>
     c0a:	81 e2       	ldi	r24, 0x21	; 33
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	b0 dc       	rcall	.-1696   	; 0x570 <pvPortMalloc>
     c10:	ec 01       	movw	r28, r24
     c12:	89 2b       	or	r24, r25
     c14:	b9 f7       	brne	.-18     	; 0xc04 <xQueueGenericCreate+0x3c>
     c16:	ce 01       	movw	r24, r28
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	08 95       	ret

00000c24 <xQueueGenericSend>:
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <xQueueGenericSend+0x18>
     c3c:	1f 92       	push	r1
     c3e:	1f 92       	push	r1
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	8c 01       	movw	r16, r24
     c46:	6b 01       	movw	r12, r22
     c48:	5d 83       	std	Y+5, r21	; 0x05
     c4a:	4c 83       	std	Y+4, r20	; 0x04
     c4c:	a2 2e       	mov	r10, r18
     c4e:	b1 2c       	mov	r11, r1
     c50:	99 24       	eor	r9, r9
     c52:	93 94       	inc	r9
     c54:	7c 01       	movw	r14, r24
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	e8 0e       	add	r14, r24
     c5a:	f1 1c       	adc	r15, r1
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	0f 92       	push	r0
     c62:	f8 01       	movw	r30, r16
     c64:	92 8d       	ldd	r25, Z+26	; 0x1a
     c66:	83 8d       	ldd	r24, Z+27	; 0x1b
     c68:	98 17       	cp	r25, r24
     c6a:	18 f0       	brcs	.+6      	; 0xc72 <xQueueGenericSend+0x4e>
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	af 12       	cpse	r10, r31
     c70:	15 c0       	rjmp	.+42     	; 0xc9c <xQueueGenericSend+0x78>
     c72:	4a 2d       	mov	r20, r10
     c74:	b6 01       	movw	r22, r12
     c76:	c8 01       	movw	r24, r16
     c78:	a3 de       	rcall	.-698    	; 0x9c0 <prvCopyDataToQueue>
     c7a:	f8 01       	movw	r30, r16
     c7c:	91 89       	ldd	r25, Z+17	; 0x11
     c7e:	99 23       	and	r25, r25
     c80:	39 f0       	breq	.+14     	; 0xc90 <xQueueGenericSend+0x6c>
     c82:	c8 01       	movw	r24, r16
     c84:	41 96       	adiw	r24, 0x11	; 17
     c86:	b9 d5       	rcall	.+2930   	; 0x17fa <xTaskRemoveFromEventList>
     c88:	88 23       	and	r24, r24
     c8a:	21 f0       	breq	.+8      	; 0xc94 <xQueueGenericSend+0x70>
     c8c:	c9 dd       	rcall	.-1134   	; 0x820 <vPortYield>
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <xQueueGenericSend+0x70>
     c90:	81 11       	cpse	r24, r1
     c92:	c6 dd       	rcall	.-1140   	; 0x820 <vPortYield>
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	45 c0       	rjmp	.+138    	; 0xd26 <xQueueGenericSend+0x102>
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	89 2b       	or	r24, r25
     ca2:	21 f4       	brne	.+8      	; 0xcac <xQueueGenericSend+0x88>
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	3d c0       	rjmp	.+122    	; 0xd26 <xQueueGenericSend+0x102>
     cac:	b1 10       	cpse	r11, r1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <xQueueGenericSend+0x94>
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	ea d5       	rcall	.+3028   	; 0x188a <vTaskInternalSetTimeOutState>
     cb6:	b9 2c       	mov	r11, r9
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	a6 d3       	rcall	.+1868   	; 0x140a <vTaskSuspendAll>
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	0f 92       	push	r0
     cc4:	f8 01       	movw	r30, r16
     cc6:	85 8d       	ldd	r24, Z+29	; 0x1d
     cc8:	8f 3f       	cpi	r24, 0xFF	; 255
     cca:	09 f4       	brne	.+2      	; 0xcce <xQueueGenericSend+0xaa>
     ccc:	15 8e       	std	Z+29, r1	; 0x1d
     cce:	f8 01       	movw	r30, r16
     cd0:	86 8d       	ldd	r24, Z+30	; 0x1e
     cd2:	8f 3f       	cpi	r24, 0xFF	; 255
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <xQueueGenericSend+0xb4>
     cd6:	16 8e       	std	Z+30, r1	; 0x1e
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	be 01       	movw	r22, r28
     cde:	6c 5f       	subi	r22, 0xFC	; 252
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	dc d5       	rcall	.+3000   	; 0x18a0 <xTaskCheckForTimeOut>
     ce8:	81 11       	cpse	r24, r1
     cea:	19 c0       	rjmp	.+50     	; 0xd1e <xQueueGenericSend+0xfa>
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	0f 92       	push	r0
     cf2:	f8 01       	movw	r30, r16
     cf4:	92 8d       	ldd	r25, Z+26	; 0x1a
     cf6:	83 8d       	ldd	r24, Z+27	; 0x1b
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	98 13       	cpse	r25, r24
     cfe:	0b c0       	rjmp	.+22     	; 0xd16 <xQueueGenericSend+0xf2>
     d00:	6c 81       	ldd	r22, Y+4	; 0x04
     d02:	7d 81       	ldd	r23, Y+5	; 0x05
     d04:	c7 01       	movw	r24, r14
     d06:	50 d5       	rcall	.+2720   	; 0x17a8 <vTaskPlaceOnEventList>
     d08:	c8 01       	movw	r24, r16
     d0a:	d3 de       	rcall	.-602    	; 0xab2 <prvUnlockQueue>
     d0c:	45 d4       	rcall	.+2186   	; 0x1598 <xTaskResumeAll>
     d0e:	81 11       	cpse	r24, r1
     d10:	a5 cf       	rjmp	.-182    	; 0xc5c <xQueueGenericSend+0x38>
     d12:	86 dd       	rcall	.-1268   	; 0x820 <vPortYield>
     d14:	a3 cf       	rjmp	.-186    	; 0xc5c <xQueueGenericSend+0x38>
     d16:	c8 01       	movw	r24, r16
     d18:	cc de       	rcall	.-616    	; 0xab2 <prvUnlockQueue>
     d1a:	3e d4       	rcall	.+2172   	; 0x1598 <xTaskResumeAll>
     d1c:	9f cf       	rjmp	.-194    	; 0xc5c <xQueueGenericSend+0x38>
     d1e:	c8 01       	movw	r24, r16
     d20:	c8 de       	rcall	.-624    	; 0xab2 <prvUnlockQueue>
     d22:	3a d4       	rcall	.+2164   	; 0x1598 <xTaskResumeAll>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	9f 90       	pop	r9
     d46:	08 95       	ret

00000d48 <xQueueCreateMutex>:
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	48 2f       	mov	r20, r24
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	3a df       	rcall	.-396    	; 0xbc8 <xQueueGenericCreate>
     d54:	ec 01       	movw	r28, r24
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	59 f0       	breq	.+22     	; 0xd70 <xQueueCreateMutex+0x28>
     d5a:	1d 82       	std	Y+5, r1	; 0x05
     d5c:	1c 82       	std	Y+4, r1	; 0x04
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	18 82       	st	Y, r1
     d62:	1e 82       	std	Y+6, r1	; 0x06
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	5a df       	rcall	.-332    	; 0xc24 <xQueueGenericSend>
     d70:	ce 01       	movw	r24, r28
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <xQueueGenericSendFromISR>:
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	8a 01       	movw	r16, r20
     d86:	fc 01       	movw	r30, r24
     d88:	52 8d       	ldd	r21, Z+26	; 0x1a
     d8a:	33 8d       	ldd	r19, Z+27	; 0x1b
     d8c:	53 17       	cp	r21, r19
     d8e:	10 f0       	brcs	.+4      	; 0xd94 <xQueueGenericSendFromISR+0x1c>
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	e1 f4       	brne	.+56     	; 0xdcc <xQueueGenericSendFromISR+0x54>
     d94:	42 2f       	mov	r20, r18
     d96:	78 01       	movw	r14, r16
     d98:	ec 01       	movw	r28, r24
     d9a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d9c:	11 de       	rcall	.-990    	; 0x9c0 <prvCopyDataToQueue>
     d9e:	1f 3f       	cpi	r17, 0xFF	; 255
     da0:	79 f4       	brne	.+30     	; 0xdc0 <xQueueGenericSendFromISR+0x48>
     da2:	89 89       	ldd	r24, Y+17	; 0x11
     da4:	88 23       	and	r24, r24
     da6:	a1 f0       	breq	.+40     	; 0xdd0 <xQueueGenericSendFromISR+0x58>
     da8:	ce 01       	movw	r24, r28
     daa:	41 96       	adiw	r24, 0x11	; 17
     dac:	26 d5       	rcall	.+2636   	; 0x17fa <xTaskRemoveFromEventList>
     dae:	88 23       	and	r24, r24
     db0:	89 f0       	breq	.+34     	; 0xdd4 <xQueueGenericSendFromISR+0x5c>
     db2:	e1 14       	cp	r14, r1
     db4:	f1 04       	cpc	r15, r1
     db6:	81 f0       	breq	.+32     	; 0xdd8 <xQueueGenericSendFromISR+0x60>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	f7 01       	movw	r30, r14
     dbc:	80 83       	st	Z, r24
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <xQueueGenericSendFromISR+0x62>
     dc0:	ff 24       	eor	r15, r15
     dc2:	f3 94       	inc	r15
     dc4:	f1 0e       	add	r15, r17
     dc6:	fe 8e       	std	Y+30, r15	; 0x1e
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	07 c0       	rjmp	.+14     	; 0xdda <xQueueGenericSendFromISR+0x62>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	05 c0       	rjmp	.+10     	; 0xdda <xQueueGenericSendFromISR+0x62>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <xQueueGenericSendFromISR+0x62>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <xQueueGenericSendFromISR+0x62>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <xQueueReceive>:
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <xQueueReceive+0x18>
     e00:	1f 92       	push	r1
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	8c 01       	movw	r16, r24
     e0a:	5b 01       	movw	r10, r22
     e0c:	5d 83       	std	Y+5, r21	; 0x05
     e0e:	4c 83       	std	Y+4, r20	; 0x04
     e10:	e1 2c       	mov	r14, r1
     e12:	99 24       	eor	r9, r9
     e14:	93 94       	inc	r9
     e16:	6c 01       	movw	r12, r24
     e18:	81 e1       	ldi	r24, 0x11	; 17
     e1a:	c8 0e       	add	r12, r24
     e1c:	d1 1c       	adc	r13, r1
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	0f 92       	push	r0
     e24:	f8 01       	movw	r30, r16
     e26:	f2 8c       	ldd	r15, Z+26	; 0x1a
     e28:	ff 20       	and	r15, r15
     e2a:	91 f0       	breq	.+36     	; 0xe50 <xQueueReceive+0x68>
     e2c:	b5 01       	movw	r22, r10
     e2e:	c8 01       	movw	r24, r16
     e30:	26 de       	rcall	.-948    	; 0xa7e <prvCopyDataFromQueue>
     e32:	fa 94       	dec	r15
     e34:	f8 01       	movw	r30, r16
     e36:	f2 8e       	std	Z+26, r15	; 0x1a
     e38:	80 85       	ldd	r24, Z+8	; 0x08
     e3a:	88 23       	and	r24, r24
     e3c:	29 f0       	breq	.+10     	; 0xe48 <xQueueReceive+0x60>
     e3e:	c8 01       	movw	r24, r16
     e40:	08 96       	adiw	r24, 0x08	; 8
     e42:	db d4       	rcall	.+2486   	; 0x17fa <xTaskRemoveFromEventList>
     e44:	81 11       	cpse	r24, r1
     e46:	ec dc       	rcall	.-1576   	; 0x820 <vPortYield>
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	44 c0       	rjmp	.+136    	; 0xed8 <xQueueReceive+0xf0>
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	89 2b       	or	r24, r25
     e56:	21 f4       	brne	.+8      	; 0xe60 <xQueueReceive+0x78>
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	3c c0       	rjmp	.+120    	; 0xed8 <xQueueReceive+0xf0>
     e60:	e1 10       	cpse	r14, r1
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <xQueueReceive+0x84>
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	10 d5       	rcall	.+2592   	; 0x188a <vTaskInternalSetTimeOutState>
     e6a:	e9 2c       	mov	r14, r9
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cc d2       	rcall	.+1432   	; 0x140a <vTaskSuspendAll>
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	0f 92       	push	r0
     e78:	f8 01       	movw	r30, r16
     e7a:	85 8d       	ldd	r24, Z+29	; 0x1d
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	09 f4       	brne	.+2      	; 0xe82 <xQueueReceive+0x9a>
     e80:	15 8e       	std	Z+29, r1	; 0x1d
     e82:	f8 01       	movw	r30, r16
     e84:	86 8d       	ldd	r24, Z+30	; 0x1e
     e86:	8f 3f       	cpi	r24, 0xFF	; 255
     e88:	09 f4       	brne	.+2      	; 0xe8c <xQueueReceive+0xa4>
     e8a:	16 8e       	std	Z+30, r1	; 0x1e
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	be 01       	movw	r22, r28
     e92:	6c 5f       	subi	r22, 0xFC	; 252
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	02 d5       	rcall	.+2564   	; 0x18a0 <xTaskCheckForTimeOut>
     e9c:	81 11       	cpse	r24, r1
     e9e:	13 c0       	rjmp	.+38     	; 0xec6 <xQueueReceive+0xde>
     ea0:	c8 01       	movw	r24, r16
     ea2:	83 dd       	rcall	.-1274   	; 0x9aa <prvIsQueueEmpty>
     ea4:	88 23       	and	r24, r24
     ea6:	59 f0       	breq	.+22     	; 0xebe <xQueueReceive+0xd6>
     ea8:	6c 81       	ldd	r22, Y+4	; 0x04
     eaa:	7d 81       	ldd	r23, Y+5	; 0x05
     eac:	c6 01       	movw	r24, r12
     eae:	7c d4       	rcall	.+2296   	; 0x17a8 <vTaskPlaceOnEventList>
     eb0:	c8 01       	movw	r24, r16
     eb2:	ff dd       	rcall	.-1026   	; 0xab2 <prvUnlockQueue>
     eb4:	71 d3       	rcall	.+1762   	; 0x1598 <xTaskResumeAll>
     eb6:	81 11       	cpse	r24, r1
     eb8:	b2 cf       	rjmp	.-156    	; 0xe1e <xQueueReceive+0x36>
     eba:	b2 dc       	rcall	.-1692   	; 0x820 <vPortYield>
     ebc:	b0 cf       	rjmp	.-160    	; 0xe1e <xQueueReceive+0x36>
     ebe:	c8 01       	movw	r24, r16
     ec0:	f8 dd       	rcall	.-1040   	; 0xab2 <prvUnlockQueue>
     ec2:	6a d3       	rcall	.+1748   	; 0x1598 <xTaskResumeAll>
     ec4:	ac cf       	rjmp	.-168    	; 0xe1e <xQueueReceive+0x36>
     ec6:	c8 01       	movw	r24, r16
     ec8:	f4 dd       	rcall	.-1048   	; 0xab2 <prvUnlockQueue>
     eca:	66 d3       	rcall	.+1740   	; 0x1598 <xTaskResumeAll>
     ecc:	c8 01       	movw	r24, r16
     ece:	6d dd       	rcall	.-1318   	; 0x9aa <prvIsQueueEmpty>
     ed0:	88 23       	and	r24, r24
     ed2:	09 f4       	brne	.+2      	; 0xed6 <xQueueReceive+0xee>
     ed4:	a4 cf       	rjmp	.-184    	; 0xe1e <xQueueReceive+0x36>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	08 95       	ret

00000efa <xQueueSemaphoreTake>:
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <xQueueSemaphoreTake+0x14>
     f0e:	1f 92       	push	r1
     f10:	1f 92       	push	r1
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	8c 01       	movw	r16, r24
     f18:	7d 83       	std	Y+5, r23	; 0x05
     f1a:	6c 83       	std	Y+4, r22	; 0x04
     f1c:	b1 2c       	mov	r11, r1
     f1e:	d1 2c       	mov	r13, r1
     f20:	cc 24       	eor	r12, r12
     f22:	c3 94       	inc	r12
     f24:	7c 01       	movw	r14, r24
     f26:	81 e1       	ldi	r24, 0x11	; 17
     f28:	e8 0e       	add	r14, r24
     f2a:	f1 1c       	adc	r15, r1
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	0f 92       	push	r0
     f32:	d8 01       	movw	r26, r16
     f34:	5a 96       	adiw	r26, 0x1a	; 26
     f36:	8c 91       	ld	r24, X
     f38:	5a 97       	sbiw	r26, 0x1a	; 26
     f3a:	88 23       	and	r24, r24
     f3c:	d1 f0       	breq	.+52     	; 0xf72 <xQueueSemaphoreTake+0x78>
     f3e:	81 50       	subi	r24, 0x01	; 1
     f40:	5a 96       	adiw	r26, 0x1a	; 26
     f42:	8c 93       	st	X, r24
     f44:	5a 97       	sbiw	r26, 0x1a	; 26
     f46:	8d 91       	ld	r24, X+
     f48:	9c 91       	ld	r25, X
     f4a:	89 2b       	or	r24, r25
     f4c:	21 f4       	brne	.+8      	; 0xf56 <xQueueSemaphoreTake+0x5c>
     f4e:	f1 d5       	rcall	.+3042   	; 0x1b32 <pvTaskIncrementMutexHeldCount>
     f50:	f8 01       	movw	r30, r16
     f52:	95 83       	std	Z+5, r25	; 0x05
     f54:	84 83       	std	Z+4, r24	; 0x04
     f56:	d8 01       	movw	r26, r16
     f58:	18 96       	adiw	r26, 0x08	; 8
     f5a:	8c 91       	ld	r24, X
     f5c:	88 23       	and	r24, r24
     f5e:	29 f0       	breq	.+10     	; 0xf6a <xQueueSemaphoreTake+0x70>
     f60:	c8 01       	movw	r24, r16
     f62:	08 96       	adiw	r24, 0x08	; 8
     f64:	4a d4       	rcall	.+2196   	; 0x17fa <xTaskRemoveFromEventList>
     f66:	81 11       	cpse	r24, r1
     f68:	5b dc       	rcall	.-1866   	; 0x820 <vPortYield>
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	70 c0       	rjmp	.+224    	; 0x1052 <xQueueSemaphoreTake+0x158>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	89 2b       	or	r24, r25
     f78:	21 f4       	brne	.+8      	; 0xf82 <xQueueSemaphoreTake+0x88>
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	68 c0       	rjmp	.+208    	; 0x1052 <xQueueSemaphoreTake+0x158>
     f82:	d1 10       	cpse	r13, r1
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <xQueueSemaphoreTake+0x94>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	7f d4       	rcall	.+2302   	; 0x188a <vTaskInternalSetTimeOutState>
     f8c:	dc 2c       	mov	r13, r12
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	3b d2       	rcall	.+1142   	; 0x140a <vTaskSuspendAll>
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	0f 92       	push	r0
     f9a:	f8 01       	movw	r30, r16
     f9c:	85 8d       	ldd	r24, Z+29	; 0x1d
     f9e:	8f 3f       	cpi	r24, 0xFF	; 255
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <xQueueSemaphoreTake+0xaa>
     fa2:	15 8e       	std	Z+29, r1	; 0x1d
     fa4:	d8 01       	movw	r26, r16
     fa6:	5e 96       	adiw	r26, 0x1e	; 30
     fa8:	8c 91       	ld	r24, X
     faa:	5e 97       	sbiw	r26, 0x1e	; 30
     fac:	8f 3f       	cpi	r24, 0xFF	; 255
     fae:	11 f4       	brne	.+4      	; 0xfb4 <xQueueSemaphoreTake+0xba>
     fb0:	5e 96       	adiw	r26, 0x1e	; 30
     fb2:	1c 92       	st	X, r1
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	be 01       	movw	r22, r28
     fba:	6c 5f       	subi	r22, 0xFC	; 252
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	ce 01       	movw	r24, r28
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	6e d4       	rcall	.+2268   	; 0x18a0 <xTaskCheckForTimeOut>
     fc4:	81 11       	cpse	r24, r1
     fc6:	21 c0       	rjmp	.+66     	; 0x100a <xQueueSemaphoreTake+0x110>
     fc8:	c8 01       	movw	r24, r16
     fca:	ef dc       	rcall	.-1570   	; 0x9aa <prvIsQueueEmpty>
     fcc:	88 23       	and	r24, r24
     fce:	c9 f0       	breq	.+50     	; 0x1002 <xQueueSemaphoreTake+0x108>
     fd0:	f8 01       	movw	r30, r16
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	89 2b       	or	r24, r25
     fd8:	49 f4       	brne	.+18     	; 0xfec <xQueueSemaphoreTake+0xf2>
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
     fe0:	84 81       	ldd	r24, Z+4	; 0x04
     fe2:	95 81       	ldd	r25, Z+5	; 0x05
     fe4:	a4 d4       	rcall	.+2376   	; 0x192e <xTaskPriorityInherit>
     fe6:	b8 2e       	mov	r11, r24
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	6c 81       	ldd	r22, Y+4	; 0x04
     fee:	7d 81       	ldd	r23, Y+5	; 0x05
     ff0:	c7 01       	movw	r24, r14
     ff2:	da d3       	rcall	.+1972   	; 0x17a8 <vTaskPlaceOnEventList>
     ff4:	c8 01       	movw	r24, r16
     ff6:	5d dd       	rcall	.-1350   	; 0xab2 <prvUnlockQueue>
     ff8:	cf d2       	rcall	.+1438   	; 0x1598 <xTaskResumeAll>
     ffa:	81 11       	cpse	r24, r1
     ffc:	97 cf       	rjmp	.-210    	; 0xf2c <xQueueSemaphoreTake+0x32>
     ffe:	10 dc       	rcall	.-2016   	; 0x820 <vPortYield>
    1000:	95 cf       	rjmp	.-214    	; 0xf2c <xQueueSemaphoreTake+0x32>
    1002:	c8 01       	movw	r24, r16
    1004:	56 dd       	rcall	.-1364   	; 0xab2 <prvUnlockQueue>
    1006:	c8 d2       	rcall	.+1424   	; 0x1598 <xTaskResumeAll>
    1008:	91 cf       	rjmp	.-222    	; 0xf2c <xQueueSemaphoreTake+0x32>
    100a:	c8 01       	movw	r24, r16
    100c:	52 dd       	rcall	.-1372   	; 0xab2 <prvUnlockQueue>
    100e:	c4 d2       	rcall	.+1416   	; 0x1598 <xTaskResumeAll>
    1010:	c8 01       	movw	r24, r16
    1012:	cb dc       	rcall	.-1642   	; 0x9aa <prvIsQueueEmpty>
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <xQueueSemaphoreTake+0x120>
    1018:	89 cf       	rjmp	.-238    	; 0xf2c <xQueueSemaphoreTake+0x32>
    101a:	bb 20       	and	r11, r11
    101c:	c9 f0       	breq	.+50     	; 0x1050 <xQueueSemaphoreTake+0x156>
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	0f 92       	push	r0
    1024:	f8 01       	movw	r30, r16
    1026:	81 89       	ldd	r24, Z+17	; 0x11
    1028:	88 23       	and	r24, r24
    102a:	39 f0       	breq	.+14     	; 0x103a <xQueueSemaphoreTake+0x140>
    102c:	06 88       	ldd	r0, Z+22	; 0x16
    102e:	f7 89       	ldd	r31, Z+23	; 0x17
    1030:	e0 2d       	mov	r30, r0
    1032:	80 81       	ld	r24, Z
    1034:	64 e0       	ldi	r22, 0x04	; 4
    1036:	68 1b       	sub	r22, r24
    1038:	01 c0       	rjmp	.+2      	; 0x103c <xQueueSemaphoreTake+0x142>
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	d8 01       	movw	r26, r16
    103e:	14 96       	adiw	r26, 0x04	; 4
    1040:	8d 91       	ld	r24, X+
    1042:	9c 91       	ld	r25, X
    1044:	15 97       	sbiw	r26, 0x05	; 5
    1046:	25 d5       	rcall	.+2634   	; 0x1a92 <vTaskPriorityDisinheritAfterTimeout>
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <xQueueSemaphoreTake+0x158>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	08 95       	ret

00001070 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	0f 92       	push	r0
    107c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    107e:	8f 3f       	cpi	r24, 0xFF	; 255
    1080:	09 f4       	brne	.+2      	; 0x1084 <vQueueWaitForMessageRestricted+0x14>
    1082:	1d 8e       	std	Y+29, r1	; 0x1d
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	8f 3f       	cpi	r24, 0xFF	; 255
    1088:	09 f4       	brne	.+2      	; 0x108c <vQueueWaitForMessageRestricted+0x1c>
    108a:	1e 8e       	std	Y+30, r1	; 0x1e
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1090:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1092:	81 11       	cpse	r24, r1
    1094:	03 c0       	rjmp	.+6      	; 0x109c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1096:	ce 01       	movw	r24, r28
    1098:	41 96       	adiw	r24, 0x11	; 17
    109a:	97 d3       	rcall	.+1838   	; 0x17ca <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    109c:	ce 01       	movw	r24, r28
    109e:	09 dd       	rcall	.-1518   	; 0xab2 <prvUnlockQueue>
    }
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <prvResetNextTaskUnblockTime>:
    10a6:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <pxDelayedTaskList>
    10aa:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <pxDelayedTaskList+0x1>
    10ae:	80 81       	ld	r24, Z
    10b0:	81 11       	cpse	r24, r1
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <prvResetNextTaskUnblockTime+0x1c>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <xNextTaskUnblockTime+0x1>
    10bc:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <xNextTaskUnblockTime>
    10c0:	08 95       	ret
    10c2:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <pxDelayedTaskList>
    10c6:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <pxDelayedTaskList+0x1>
    10ca:	05 80       	ldd	r0, Z+5	; 0x05
    10cc:	f6 81       	ldd	r31, Z+6	; 0x06
    10ce:	e0 2d       	mov	r30, r0
    10d0:	06 80       	ldd	r0, Z+6	; 0x06
    10d2:	f7 81       	ldd	r31, Z+7	; 0x07
    10d4:	e0 2d       	mov	r30, r0
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <xNextTaskUnblockTime+0x1>
    10de:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <xNextTaskUnblockTime>
    10e2:	08 95       	ret

000010e4 <prvAddCurrentTaskToDelayedList>:
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
    10f0:	f6 2e       	mov	r15, r22
    10f2:	00 91 43 06 	lds	r16, 0x0643	; 0x800643 <xTickCount>
    10f6:	10 91 44 06 	lds	r17, 0x0644	; 0x800644 <xTickCount+0x1>
    10fa:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxCurrentTCB>
    10fe:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1102:	02 96       	adiw	r24, 0x02	; 2
    1104:	b8 da       	rcall	.-2704   	; 0x676 <uxListRemove>
    1106:	cf 3f       	cpi	r28, 0xFF	; 255
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	d8 07       	cpc	r29, r24
    110c:	61 f4       	brne	.+24     	; 0x1126 <prvAddCurrentTaskToDelayedList+0x42>
    110e:	ff 20       	and	r15, r15
    1110:	51 f0       	breq	.+20     	; 0x1126 <prvAddCurrentTaskToDelayedList+0x42>
    1112:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <pxCurrentTCB>
    1116:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    111a:	6e 5f       	subi	r22, 0xFE	; 254
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	86 e4       	ldi	r24, 0x46	; 70
    1120:	96 e0       	ldi	r25, 0x06	; 6
    1122:	57 da       	rcall	.-2898   	; 0x5d2 <vListInsertEnd>
    1124:	2d c0       	rjmp	.+90     	; 0x1180 <prvAddCurrentTaskToDelayedList+0x9c>
    1126:	c0 0f       	add	r28, r16
    1128:	d1 1f       	adc	r29, r17
    112a:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    112e:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1132:	d3 83       	std	Z+3, r29	; 0x03
    1134:	c2 83       	std	Z+2, r28	; 0x02
    1136:	c0 17       	cp	r28, r16
    1138:	d1 07       	cpc	r29, r17
    113a:	60 f4       	brcc	.+24     	; 0x1154 <prvAddCurrentTaskToDelayedList+0x70>
    113c:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <pxCurrentTCB>
    1140:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1144:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <pxOverflowDelayedTaskList>
    1148:	90 91 63 06 	lds	r25, 0x0663	; 0x800663 <pxOverflowDelayedTaskList+0x1>
    114c:	6e 5f       	subi	r22, 0xFE	; 254
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	61 da       	rcall	.-2878   	; 0x614 <vListInsert>
    1152:	16 c0       	rjmp	.+44     	; 0x1180 <prvAddCurrentTaskToDelayedList+0x9c>
    1154:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <pxCurrentTCB>
    1158:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    115c:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <pxDelayedTaskList>
    1160:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <pxDelayedTaskList+0x1>
    1164:	6e 5f       	subi	r22, 0xFE	; 254
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	55 da       	rcall	.-2902   	; 0x614 <vListInsert>
    116a:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <xNextTaskUnblockTime>
    116e:	90 91 3c 06 	lds	r25, 0x063C	; 0x80063c <xNextTaskUnblockTime+0x1>
    1172:	c8 17       	cp	r28, r24
    1174:	d9 07       	cpc	r29, r25
    1176:	20 f4       	brcc	.+8      	; 0x1180 <prvAddCurrentTaskToDelayedList+0x9c>
    1178:	d0 93 3c 06 	sts	0x063C, r29	; 0x80063c <xNextTaskUnblockTime+0x1>
    117c:	c0 93 3b 06 	sts	0x063B, r28	; 0x80063b <xNextTaskUnblockTime>
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	08 95       	ret

0000118c <xTaskCreate>:
    118c:	4f 92       	push	r4
    118e:	5f 92       	push	r5
    1190:	6f 92       	push	r6
    1192:	7f 92       	push	r7
    1194:	8f 92       	push	r8
    1196:	9f 92       	push	r9
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	4c 01       	movw	r8, r24
    11ac:	6b 01       	movw	r12, r22
    11ae:	5a 01       	movw	r10, r20
    11b0:	29 01       	movw	r4, r18
    11b2:	ca 01       	movw	r24, r20
    11b4:	dd d9       	rcall	.-3142   	; 0x570 <pvPortMalloc>
    11b6:	3c 01       	movw	r6, r24
    11b8:	89 2b       	or	r24, r25
    11ba:	09 f4       	brne	.+2      	; 0x11be <xTaskCreate+0x32>
    11bc:	e4 c0       	rjmp	.+456    	; 0x1386 <xTaskCreate+0x1fa>
    11be:	8c e2       	ldi	r24, 0x2C	; 44
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	d6 d9       	rcall	.-3156   	; 0x570 <pvPortMalloc>
    11c4:	ec 01       	movw	r28, r24
    11c6:	89 2b       	or	r24, r25
    11c8:	99 f0       	breq	.+38     	; 0x11f0 <xTaskCreate+0x64>
    11ca:	78 8e       	std	Y+24, r7	; 0x18
    11cc:	6f 8a       	std	Y+23, r6	; 0x17
    11ce:	a5 01       	movw	r20, r10
    11d0:	65 ea       	ldi	r22, 0xA5	; 165
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	c3 01       	movw	r24, r6
    11d6:	0e 94 67 1d 	call	0x3ace	; 0x3ace <memset>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	a8 1a       	sub	r10, r24
    11de:	b1 08       	sbc	r11, r1
    11e0:	8f 89       	ldd	r24, Y+23	; 0x17
    11e2:	98 8d       	ldd	r25, Y+24	; 0x18
    11e4:	a8 0e       	add	r10, r24
    11e6:	b9 1e       	adc	r11, r25
    11e8:	c1 14       	cp	r12, r1
    11ea:	d1 04       	cpc	r13, r1
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <xTaskCreate+0x6a>
    11ee:	1f c0       	rjmp	.+62     	; 0x122e <xTaskCreate+0xa2>
    11f0:	c3 01       	movw	r24, r6
    11f2:	d0 d9       	rcall	.-3168   	; 0x594 <vPortFree>
    11f4:	c8 c0       	rjmp	.+400    	; 0x1386 <xTaskCreate+0x1fa>
    11f6:	d6 01       	movw	r26, r12
    11f8:	8c 91       	ld	r24, X
    11fa:	89 8f       	std	Y+25, r24	; 0x19
    11fc:	8c 91       	ld	r24, X
    11fe:	88 23       	and	r24, r24
    1200:	a1 f0       	breq	.+40     	; 0x122a <xTaskCreate+0x9e>
    1202:	ae 01       	movw	r20, r28
    1204:	46 5e       	subi	r20, 0xE6	; 230
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	f6 01       	movw	r30, r12
    120a:	31 96       	adiw	r30, 0x01	; 1
    120c:	b8 e0       	ldi	r27, 0x08	; 8
    120e:	cb 0e       	add	r12, r27
    1210:	d1 1c       	adc	r13, r1
    1212:	cf 01       	movw	r24, r30
    1214:	21 91       	ld	r18, Z+
    1216:	da 01       	movw	r26, r20
    1218:	2d 93       	st	X+, r18
    121a:	ad 01       	movw	r20, r26
    121c:	dc 01       	movw	r26, r24
    121e:	8c 91       	ld	r24, X
    1220:	88 23       	and	r24, r24
    1222:	19 f0       	breq	.+6      	; 0x122a <xTaskCreate+0x9e>
    1224:	ec 15       	cp	r30, r12
    1226:	fd 05       	cpc	r31, r13
    1228:	a1 f7       	brne	.-24     	; 0x1212 <xTaskCreate+0x86>
    122a:	18 a2       	std	Y+32, r1	; 0x20
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <xTaskCreate+0xa4>
    122e:	19 8e       	std	Y+25, r1	; 0x19
    1230:	04 30       	cpi	r16, 0x04	; 4
    1232:	08 f0       	brcs	.+2      	; 0x1236 <xTaskCreate+0xaa>
    1234:	03 e0       	ldi	r16, 0x03	; 3
    1236:	0e 8b       	std	Y+22, r16	; 0x16
    1238:	0b a3       	std	Y+35, r16	; 0x23
    123a:	1c a2       	std	Y+36, r1	; 0x24
    123c:	6e 01       	movw	r12, r28
    123e:	b2 e0       	ldi	r27, 0x02	; 2
    1240:	cb 0e       	add	r12, r27
    1242:	d1 1c       	adc	r13, r1
    1244:	c6 01       	movw	r24, r12
    1246:	c1 d9       	rcall	.-3198   	; 0x5ca <vListInitialiseItem>
    1248:	ce 01       	movw	r24, r28
    124a:	0c 96       	adiw	r24, 0x0c	; 12
    124c:	be d9       	rcall	.-3204   	; 0x5ca <vListInitialiseItem>
    124e:	d9 87       	std	Y+9, r29	; 0x09
    1250:	c8 87       	std	Y+8, r28	; 0x08
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	80 1b       	sub	r24, r16
    1258:	91 09       	sbc	r25, r1
    125a:	9d 87       	std	Y+13, r25	; 0x0d
    125c:	8c 87       	std	Y+12, r24	; 0x0c
    125e:	db 8b       	std	Y+19, r29	; 0x13
    1260:	ca 8b       	std	Y+18, r28	; 0x12
    1262:	1e a2       	std	Y+38, r1	; 0x26
    1264:	1d a2       	std	Y+37, r1	; 0x25
    1266:	1f a2       	std	Y+39, r1	; 0x27
    1268:	18 a6       	std	Y+40, r1	; 0x28
    126a:	19 a6       	std	Y+41, r1	; 0x29
    126c:	1a a6       	std	Y+42, r1	; 0x2a
    126e:	1b a6       	std	Y+43, r1	; 0x2b
    1270:	a2 01       	movw	r20, r4
    1272:	b4 01       	movw	r22, r8
    1274:	c5 01       	movw	r24, r10
    1276:	26 da       	rcall	.-2996   	; 0x6c4 <pxPortInitialiseStack>
    1278:	99 83       	std	Y+1, r25	; 0x01
    127a:	88 83       	st	Y, r24
    127c:	e1 14       	cp	r14, r1
    127e:	f1 04       	cpc	r15, r1
    1280:	19 f0       	breq	.+6      	; 0x1288 <xTaskCreate+0xfc>
    1282:	f7 01       	movw	r30, r14
    1284:	d1 83       	std	Z+1, r29	; 0x01
    1286:	c0 83       	st	Z, r28
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	0f 92       	push	r0
    128e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <uxCurrentNumberOfTasks>
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <uxCurrentNumberOfTasks>
    1298:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxCurrentTCB>
    129c:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    12a0:	89 2b       	or	r24, r25
    12a2:	89 f5       	brne	.+98     	; 0x1306 <xTaskCreate+0x17a>
    12a4:	d0 93 9d 06 	sts	0x069D, r29	; 0x80069d <pxCurrentTCB+0x1>
    12a8:	c0 93 9c 06 	sts	0x069C, r28	; 0x80069c <pxCurrentTCB>
    12ac:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <uxCurrentNumberOfTasks>
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <xTaskCreate+0x12a>
    12b4:	38 c0       	rjmp	.+112    	; 0x1326 <xTaskCreate+0x19a>
    12b6:	88 e7       	ldi	r24, 0x78	; 120
    12b8:	96 e0       	ldi	r25, 0x06	; 6
    12ba:	79 d9       	rcall	.-3342   	; 0x5ae <vListInitialise>
    12bc:	81 e8       	ldi	r24, 0x81	; 129
    12be:	96 e0       	ldi	r25, 0x06	; 6
    12c0:	76 d9       	rcall	.-3348   	; 0x5ae <vListInitialise>
    12c2:	8a e8       	ldi	r24, 0x8A	; 138
    12c4:	96 e0       	ldi	r25, 0x06	; 6
    12c6:	73 d9       	rcall	.-3354   	; 0x5ae <vListInitialise>
    12c8:	83 e9       	ldi	r24, 0x93	; 147
    12ca:	96 e0       	ldi	r25, 0x06	; 6
    12cc:	70 d9       	rcall	.-3360   	; 0x5ae <vListInitialise>
    12ce:	8f e6       	ldi	r24, 0x6F	; 111
    12d0:	96 e0       	ldi	r25, 0x06	; 6
    12d2:	6d d9       	rcall	.-3366   	; 0x5ae <vListInitialise>
    12d4:	86 e6       	ldi	r24, 0x66	; 102
    12d6:	96 e0       	ldi	r25, 0x06	; 6
    12d8:	6a d9       	rcall	.-3372   	; 0x5ae <vListInitialise>
    12da:	89 e5       	ldi	r24, 0x59	; 89
    12dc:	96 e0       	ldi	r25, 0x06	; 6
    12de:	67 d9       	rcall	.-3378   	; 0x5ae <vListInitialise>
    12e0:	80 e5       	ldi	r24, 0x50	; 80
    12e2:	96 e0       	ldi	r25, 0x06	; 6
    12e4:	64 d9       	rcall	.-3384   	; 0x5ae <vListInitialise>
    12e6:	86 e4       	ldi	r24, 0x46	; 70
    12e8:	96 e0       	ldi	r25, 0x06	; 6
    12ea:	61 d9       	rcall	.-3390   	; 0x5ae <vListInitialise>
    12ec:	8f e6       	ldi	r24, 0x6F	; 111
    12ee:	96 e0       	ldi	r25, 0x06	; 6
    12f0:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <pxDelayedTaskList+0x1>
    12f4:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <pxDelayedTaskList>
    12f8:	86 e6       	ldi	r24, 0x66	; 102
    12fa:	96 e0       	ldi	r25, 0x06	; 6
    12fc:	90 93 63 06 	sts	0x0663, r25	; 0x800663 <pxOverflowDelayedTaskList+0x1>
    1300:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <pxOverflowDelayedTaskList>
    1304:	10 c0       	rjmp	.+32     	; 0x1326 <xTaskCreate+0x19a>
    1306:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <xSchedulerRunning>
    130a:	81 11       	cpse	r24, r1
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <xTaskCreate+0x19a>
    130e:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    1312:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1316:	96 89       	ldd	r25, Z+22	; 0x16
    1318:	8e 89       	ldd	r24, Y+22	; 0x16
    131a:	89 17       	cp	r24, r25
    131c:	20 f0       	brcs	.+8      	; 0x1326 <xTaskCreate+0x19a>
    131e:	d0 93 9d 06 	sts	0x069D, r29	; 0x80069d <pxCurrentTCB+0x1>
    1322:	c0 93 9c 06 	sts	0x069C, r28	; 0x80069c <pxCurrentTCB>
    1326:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <uxTaskNumber>
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <uxTaskNumber>
    1330:	89 a3       	std	Y+33, r24	; 0x21
    1332:	8e 89       	ldd	r24, Y+22	; 0x16
    1334:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    1338:	98 17       	cp	r25, r24
    133a:	10 f4       	brcc	.+4      	; 0x1340 <xTaskCreate+0x1b4>
    133c:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 01       	movw	r18, r24
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	22 0f       	add	r18, r18
    134a:	33 1f       	adc	r19, r19
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	b6 01       	movw	r22, r12
    1356:	88 58       	subi	r24, 0x88	; 136
    1358:	99 4f       	sbci	r25, 0xF9	; 249
    135a:	3b d9       	rcall	.-3466   	; 0x5d2 <vListInsertEnd>
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <xSchedulerRunning>
    1364:	88 23       	and	r24, r24
    1366:	59 f0       	breq	.+22     	; 0x137e <xTaskCreate+0x1f2>
    1368:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    136c:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1370:	96 89       	ldd	r25, Z+22	; 0x16
    1372:	8e 89       	ldd	r24, Y+22	; 0x16
    1374:	98 17       	cp	r25, r24
    1376:	28 f4       	brcc	.+10     	; 0x1382 <xTaskCreate+0x1f6>
    1378:	53 da       	rcall	.-2906   	; 0x820 <vPortYield>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <xTaskCreate+0x1fc>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <xTaskCreate+0x1fc>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <xTaskCreate+0x1fc>
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	08 95       	ret

000013a8 <vTaskStartScheduler>:
    13a8:	ef 92       	push	r14
    13aa:	ff 92       	push	r15
    13ac:	0f 93       	push	r16
    13ae:	0f 2e       	mov	r0, r31
    13b0:	f9 e3       	ldi	r31, 0x39	; 57
    13b2:	ef 2e       	mov	r14, r31
    13b4:	f6 e0       	ldi	r31, 0x06	; 6
    13b6:	ff 2e       	mov	r15, r31
    13b8:	f0 2d       	mov	r31, r0
    13ba:	00 e0       	ldi	r16, 0x00	; 0
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 ec       	ldi	r20, 0xC0	; 192
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	61 e2       	ldi	r22, 0x21	; 33
    13c6:	72 e0       	ldi	r23, 0x02	; 2
    13c8:	8e e4       	ldi	r24, 0x4E	; 78
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	df de       	rcall	.-578    	; 0x118c <xTaskCreate>
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	c1 f4       	brne	.+48     	; 0x1402 <vTaskStartScheduler+0x5a>
    13d2:	19 d4       	rcall	.+2098   	; 0x1c06 <xTimerCreateTimerTask>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	a9 f4       	brne	.+42     	; 0x1402 <vTaskStartScheduler+0x5a>
    13d8:	f8 94       	cli
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <xNextTaskUnblockTime+0x1>
    13e2:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <xNextTaskUnblockTime>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <xSchedulerRunning>
    13ec:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <xTickCount+0x1>
    13f0:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <xTickCount>
    13f4:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    13f8:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    13fc:	85 a1       	ldd	r24, Z+37	; 0x25
    13fe:	a8 d8       	rcall	.-3760   	; 0x550 <task_switch_in>
    1400:	d3 d9       	rcall	.-3162   	; 0x7a8 <xPortStartScheduler>
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	08 95       	ret

0000140a <vTaskSuspendAll>:
    140a:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <__data_end>
    1414:	08 95       	ret

00001416 <xTaskGetTickCount>:
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	0f 92       	push	r0
    141c:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <xTickCount>
    1420:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <xTickCount+0x1>
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	08 95       	ret

0000142a <xTaskIncrementTick>:
    142a:	cf 92       	push	r12
    142c:	df 92       	push	r13
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    143e:	81 11       	cpse	r24, r1
    1440:	95 c0       	rjmp	.+298    	; 0x156c <xTaskIncrementTick+0x142>
    1442:	e0 90 43 06 	lds	r14, 0x0643	; 0x800643 <xTickCount>
    1446:	f0 90 44 06 	lds	r15, 0x0644	; 0x800644 <xTickCount+0x1>
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	e8 1a       	sub	r14, r24
    144e:	f8 0a       	sbc	r15, r24
    1450:	f0 92 44 06 	sts	0x0644, r15	; 0x800644 <xTickCount+0x1>
    1454:	e0 92 43 06 	sts	0x0643, r14	; 0x800643 <xTickCount>
    1458:	e1 14       	cp	r14, r1
    145a:	f1 04       	cpc	r15, r1
    145c:	b1 f4       	brne	.+44     	; 0x148a <xTaskIncrementTick+0x60>
    145e:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <pxDelayedTaskList>
    1462:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <pxDelayedTaskList+0x1>
    1466:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <pxOverflowDelayedTaskList>
    146a:	30 91 63 06 	lds	r19, 0x0663	; 0x800663 <pxOverflowDelayedTaskList+0x1>
    146e:	30 93 65 06 	sts	0x0665, r19	; 0x800665 <pxDelayedTaskList+0x1>
    1472:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <pxDelayedTaskList>
    1476:	90 93 63 06 	sts	0x0663, r25	; 0x800663 <pxOverflowDelayedTaskList+0x1>
    147a:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <pxOverflowDelayedTaskList>
    147e:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <xNumOfOverflows>
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <xNumOfOverflows>
    1488:	0e de       	rcall	.-996    	; 0x10a6 <prvResetNextTaskUnblockTime>
    148a:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <xNextTaskUnblockTime>
    148e:	90 91 3c 06 	lds	r25, 0x063C	; 0x80063c <xNextTaskUnblockTime+0x1>
    1492:	e8 16       	cp	r14, r24
    1494:	f9 06       	cpc	r15, r25
    1496:	10 f4       	brcc	.+4      	; 0x149c <xTaskIncrementTick+0x72>
    1498:	d1 2c       	mov	r13, r1
    149a:	50 c0       	rjmp	.+160    	; 0x153c <xTaskIncrementTick+0x112>
    149c:	d1 2c       	mov	r13, r1
    149e:	cc 24       	eor	r12, r12
    14a0:	c3 94       	inc	r12
    14a2:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <pxDelayedTaskList>
    14a6:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <pxDelayedTaskList+0x1>
    14aa:	80 81       	ld	r24, Z
    14ac:	81 11       	cpse	r24, r1
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <xTaskIncrementTick+0x94>
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <xNextTaskUnblockTime+0x1>
    14b8:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <xNextTaskUnblockTime>
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <xTaskIncrementTick+0x112>
    14be:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <pxDelayedTaskList>
    14c2:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <pxDelayedTaskList+0x1>
    14c6:	05 80       	ldd	r0, Z+5	; 0x05
    14c8:	f6 81       	ldd	r31, Z+6	; 0x06
    14ca:	e0 2d       	mov	r30, r0
    14cc:	c6 81       	ldd	r28, Z+6	; 0x06
    14ce:	d7 81       	ldd	r29, Z+7	; 0x07
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	e8 16       	cp	r14, r24
    14d6:	f9 06       	cpc	r15, r25
    14d8:	28 f4       	brcc	.+10     	; 0x14e4 <xTaskIncrementTick+0xba>
    14da:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <xNextTaskUnblockTime+0x1>
    14de:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <xNextTaskUnblockTime>
    14e2:	2c c0       	rjmp	.+88     	; 0x153c <xTaskIncrementTick+0x112>
    14e4:	8e 01       	movw	r16, r28
    14e6:	0e 5f       	subi	r16, 0xFE	; 254
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	c8 01       	movw	r24, r16
    14ec:	c4 d8       	rcall	.-3704   	; 0x676 <uxListRemove>
    14ee:	8c 89       	ldd	r24, Y+20	; 0x14
    14f0:	9d 89       	ldd	r25, Y+21	; 0x15
    14f2:	89 2b       	or	r24, r25
    14f4:	19 f0       	breq	.+6      	; 0x14fc <xTaskIncrementTick+0xd2>
    14f6:	ce 01       	movw	r24, r28
    14f8:	0c 96       	adiw	r24, 0x0c	; 12
    14fa:	bd d8       	rcall	.-3718   	; 0x676 <uxListRemove>
    14fc:	8e 89       	ldd	r24, Y+22	; 0x16
    14fe:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    1502:	98 17       	cp	r25, r24
    1504:	10 f4       	brcc	.+4      	; 0x150a <xTaskIncrementTick+0xe0>
    1506:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9c 01       	movw	r18, r24
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	22 0f       	add	r18, r18
    1514:	33 1f       	adc	r19, r19
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	82 0f       	add	r24, r18
    151c:	93 1f       	adc	r25, r19
    151e:	b8 01       	movw	r22, r16
    1520:	88 58       	subi	r24, 0x88	; 136
    1522:	99 4f       	sbci	r25, 0xF9	; 249
    1524:	56 d8       	rcall	.-3924   	; 0x5d2 <vListInsertEnd>
    1526:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    152a:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    152e:	9e 89       	ldd	r25, Y+22	; 0x16
    1530:	86 89       	ldd	r24, Z+22	; 0x16
    1532:	98 17       	cp	r25, r24
    1534:	08 f4       	brcc	.+2      	; 0x1538 <xTaskIncrementTick+0x10e>
    1536:	b5 cf       	rjmp	.-150    	; 0x14a2 <xTaskIncrementTick+0x78>
    1538:	dc 2c       	mov	r13, r12
    153a:	b3 cf       	rjmp	.-154    	; 0x14a2 <xTaskIncrementTick+0x78>
    153c:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    1540:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1544:	86 89       	ldd	r24, Z+22	; 0x16
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	fc 01       	movw	r30, r24
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	8e 0f       	add	r24, r30
    1558:	9f 1f       	adc	r25, r31
    155a:	fc 01       	movw	r30, r24
    155c:	e8 58       	subi	r30, 0x88	; 136
    155e:	f9 4f       	sbci	r31, 0xF9	; 249
    1560:	80 81       	ld	r24, Z
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	48 f0       	brcs	.+18     	; 0x1578 <xTaskIncrementTick+0x14e>
    1566:	dd 24       	eor	r13, r13
    1568:	d3 94       	inc	r13
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <xTaskIncrementTick+0x14e>
    156c:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <uxPendedTicks>
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <uxPendedTicks>
    1576:	d1 2c       	mov	r13, r1
    1578:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <xYieldPending>
    157c:	88 23       	and	r24, r24
    157e:	11 f0       	breq	.+4      	; 0x1584 <xTaskIncrementTick+0x15a>
    1580:	dd 24       	eor	r13, r13
    1582:	d3 94       	inc	r13
    1584:	8d 2d       	mov	r24, r13
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	08 95       	ret

00001598 <xTaskResumeAll>:
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	0f 92       	push	r0
    15ac:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    15b0:	81 50       	subi	r24, 0x01	; 1
    15b2:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <__data_end>
    15b6:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    15ba:	81 11       	cpse	r24, r1
    15bc:	5a c0       	rjmp	.+180    	; 0x1672 <xTaskResumeAll+0xda>
    15be:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <uxCurrentNumberOfTasks>
    15c2:	81 11       	cpse	r24, r1
    15c4:	31 c0       	rjmp	.+98     	; 0x1628 <xTaskResumeAll+0x90>
    15c6:	58 c0       	rjmp	.+176    	; 0x1678 <xTaskResumeAll+0xe0>
    15c8:	d7 01       	movw	r26, r14
    15ca:	15 96       	adiw	r26, 0x05	; 5
    15cc:	ed 91       	ld	r30, X+
    15ce:	fc 91       	ld	r31, X
    15d0:	16 97       	sbiw	r26, 0x06	; 6
    15d2:	c6 81       	ldd	r28, Z+6	; 0x06
    15d4:	d7 81       	ldd	r29, Z+7	; 0x07
    15d6:	ce 01       	movw	r24, r28
    15d8:	0c 96       	adiw	r24, 0x0c	; 12
    15da:	4d d8       	rcall	.-3942   	; 0x676 <uxListRemove>
    15dc:	8e 01       	movw	r16, r28
    15de:	0e 5f       	subi	r16, 0xFE	; 254
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	c8 01       	movw	r24, r16
    15e4:	48 d8       	rcall	.-3952   	; 0x676 <uxListRemove>
    15e6:	8e 89       	ldd	r24, Y+22	; 0x16
    15e8:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    15ec:	98 17       	cp	r25, r24
    15ee:	10 f4       	brcc	.+4      	; 0x15f4 <xTaskResumeAll+0x5c>
    15f0:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 01       	movw	r18, r24
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	22 0f       	add	r18, r18
    15fe:	33 1f       	adc	r19, r19
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	b8 01       	movw	r22, r16
    160a:	88 58       	subi	r24, 0x88	; 136
    160c:	99 4f       	sbci	r25, 0xF9	; 249
    160e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    1612:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    1616:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    161a:	9e 89       	ldd	r25, Y+22	; 0x16
    161c:	86 89       	ldd	r24, Z+22	; 0x16
    161e:	98 17       	cp	r25, r24
    1620:	68 f0       	brcs	.+26     	; 0x163c <xTaskResumeAll+0xa4>
    1622:	d0 92 3f 06 	sts	0x063F, r13	; 0x80063f <xYieldPending>
    1626:	0a c0       	rjmp	.+20     	; 0x163c <xTaskResumeAll+0xa4>
    1628:	c0 e0       	ldi	r28, 0x00	; 0
    162a:	d0 e0       	ldi	r29, 0x00	; 0
    162c:	0f 2e       	mov	r0, r31
    162e:	f9 e5       	ldi	r31, 0x59	; 89
    1630:	ef 2e       	mov	r14, r31
    1632:	f6 e0       	ldi	r31, 0x06	; 6
    1634:	ff 2e       	mov	r15, r31
    1636:	f0 2d       	mov	r31, r0
    1638:	dd 24       	eor	r13, r13
    163a:	d3 94       	inc	r13
    163c:	f7 01       	movw	r30, r14
    163e:	80 81       	ld	r24, Z
    1640:	81 11       	cpse	r24, r1
    1642:	c2 cf       	rjmp	.-124    	; 0x15c8 <xTaskResumeAll+0x30>
    1644:	cd 2b       	or	r28, r29
    1646:	09 f0       	breq	.+2      	; 0x164a <xTaskResumeAll+0xb2>
    1648:	2e dd       	rcall	.-1444   	; 0x10a6 <prvResetNextTaskUnblockTime>
    164a:	c0 91 40 06 	lds	r28, 0x0640	; 0x800640 <uxPendedTicks>
    164e:	cc 23       	and	r28, r28
    1650:	49 f0       	breq	.+18     	; 0x1664 <xTaskResumeAll+0xcc>
    1652:	d1 e0       	ldi	r29, 0x01	; 1
    1654:	ea de       	rcall	.-556    	; 0x142a <xTaskIncrementTick>
    1656:	81 11       	cpse	r24, r1
    1658:	d0 93 3f 06 	sts	0x063F, r29	; 0x80063f <xYieldPending>
    165c:	c1 50       	subi	r28, 0x01	; 1
    165e:	d1 f7       	brne	.-12     	; 0x1654 <xTaskResumeAll+0xbc>
    1660:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <uxPendedTicks>
    1664:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <xYieldPending>
    1668:	88 23       	and	r24, r24
    166a:	29 f0       	breq	.+10     	; 0x1676 <xTaskResumeAll+0xde>
    166c:	d9 d8       	rcall	.-3662   	; 0x820 <vPortYield>
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <xTaskResumeAll+0xe0>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <xTaskResumeAll+0xe0>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	08 95       	ret

0000168c <vTaskSwitchContext>:
    168c:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    1690:	88 23       	and	r24, r24
    1692:	21 f0       	breq	.+8      	; 0x169c <vTaskSwitchContext+0x10>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <xYieldPending>
    169a:	08 95       	ret
    169c:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <xYieldPending>
    16a0:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    16a4:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    16a8:	85 a1       	ldd	r24, Z+37	; 0x25
    16aa:	0e 94 b2 02 	call	0x564	; 0x564 <task_switch_out>
    16ae:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
    16b2:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    16b6:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    16ba:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    16be:	2d 91       	ld	r18, X+
    16c0:	3c 91       	ld	r19, X
    16c2:	87 89       	ldd	r24, Z+23	; 0x17
    16c4:	90 8d       	ldd	r25, Z+24	; 0x18
    16c6:	82 17       	cp	r24, r18
    16c8:	93 07       	cpc	r25, r19
    16ca:	58 f0       	brcs	.+22     	; 0x16e2 <vTaskSwitchContext+0x56>
    16cc:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <pxCurrentTCB>
    16d0:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    16d4:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxCurrentTCB>
    16d8:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    16dc:	67 5e       	subi	r22, 0xE7	; 231
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	aa d3       	rcall	.+1876   	; 0x1e36 <vApplicationStackOverflowHook>
    16e2:	20 91 42 06 	lds	r18, 0x0642	; 0x800642 <uxTopReadyPriority>
    16e6:	82 2f       	mov	r24, r18
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	e8 58       	subi	r30, 0x88	; 136
    16fe:	f9 4f       	sbci	r31, 0xF9	; 249
    1700:	30 81       	ld	r19, Z
    1702:	31 11       	cpse	r19, r1
    1704:	11 c0       	rjmp	.+34     	; 0x1728 <vTaskSwitchContext+0x9c>
    1706:	21 50       	subi	r18, 0x01	; 1
    1708:	82 2f       	mov	r24, r18
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	e8 0f       	add	r30, r24
    171c:	f9 1f       	adc	r31, r25
    171e:	e8 58       	subi	r30, 0x88	; 136
    1720:	f9 4f       	sbci	r31, 0xF9	; 249
    1722:	30 81       	ld	r19, Z
    1724:	33 23       	and	r19, r19
    1726:	79 f3       	breq	.-34     	; 0x1706 <vTaskSwitchContext+0x7a>
    1728:	ac 01       	movw	r20, r24
    172a:	44 0f       	add	r20, r20
    172c:	55 1f       	adc	r21, r21
    172e:	44 0f       	add	r20, r20
    1730:	55 1f       	adc	r21, r21
    1732:	44 0f       	add	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	48 0f       	add	r20, r24
    1738:	59 1f       	adc	r21, r25
    173a:	da 01       	movw	r26, r20
    173c:	a8 58       	subi	r26, 0x88	; 136
    173e:	b9 4f       	sbci	r27, 0xF9	; 249
    1740:	11 96       	adiw	r26, 0x01	; 1
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	12 97       	sbiw	r26, 0x02	; 2
    1748:	02 80       	ldd	r0, Z+2	; 0x02
    174a:	f3 81       	ldd	r31, Z+3	; 0x03
    174c:	e0 2d       	mov	r30, r0
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	fc 93       	st	X, r31
    1752:	ee 93       	st	-X, r30
    1754:	11 97       	sbiw	r26, 0x01	; 1
    1756:	45 58       	subi	r20, 0x85	; 133
    1758:	59 4f       	sbci	r21, 0xF9	; 249
    175a:	e4 17       	cp	r30, r20
    175c:	f5 07       	cpc	r31, r21
    175e:	29 f4       	brne	.+10     	; 0x176a <vTaskSwitchContext+0xde>
    1760:	42 81       	ldd	r20, Z+2	; 0x02
    1762:	53 81       	ldd	r21, Z+3	; 0x03
    1764:	fd 01       	movw	r30, r26
    1766:	52 83       	std	Z+2, r21	; 0x02
    1768:	41 83       	std	Z+1, r20	; 0x01
    176a:	fc 01       	movw	r30, r24
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	8e 0f       	add	r24, r30
    177a:	9f 1f       	adc	r25, r31
    177c:	fc 01       	movw	r30, r24
    177e:	e8 58       	subi	r30, 0x88	; 136
    1780:	f9 4f       	sbci	r31, 0xF9	; 249
    1782:	01 80       	ldd	r0, Z+1	; 0x01
    1784:	f2 81       	ldd	r31, Z+2	; 0x02
    1786:	e0 2d       	mov	r30, r0
    1788:	86 81       	ldd	r24, Z+6	; 0x06
    178a:	97 81       	ldd	r25, Z+7	; 0x07
    178c:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <pxCurrentTCB+0x1>
    1790:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <pxCurrentTCB>
    1794:	20 93 42 06 	sts	0x0642, r18	; 0x800642 <uxTopReadyPriority>
    1798:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    179c:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    17a0:	85 a1       	ldd	r24, Z+37	; 0x25
    17a2:	0c 94 a8 02 	jmp	0x550	; 0x550 <task_switch_in>
    17a6:	08 95       	ret

000017a8 <vTaskPlaceOnEventList>:
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	eb 01       	movw	r28, r22
    17ae:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <pxCurrentTCB>
    17b2:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    17b6:	64 5f       	subi	r22, 0xF4	; 244
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	0e 94 0a 03 	call	0x614	; 0x614 <vListInsert>
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	ce 01       	movw	r24, r28
    17c2:	90 dc       	rcall	.-1760   	; 0x10e4 <prvAddCurrentTaskToDelayedList>
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <vTaskPlaceOnEventListRestricted>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	8b 01       	movw	r16, r22
    17d2:	c4 2f       	mov	r28, r20
    17d4:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <pxCurrentTCB>
    17d8:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    17dc:	64 5f       	subi	r22, 0xF4	; 244
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    17e4:	cc 23       	and	r28, r28
    17e6:	11 f0       	breq	.+4      	; 0x17ec <vTaskPlaceOnEventListRestricted+0x22>
    17e8:	0f ef       	ldi	r16, 0xFF	; 255
    17ea:	1f ef       	ldi	r17, 0xFF	; 255
    17ec:	6c 2f       	mov	r22, r28
    17ee:	c8 01       	movw	r24, r16
    17f0:	79 dc       	rcall	.-1806   	; 0x10e4 <prvAddCurrentTaskToDelayedList>
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <xTaskRemoveFromEventList>:
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	dc 01       	movw	r26, r24
    1804:	15 96       	adiw	r26, 0x05	; 5
    1806:	ed 91       	ld	r30, X+
    1808:	fc 91       	ld	r31, X
    180a:	16 97       	sbiw	r26, 0x06	; 6
    180c:	c6 81       	ldd	r28, Z+6	; 0x06
    180e:	d7 81       	ldd	r29, Z+7	; 0x07
    1810:	8e 01       	movw	r16, r28
    1812:	04 5f       	subi	r16, 0xF4	; 244
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	c8 01       	movw	r24, r16
    1818:	0e 94 3b 03 	call	0x676	; 0x676 <uxListRemove>
    181c:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    1820:	81 11       	cpse	r24, r1
    1822:	1c c0       	rjmp	.+56     	; 0x185c <xTaskRemoveFromEventList+0x62>
    1824:	0a 50       	subi	r16, 0x0A	; 10
    1826:	11 09       	sbc	r17, r1
    1828:	c8 01       	movw	r24, r16
    182a:	0e 94 3b 03 	call	0x676	; 0x676 <uxListRemove>
    182e:	8e 89       	ldd	r24, Y+22	; 0x16
    1830:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    1834:	98 17       	cp	r25, r24
    1836:	10 f4       	brcc	.+4      	; 0x183c <xTaskRemoveFromEventList+0x42>
    1838:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 01       	movw	r18, r24
    1840:	22 0f       	add	r18, r18
    1842:	33 1f       	adc	r19, r19
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	b8 01       	movw	r22, r16
    1852:	88 58       	subi	r24, 0x88	; 136
    1854:	99 4f       	sbci	r25, 0xF9	; 249
    1856:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <xTaskRemoveFromEventList+0x6c>
    185c:	b8 01       	movw	r22, r16
    185e:	89 e5       	ldi	r24, 0x59	; 89
    1860:	96 e0       	ldi	r25, 0x06	; 6
    1862:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    1866:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    186a:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    186e:	9e 89       	ldd	r25, Y+22	; 0x16
    1870:	86 89       	ldd	r24, Z+22	; 0x16
    1872:	89 17       	cp	r24, r25
    1874:	20 f4       	brcc	.+8      	; 0x187e <xTaskRemoveFromEventList+0x84>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <xYieldPending>
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <xTaskRemoveFromEventList+0x86>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	08 95       	ret

0000188a <vTaskInternalSetTimeOutState>:
    188a:	20 91 3e 06 	lds	r18, 0x063E	; 0x80063e <xNumOfOverflows>
    188e:	fc 01       	movw	r30, r24
    1890:	20 83       	st	Z, r18
    1892:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <xTickCount>
    1896:	30 91 44 06 	lds	r19, 0x0644	; 0x800644 <xTickCount+0x1>
    189a:	32 83       	std	Z+2, r19	; 0x02
    189c:	21 83       	std	Z+1, r18	; 0x01
    189e:	08 95       	ret

000018a0 <xTaskCheckForTimeOut>:
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	0f 92       	push	r0
    18aa:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <xTickCount>
    18ae:	30 91 44 06 	lds	r19, 0x0644	; 0x800644 <xTickCount+0x1>
    18b2:	db 01       	movw	r26, r22
    18b4:	4d 91       	ld	r20, X+
    18b6:	5c 91       	ld	r21, X
    18b8:	4f 3f       	cpi	r20, 0xFF	; 255
    18ba:	bf ef       	ldi	r27, 0xFF	; 255
    18bc:	5b 07       	cpc	r21, r27
    18be:	e9 f0       	breq	.+58     	; 0x18fa <xTaskCheckForTimeOut+0x5a>
    18c0:	ec 01       	movw	r28, r24
    18c2:	e9 81       	ldd	r30, Y+1	; 0x01
    18c4:	fa 81       	ldd	r31, Y+2	; 0x02
    18c6:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <xNumOfOverflows>
    18ca:	b8 81       	ld	r27, Y
    18cc:	ba 17       	cp	r27, r26
    18ce:	19 f0       	breq	.+6      	; 0x18d6 <xTaskCheckForTimeOut+0x36>
    18d0:	2e 17       	cp	r18, r30
    18d2:	3f 07       	cpc	r19, r31
    18d4:	a0 f4       	brcc	.+40     	; 0x18fe <xTaskCheckForTimeOut+0x5e>
    18d6:	2e 1b       	sub	r18, r30
    18d8:	3f 0b       	sbc	r19, r31
    18da:	24 17       	cp	r18, r20
    18dc:	35 07       	cpc	r19, r21
    18de:	40 f4       	brcc	.+16     	; 0x18f0 <xTaskCheckForTimeOut+0x50>
    18e0:	fb 01       	movw	r30, r22
    18e2:	42 1b       	sub	r20, r18
    18e4:	53 0b       	sbc	r21, r19
    18e6:	51 83       	std	Z+1, r21	; 0x01
    18e8:	40 83       	st	Z, r20
    18ea:	cf df       	rcall	.-98     	; 0x188a <vTaskInternalSetTimeOutState>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	08 c0       	rjmp	.+16     	; 0x1900 <xTaskCheckForTimeOut+0x60>
    18f0:	fb 01       	movw	r30, r22
    18f2:	11 82       	std	Z+1, r1	; 0x01
    18f4:	10 82       	st	Z, r1
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <xTaskCheckForTimeOut+0x60>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <xTaskCheckForTimeOut+0x60>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <vTaskMissedYield>:
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <xYieldPending>
    1910:	08 95       	ret

00001912 <xTaskGetSchedulerState>:
    1912:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <xSchedulerRunning>
    1916:	88 23       	and	r24, r24
    1918:	31 f0       	breq	.+12     	; 0x1926 <xTaskGetSchedulerState+0x14>
    191a:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <__data_end>
    191e:	88 23       	and	r24, r24
    1920:	21 f0       	breq	.+8      	; 0x192a <xTaskGetSchedulerState+0x18>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	08 95       	ret
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	08 95       	ret
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	08 95       	ret

0000192e <xTaskPriorityInherit>:
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	fc 01       	movw	r30, r24
    1938:	89 2b       	or	r24, r25
    193a:	09 f4       	brne	.+2      	; 0x193e <xTaskPriorityInherit+0x10>
    193c:	64 c0       	rjmp	.+200    	; 0x1a06 <xTaskPriorityInherit+0xd8>
    193e:	26 89       	ldd	r18, Z+22	; 0x16
    1940:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
    1944:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1948:	56 96       	adiw	r26, 0x16	; 22
    194a:	8c 91       	ld	r24, X
    194c:	28 17       	cp	r18, r24
    194e:	08 f0       	brcs	.+2      	; 0x1952 <xTaskPriorityInherit+0x24>
    1950:	4e c0       	rjmp	.+156    	; 0x19ee <xTaskPriorityInherit+0xc0>
    1952:	84 85       	ldd	r24, Z+12	; 0x0c
    1954:	95 85       	ldd	r25, Z+13	; 0x0d
    1956:	99 23       	and	r25, r25
    1958:	64 f0       	brlt	.+24     	; 0x1972 <xTaskPriorityInherit+0x44>
    195a:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
    195e:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1962:	56 96       	adiw	r26, 0x16	; 22
    1964:	3c 91       	ld	r19, X
    1966:	84 e0       	ldi	r24, 0x04	; 4
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	83 1b       	sub	r24, r19
    196c:	91 09       	sbc	r25, r1
    196e:	95 87       	std	Z+13, r25	; 0x0d
    1970:	84 87       	std	Z+12, r24	; 0x0c
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c9 01       	movw	r24, r18
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	28 0f       	add	r18, r24
    1984:	39 1f       	adc	r19, r25
    1986:	28 58       	subi	r18, 0x88	; 136
    1988:	39 4f       	sbci	r19, 0xF9	; 249
    198a:	82 85       	ldd	r24, Z+10	; 0x0a
    198c:	93 85       	ldd	r25, Z+11	; 0x0b
    198e:	82 17       	cp	r24, r18
    1990:	93 07       	cpc	r25, r19
    1992:	21 f5       	brne	.+72     	; 0x19dc <xTaskPriorityInherit+0xae>
    1994:	8f 01       	movw	r16, r30
    1996:	ef 01       	movw	r28, r30
    1998:	22 96       	adiw	r28, 0x02	; 2
    199a:	ce 01       	movw	r24, r28
    199c:	0e 94 3b 03 	call	0x676	; 0x676 <uxListRemove>
    19a0:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    19a4:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    19a8:	86 89       	ldd	r24, Z+22	; 0x16
    19aa:	f8 01       	movw	r30, r16
    19ac:	86 8b       	std	Z+22, r24	; 0x16
    19ae:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    19b2:	98 17       	cp	r25, r24
    19b4:	10 f4       	brcc	.+4      	; 0x19ba <xTaskPriorityInherit+0x8c>
    19b6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 01       	movw	r18, r24
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	82 0f       	add	r24, r18
    19cc:	93 1f       	adc	r25, r19
    19ce:	be 01       	movw	r22, r28
    19d0:	88 58       	subi	r24, 0x88	; 136
    19d2:	99 4f       	sbci	r25, 0xF9	; 249
    19d4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	16 c0       	rjmp	.+44     	; 0x1a08 <xTaskPriorityInherit+0xda>
    19dc:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
    19e0:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    19e4:	56 96       	adiw	r26, 0x16	; 22
    19e6:	8c 91       	ld	r24, X
    19e8:	86 8b       	std	Z+22, r24	; 0x16
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0d c0       	rjmp	.+26     	; 0x1a08 <xTaskPriorityInherit+0xda>
    19ee:	a0 91 9c 06 	lds	r26, 0x069C	; 0x80069c <pxCurrentTCB>
    19f2:	b0 91 9d 06 	lds	r27, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	23 a1       	ldd	r18, Z+35	; 0x23
    19fa:	56 96       	adiw	r26, 0x16	; 22
    19fc:	9c 91       	ld	r25, X
    19fe:	29 17       	cp	r18, r25
    1a00:	18 f0       	brcs	.+6      	; 0x1a08 <xTaskPriorityInherit+0xda>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <xTaskPriorityInherit+0xda>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <xTaskPriorityDisinherit>:
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	89 2b       	or	r24, r25
    1a1e:	79 f1       	breq	.+94     	; 0x1a7e <xTaskPriorityDisinherit+0x6c>
    1a20:	84 a1       	ldd	r24, Z+36	; 0x24
    1a22:	81 50       	subi	r24, 0x01	; 1
    1a24:	84 a3       	std	Z+36, r24	; 0x24
    1a26:	26 89       	ldd	r18, Z+22	; 0x16
    1a28:	93 a1       	ldd	r25, Z+35	; 0x23
    1a2a:	29 17       	cp	r18, r25
    1a2c:	51 f1       	breq	.+84     	; 0x1a82 <xTaskPriorityDisinherit+0x70>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	2a c0       	rjmp	.+84     	; 0x1a86 <xTaskPriorityDisinherit+0x74>
    1a32:	ef 01       	movw	r28, r30
    1a34:	8f 01       	movw	r16, r30
    1a36:	0e 5f       	subi	r16, 0xFE	; 254
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	0e 94 3b 03 	call	0x676	; 0x676 <uxListRemove>
    1a40:	8b a1       	ldd	r24, Y+35	; 0x23
    1a42:	8e 8b       	std	Y+22, r24	; 0x16
    1a44:	24 e0       	ldi	r18, 0x04	; 4
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	28 1b       	sub	r18, r24
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	3d 87       	std	Y+13, r19	; 0x0d
    1a4e:	2c 87       	std	Y+12, r18	; 0x0c
    1a50:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    1a54:	98 17       	cp	r25, r24
    1a56:	10 f4       	brcc	.+4      	; 0x1a5c <xTaskPriorityDisinherit+0x4a>
    1a58:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9c 01       	movw	r18, r24
    1a60:	22 0f       	add	r18, r18
    1a62:	33 1f       	adc	r19, r19
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	22 0f       	add	r18, r18
    1a6a:	33 1f       	adc	r19, r19
    1a6c:	82 0f       	add	r24, r18
    1a6e:	93 1f       	adc	r25, r19
    1a70:	b8 01       	movw	r22, r16
    1a72:	88 58       	subi	r24, 0x88	; 136
    1a74:	99 4f       	sbci	r25, 0xF9	; 249
    1a76:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <xTaskPriorityDisinherit+0x76>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <xTaskPriorityDisinherit+0x76>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <xTaskPriorityDisinherit+0x76>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret

00001a92 <vTaskPriorityDisinheritAfterTimeout>:
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	89 2b       	or	r24, r25
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1aa0:	43 c0       	rjmp	.+134    	; 0x1b28 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1aa2:	93 a1       	ldd	r25, Z+35	; 0x23
    1aa4:	96 17       	cp	r25, r22
    1aa6:	08 f4       	brcc	.+2      	; 0x1aaa <vTaskPriorityDisinheritAfterTimeout+0x18>
    1aa8:	96 2f       	mov	r25, r22
    1aaa:	86 89       	ldd	r24, Z+22	; 0x16
    1aac:	89 17       	cp	r24, r25
    1aae:	e1 f1       	breq	.+120    	; 0x1b28 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ab0:	24 a1       	ldd	r18, Z+36	; 0x24
    1ab2:	21 30       	cpi	r18, 0x01	; 1
    1ab4:	c9 f5       	brne	.+114    	; 0x1b28 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ab6:	96 8b       	std	Z+22, r25	; 0x16
    1ab8:	24 85       	ldd	r18, Z+12	; 0x0c
    1aba:	35 85       	ldd	r19, Z+13	; 0x0d
    1abc:	33 23       	and	r19, r19
    1abe:	34 f0       	brlt	.+12     	; 0x1acc <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1ac0:	24 e0       	ldi	r18, 0x04	; 4
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	29 1b       	sub	r18, r25
    1ac6:	31 09       	sbc	r19, r1
    1ac8:	35 87       	std	Z+13, r19	; 0x0d
    1aca:	24 87       	std	Z+12, r18	; 0x0c
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9c 01       	movw	r18, r24
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	88 58       	subi	r24, 0x88	; 136
    1ae2:	99 4f       	sbci	r25, 0xF9	; 249
    1ae4:	22 85       	ldd	r18, Z+10	; 0x0a
    1ae6:	33 85       	ldd	r19, Z+11	; 0x0b
    1ae8:	28 17       	cp	r18, r24
    1aea:	39 07       	cpc	r19, r25
    1aec:	e9 f4       	brne	.+58     	; 0x1b28 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1aee:	ef 01       	movw	r28, r30
    1af0:	8f 01       	movw	r16, r30
    1af2:	0e 5f       	subi	r16, 0xFE	; 254
    1af4:	1f 4f       	sbci	r17, 0xFF	; 255
    1af6:	c8 01       	movw	r24, r16
    1af8:	0e 94 3b 03 	call	0x676	; 0x676 <uxListRemove>
    1afc:	8e 89       	ldd	r24, Y+22	; 0x16
    1afe:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <uxTopReadyPriority>
    1b02:	98 17       	cp	r25, r24
    1b04:	10 f4       	brcc	.+4      	; 0x1b0a <vTaskPriorityDisinheritAfterTimeout+0x78>
    1b06:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <uxTopReadyPriority>
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9c 01       	movw	r18, r24
    1b0e:	22 0f       	add	r18, r18
    1b10:	33 1f       	adc	r19, r19
    1b12:	22 0f       	add	r18, r18
    1b14:	33 1f       	adc	r19, r19
    1b16:	22 0f       	add	r18, r18
    1b18:	33 1f       	adc	r19, r19
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	b8 01       	movw	r22, r16
    1b20:	88 58       	subi	r24, 0x88	; 136
    1b22:	99 4f       	sbci	r25, 0xF9	; 249
    1b24:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInsertEnd>
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	08 95       	ret

00001b32 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1b32:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxCurrentTCB>
    1b36:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1b3a:	89 2b       	or	r24, r25
    1b3c:	39 f0       	breq	.+14     	; 0x1b4c <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1b3e:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxCurrentTCB>
    1b42:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    1b46:	84 a1       	ldd	r24, Z+36	; 0x24
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	84 a3       	std	Z+36, r24	; 0x24
        }

        return pxCurrentTCB;
    1b4c:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxCurrentTCB>
    1b50:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxCurrentTCB+0x1>
    }
    1b54:	08 95       	ret

00001b56 <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    1b56:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1b58:	73 83       	std	Z+3, r23	; 0x03
    1b5a:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1b5c:	91 87       	std	Z+9, r25	; 0x09
    1b5e:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    1b60:	46 17       	cp	r20, r22
    1b62:	57 07       	cpc	r21, r23
    1b64:	90 f0       	brcs	.+36     	; 0x1b8a <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b66:	42 1b       	sub	r20, r18
    1b68:	53 0b       	sbc	r21, r19
    1b6a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b6c:	95 85       	ldd	r25, Z+13	; 0x0d
    1b6e:	48 17       	cp	r20, r24
    1b70:	59 07       	cpc	r21, r25
    1b72:	e0 f4       	brcc	.+56     	; 0x1bac <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1b74:	bf 01       	movw	r22, r30
    1b76:	6e 5f       	subi	r22, 0xFE	; 254
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxOverflowTimerList>
    1b7e:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxOverflowTimerList+0x1>
    1b82:	0e 94 0a 03 	call	0x614	; 0x614 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1b8a:	42 17       	cp	r20, r18
    1b8c:	53 07       	cpc	r21, r19
    1b8e:	18 f4       	brcc	.+6      	; 0x1b96 <prvInsertTimerInActiveList+0x40>
    1b90:	62 17       	cp	r22, r18
    1b92:	73 07       	cpc	r23, r19
    1b94:	68 f4       	brcc	.+26     	; 0x1bb0 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1b96:	bf 01       	movw	r22, r30
    1b98:	6e 5f       	subi	r22, 0xFE	; 254
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <pxCurrentTimerList>
    1ba0:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <pxCurrentTimerList+0x1>
    1ba4:	0e 94 0a 03 	call	0x614	; 0x614 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    1bb2:	08 95       	ret

00001bb4 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    1bba:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <xTimerQueue>
    1bbe:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
    1bc2:	89 2b       	or	r24, r25
    1bc4:	e9 f4       	brne	.+58     	; 0x1c00 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    1bc6:	81 eb       	ldi	r24, 0xB1	; 177
    1bc8:	96 e0       	ldi	r25, 0x06	; 6
    1bca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    1bce:	88 ea       	ldi	r24, 0xA8	; 168
    1bd0:	96 e0       	ldi	r25, 0x06	; 6
    1bd2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    1bd6:	81 eb       	ldi	r24, 0xB1	; 177
    1bd8:	96 e0       	ldi	r25, 0x06	; 6
    1bda:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <pxCurrentTimerList+0x1>
    1bde:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    1be2:	88 ea       	ldi	r24, 0xA8	; 168
    1be4:	96 e0       	ldi	r25, 0x06	; 6
    1be6:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <pxOverflowTimerList+0x1>
    1bea:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	65 e0       	ldi	r22, 0x05	; 5
    1bf2:	8a e0       	ldi	r24, 0x0A	; 10
    1bf4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <xQueueGenericCreate>
    1bf8:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <xTimerQueue+0x1>
    1bfc:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    1c00:	0f 90       	pop	r0
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	08 95       	ret

00001c06 <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    1c0c:	d3 df       	rcall	.-90     	; 0x1bb4 <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    1c0e:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <xTimerQueue>
    1c12:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
    1c16:	89 2b       	or	r24, r25
    1c18:	89 f0       	breq	.+34     	; 0x1c3c <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    1c1a:	0f 2e       	mov	r0, r31
    1c1c:	f0 ea       	ldi	r31, 0xA0	; 160
    1c1e:	ef 2e       	mov	r14, r31
    1c20:	f6 e0       	ldi	r31, 0x06	; 6
    1c22:	ff 2e       	mov	r15, r31
    1c24:	f0 2d       	mov	r31, r0
    1c26:	03 e0       	ldi	r16, 0x03	; 3
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	45 e5       	ldi	r20, 0x55	; 85
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	66 e2       	ldi	r22, 0x26	; 38
    1c32:	72 e0       	ldi	r23, 0x02	; 2
    1c34:	84 e8       	ldi	r24, 0x84	; 132
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	a9 da       	rcall	.-2734   	; 0x118c <xTaskCreate>
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	08 95       	ret

00001c46 <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	4c 01       	movw	r8, r24
    1c5e:	5b 01       	movw	r10, r22
    1c60:	f4 2e       	mov	r15, r20
    1c62:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    1c64:	84 e1       	ldi	r24, 0x14	; 20
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 b8 02 	call	0x570	; 0x570 <pvPortMalloc>
    1c6c:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    1c6e:	89 2b       	or	r24, r25
    1c70:	99 f0       	breq	.+38     	; 0x1c98 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    1c72:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    1c74:	9f df       	rcall	.-194    	; 0x1bb4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    1c76:	99 82       	std	Y+1, r9	; 0x01
    1c78:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1c7a:	bd 86       	std	Y+13, r11	; 0x0d
    1c7c:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    1c7e:	df 86       	std	Y+15, r13	; 0x0f
    1c80:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1c82:	19 8b       	std	Y+17, r17	; 0x11
    1c84:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1c86:	ce 01       	movw	r24, r28
    1c88:	02 96       	adiw	r24, 0x02	; 2
    1c8a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    1c8e:	ff 20       	and	r15, r15
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    1c92:	8b 89       	ldd	r24, Y+19	; 0x13
    1c94:	84 60       	ori	r24, 0x04	; 4
    1c96:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    1c98:	ce 01       	movw	r24, r28
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	af 90       	pop	r10
    1cac:	9f 90       	pop	r9
    1cae:	8f 90       	pop	r8
    1cb0:	08 95       	ret

00001cb2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <xTimerGenericCommand+0xa>
    1cbc:	1f 92       	push	r1
    1cbe:	1f 92       	push	r1
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    1cc4:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <xTimerQueue>
    1cc8:	f0 91 a3 06 	lds	r31, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
    1ccc:	30 97       	sbiw	r30, 0x00	; 0
    1cce:	61 f1       	breq	.+88     	; 0x1d28 <xTimerGenericCommand+0x76>
    1cd0:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    1cd2:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1cd4:	5b 83       	std	Y+3, r21	; 0x03
    1cd6:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    1cd8:	9d 83       	std	Y+5, r25	; 0x05
    1cda:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1cdc:	66 30       	cpi	r22, 0x06	; 6
    1cde:	e4 f4       	brge	.+56     	; 0x1d18 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1ce0:	18 de       	rcall	.-976    	; 0x1912 <xTaskGetSchedulerState>
    1ce2:	82 30       	cpi	r24, 0x02	; 2
    1ce4:	61 f4       	brne	.+24     	; 0x1cfe <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	a8 01       	movw	r20, r16
    1cea:	be 01       	movw	r22, r28
    1cec:	6f 5f       	subi	r22, 0xFF	; 255
    1cee:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf0:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <xTimerQueue>
    1cf4:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
    1cf8:	0e 94 12 06 	call	0xc24	; 0xc24 <xQueueGenericSend>
    1cfc:	16 c0       	rjmp	.+44     	; 0x1d2a <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	be 01       	movw	r22, r28
    1d06:	6f 5f       	subi	r22, 0xFF	; 255
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <xTimerQueue>
    1d0e:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <xTimerQueue+0x1>
    1d12:	0e 94 12 06 	call	0xc24	; 0xc24 <xQueueGenericSend>
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	ad 01       	movw	r20, r26
    1d1c:	be 01       	movw	r22, r28
    1d1e:	6f 5f       	subi	r22, 0xFF	; 255
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	cf 01       	movw	r24, r30
    1d24:	29 d8       	rcall	.-4014   	; 0xd78 <xQueueGenericSendFromISR>
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	08 95       	ret

00001d3e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    1d54:	60 db       	rcall	.-2368   	; 0x1416 <xTaskGetTickCount>
    1d56:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    1d58:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <xLastTime.2432>
    1d5c:	90 91 9f 06 	lds	r25, 0x069F	; 0x80069f <xLastTime.2432+0x1>
    1d60:	e8 16       	cp	r14, r24
    1d62:	f9 06       	cpc	r15, r25
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <prvSampleTimeNow+0x2a>
    1d66:	47 c0       	rjmp	.+142    	; 0x1df6 <prvSampleTimeNow+0xb8>
    1d68:	2f c0       	rjmp	.+94     	; 0x1dc8 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1d6a:	05 80       	ldd	r0, Z+5	; 0x05
    1d6c:	f6 81       	ldd	r31, Z+6	; 0x06
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	a0 80       	ld	r10, Z
    1d72:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1d74:	c6 81       	ldd	r28, Z+6	; 0x06
    1d76:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1d78:	8e 01       	movw	r16, r28
    1d7a:	0e 5f       	subi	r16, 0xFE	; 254
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	c8 01       	movw	r24, r16
    1d80:	0e 94 3b 03 	call	0x676	; 0x676 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1d84:	e8 89       	ldd	r30, Y+16	; 0x10
    1d86:	f9 89       	ldd	r31, Y+17	; 0x11
    1d88:	ce 01       	movw	r24, r28
    1d8a:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	82 ff       	sbrs	r24, 2
    1d90:	1b c0       	rjmp	.+54     	; 0x1dc8 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d94:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d96:	8a 0d       	add	r24, r10
    1d98:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    1d9a:	a8 16       	cp	r10, r24
    1d9c:	b9 06       	cpc	r11, r25
    1d9e:	60 f4       	brcc	.+24     	; 0x1db8 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1da0:	9b 83       	std	Y+3, r25	; 0x03
    1da2:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1da4:	d9 87       	std	Y+9, r29	; 0x09
    1da6:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1da8:	b8 01       	movw	r22, r16
    1daa:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <pxCurrentTimerList>
    1dae:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <pxCurrentTimerList+0x1>
    1db2:	0e 94 0a 03 	call	0x614	; 0x614 <vListInsert>
    1db6:	08 c0       	rjmp	.+16     	; 0x1dc8 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1db8:	00 e0       	ldi	r16, 0x00	; 0
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	a5 01       	movw	r20, r10
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	75 df       	rcall	.-278    	; 0x1cb2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1dc8:	e0 91 a6 06 	lds	r30, 0x06A6	; 0x8006a6 <pxCurrentTimerList>
    1dcc:	f0 91 a7 06 	lds	r31, 0x06A7	; 0x8006a7 <pxCurrentTimerList+0x1>
    1dd0:	80 81       	ld	r24, Z
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	ca cf       	rjmp	.-108    	; 0x1d6a <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    1dd6:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxOverflowTimerList>
    1dda:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <pxOverflowTimerList+0x1>
    1dde:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <pxCurrentTimerList+0x1>
    1de2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    1de6:	f0 93 a5 06 	sts	0x06A5, r31	; 0x8006a5 <pxOverflowTimerList+0x1>
    1dea:	e0 93 a4 06 	sts	0x06A4, r30	; 0x8006a4 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	f6 01       	movw	r30, r12
    1df2:	80 83       	st	Z, r24
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    1df6:	f6 01       	movw	r30, r12
    1df8:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1dfa:	f0 92 9f 06 	sts	0x069F, r15	; 0x80069f <xLastTime.2432+0x1>
    1dfe:	e0 92 9e 06 	sts	0x069E, r14	; 0x80069e <xLastTime.2432>

    return xTimeNow;
}
    1e02:	c7 01       	movw	r24, r14
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	bf 90       	pop	r11
    1e16:	af 90       	pop	r10
    1e18:	08 95       	ret

00001e1a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    1e1a:	08 95       	ret

00001e1c <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1e1c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1e1e:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e20:	2f ef       	ldi	r18, 0xFF	; 255
    1e22:	80 e7       	ldi	r24, 0x70	; 112
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	21 50       	subi	r18, 0x01	; 1
    1e28:	80 40       	sbci	r24, 0x00	; 0
    1e2a:	90 40       	sbci	r25, 0x00	; 0
    1e2c:	e1 f7       	brne	.-8      	; 0x1e26 <vApplicationMallocFailedHook+0xa>
    1e2e:	00 c0       	rjmp	.+0      	; 0x1e30 <vApplicationMallocFailedHook+0x14>
    1e30:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    1e32:	1f 9a       	sbi	0x03, 7	; 3
    1e34:	f5 cf       	rjmp	.-22     	; 0x1e20 <vApplicationMallocFailedHook+0x4>

00001e36 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1e36:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1e38:	2f 9a       	sbi	0x05, 7	; 5
    1e3a:	2f ef       	ldi	r18, 0xFF	; 255
    1e3c:	87 ea       	ldi	r24, 0xA7	; 167
    1e3e:	91 e6       	ldi	r25, 0x61	; 97
    1e40:	21 50       	subi	r18, 0x01	; 1
    1e42:	80 40       	sbci	r24, 0x00	; 0
    1e44:	90 40       	sbci	r25, 0x00	; 0
    1e46:	e1 f7       	brne	.-8      	; 0x1e40 <vApplicationStackOverflowHook+0xa>
    1e48:	00 c0       	rjmp	.+0      	; 0x1e4a <vApplicationStackOverflowHook+0x14>
    1e4a:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1e4c:	1f 9a       	sbi	0x03, 7	; 3
    1e4e:	f5 cf       	rjmp	.-22     	; 0x1e3a <vApplicationStackOverflowHook+0x4>

00001e50 <vTimerCallback1>:
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <xSemaphore1>
    1e5e:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <xSemaphore1+0x1>
    1e62:	0c 94 12 06 	jmp	0xc24	; 0xc24 <xQueueGenericSend>
    1e66:	08 95       	ret

00001e68 <get_T_and_H_task>:
    1e68:	c0 e0       	ldi	r28, 0x00	; 0
    1e6a:	d0 e0       	ldi	r29, 0x00	; 0
    1e6c:	0f 2e       	mov	r0, r31
    1e6e:	f1 e4       	ldi	r31, 0x41	; 65
    1e70:	ef 2e       	mov	r14, r31
    1e72:	f2 e0       	ldi	r31, 0x02	; 2
    1e74:	ff 2e       	mov	r15, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	68 ee       	ldi	r22, 0xE8	; 232
    1e7a:	73 e0       	ldi	r23, 0x03	; 3
    1e7c:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <xSemaphore1>
    1e80:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <xSemaphore1+0x1>
    1e84:	3a d8       	rcall	.-3980   	; 0xefa <xQueueSemaphoreTake>
    1e86:	c7 da       	rcall	.-2674   	; 0x1416 <xTaskGetTickCount>
    1e88:	04 e6       	ldi	r16, 0x64	; 100
    1e8a:	10 e0       	ldi	r17, 0x00	; 0
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	ac 01       	movw	r20, r24
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <xTimer1>
    1e98:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <xTimer1+0x1>
    1e9c:	0a df       	rcall	.-492    	; 0x1cb2 <xTimerGenericCommand>
    1e9e:	5c d4       	rcall	.+2232   	; 0x2758 <hih8120Wakeup>
    1ea0:	6f d4       	rcall	.+2270   	; 0x2780 <hih8120Meassure>
    1ea2:	88 23       	and	r24, r24
    1ea4:	21 f0       	breq	.+8      	; 0x1eae <get_T_and_H_task+0x46>
    1ea6:	8b e3       	ldi	r24, 0x3B	; 59
    1ea8:	92 e0       	ldi	r25, 0x02	; 2
    1eaa:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <puts>
    1eae:	8a d4       	rcall	.+2324   	; 0x27c4 <hih8120GetTemperature>
    1eb0:	60 93 dd 06 	sts	0x06DD, r22	; 0x8006dd <temperature>
    1eb4:	70 93 de 06 	sts	0x06DE, r23	; 0x8006de <temperature+0x1>
    1eb8:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <temperature+0x2>
    1ebc:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <temperature+0x3>
    1ec0:	6f d4       	rcall	.+2270   	; 0x27a0 <hih8120GetHumidity>
    1ec2:	26 2f       	mov	r18, r22
    1ec4:	37 2f       	mov	r19, r23
    1ec6:	46 2f       	mov	r20, r22
    1ec8:	57 2f       	mov	r21, r23
    1eca:	68 2f       	mov	r22, r24
    1ecc:	79 2f       	mov	r23, r25
    1ece:	40 93 e1 06 	sts	0x06E1, r20	; 0x8006e1 <humidity>
    1ed2:	50 93 e2 06 	sts	0x06E2, r21	; 0x8006e2 <humidity+0x1>
    1ed6:	60 93 e3 06 	sts	0x06E3, r22	; 0x8006e3 <humidity+0x2>
    1eda:	70 93 e4 06 	sts	0x06E4, r23	; 0x8006e4 <humidity+0x3>
    1ede:	9f 93       	push	r25
    1ee0:	8f 93       	push	r24
    1ee2:	3f 93       	push	r19
    1ee4:	2f 93       	push	r18
    1ee6:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <temperature+0x3>
    1eea:	8f 93       	push	r24
    1eec:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <temperature+0x2>
    1ef0:	8f 93       	push	r24
    1ef2:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <temperature+0x1>
    1ef6:	8f 93       	push	r24
    1ef8:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <temperature>
    1efc:	8f 93       	push	r24
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	ff 92       	push	r15
    1f04:	ef 92       	push	r14
    1f06:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <printf>
    1f0a:	21 96       	adiw	r28, 0x01	; 1
    1f0c:	8d b7       	in	r24, 0x3d	; 61
    1f0e:	9e b7       	in	r25, 0x3e	; 62
    1f10:	0c 96       	adiw	r24, 0x0c	; 12
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	9e bf       	out	0x3e, r25	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	8d bf       	out	0x3d, r24	; 61
    1f1c:	ad cf       	rjmp	.-166    	; 0x1e78 <get_T_and_H_task+0x10>

00001f1e <init_T_H_sens>:
    1f1e:	05 d4       	rcall	.+2058   	; 0x272a <hih8120Create>
    1f20:	81 11       	cpse	r24, r1
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <init_T_H_sens+0xe>
    1f24:	8b ee       	ldi	r24, 0xEB	; 235
    1f26:	93 e0       	ldi	r25, 0x03	; 3
    1f28:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <puts>
    1f2c:	08 95       	ret

00001f2e <main>:
/************************************************************************/
/* Start of main                                                        */
/************************************************************************/
int main(void)
{	
	xTimer1=xTimerCreate("Timer 1 ", (1000/portTICK_PERIOD_MS),pdTRUE,(void*)0,vTimerCallback1);
    1f2e:	08 e2       	ldi	r16, 0x28	; 40
    1f30:	1f e0       	ldi	r17, 0x0F	; 15
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	6e e3       	ldi	r22, 0x3E	; 62
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	85 e1       	ldi	r24, 0x15	; 21
    1f3e:	96 e0       	ldi	r25, 0x06	; 6
    1f40:	82 de       	rcall	.-764    	; 0x1c46 <xTimerCreate>
    1f42:	90 93 e8 06 	sts	0x06E8, r25	; 0x8006e8 <xTimer1+0x1>
    1f46:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <xTimer1>
	xSemaphore1=xSemaphoreCreateMutex();
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueCreateMutex>
    1f50:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <xSemaphore1+0x1>
    1f54:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <xSemaphore1>
	//xTaskCreate(get_CO2_task, "Measure CO2 ", configMINIMAL_STACK_SIZE, NULL, task1_TASK_PRIORITY, &x1Handle);
	xTaskCreate(get_T_and_H_task, "Measure Temp and Humidity", configMINIMAL_STACK_SIZE, NULL, task2_TASK_PRIORITY, &x2Handle);
    1f58:	0f 2e       	mov	r0, r31
    1f5a:	fa eb       	ldi	r31, 0xBA	; 186
    1f5c:	ef 2e       	mov	r14, r31
    1f5e:	f6 e0       	ldi	r31, 0x06	; 6
    1f60:	ff 2e       	mov	r15, r31
    1f62:	f0 2d       	mov	r31, r0
    1f64:	05 e0       	ldi	r16, 0x05	; 5
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 ec       	ldi	r20, 0xC0	; 192
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	6e e1       	ldi	r22, 0x1E	; 30
    1f70:	76 e0       	ldi	r23, 0x06	; 6
    1f72:	84 e3       	ldi	r24, 0x34	; 52
    1f74:	9f e0       	ldi	r25, 0x0F	; 15
    1f76:	0a d9       	rcall	.-3564   	; 0x118c <xTaskCreate>
	//xTaskCreate(get_Light_Intensity_task, "Measure light intensity", configMINIMAL_STACK_SIZE,NULL,task3_TASK_PRIORITY,&x3Handle);
	//xTaskCreate(prepare_telegram_task, "Prepare telegram", configMINIMAL_STACK_SIZE,NULL,task3_TASK_PRIORITY,&x4Handle);
	//xTaskCreate(send_telegram_task, "Send telegram", configMINIMAL_STACK_SIZE,NULL,task3_TASK_PRIORITY,&x5Handle);
	//xTaskCreate(LoRa_Task, "initLORA", configMINIMAL_STACK_SIZE,NULL,task6_TASK_PRIORITY,&x6Handle);
	stdioCreate(0);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	88 d7       	rcall	.+3856   	; 0x2e8c <stdioCreate>
	sei();
    1f7c:	78 94       	sei
	//hal_create(LED_TASK_PRIORITY);
	//lora_driver_create(ser_USART1);
	//lora_handler_create(3);
	//init_CO2_sens();
	init_T_H_sens();
    1f7e:	cf df       	rcall	.-98     	; 0x1f1e <init_T_H_sens>
    1f80:	13 da       	rcall	.-3034   	; 0x13a8 <vTaskStartScheduler>
	//init_Lux_sens();
	//init_LoRa_module();
	
	
	//puts("Program Stared");
	vTaskStartScheduler();
    1f82:	ff cf       	rjmp	.-2      	; 0x1f82 <main+0x54>

00001f84 <vfprintf>:
    1f84:	2f 92       	push	r2
    1f86:	3f 92       	push	r3
    1f88:	4f 92       	push	r4
    1f8a:	5f 92       	push	r5
    1f8c:	6f 92       	push	r6
    1f8e:	7f 92       	push	r7
    1f90:	8f 92       	push	r8
    1f92:	9f 92       	push	r9
    1f94:	af 92       	push	r10
    1f96:	bf 92       	push	r11
    1f98:	cf 92       	push	r12
    1f9a:	df 92       	push	r13
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	60 97       	sbiw	r28, 0x10	; 16
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	7c 01       	movw	r14, r24
    1fba:	1b 01       	movw	r2, r22
    1fbc:	6a 01       	movw	r12, r20
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	17 82       	std	Z+7, r1	; 0x07
    1fc2:	16 82       	std	Z+6, r1	; 0x06
    1fc4:	83 81       	ldd	r24, Z+3	; 0x03
    1fc6:	81 ff       	sbrs	r24, 1
    1fc8:	44 c3       	rjmp	.+1672   	; 0x2652 <__stack+0x453>
    1fca:	9e 01       	movw	r18, r28
    1fcc:	2f 5f       	subi	r18, 0xFF	; 255
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	39 01       	movw	r6, r18
    1fd2:	f7 01       	movw	r30, r14
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	f1 01       	movw	r30, r2
    1fd8:	93 fd       	sbrc	r25, 3
    1fda:	85 91       	lpm	r24, Z+
    1fdc:	93 ff       	sbrs	r25, 3
    1fde:	81 91       	ld	r24, Z+
    1fe0:	1f 01       	movw	r2, r30
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <vfprintf+0x64>
    1fe6:	31 c3       	rjmp	.+1634   	; 0x264a <__stack+0x44b>
    1fe8:	85 32       	cpi	r24, 0x25	; 37
    1fea:	39 f4       	brne	.+14     	; 0x1ffa <vfprintf+0x76>
    1fec:	93 fd       	sbrc	r25, 3
    1fee:	85 91       	lpm	r24, Z+
    1ff0:	93 ff       	sbrs	r25, 3
    1ff2:	81 91       	ld	r24, Z+
    1ff4:	1f 01       	movw	r2, r30
    1ff6:	85 32       	cpi	r24, 0x25	; 37
    1ff8:	39 f4       	brne	.+14     	; 0x2008 <vfprintf+0x84>
    1ffa:	b7 01       	movw	r22, r14
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2002:	56 01       	movw	r10, r12
    2004:	65 01       	movw	r12, r10
    2006:	e5 cf       	rjmp	.-54     	; 0x1fd2 <vfprintf+0x4e>
    2008:	10 e0       	ldi	r17, 0x00	; 0
    200a:	51 2c       	mov	r5, r1
    200c:	91 2c       	mov	r9, r1
    200e:	ff e1       	ldi	r31, 0x1F	; 31
    2010:	f9 15       	cp	r31, r9
    2012:	d8 f0       	brcs	.+54     	; 0x204a <vfprintf+0xc6>
    2014:	8b 32       	cpi	r24, 0x2B	; 43
    2016:	79 f0       	breq	.+30     	; 0x2036 <vfprintf+0xb2>
    2018:	38 f4       	brcc	.+14     	; 0x2028 <vfprintf+0xa4>
    201a:	80 32       	cpi	r24, 0x20	; 32
    201c:	79 f0       	breq	.+30     	; 0x203c <vfprintf+0xb8>
    201e:	83 32       	cpi	r24, 0x23	; 35
    2020:	a1 f4       	brne	.+40     	; 0x204a <vfprintf+0xc6>
    2022:	f9 2d       	mov	r31, r9
    2024:	f0 61       	ori	r31, 0x10	; 16
    2026:	2e c0       	rjmp	.+92     	; 0x2084 <vfprintf+0x100>
    2028:	8d 32       	cpi	r24, 0x2D	; 45
    202a:	61 f0       	breq	.+24     	; 0x2044 <vfprintf+0xc0>
    202c:	80 33       	cpi	r24, 0x30	; 48
    202e:	69 f4       	brne	.+26     	; 0x204a <vfprintf+0xc6>
    2030:	29 2d       	mov	r18, r9
    2032:	21 60       	ori	r18, 0x01	; 1
    2034:	2d c0       	rjmp	.+90     	; 0x2090 <vfprintf+0x10c>
    2036:	39 2d       	mov	r19, r9
    2038:	32 60       	ori	r19, 0x02	; 2
    203a:	93 2e       	mov	r9, r19
    203c:	89 2d       	mov	r24, r9
    203e:	84 60       	ori	r24, 0x04	; 4
    2040:	98 2e       	mov	r9, r24
    2042:	2a c0       	rjmp	.+84     	; 0x2098 <vfprintf+0x114>
    2044:	e9 2d       	mov	r30, r9
    2046:	e8 60       	ori	r30, 0x08	; 8
    2048:	15 c0       	rjmp	.+42     	; 0x2074 <vfprintf+0xf0>
    204a:	97 fc       	sbrc	r9, 7
    204c:	2d c0       	rjmp	.+90     	; 0x20a8 <vfprintf+0x124>
    204e:	20 ed       	ldi	r18, 0xD0	; 208
    2050:	28 0f       	add	r18, r24
    2052:	2a 30       	cpi	r18, 0x0A	; 10
    2054:	88 f4       	brcc	.+34     	; 0x2078 <vfprintf+0xf4>
    2056:	96 fe       	sbrs	r9, 6
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0xe2>
    205a:	3a e0       	ldi	r19, 0x0A	; 10
    205c:	13 9f       	mul	r17, r19
    205e:	20 0d       	add	r18, r0
    2060:	11 24       	eor	r1, r1
    2062:	12 2f       	mov	r17, r18
    2064:	19 c0       	rjmp	.+50     	; 0x2098 <vfprintf+0x114>
    2066:	8a e0       	ldi	r24, 0x0A	; 10
    2068:	58 9e       	mul	r5, r24
    206a:	20 0d       	add	r18, r0
    206c:	11 24       	eor	r1, r1
    206e:	52 2e       	mov	r5, r18
    2070:	e9 2d       	mov	r30, r9
    2072:	e0 62       	ori	r30, 0x20	; 32
    2074:	9e 2e       	mov	r9, r30
    2076:	10 c0       	rjmp	.+32     	; 0x2098 <vfprintf+0x114>
    2078:	8e 32       	cpi	r24, 0x2E	; 46
    207a:	31 f4       	brne	.+12     	; 0x2088 <vfprintf+0x104>
    207c:	96 fc       	sbrc	r9, 6
    207e:	e5 c2       	rjmp	.+1482   	; 0x264a <__stack+0x44b>
    2080:	f9 2d       	mov	r31, r9
    2082:	f0 64       	ori	r31, 0x40	; 64
    2084:	9f 2e       	mov	r9, r31
    2086:	08 c0       	rjmp	.+16     	; 0x2098 <vfprintf+0x114>
    2088:	8c 36       	cpi	r24, 0x6C	; 108
    208a:	21 f4       	brne	.+8      	; 0x2094 <vfprintf+0x110>
    208c:	29 2d       	mov	r18, r9
    208e:	20 68       	ori	r18, 0x80	; 128
    2090:	92 2e       	mov	r9, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <vfprintf+0x114>
    2094:	88 36       	cpi	r24, 0x68	; 104
    2096:	41 f4       	brne	.+16     	; 0x20a8 <vfprintf+0x124>
    2098:	f1 01       	movw	r30, r2
    209a:	93 fd       	sbrc	r25, 3
    209c:	85 91       	lpm	r24, Z+
    209e:	93 ff       	sbrs	r25, 3
    20a0:	81 91       	ld	r24, Z+
    20a2:	1f 01       	movw	r2, r30
    20a4:	81 11       	cpse	r24, r1
    20a6:	b3 cf       	rjmp	.-154    	; 0x200e <vfprintf+0x8a>
    20a8:	9b eb       	ldi	r25, 0xBB	; 187
    20aa:	98 0f       	add	r25, r24
    20ac:	93 30       	cpi	r25, 0x03	; 3
    20ae:	20 f4       	brcc	.+8      	; 0x20b8 <vfprintf+0x134>
    20b0:	99 2d       	mov	r25, r9
    20b2:	90 61       	ori	r25, 0x10	; 16
    20b4:	80 5e       	subi	r24, 0xE0	; 224
    20b6:	07 c0       	rjmp	.+14     	; 0x20c6 <vfprintf+0x142>
    20b8:	9b e9       	ldi	r25, 0x9B	; 155
    20ba:	98 0f       	add	r25, r24
    20bc:	93 30       	cpi	r25, 0x03	; 3
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <vfprintf+0x13e>
    20c0:	66 c1       	rjmp	.+716    	; 0x238e <__stack+0x18f>
    20c2:	99 2d       	mov	r25, r9
    20c4:	9f 7e       	andi	r25, 0xEF	; 239
    20c6:	96 ff       	sbrs	r25, 6
    20c8:	16 e0       	ldi	r17, 0x06	; 6
    20ca:	9f 73       	andi	r25, 0x3F	; 63
    20cc:	99 2e       	mov	r9, r25
    20ce:	85 36       	cpi	r24, 0x65	; 101
    20d0:	19 f4       	brne	.+6      	; 0x20d8 <vfprintf+0x154>
    20d2:	90 64       	ori	r25, 0x40	; 64
    20d4:	99 2e       	mov	r9, r25
    20d6:	08 c0       	rjmp	.+16     	; 0x20e8 <vfprintf+0x164>
    20d8:	86 36       	cpi	r24, 0x66	; 102
    20da:	21 f4       	brne	.+8      	; 0x20e4 <vfprintf+0x160>
    20dc:	39 2f       	mov	r19, r25
    20de:	30 68       	ori	r19, 0x80	; 128
    20e0:	93 2e       	mov	r9, r19
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <vfprintf+0x164>
    20e4:	11 11       	cpse	r17, r1
    20e6:	11 50       	subi	r17, 0x01	; 1
    20e8:	97 fe       	sbrs	r9, 7
    20ea:	07 c0       	rjmp	.+14     	; 0x20fa <vfprintf+0x176>
    20ec:	1c 33       	cpi	r17, 0x3C	; 60
    20ee:	50 f4       	brcc	.+20     	; 0x2104 <vfprintf+0x180>
    20f0:	44 24       	eor	r4, r4
    20f2:	43 94       	inc	r4
    20f4:	41 0e       	add	r4, r17
    20f6:	27 e0       	ldi	r18, 0x07	; 7
    20f8:	0b c0       	rjmp	.+22     	; 0x2110 <vfprintf+0x18c>
    20fa:	18 30       	cpi	r17, 0x08	; 8
    20fc:	38 f0       	brcs	.+14     	; 0x210c <vfprintf+0x188>
    20fe:	27 e0       	ldi	r18, 0x07	; 7
    2100:	17 e0       	ldi	r17, 0x07	; 7
    2102:	05 c0       	rjmp	.+10     	; 0x210e <vfprintf+0x18a>
    2104:	27 e0       	ldi	r18, 0x07	; 7
    2106:	9c e3       	ldi	r25, 0x3C	; 60
    2108:	49 2e       	mov	r4, r25
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <vfprintf+0x18c>
    210c:	21 2f       	mov	r18, r17
    210e:	41 2c       	mov	r4, r1
    2110:	56 01       	movw	r10, r12
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	a8 0e       	add	r10, r24
    2116:	b1 1c       	adc	r11, r1
    2118:	f6 01       	movw	r30, r12
    211a:	60 81       	ld	r22, Z
    211c:	71 81       	ldd	r23, Z+1	; 0x01
    211e:	82 81       	ldd	r24, Z+2	; 0x02
    2120:	93 81       	ldd	r25, Z+3	; 0x03
    2122:	04 2d       	mov	r16, r4
    2124:	a3 01       	movw	r20, r6
    2126:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__ftoa_engine>
    212a:	6c 01       	movw	r12, r24
    212c:	f9 81       	ldd	r31, Y+1	; 0x01
    212e:	fc 87       	std	Y+12, r31	; 0x0c
    2130:	f0 ff       	sbrs	r31, 0
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <vfprintf+0x1b4>
    2134:	f3 ff       	sbrs	r31, 3
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <vfprintf+0x1c0>
    2138:	91 fc       	sbrc	r9, 1
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <vfprintf+0x1c4>
    213c:	92 fe       	sbrs	r9, 2
    213e:	06 c0       	rjmp	.+12     	; 0x214c <vfprintf+0x1c8>
    2140:	00 e2       	ldi	r16, 0x20	; 32
    2142:	05 c0       	rjmp	.+10     	; 0x214e <vfprintf+0x1ca>
    2144:	0d e2       	ldi	r16, 0x2D	; 45
    2146:	03 c0       	rjmp	.+6      	; 0x214e <vfprintf+0x1ca>
    2148:	0b e2       	ldi	r16, 0x2B	; 43
    214a:	01 c0       	rjmp	.+2      	; 0x214e <vfprintf+0x1ca>
    214c:	00 e0       	ldi	r16, 0x00	; 0
    214e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2150:	8c 70       	andi	r24, 0x0C	; 12
    2152:	19 f0       	breq	.+6      	; 0x215a <vfprintf+0x1d6>
    2154:	01 11       	cpse	r16, r1
    2156:	5a c2       	rjmp	.+1204   	; 0x260c <__stack+0x40d>
    2158:	9b c2       	rjmp	.+1334   	; 0x2690 <__stack+0x491>
    215a:	97 fe       	sbrs	r9, 7
    215c:	10 c0       	rjmp	.+32     	; 0x217e <vfprintf+0x1fa>
    215e:	4c 0c       	add	r4, r12
    2160:	fc 85       	ldd	r31, Y+12	; 0x0c
    2162:	f4 ff       	sbrs	r31, 4
    2164:	04 c0       	rjmp	.+8      	; 0x216e <vfprintf+0x1ea>
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	81 33       	cpi	r24, 0x31	; 49
    216a:	09 f4       	brne	.+2      	; 0x216e <vfprintf+0x1ea>
    216c:	4a 94       	dec	r4
    216e:	14 14       	cp	r1, r4
    2170:	74 f5       	brge	.+92     	; 0x21ce <vfprintf+0x24a>
    2172:	28 e0       	ldi	r18, 0x08	; 8
    2174:	24 15       	cp	r18, r4
    2176:	78 f5       	brcc	.+94     	; 0x21d6 <vfprintf+0x252>
    2178:	88 e0       	ldi	r24, 0x08	; 8
    217a:	48 2e       	mov	r4, r24
    217c:	2c c0       	rjmp	.+88     	; 0x21d6 <vfprintf+0x252>
    217e:	96 fc       	sbrc	r9, 6
    2180:	2a c0       	rjmp	.+84     	; 0x21d6 <vfprintf+0x252>
    2182:	81 2f       	mov	r24, r17
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	8c 15       	cp	r24, r12
    2188:	9d 05       	cpc	r25, r13
    218a:	9c f0       	brlt	.+38     	; 0x21b2 <vfprintf+0x22e>
    218c:	3c ef       	ldi	r19, 0xFC	; 252
    218e:	c3 16       	cp	r12, r19
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	d3 06       	cpc	r13, r19
    2194:	74 f0       	brlt	.+28     	; 0x21b2 <vfprintf+0x22e>
    2196:	89 2d       	mov	r24, r9
    2198:	80 68       	ori	r24, 0x80	; 128
    219a:	98 2e       	mov	r9, r24
    219c:	0a c0       	rjmp	.+20     	; 0x21b2 <vfprintf+0x22e>
    219e:	e2 e0       	ldi	r30, 0x02	; 2
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	ec 0f       	add	r30, r28
    21a4:	fd 1f       	adc	r31, r29
    21a6:	e1 0f       	add	r30, r17
    21a8:	f1 1d       	adc	r31, r1
    21aa:	80 81       	ld	r24, Z
    21ac:	80 33       	cpi	r24, 0x30	; 48
    21ae:	19 f4       	brne	.+6      	; 0x21b6 <vfprintf+0x232>
    21b0:	11 50       	subi	r17, 0x01	; 1
    21b2:	11 11       	cpse	r17, r1
    21b4:	f4 cf       	rjmp	.-24     	; 0x219e <vfprintf+0x21a>
    21b6:	97 fe       	sbrs	r9, 7
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <vfprintf+0x252>
    21ba:	44 24       	eor	r4, r4
    21bc:	43 94       	inc	r4
    21be:	41 0e       	add	r4, r17
    21c0:	81 2f       	mov	r24, r17
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	c8 16       	cp	r12, r24
    21c6:	d9 06       	cpc	r13, r25
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <vfprintf+0x250>
    21ca:	1c 19       	sub	r17, r12
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <vfprintf+0x252>
    21ce:	44 24       	eor	r4, r4
    21d0:	43 94       	inc	r4
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <vfprintf+0x252>
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	97 fe       	sbrs	r9, 7
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <vfprintf+0x262>
    21da:	1c 14       	cp	r1, r12
    21dc:	1d 04       	cpc	r1, r13
    21de:	34 f4       	brge	.+12     	; 0x21ec <vfprintf+0x268>
    21e0:	c6 01       	movw	r24, r12
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <vfprintf+0x26c>
    21e6:	85 e0       	ldi	r24, 0x05	; 5
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <vfprintf+0x26c>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	01 11       	cpse	r16, r1
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	11 23       	and	r17, r17
    21f6:	31 f0       	breq	.+12     	; 0x2204 <__stack+0x5>
    21f8:	21 2f       	mov	r18, r17
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	2f 5f       	subi	r18, 0xFF	; 255
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	82 0f       	add	r24, r18
    2202:	93 1f       	adc	r25, r19
    2204:	25 2d       	mov	r18, r5
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	82 17       	cp	r24, r18
    220a:	93 07       	cpc	r25, r19
    220c:	14 f4       	brge	.+4      	; 0x2212 <__stack+0x13>
    220e:	58 1a       	sub	r5, r24
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <__stack+0x15>
    2212:	51 2c       	mov	r5, r1
    2214:	89 2d       	mov	r24, r9
    2216:	89 70       	andi	r24, 0x09	; 9
    2218:	49 f4       	brne	.+18     	; 0x222c <__stack+0x2d>
    221a:	55 20       	and	r5, r5
    221c:	39 f0       	breq	.+14     	; 0x222c <__stack+0x2d>
    221e:	b7 01       	movw	r22, r14
    2220:	80 e2       	ldi	r24, 0x20	; 32
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2228:	5a 94       	dec	r5
    222a:	f7 cf       	rjmp	.-18     	; 0x221a <__stack+0x1b>
    222c:	00 23       	and	r16, r16
    222e:	29 f0       	breq	.+10     	; 0x223a <__stack+0x3b>
    2230:	b7 01       	movw	r22, r14
    2232:	80 2f       	mov	r24, r16
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    223a:	93 fc       	sbrc	r9, 3
    223c:	09 c0       	rjmp	.+18     	; 0x2250 <__stack+0x51>
    223e:	55 20       	and	r5, r5
    2240:	39 f0       	breq	.+14     	; 0x2250 <__stack+0x51>
    2242:	b7 01       	movw	r22, r14
    2244:	80 e3       	ldi	r24, 0x30	; 48
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    224c:	5a 94       	dec	r5
    224e:	f7 cf       	rjmp	.-18     	; 0x223e <__stack+0x3f>
    2250:	97 fe       	sbrs	r9, 7
    2252:	4c c0       	rjmp	.+152    	; 0x22ec <__stack+0xed>
    2254:	46 01       	movw	r8, r12
    2256:	d7 fe       	sbrs	r13, 7
    2258:	02 c0       	rjmp	.+4      	; 0x225e <__stack+0x5f>
    225a:	81 2c       	mov	r8, r1
    225c:	91 2c       	mov	r9, r1
    225e:	c6 01       	movw	r24, r12
    2260:	88 19       	sub	r24, r8
    2262:	99 09       	sbc	r25, r9
    2264:	f3 01       	movw	r30, r6
    2266:	e8 0f       	add	r30, r24
    2268:	f9 1f       	adc	r31, r25
    226a:	fe 87       	std	Y+14, r31	; 0x0e
    226c:	ed 87       	std	Y+13, r30	; 0x0d
    226e:	96 01       	movw	r18, r12
    2270:	24 19       	sub	r18, r4
    2272:	31 09       	sbc	r19, r1
    2274:	38 8b       	std	Y+16, r19	; 0x10
    2276:	2f 87       	std	Y+15, r18	; 0x0f
    2278:	01 2f       	mov	r16, r17
    227a:	10 e0       	ldi	r17, 0x00	; 0
    227c:	11 95       	neg	r17
    227e:	01 95       	neg	r16
    2280:	11 09       	sbc	r17, r1
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	83 16       	cp	r8, r19
    2286:	93 06       	cpc	r9, r19
    2288:	29 f4       	brne	.+10     	; 0x2294 <__stack+0x95>
    228a:	b7 01       	movw	r22, r14
    228c:	8e e2       	ldi	r24, 0x2E	; 46
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2294:	c8 14       	cp	r12, r8
    2296:	d9 04       	cpc	r13, r9
    2298:	4c f0       	brlt	.+18     	; 0x22ac <__stack+0xad>
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
    229c:	98 89       	ldd	r25, Y+16	; 0x10
    229e:	88 15       	cp	r24, r8
    22a0:	99 05       	cpc	r25, r9
    22a2:	24 f4       	brge	.+8      	; 0x22ac <__stack+0xad>
    22a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    22a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    22a8:	81 81       	ldd	r24, Z+1	; 0x01
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <__stack+0xaf>
    22ac:	80 e3       	ldi	r24, 0x30	; 48
    22ae:	f1 e0       	ldi	r31, 0x01	; 1
    22b0:	8f 1a       	sub	r8, r31
    22b2:	91 08       	sbc	r9, r1
    22b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    22b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    22b8:	2f 5f       	subi	r18, 0xFF	; 255
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	3e 87       	std	Y+14, r19	; 0x0e
    22be:	2d 87       	std	Y+13, r18	; 0x0d
    22c0:	80 16       	cp	r8, r16
    22c2:	91 06       	cpc	r9, r17
    22c4:	2c f0       	brlt	.+10     	; 0x22d0 <__stack+0xd1>
    22c6:	b7 01       	movw	r22, r14
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    22ce:	d9 cf       	rjmp	.-78     	; 0x2282 <__stack+0x83>
    22d0:	c8 14       	cp	r12, r8
    22d2:	d9 04       	cpc	r13, r9
    22d4:	41 f4       	brne	.+16     	; 0x22e6 <__stack+0xe7>
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	96 33       	cpi	r25, 0x36	; 54
    22da:	20 f4       	brcc	.+8      	; 0x22e4 <__stack+0xe5>
    22dc:	95 33       	cpi	r25, 0x35	; 53
    22de:	19 f4       	brne	.+6      	; 0x22e6 <__stack+0xe7>
    22e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    22e2:	34 ff       	sbrs	r19, 4
    22e4:	81 e3       	ldi	r24, 0x31	; 49
    22e6:	b7 01       	movw	r22, r14
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	4e c0       	rjmp	.+156    	; 0x2388 <__stack+0x189>
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	81 33       	cpi	r24, 0x31	; 49
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <__stack+0xf9>
    22f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    22f4:	9f 7e       	andi	r25, 0xEF	; 239
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	b7 01       	movw	r22, r14
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2300:	11 11       	cpse	r17, r1
    2302:	05 c0       	rjmp	.+10     	; 0x230e <__stack+0x10f>
    2304:	94 fc       	sbrc	r9, 4
    2306:	18 c0       	rjmp	.+48     	; 0x2338 <__stack+0x139>
    2308:	85 e6       	ldi	r24, 0x65	; 101
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	17 c0       	rjmp	.+46     	; 0x233c <__stack+0x13d>
    230e:	b7 01       	movw	r22, r14
    2310:	8e e2       	ldi	r24, 0x2E	; 46
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2318:	1e 5f       	subi	r17, 0xFE	; 254
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	01 e0       	ldi	r16, 0x01	; 1
    231e:	08 0f       	add	r16, r24
    2320:	f3 01       	movw	r30, r6
    2322:	e8 0f       	add	r30, r24
    2324:	f1 1d       	adc	r31, r1
    2326:	80 81       	ld	r24, Z
    2328:	b7 01       	movw	r22, r14
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2330:	80 2f       	mov	r24, r16
    2332:	01 13       	cpse	r16, r17
    2334:	f3 cf       	rjmp	.-26     	; 0x231c <__stack+0x11d>
    2336:	e6 cf       	rjmp	.-52     	; 0x2304 <__stack+0x105>
    2338:	85 e4       	ldi	r24, 0x45	; 69
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	b7 01       	movw	r22, r14
    233e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2342:	d7 fc       	sbrc	r13, 7
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <__stack+0x153>
    2346:	c1 14       	cp	r12, r1
    2348:	d1 04       	cpc	r13, r1
    234a:	41 f4       	brne	.+16     	; 0x235c <__stack+0x15d>
    234c:	ec 85       	ldd	r30, Y+12	; 0x0c
    234e:	e4 ff       	sbrs	r30, 4
    2350:	05 c0       	rjmp	.+10     	; 0x235c <__stack+0x15d>
    2352:	d1 94       	neg	r13
    2354:	c1 94       	neg	r12
    2356:	d1 08       	sbc	r13, r1
    2358:	8d e2       	ldi	r24, 0x2D	; 45
    235a:	01 c0       	rjmp	.+2      	; 0x235e <__stack+0x15f>
    235c:	8b e2       	ldi	r24, 0x2B	; 43
    235e:	b7 01       	movw	r22, r14
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2366:	80 e3       	ldi	r24, 0x30	; 48
    2368:	2a e0       	ldi	r18, 0x0A	; 10
    236a:	c2 16       	cp	r12, r18
    236c:	d1 04       	cpc	r13, r1
    236e:	2c f0       	brlt	.+10     	; 0x237a <__stack+0x17b>
    2370:	8f 5f       	subi	r24, 0xFF	; 255
    2372:	fa e0       	ldi	r31, 0x0A	; 10
    2374:	cf 1a       	sub	r12, r31
    2376:	d1 08       	sbc	r13, r1
    2378:	f7 cf       	rjmp	.-18     	; 0x2368 <__stack+0x169>
    237a:	b7 01       	movw	r22, r14
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2382:	b7 01       	movw	r22, r14
    2384:	c6 01       	movw	r24, r12
    2386:	c0 96       	adiw	r24, 0x30	; 48
    2388:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    238c:	54 c1       	rjmp	.+680    	; 0x2636 <__stack+0x437>
    238e:	83 36       	cpi	r24, 0x63	; 99
    2390:	31 f0       	breq	.+12     	; 0x239e <__stack+0x19f>
    2392:	83 37       	cpi	r24, 0x73	; 115
    2394:	79 f0       	breq	.+30     	; 0x23b4 <__stack+0x1b5>
    2396:	83 35       	cpi	r24, 0x53	; 83
    2398:	09 f0       	breq	.+2      	; 0x239c <__stack+0x19d>
    239a:	56 c0       	rjmp	.+172    	; 0x2448 <__stack+0x249>
    239c:	20 c0       	rjmp	.+64     	; 0x23de <__stack+0x1df>
    239e:	56 01       	movw	r10, r12
    23a0:	32 e0       	ldi	r19, 0x02	; 2
    23a2:	a3 0e       	add	r10, r19
    23a4:	b1 1c       	adc	r11, r1
    23a6:	f6 01       	movw	r30, r12
    23a8:	80 81       	ld	r24, Z
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	01 e0       	ldi	r16, 0x01	; 1
    23ae:	10 e0       	ldi	r17, 0x00	; 0
    23b0:	63 01       	movw	r12, r6
    23b2:	12 c0       	rjmp	.+36     	; 0x23d8 <__stack+0x1d9>
    23b4:	56 01       	movw	r10, r12
    23b6:	f2 e0       	ldi	r31, 0x02	; 2
    23b8:	af 0e       	add	r10, r31
    23ba:	b1 1c       	adc	r11, r1
    23bc:	f6 01       	movw	r30, r12
    23be:	c0 80       	ld	r12, Z
    23c0:	d1 80       	ldd	r13, Z+1	; 0x01
    23c2:	96 fe       	sbrs	r9, 6
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <__stack+0x1cd>
    23c6:	61 2f       	mov	r22, r17
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <__stack+0x1d1>
    23cc:	6f ef       	ldi	r22, 0xFF	; 255
    23ce:	7f ef       	ldi	r23, 0xFF	; 255
    23d0:	c6 01       	movw	r24, r12
    23d2:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <strnlen>
    23d6:	8c 01       	movw	r16, r24
    23d8:	f9 2d       	mov	r31, r9
    23da:	ff 77       	andi	r31, 0x7F	; 127
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <__stack+0x207>
    23de:	56 01       	movw	r10, r12
    23e0:	22 e0       	ldi	r18, 0x02	; 2
    23e2:	a2 0e       	add	r10, r18
    23e4:	b1 1c       	adc	r11, r1
    23e6:	f6 01       	movw	r30, r12
    23e8:	c0 80       	ld	r12, Z
    23ea:	d1 80       	ldd	r13, Z+1	; 0x01
    23ec:	96 fe       	sbrs	r9, 6
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <__stack+0x1f7>
    23f0:	61 2f       	mov	r22, r17
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <__stack+0x1fb>
    23f6:	6f ef       	ldi	r22, 0xFF	; 255
    23f8:	7f ef       	ldi	r23, 0xFF	; 255
    23fa:	c6 01       	movw	r24, r12
    23fc:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <strnlen_P>
    2400:	8c 01       	movw	r16, r24
    2402:	f9 2d       	mov	r31, r9
    2404:	f0 68       	ori	r31, 0x80	; 128
    2406:	9f 2e       	mov	r9, r31
    2408:	f3 fd       	sbrc	r31, 3
    240a:	1a c0       	rjmp	.+52     	; 0x2440 <__stack+0x241>
    240c:	85 2d       	mov	r24, r5
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	08 17       	cp	r16, r24
    2412:	19 07       	cpc	r17, r25
    2414:	a8 f4       	brcc	.+42     	; 0x2440 <__stack+0x241>
    2416:	b7 01       	movw	r22, r14
    2418:	80 e2       	ldi	r24, 0x20	; 32
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2420:	5a 94       	dec	r5
    2422:	f4 cf       	rjmp	.-24     	; 0x240c <__stack+0x20d>
    2424:	f6 01       	movw	r30, r12
    2426:	97 fc       	sbrc	r9, 7
    2428:	85 91       	lpm	r24, Z+
    242a:	97 fe       	sbrs	r9, 7
    242c:	81 91       	ld	r24, Z+
    242e:	6f 01       	movw	r12, r30
    2430:	b7 01       	movw	r22, r14
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2438:	51 10       	cpse	r5, r1
    243a:	5a 94       	dec	r5
    243c:	01 50       	subi	r16, 0x01	; 1
    243e:	11 09       	sbc	r17, r1
    2440:	01 15       	cp	r16, r1
    2442:	11 05       	cpc	r17, r1
    2444:	79 f7       	brne	.-34     	; 0x2424 <__stack+0x225>
    2446:	f7 c0       	rjmp	.+494    	; 0x2636 <__stack+0x437>
    2448:	84 36       	cpi	r24, 0x64	; 100
    244a:	11 f0       	breq	.+4      	; 0x2450 <__stack+0x251>
    244c:	89 36       	cpi	r24, 0x69	; 105
    244e:	61 f5       	brne	.+88     	; 0x24a8 <__stack+0x2a9>
    2450:	56 01       	movw	r10, r12
    2452:	97 fe       	sbrs	r9, 7
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <__stack+0x269>
    2456:	24 e0       	ldi	r18, 0x04	; 4
    2458:	a2 0e       	add	r10, r18
    245a:	b1 1c       	adc	r11, r1
    245c:	f6 01       	movw	r30, r12
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	0a c0       	rjmp	.+20     	; 0x247c <__stack+0x27d>
    2468:	f2 e0       	ldi	r31, 0x02	; 2
    246a:	af 0e       	add	r10, r31
    246c:	b1 1c       	adc	r11, r1
    246e:	f6 01       	movw	r30, r12
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	07 2e       	mov	r0, r23
    2476:	00 0c       	add	r0, r0
    2478:	88 0b       	sbc	r24, r24
    247a:	99 0b       	sbc	r25, r25
    247c:	f9 2d       	mov	r31, r9
    247e:	ff 76       	andi	r31, 0x6F	; 111
    2480:	9f 2e       	mov	r9, r31
    2482:	97 ff       	sbrs	r25, 7
    2484:	09 c0       	rjmp	.+18     	; 0x2498 <__stack+0x299>
    2486:	90 95       	com	r25
    2488:	80 95       	com	r24
    248a:	70 95       	com	r23
    248c:	61 95       	neg	r22
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	8f 4f       	sbci	r24, 0xFF	; 255
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	f0 68       	ori	r31, 0x80	; 128
    2496:	9f 2e       	mov	r9, r31
    2498:	2a e0       	ldi	r18, 0x0A	; 10
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	a3 01       	movw	r20, r6
    249e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__ultoa_invert>
    24a2:	c8 2e       	mov	r12, r24
    24a4:	c6 18       	sub	r12, r6
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <__stack+0x327>
    24a8:	09 2d       	mov	r16, r9
    24aa:	85 37       	cpi	r24, 0x75	; 117
    24ac:	21 f4       	brne	.+8      	; 0x24b6 <__stack+0x2b7>
    24ae:	0f 7e       	andi	r16, 0xEF	; 239
    24b0:	2a e0       	ldi	r18, 0x0A	; 10
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	1d c0       	rjmp	.+58     	; 0x24f0 <__stack+0x2f1>
    24b6:	09 7f       	andi	r16, 0xF9	; 249
    24b8:	8f 36       	cpi	r24, 0x6F	; 111
    24ba:	91 f0       	breq	.+36     	; 0x24e0 <__stack+0x2e1>
    24bc:	18 f4       	brcc	.+6      	; 0x24c4 <__stack+0x2c5>
    24be:	88 35       	cpi	r24, 0x58	; 88
    24c0:	59 f0       	breq	.+22     	; 0x24d8 <__stack+0x2d9>
    24c2:	c3 c0       	rjmp	.+390    	; 0x264a <__stack+0x44b>
    24c4:	80 37       	cpi	r24, 0x70	; 112
    24c6:	19 f0       	breq	.+6      	; 0x24ce <__stack+0x2cf>
    24c8:	88 37       	cpi	r24, 0x78	; 120
    24ca:	11 f0       	breq	.+4      	; 0x24d0 <__stack+0x2d1>
    24cc:	be c0       	rjmp	.+380    	; 0x264a <__stack+0x44b>
    24ce:	00 61       	ori	r16, 0x10	; 16
    24d0:	04 ff       	sbrs	r16, 4
    24d2:	09 c0       	rjmp	.+18     	; 0x24e6 <__stack+0x2e7>
    24d4:	04 60       	ori	r16, 0x04	; 4
    24d6:	07 c0       	rjmp	.+14     	; 0x24e6 <__stack+0x2e7>
    24d8:	94 fe       	sbrs	r9, 4
    24da:	08 c0       	rjmp	.+16     	; 0x24ec <__stack+0x2ed>
    24dc:	06 60       	ori	r16, 0x06	; 6
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <__stack+0x2ed>
    24e0:	28 e0       	ldi	r18, 0x08	; 8
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <__stack+0x2f1>
    24e6:	20 e1       	ldi	r18, 0x10	; 16
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <__stack+0x2f1>
    24ec:	20 e1       	ldi	r18, 0x10	; 16
    24ee:	32 e0       	ldi	r19, 0x02	; 2
    24f0:	56 01       	movw	r10, r12
    24f2:	07 ff       	sbrs	r16, 7
    24f4:	09 c0       	rjmp	.+18     	; 0x2508 <__stack+0x309>
    24f6:	84 e0       	ldi	r24, 0x04	; 4
    24f8:	a8 0e       	add	r10, r24
    24fa:	b1 1c       	adc	r11, r1
    24fc:	f6 01       	movw	r30, r12
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	08 c0       	rjmp	.+16     	; 0x2518 <__stack+0x319>
    2508:	f2 e0       	ldi	r31, 0x02	; 2
    250a:	af 0e       	add	r10, r31
    250c:	b1 1c       	adc	r11, r1
    250e:	f6 01       	movw	r30, r12
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a3 01       	movw	r20, r6
    251a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__ultoa_invert>
    251e:	c8 2e       	mov	r12, r24
    2520:	c6 18       	sub	r12, r6
    2522:	0f 77       	andi	r16, 0x7F	; 127
    2524:	90 2e       	mov	r9, r16
    2526:	96 fe       	sbrs	r9, 6
    2528:	0b c0       	rjmp	.+22     	; 0x2540 <__stack+0x341>
    252a:	09 2d       	mov	r16, r9
    252c:	0e 7f       	andi	r16, 0xFE	; 254
    252e:	c1 16       	cp	r12, r17
    2530:	50 f4       	brcc	.+20     	; 0x2546 <__stack+0x347>
    2532:	94 fe       	sbrs	r9, 4
    2534:	0a c0       	rjmp	.+20     	; 0x254a <__stack+0x34b>
    2536:	92 fc       	sbrc	r9, 2
    2538:	08 c0       	rjmp	.+16     	; 0x254a <__stack+0x34b>
    253a:	09 2d       	mov	r16, r9
    253c:	0e 7e       	andi	r16, 0xEE	; 238
    253e:	05 c0       	rjmp	.+10     	; 0x254a <__stack+0x34b>
    2540:	dc 2c       	mov	r13, r12
    2542:	09 2d       	mov	r16, r9
    2544:	03 c0       	rjmp	.+6      	; 0x254c <__stack+0x34d>
    2546:	dc 2c       	mov	r13, r12
    2548:	01 c0       	rjmp	.+2      	; 0x254c <__stack+0x34d>
    254a:	d1 2e       	mov	r13, r17
    254c:	04 ff       	sbrs	r16, 4
    254e:	0d c0       	rjmp	.+26     	; 0x256a <__stack+0x36b>
    2550:	fe 01       	movw	r30, r28
    2552:	ec 0d       	add	r30, r12
    2554:	f1 1d       	adc	r31, r1
    2556:	80 81       	ld	r24, Z
    2558:	80 33       	cpi	r24, 0x30	; 48
    255a:	11 f4       	brne	.+4      	; 0x2560 <__stack+0x361>
    255c:	09 7e       	andi	r16, 0xE9	; 233
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <__stack+0x373>
    2560:	02 ff       	sbrs	r16, 2
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <__stack+0x371>
    2564:	d3 94       	inc	r13
    2566:	d3 94       	inc	r13
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <__stack+0x373>
    256a:	80 2f       	mov	r24, r16
    256c:	86 78       	andi	r24, 0x86	; 134
    256e:	09 f0       	breq	.+2      	; 0x2572 <__stack+0x373>
    2570:	d3 94       	inc	r13
    2572:	03 fd       	sbrc	r16, 3
    2574:	11 c0       	rjmp	.+34     	; 0x2598 <__stack+0x399>
    2576:	00 ff       	sbrs	r16, 0
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <__stack+0x387>
    257a:	1c 2d       	mov	r17, r12
    257c:	d5 14       	cp	r13, r5
    257e:	80 f4       	brcc	.+32     	; 0x25a0 <__stack+0x3a1>
    2580:	15 0d       	add	r17, r5
    2582:	1d 19       	sub	r17, r13
    2584:	0d c0       	rjmp	.+26     	; 0x25a0 <__stack+0x3a1>
    2586:	d5 14       	cp	r13, r5
    2588:	58 f4       	brcc	.+22     	; 0x25a0 <__stack+0x3a1>
    258a:	b7 01       	movw	r22, r14
    258c:	80 e2       	ldi	r24, 0x20	; 32
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2594:	d3 94       	inc	r13
    2596:	f7 cf       	rjmp	.-18     	; 0x2586 <__stack+0x387>
    2598:	d5 14       	cp	r13, r5
    259a:	10 f4       	brcc	.+4      	; 0x25a0 <__stack+0x3a1>
    259c:	5d 18       	sub	r5, r13
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <__stack+0x3a3>
    25a0:	51 2c       	mov	r5, r1
    25a2:	04 ff       	sbrs	r16, 4
    25a4:	10 c0       	rjmp	.+32     	; 0x25c6 <__stack+0x3c7>
    25a6:	b7 01       	movw	r22, r14
    25a8:	80 e3       	ldi	r24, 0x30	; 48
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    25b0:	02 ff       	sbrs	r16, 2
    25b2:	17 c0       	rjmp	.+46     	; 0x25e2 <__stack+0x3e3>
    25b4:	01 fd       	sbrc	r16, 1
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <__stack+0x3bf>
    25b8:	88 e7       	ldi	r24, 0x78	; 120
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <__stack+0x3c3>
    25be:	88 e5       	ldi	r24, 0x58	; 88
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	b7 01       	movw	r22, r14
    25c4:	0c c0       	rjmp	.+24     	; 0x25de <__stack+0x3df>
    25c6:	80 2f       	mov	r24, r16
    25c8:	86 78       	andi	r24, 0x86	; 134
    25ca:	59 f0       	breq	.+22     	; 0x25e2 <__stack+0x3e3>
    25cc:	01 ff       	sbrs	r16, 1
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <__stack+0x3d5>
    25d0:	8b e2       	ldi	r24, 0x2B	; 43
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <__stack+0x3d7>
    25d4:	80 e2       	ldi	r24, 0x20	; 32
    25d6:	07 fd       	sbrc	r16, 7
    25d8:	8d e2       	ldi	r24, 0x2D	; 45
    25da:	b7 01       	movw	r22, r14
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    25e2:	c1 16       	cp	r12, r17
    25e4:	38 f4       	brcc	.+14     	; 0x25f4 <__stack+0x3f5>
    25e6:	b7 01       	movw	r22, r14
    25e8:	80 e3       	ldi	r24, 0x30	; 48
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    25f0:	11 50       	subi	r17, 0x01	; 1
    25f2:	f7 cf       	rjmp	.-18     	; 0x25e2 <__stack+0x3e3>
    25f4:	ca 94       	dec	r12
    25f6:	f3 01       	movw	r30, r6
    25f8:	ec 0d       	add	r30, r12
    25fa:	f1 1d       	adc	r31, r1
    25fc:	80 81       	ld	r24, Z
    25fe:	b7 01       	movw	r22, r14
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2606:	c1 10       	cpse	r12, r1
    2608:	f5 cf       	rjmp	.-22     	; 0x25f4 <__stack+0x3f5>
    260a:	15 c0       	rjmp	.+42     	; 0x2636 <__stack+0x437>
    260c:	f4 e0       	ldi	r31, 0x04	; 4
    260e:	f5 15       	cp	r31, r5
    2610:	60 f5       	brcc	.+88     	; 0x266a <__stack+0x46b>
    2612:	84 e0       	ldi	r24, 0x04	; 4
    2614:	58 1a       	sub	r5, r24
    2616:	93 fe       	sbrs	r9, 3
    2618:	1f c0       	rjmp	.+62     	; 0x2658 <__stack+0x459>
    261a:	01 11       	cpse	r16, r1
    261c:	27 c0       	rjmp	.+78     	; 0x266c <__stack+0x46d>
    261e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2620:	23 ff       	sbrs	r18, 3
    2622:	2a c0       	rjmp	.+84     	; 0x2678 <__stack+0x479>
    2624:	0a e9       	ldi	r16, 0x9A	; 154
    2626:	11 e0       	ldi	r17, 0x01	; 1
    2628:	39 2d       	mov	r19, r9
    262a:	30 71       	andi	r19, 0x10	; 16
    262c:	93 2e       	mov	r9, r19
    262e:	f8 01       	movw	r30, r16
    2630:	84 91       	lpm	r24, Z
    2632:	81 11       	cpse	r24, r1
    2634:	24 c0       	rjmp	.+72     	; 0x267e <__stack+0x47f>
    2636:	55 20       	and	r5, r5
    2638:	09 f4       	brne	.+2      	; 0x263c <__stack+0x43d>
    263a:	e4 cc       	rjmp	.-1592   	; 0x2004 <vfprintf+0x80>
    263c:	b7 01       	movw	r22, r14
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2646:	5a 94       	dec	r5
    2648:	f6 cf       	rjmp	.-20     	; 0x2636 <__stack+0x437>
    264a:	f7 01       	movw	r30, r14
    264c:	86 81       	ldd	r24, Z+6	; 0x06
    264e:	97 81       	ldd	r25, Z+7	; 0x07
    2650:	26 c0       	rjmp	.+76     	; 0x269e <__stack+0x49f>
    2652:	8f ef       	ldi	r24, 0xFF	; 255
    2654:	9f ef       	ldi	r25, 0xFF	; 255
    2656:	23 c0       	rjmp	.+70     	; 0x269e <__stack+0x49f>
    2658:	b7 01       	movw	r22, r14
    265a:	80 e2       	ldi	r24, 0x20	; 32
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2662:	5a 94       	dec	r5
    2664:	51 10       	cpse	r5, r1
    2666:	f8 cf       	rjmp	.-16     	; 0x2658 <__stack+0x459>
    2668:	d8 cf       	rjmp	.-80     	; 0x261a <__stack+0x41b>
    266a:	51 2c       	mov	r5, r1
    266c:	b7 01       	movw	r22, r14
    266e:	80 2f       	mov	r24, r16
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    2676:	d3 cf       	rjmp	.-90     	; 0x261e <__stack+0x41f>
    2678:	0e e9       	ldi	r16, 0x9E	; 158
    267a:	11 e0       	ldi	r17, 0x01	; 1
    267c:	d5 cf       	rjmp	.-86     	; 0x2628 <__stack+0x429>
    267e:	91 10       	cpse	r9, r1
    2680:	80 52       	subi	r24, 0x20	; 32
    2682:	b7 01       	movw	r22, r14
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <fputc>
    268a:	0f 5f       	subi	r16, 0xFF	; 255
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	cf cf       	rjmp	.-98     	; 0x262e <__stack+0x42f>
    2690:	23 e0       	ldi	r18, 0x03	; 3
    2692:	25 15       	cp	r18, r5
    2694:	10 f4       	brcc	.+4      	; 0x269a <__stack+0x49b>
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	bd cf       	rjmp	.-134    	; 0x2614 <__stack+0x415>
    269a:	51 2c       	mov	r5, r1
    269c:	c0 cf       	rjmp	.-128    	; 0x261e <__stack+0x41f>
    269e:	60 96       	adiw	r28, 0x10	; 16
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	bf 90       	pop	r11
    26bc:	af 90       	pop	r10
    26be:	9f 90       	pop	r9
    26c0:	8f 90       	pop	r8
    26c2:	7f 90       	pop	r7
    26c4:	6f 90       	pop	r6
    26c6:	5f 90       	pop	r5
    26c8:	4f 90       	pop	r4
    26ca:	3f 90       	pop	r3
    26cc:	2f 90       	pop	r2
    26ce:	08 95       	ret

000026d0 <_hihTwiCallback>:
    26d0:	65 30       	cpi	r22, 0x05	; 5
    26d2:	f1 f4       	brne	.+60     	; 0x2710 <_hihTwiCallback+0x40>
    26d4:	fa 01       	movw	r30, r20
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 73       	andi	r24, 0x3F	; 63
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	98 2f       	mov	r25, r24
    26de:	88 27       	eor	r24, r24
    26e0:	21 81       	ldd	r18, Z+1	; 0x01
    26e2:	82 2b       	or	r24, r18
    26e4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    26e8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	f0 e4       	ldi	r31, 0x40	; 64
    26f0:	8f 9f       	mul	r24, r31
    26f2:	c0 01       	movw	r24, r0
    26f4:	11 24       	eor	r1, r1
    26f6:	fa 01       	movw	r30, r20
    26f8:	23 81       	ldd	r18, Z+3	; 0x03
    26fa:	26 95       	lsr	r18
    26fc:	26 95       	lsr	r18
    26fe:	82 2b       	or	r24, r18
    2700:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2704:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <_measuringIsReady>
    270e:	08 95       	ret
    2710:	64 30       	cpi	r22, 0x04	; 4
    2712:	51 f0       	breq	.+20     	; 0x2728 <_hihTwiCallback+0x58>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e4       	ldi	r25, 0x40	; 64
    2718:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    271c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2720:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2724:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2728:	08 95       	ret

0000272a <hih8120Create>:
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	08 e6       	ldi	r16, 0x68	; 104
    2730:	13 e1       	ldi	r17, 0x13	; 19
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	34 e2       	ldi	r19, 0x24	; 36
    2736:	44 ef       	ldi	r20, 0xF4	; 244
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	87 e2       	ldi	r24, 0x27	; 39
    273e:	e0 d3       	rcall	.+1984   	; 0x2f00 <twiCreate>
    2740:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <_hih8120Handler+0x1>
    2744:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <_hih8120Handler>
    2748:	21 e0       	ldi	r18, 0x01	; 1
    274a:	89 2b       	or	r24, r25
    274c:	09 f0       	breq	.+2      	; 0x2750 <hih8120Create+0x26>
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	82 2f       	mov	r24, r18
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	08 95       	ret

00002758 <hih8120Wakeup>:
    2758:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <_hih8120Handler>
    275c:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <_hih8120Handler+0x1>
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	51 f0       	breq	.+20     	; 0x2778 <hih8120Wakeup+0x20>
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	1b d4       	rcall	.+2102   	; 0x2fa2 <twiTransmit>
    276c:	84 30       	cpi	r24, 0x04	; 4
    276e:	31 f4       	brne	.+12     	; 0x277c <hih8120Wakeup+0x24>
    2770:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <_measuringIsReady>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	08 95       	ret
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	08 95       	ret
    277c:	83 e0       	ldi	r24, 0x03	; 3
    277e:	08 95       	ret

00002780 <hih8120Meassure>:
    2780:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <_hih8120Handler>
    2784:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <_hih8120Handler+0x1>
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	31 f0       	breq	.+12     	; 0x2798 <hih8120Meassure+0x18>
    278c:	64 e0       	ldi	r22, 0x04	; 4
    278e:	54 d4       	rcall	.+2216   	; 0x3038 <twiReceive>
    2790:	85 30       	cpi	r24, 0x05	; 5
    2792:	21 f0       	breq	.+8      	; 0x279c <hih8120Meassure+0x1c>
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	08 95       	ret
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	08 95       	ret
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	08 95       	ret

000027a0 <hih8120GetHumidity>:
    27a0:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    27a4:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	4a d6       	rcall	.+3220   	; 0x3442 <__floatunsisf>
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	48 ec       	ldi	r20, 0xC8	; 200
    27b4:	52 e4       	ldi	r21, 0x42	; 66
    27b6:	d3 d6       	rcall	.+3494   	; 0x355e <__mulsf3>
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	38 ef       	ldi	r19, 0xF8	; 248
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	56 e4       	ldi	r21, 0x46	; 70
    27c0:	ac c5       	rjmp	.+2904   	; 0x331a <__divsf3>
    27c2:	08 95       	ret

000027c4 <hih8120GetTemperature>:
    27c4:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    27c8:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	38 d6       	rcall	.+3184   	; 0x3442 <__floatunsisf>
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	45 e2       	ldi	r20, 0x25	; 37
    27d8:	53 e4       	ldi	r21, 0x43	; 67
    27da:	c1 d6       	rcall	.+3458   	; 0x355e <__mulsf3>
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	38 ef       	ldi	r19, 0xF8	; 248
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	56 e4       	ldi	r21, 0x46	; 70
    27e4:	9a d5       	rcall	.+2868   	; 0x331a <__divsf3>
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	52 e4       	ldi	r21, 0x42	; 66
    27ee:	30 c5       	rjmp	.+2656   	; 0x3250 <__subsf3>
    27f0:	08 95       	ret

000027f2 <serial_new_instance>:
    27f2:	2f 92       	push	r2
    27f4:	3f 92       	push	r3
    27f6:	4f 92       	push	r4
    27f8:	5f 92       	push	r5
    27fa:	6f 92       	push	r6
    27fc:	7f 92       	push	r7
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	cf 92       	push	r12
    2806:	ef 92       	push	r14
    2808:	ff 92       	push	r15
    280a:	0f 93       	push	r16
    280c:	1f 93       	push	r17
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	f8 2e       	mov	r15, r24
    2818:	2a 01       	movw	r4, r20
    281a:	3b 01       	movw	r6, r22
    281c:	88 e0       	ldi	r24, 0x08	; 8
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	45 d7       	rcall	.+3722   	; 0x36ac <malloc>
    2822:	8c 01       	movw	r16, r24
    2824:	8f 2d       	mov	r24, r15
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	fc 01       	movw	r30, r24
    282e:	e1 54       	subi	r30, 0x41	; 65
    2830:	f9 4f       	sbci	r31, 0xF9	; 249
    2832:	11 83       	std	Z+1, r17	; 0x01
    2834:	00 83       	st	Z, r16
    2836:	fc 01       	movw	r30, r24
    2838:	e6 5f       	subi	r30, 0xF6	; 246
    283a:	fd 4f       	sbci	r31, 0xFD	; 253
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	d8 01       	movw	r26, r16
    2842:	8d 93       	st	X+, r24
    2844:	9c 93       	st	X, r25
    2846:	6c 2d       	mov	r22, r12
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	84 e0       	ldi	r24, 0x04	; 4
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	14 d7       	rcall	.+3624   	; 0x3678 <calloc>
    2850:	1c 01       	movw	r2, r24
    2852:	61 e0       	ldi	r22, 0x01	; 1
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	86 e0       	ldi	r24, 0x06	; 6
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e d7       	rcall	.+3612   	; 0x3678 <calloc>
    285c:	7c 01       	movw	r14, r24
    285e:	4c 2d       	mov	r20, r12
    2860:	b1 01       	movw	r22, r2
    2862:	da d4       	rcall	.+2484   	; 0x3218 <fifo_init>
    2864:	f8 01       	movw	r30, r16
    2866:	f5 82       	std	Z+5, r15	; 0x05
    2868:	e4 82       	std	Z+4, r14	; 0x04
    286a:	6a 2d       	mov	r22, r10
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 d7       	rcall	.+3588   	; 0x3678 <calloc>
    2874:	1c 01       	movw	r2, r24
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	86 e0       	ldi	r24, 0x06	; 6
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	fc d6       	rcall	.+3576   	; 0x3678 <calloc>
    2880:	7c 01       	movw	r14, r24
    2882:	4a 2d       	mov	r20, r10
    2884:	b1 01       	movw	r22, r2
    2886:	c8 d4       	rcall	.+2448   	; 0x3218 <fifo_init>
    2888:	d8 01       	movw	r26, r16
    288a:	13 96       	adiw	r26, 0x03	; 3
    288c:	fc 92       	st	X, r15
    288e:	ee 92       	st	-X, r14
    2890:	12 97       	sbiw	r26, 0x02	; 2
    2892:	17 96       	adiw	r26, 0x07	; 7
    2894:	9c 92       	st	X, r9
    2896:	8e 92       	st	-X, r8
    2898:	16 97       	sbiw	r26, 0x06	; 6
    289a:	ff b6       	in	r15, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	ed 91       	ld	r30, X+
    28a0:	fc 91       	ld	r31, X
    28a2:	11 97       	sbiw	r26, 0x01	; 1
    28a4:	36 97       	sbiw	r30, 0x06	; 6
    28a6:	80 81       	ld	r24, Z
    28a8:	82 60       	ori	r24, 0x02	; 2
    28aa:	80 83       	st	Z, r24
    28ac:	8d 90       	ld	r8, X+
    28ae:	9c 90       	ld	r9, X
    28b0:	c3 01       	movw	r24, r6
    28b2:	b2 01       	movw	r22, r4
    28b4:	c6 d5       	rcall	.+2956   	; 0x3442 <__floatunsisf>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	4f d6       	rcall	.+3230   	; 0x355e <__mulsf3>
    28c0:	9b 01       	movw	r18, r22
    28c2:	ac 01       	movw	r20, r24
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	74 e2       	ldi	r23, 0x24	; 36
    28c8:	84 e7       	ldi	r24, 0x74	; 116
    28ca:	9b e4       	ldi	r25, 0x4B	; 75
    28cc:	26 d5       	rcall	.+2636   	; 0x331a <__divsf3>
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	bc d4       	rcall	.+2424   	; 0x3250 <__subsf3>
    28d8:	88 d5       	rcall	.+2832   	; 0x33ea <__fixunssfsi>
    28da:	f4 01       	movw	r30, r8
    28dc:	32 97       	sbiw	r30, 0x02	; 2
    28de:	60 83       	st	Z, r22
    28e0:	d8 01       	movw	r26, r16
    28e2:	ed 91       	ld	r30, X+
    28e4:	fc 91       	ld	r31, X
    28e6:	11 97       	sbiw	r26, 0x01	; 1
    28e8:	35 97       	sbiw	r30, 0x05	; 5
    28ea:	88 e9       	ldi	r24, 0x98	; 152
    28ec:	80 83       	st	Z, r24
    28ee:	ed 91       	ld	r30, X+
    28f0:	fc 91       	ld	r31, X
    28f2:	34 97       	sbiw	r30, 0x04	; 4
    28f4:	86 e0       	ldi	r24, 0x06	; 6
    28f6:	80 83       	st	Z, r24
    28f8:	ff be       	out	0x3f, r15	; 63
    28fa:	c8 01       	movw	r24, r16
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	cf 90       	pop	r12
    290a:	af 90       	pop	r10
    290c:	9f 90       	pop	r9
    290e:	8f 90       	pop	r8
    2910:	7f 90       	pop	r7
    2912:	6f 90       	pop	r6
    2914:	5f 90       	pop	r5
    2916:	4f 90       	pop	r4
    2918:	3f 90       	pop	r3
    291a:	2f 90       	pop	r2
    291c:	08 95       	ret

0000291e <serial_send_byte>:
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	ec 01       	movw	r28, r24
    2924:	ea 81       	ldd	r30, Y+2	; 0x02
    2926:	fb 81       	ldd	r31, Y+3	; 0x03
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	25 81       	ldd	r18, Z+5	; 0x05
    292e:	98 1b       	sub	r25, r24
    2930:	92 23       	and	r25, r18
    2932:	84 81       	ldd	r24, Z+4	; 0x04
    2934:	98 17       	cp	r25, r24
    2936:	a1 f0       	breq	.+40     	; 0x2960 <serial_send_byte+0x42>
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	26 95       	lsr	r18
    293c:	29 23       	and	r18, r25
    293e:	a0 81       	ld	r26, Z
    2940:	b1 81       	ldd	r27, Z+1	; 0x01
    2942:	a2 0f       	add	r26, r18
    2944:	b1 1d       	adc	r27, r1
    2946:	6c 93       	st	X, r22
    2948:	9f 5f       	subi	r25, 0xFF	; 255
    294a:	25 81       	ldd	r18, Z+5	; 0x05
    294c:	92 23       	and	r25, r18
    294e:	93 83       	std	Z+3, r25	; 0x03
    2950:	e8 81       	ld	r30, Y
    2952:	f9 81       	ldd	r31, Y+1	; 0x01
    2954:	35 97       	sbiw	r30, 0x05	; 5
    2956:	80 81       	ld	r24, Z
    2958:	80 62       	ori	r24, 0x20	; 32
    295a:	80 83       	st	Z, r24
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <serial_send_byte+0x44>
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	08 95       	ret

00002968 <serial_get_byte>:
    2968:	dc 01       	movw	r26, r24
    296a:	14 96       	adiw	r26, 0x04	; 4
    296c:	ed 91       	ld	r30, X+
    296e:	fc 91       	ld	r31, X
    2970:	15 97       	sbiw	r26, 0x05	; 5
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	98 17       	cp	r25, r24
    2978:	89 f0       	breq	.+34     	; 0x299c <serial_get_byte+0x34>
    297a:	92 81       	ldd	r25, Z+2	; 0x02
    297c:	85 81       	ldd	r24, Z+5	; 0x05
    297e:	86 95       	lsr	r24
    2980:	89 23       	and	r24, r25
    2982:	a0 81       	ld	r26, Z
    2984:	b1 81       	ldd	r27, Z+1	; 0x01
    2986:	a8 0f       	add	r26, r24
    2988:	b1 1d       	adc	r27, r1
    298a:	8c 91       	ld	r24, X
    298c:	db 01       	movw	r26, r22
    298e:	8c 93       	st	X, r24
    2990:	9f 5f       	subi	r25, 0xFF	; 255
    2992:	85 81       	ldd	r24, Z+5	; 0x05
    2994:	98 23       	and	r25, r24
    2996:	92 83       	std	Z+2, r25	; 0x02
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	08 95       	ret
    299c:	83 e0       	ldi	r24, 0x03	; 3
    299e:	08 95       	ret

000029a0 <__vector_25>:
    29a0:	1f 92       	push	r1
    29a2:	0f 92       	push	r0
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	0f 92       	push	r0
    29a8:	11 24       	eor	r1, r1
    29aa:	0b b6       	in	r0, 0x3b	; 59
    29ac:	0f 92       	push	r0
    29ae:	2f 93       	push	r18
    29b0:	3f 93       	push	r19
    29b2:	4f 93       	push	r20
    29b4:	5f 93       	push	r21
    29b6:	6f 93       	push	r22
    29b8:	7f 93       	push	r23
    29ba:	8f 93       	push	r24
    29bc:	9f 93       	push	r25
    29be:	af 93       	push	r26
    29c0:	bf 93       	push	r27
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	ef 93       	push	r30
    29c8:	ff 93       	push	r31
    29ca:	a0 91 bf 06 	lds	r26, 0x06BF	; 0x8006bf <_ser_handle>
    29ce:	b0 91 c0 06 	lds	r27, 0x06C0	; 0x8006c0 <_ser_handle+0x1>
    29d2:	10 97       	sbiw	r26, 0x00	; 0
    29d4:	11 f1       	breq	.+68     	; 0x2a1a <__vector_25+0x7a>
    29d6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    29da:	14 96       	adiw	r26, 0x04	; 4
    29dc:	ed 91       	ld	r30, X+
    29de:	fc 91       	ld	r31, X
    29e0:	15 97       	sbiw	r26, 0x05	; 5
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	25 81       	ldd	r18, Z+5	; 0x05
    29e8:	98 1b       	sub	r25, r24
    29ea:	92 23       	and	r25, r18
    29ec:	84 81       	ldd	r24, Z+4	; 0x04
    29ee:	98 17       	cp	r25, r24
    29f0:	61 f0       	breq	.+24     	; 0x2a0a <__vector_25+0x6a>
    29f2:	83 81       	ldd	r24, Z+3	; 0x03
    29f4:	26 95       	lsr	r18
    29f6:	28 23       	and	r18, r24
    29f8:	c0 81       	ld	r28, Z
    29fa:	d1 81       	ldd	r29, Z+1	; 0x01
    29fc:	c2 0f       	add	r28, r18
    29fe:	d1 1d       	adc	r29, r1
    2a00:	68 83       	st	Y, r22
    2a02:	8f 5f       	subi	r24, 0xFF	; 255
    2a04:	95 81       	ldd	r25, Z+5	; 0x05
    2a06:	89 23       	and	r24, r25
    2a08:	83 83       	std	Z+3, r24	; 0x03
    2a0a:	16 96       	adiw	r26, 0x06	; 6
    2a0c:	ed 91       	ld	r30, X+
    2a0e:	fc 91       	ld	r31, X
    2a10:	17 97       	sbiw	r26, 0x07	; 7
    2a12:	30 97       	sbiw	r30, 0x00	; 0
    2a14:	11 f0       	breq	.+4      	; 0x2a1a <__vector_25+0x7a>
    2a16:	cd 01       	movw	r24, r26
    2a18:	19 95       	eicall
    2a1a:	ff 91       	pop	r31
    2a1c:	ef 91       	pop	r30
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	bf 91       	pop	r27
    2a24:	af 91       	pop	r26
    2a26:	9f 91       	pop	r25
    2a28:	8f 91       	pop	r24
    2a2a:	7f 91       	pop	r23
    2a2c:	6f 91       	pop	r22
    2a2e:	5f 91       	pop	r21
    2a30:	4f 91       	pop	r20
    2a32:	3f 91       	pop	r19
    2a34:	2f 91       	pop	r18
    2a36:	0f 90       	pop	r0
    2a38:	0b be       	out	0x3b, r0	; 59
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <__vector_26>:
    2a44:	1f 92       	push	r1
    2a46:	0f 92       	push	r0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	0b b6       	in	r0, 0x3b	; 59
    2a50:	0f 92       	push	r0
    2a52:	2f 93       	push	r18
    2a54:	8f 93       	push	r24
    2a56:	9f 93       	push	r25
    2a58:	af 93       	push	r26
    2a5a:	bf 93       	push	r27
    2a5c:	ef 93       	push	r30
    2a5e:	ff 93       	push	r31
    2a60:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <_ser_handle>
    2a64:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <_ser_handle+0x1>
    2a68:	30 97       	sbiw	r30, 0x00	; 0
    2a6a:	b9 f0       	breq	.+46     	; 0x2a9a <__vector_26+0x56>
    2a6c:	02 80       	ldd	r0, Z+2	; 0x02
    2a6e:	f3 81       	ldd	r31, Z+3	; 0x03
    2a70:	e0 2d       	mov	r30, r0
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	82 81       	ldd	r24, Z+2	; 0x02
    2a76:	98 17       	cp	r25, r24
    2a78:	b1 f0       	breq	.+44     	; 0x2aa6 <__vector_26+0x62>
    2a7a:	92 81       	ldd	r25, Z+2	; 0x02
    2a7c:	85 81       	ldd	r24, Z+5	; 0x05
    2a7e:	28 2f       	mov	r18, r24
    2a80:	26 95       	lsr	r18
    2a82:	29 23       	and	r18, r25
    2a84:	a0 81       	ld	r26, Z
    2a86:	b1 81       	ldd	r27, Z+1	; 0x01
    2a88:	a2 0f       	add	r26, r18
    2a8a:	b1 1d       	adc	r27, r1
    2a8c:	2c 91       	ld	r18, X
    2a8e:	9f 5f       	subi	r25, 0xFF	; 255
    2a90:	89 23       	and	r24, r25
    2a92:	82 83       	std	Z+2, r24	; 0x02
    2a94:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2a98:	0b c0       	rjmp	.+22     	; 0x2ab0 <__vector_26+0x6c>
    2a9a:	e1 ec       	ldi	r30, 0xC1	; 193
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 7d       	andi	r24, 0xDF	; 223
    2aa2:	80 83       	st	Z, r24
    2aa4:	05 c0       	rjmp	.+10     	; 0x2ab0 <__vector_26+0x6c>
    2aa6:	e1 ec       	ldi	r30, 0xC1	; 193
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	8f 7d       	andi	r24, 0xDF	; 223
    2aae:	80 83       	st	Z, r24
    2ab0:	ff 91       	pop	r31
    2ab2:	ef 91       	pop	r30
    2ab4:	bf 91       	pop	r27
    2ab6:	af 91       	pop	r26
    2ab8:	9f 91       	pop	r25
    2aba:	8f 91       	pop	r24
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	0b be       	out	0x3b, r0	; 59
    2ac2:	0f 90       	pop	r0
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	0f 90       	pop	r0
    2ac8:	1f 90       	pop	r1
    2aca:	18 95       	reti

00002acc <__vector_36>:
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	0b b6       	in	r0, 0x3b	; 59
    2ad8:	0f 92       	push	r0
    2ada:	2f 93       	push	r18
    2adc:	3f 93       	push	r19
    2ade:	4f 93       	push	r20
    2ae0:	5f 93       	push	r21
    2ae2:	6f 93       	push	r22
    2ae4:	7f 93       	push	r23
    2ae6:	8f 93       	push	r24
    2ae8:	9f 93       	push	r25
    2aea:	af 93       	push	r26
    2aec:	bf 93       	push	r27
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	ef 93       	push	r30
    2af4:	ff 93       	push	r31
    2af6:	a0 91 c1 06 	lds	r26, 0x06C1	; 0x8006c1 <_ser_handle+0x2>
    2afa:	b0 91 c2 06 	lds	r27, 0x06C2	; 0x8006c2 <_ser_handle+0x3>
    2afe:	10 97       	sbiw	r26, 0x00	; 0
    2b00:	11 f1       	breq	.+68     	; 0x2b46 <__vector_36+0x7a>
    2b02:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2b06:	14 96       	adiw	r26, 0x04	; 4
    2b08:	ed 91       	ld	r30, X+
    2b0a:	fc 91       	ld	r31, X
    2b0c:	15 97       	sbiw	r26, 0x05	; 5
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	25 81       	ldd	r18, Z+5	; 0x05
    2b14:	98 1b       	sub	r25, r24
    2b16:	92 23       	and	r25, r18
    2b18:	84 81       	ldd	r24, Z+4	; 0x04
    2b1a:	98 17       	cp	r25, r24
    2b1c:	61 f0       	breq	.+24     	; 0x2b36 <__vector_36+0x6a>
    2b1e:	83 81       	ldd	r24, Z+3	; 0x03
    2b20:	26 95       	lsr	r18
    2b22:	28 23       	and	r18, r24
    2b24:	c0 81       	ld	r28, Z
    2b26:	d1 81       	ldd	r29, Z+1	; 0x01
    2b28:	c2 0f       	add	r28, r18
    2b2a:	d1 1d       	adc	r29, r1
    2b2c:	68 83       	st	Y, r22
    2b2e:	8f 5f       	subi	r24, 0xFF	; 255
    2b30:	95 81       	ldd	r25, Z+5	; 0x05
    2b32:	89 23       	and	r24, r25
    2b34:	83 83       	std	Z+3, r24	; 0x03
    2b36:	16 96       	adiw	r26, 0x06	; 6
    2b38:	ed 91       	ld	r30, X+
    2b3a:	fc 91       	ld	r31, X
    2b3c:	17 97       	sbiw	r26, 0x07	; 7
    2b3e:	30 97       	sbiw	r30, 0x00	; 0
    2b40:	11 f0       	breq	.+4      	; 0x2b46 <__vector_36+0x7a>
    2b42:	cd 01       	movw	r24, r26
    2b44:	19 95       	eicall
    2b46:	ff 91       	pop	r31
    2b48:	ef 91       	pop	r30
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	bf 91       	pop	r27
    2b50:	af 91       	pop	r26
    2b52:	9f 91       	pop	r25
    2b54:	8f 91       	pop	r24
    2b56:	7f 91       	pop	r23
    2b58:	6f 91       	pop	r22
    2b5a:	5f 91       	pop	r21
    2b5c:	4f 91       	pop	r20
    2b5e:	3f 91       	pop	r19
    2b60:	2f 91       	pop	r18
    2b62:	0f 90       	pop	r0
    2b64:	0b be       	out	0x3b, r0	; 59
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <__vector_37>:
    2b70:	1f 92       	push	r1
    2b72:	0f 92       	push	r0
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	0f 92       	push	r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	0b b6       	in	r0, 0x3b	; 59
    2b7c:	0f 92       	push	r0
    2b7e:	2f 93       	push	r18
    2b80:	8f 93       	push	r24
    2b82:	9f 93       	push	r25
    2b84:	af 93       	push	r26
    2b86:	bf 93       	push	r27
    2b88:	ef 93       	push	r30
    2b8a:	ff 93       	push	r31
    2b8c:	e0 91 c1 06 	lds	r30, 0x06C1	; 0x8006c1 <_ser_handle+0x2>
    2b90:	f0 91 c2 06 	lds	r31, 0x06C2	; 0x8006c2 <_ser_handle+0x3>
    2b94:	30 97       	sbiw	r30, 0x00	; 0
    2b96:	b9 f0       	breq	.+46     	; 0x2bc6 <__vector_37+0x56>
    2b98:	02 80       	ldd	r0, Z+2	; 0x02
    2b9a:	f3 81       	ldd	r31, Z+3	; 0x03
    2b9c:	e0 2d       	mov	r30, r0
    2b9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	98 17       	cp	r25, r24
    2ba4:	b1 f0       	breq	.+44     	; 0x2bd2 <__vector_37+0x62>
    2ba6:	92 81       	ldd	r25, Z+2	; 0x02
    2ba8:	85 81       	ldd	r24, Z+5	; 0x05
    2baa:	28 2f       	mov	r18, r24
    2bac:	26 95       	lsr	r18
    2bae:	29 23       	and	r18, r25
    2bb0:	a0 81       	ld	r26, Z
    2bb2:	b1 81       	ldd	r27, Z+1	; 0x01
    2bb4:	a2 0f       	add	r26, r18
    2bb6:	b1 1d       	adc	r27, r1
    2bb8:	2c 91       	ld	r18, X
    2bba:	9f 5f       	subi	r25, 0xFF	; 255
    2bbc:	89 23       	and	r24, r25
    2bbe:	82 83       	std	Z+2, r24	; 0x02
    2bc0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2bc4:	0b c0       	rjmp	.+22     	; 0x2bdc <__vector_37+0x6c>
    2bc6:	e9 ec       	ldi	r30, 0xC9	; 201
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 7d       	andi	r24, 0xDF	; 223
    2bce:	80 83       	st	Z, r24
    2bd0:	05 c0       	rjmp	.+10     	; 0x2bdc <__vector_37+0x6c>
    2bd2:	e9 ec       	ldi	r30, 0xC9	; 201
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	8f 7d       	andi	r24, 0xDF	; 223
    2bda:	80 83       	st	Z, r24
    2bdc:	ff 91       	pop	r31
    2bde:	ef 91       	pop	r30
    2be0:	bf 91       	pop	r27
    2be2:	af 91       	pop	r26
    2be4:	9f 91       	pop	r25
    2be6:	8f 91       	pop	r24
    2be8:	2f 91       	pop	r18
    2bea:	0f 90       	pop	r0
    2bec:	0b be       	out	0x3b, r0	; 59
    2bee:	0f 90       	pop	r0
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	0f 90       	pop	r0
    2bf4:	1f 90       	pop	r1
    2bf6:	18 95       	reti

00002bf8 <__vector_51>:
    2bf8:	1f 92       	push	r1
    2bfa:	0f 92       	push	r0
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	0f 92       	push	r0
    2c00:	11 24       	eor	r1, r1
    2c02:	0b b6       	in	r0, 0x3b	; 59
    2c04:	0f 92       	push	r0
    2c06:	2f 93       	push	r18
    2c08:	3f 93       	push	r19
    2c0a:	4f 93       	push	r20
    2c0c:	5f 93       	push	r21
    2c0e:	6f 93       	push	r22
    2c10:	7f 93       	push	r23
    2c12:	8f 93       	push	r24
    2c14:	9f 93       	push	r25
    2c16:	af 93       	push	r26
    2c18:	bf 93       	push	r27
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	ef 93       	push	r30
    2c20:	ff 93       	push	r31
    2c22:	a0 91 c3 06 	lds	r26, 0x06C3	; 0x8006c3 <_ser_handle+0x4>
    2c26:	b0 91 c4 06 	lds	r27, 0x06C4	; 0x8006c4 <_ser_handle+0x5>
    2c2a:	10 97       	sbiw	r26, 0x00	; 0
    2c2c:	11 f1       	breq	.+68     	; 0x2c72 <__vector_51+0x7a>
    2c2e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2c32:	14 96       	adiw	r26, 0x04	; 4
    2c34:	ed 91       	ld	r30, X+
    2c36:	fc 91       	ld	r31, X
    2c38:	15 97       	sbiw	r26, 0x05	; 5
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	25 81       	ldd	r18, Z+5	; 0x05
    2c40:	98 1b       	sub	r25, r24
    2c42:	92 23       	and	r25, r18
    2c44:	84 81       	ldd	r24, Z+4	; 0x04
    2c46:	98 17       	cp	r25, r24
    2c48:	61 f0       	breq	.+24     	; 0x2c62 <__vector_51+0x6a>
    2c4a:	83 81       	ldd	r24, Z+3	; 0x03
    2c4c:	26 95       	lsr	r18
    2c4e:	28 23       	and	r18, r24
    2c50:	c0 81       	ld	r28, Z
    2c52:	d1 81       	ldd	r29, Z+1	; 0x01
    2c54:	c2 0f       	add	r28, r18
    2c56:	d1 1d       	adc	r29, r1
    2c58:	68 83       	st	Y, r22
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	95 81       	ldd	r25, Z+5	; 0x05
    2c5e:	89 23       	and	r24, r25
    2c60:	83 83       	std	Z+3, r24	; 0x03
    2c62:	16 96       	adiw	r26, 0x06	; 6
    2c64:	ed 91       	ld	r30, X+
    2c66:	fc 91       	ld	r31, X
    2c68:	17 97       	sbiw	r26, 0x07	; 7
    2c6a:	30 97       	sbiw	r30, 0x00	; 0
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <__vector_51+0x7a>
    2c6e:	cd 01       	movw	r24, r26
    2c70:	19 95       	eicall
    2c72:	ff 91       	pop	r31
    2c74:	ef 91       	pop	r30
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	bf 91       	pop	r27
    2c7c:	af 91       	pop	r26
    2c7e:	9f 91       	pop	r25
    2c80:	8f 91       	pop	r24
    2c82:	7f 91       	pop	r23
    2c84:	6f 91       	pop	r22
    2c86:	5f 91       	pop	r21
    2c88:	4f 91       	pop	r20
    2c8a:	3f 91       	pop	r19
    2c8c:	2f 91       	pop	r18
    2c8e:	0f 90       	pop	r0
    2c90:	0b be       	out	0x3b, r0	; 59
    2c92:	0f 90       	pop	r0
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	0f 90       	pop	r0
    2c98:	1f 90       	pop	r1
    2c9a:	18 95       	reti

00002c9c <__vector_52>:
    2c9c:	1f 92       	push	r1
    2c9e:	0f 92       	push	r0
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	0f 92       	push	r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	0b b6       	in	r0, 0x3b	; 59
    2ca8:	0f 92       	push	r0
    2caa:	2f 93       	push	r18
    2cac:	8f 93       	push	r24
    2cae:	9f 93       	push	r25
    2cb0:	af 93       	push	r26
    2cb2:	bf 93       	push	r27
    2cb4:	ef 93       	push	r30
    2cb6:	ff 93       	push	r31
    2cb8:	e0 91 c3 06 	lds	r30, 0x06C3	; 0x8006c3 <_ser_handle+0x4>
    2cbc:	f0 91 c4 06 	lds	r31, 0x06C4	; 0x8006c4 <_ser_handle+0x5>
    2cc0:	30 97       	sbiw	r30, 0x00	; 0
    2cc2:	b9 f0       	breq	.+46     	; 0x2cf2 <__vector_52+0x56>
    2cc4:	02 80       	ldd	r0, Z+2	; 0x02
    2cc6:	f3 81       	ldd	r31, Z+3	; 0x03
    2cc8:	e0 2d       	mov	r30, r0
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	98 17       	cp	r25, r24
    2cd0:	b1 f0       	breq	.+44     	; 0x2cfe <__vector_52+0x62>
    2cd2:	92 81       	ldd	r25, Z+2	; 0x02
    2cd4:	85 81       	ldd	r24, Z+5	; 0x05
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	26 95       	lsr	r18
    2cda:	29 23       	and	r18, r25
    2cdc:	a0 81       	ld	r26, Z
    2cde:	b1 81       	ldd	r27, Z+1	; 0x01
    2ce0:	a2 0f       	add	r26, r18
    2ce2:	b1 1d       	adc	r27, r1
    2ce4:	2c 91       	ld	r18, X
    2ce6:	9f 5f       	subi	r25, 0xFF	; 255
    2ce8:	89 23       	and	r24, r25
    2cea:	82 83       	std	Z+2, r24	; 0x02
    2cec:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2cf0:	0b c0       	rjmp	.+22     	; 0x2d08 <__vector_52+0x6c>
    2cf2:	e1 ed       	ldi	r30, 0xD1	; 209
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8f 7d       	andi	r24, 0xDF	; 223
    2cfa:	80 83       	st	Z, r24
    2cfc:	05 c0       	rjmp	.+10     	; 0x2d08 <__vector_52+0x6c>
    2cfe:	e1 ed       	ldi	r30, 0xD1	; 209
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8f 7d       	andi	r24, 0xDF	; 223
    2d06:	80 83       	st	Z, r24
    2d08:	ff 91       	pop	r31
    2d0a:	ef 91       	pop	r30
    2d0c:	bf 91       	pop	r27
    2d0e:	af 91       	pop	r26
    2d10:	9f 91       	pop	r25
    2d12:	8f 91       	pop	r24
    2d14:	2f 91       	pop	r18
    2d16:	0f 90       	pop	r0
    2d18:	0b be       	out	0x3b, r0	; 59
    2d1a:	0f 90       	pop	r0
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	0f 90       	pop	r0
    2d20:	1f 90       	pop	r1
    2d22:	18 95       	reti

00002d24 <__vector_54>:
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	0b b6       	in	r0, 0x3b	; 59
    2d30:	0f 92       	push	r0
    2d32:	2f 93       	push	r18
    2d34:	3f 93       	push	r19
    2d36:	4f 93       	push	r20
    2d38:	5f 93       	push	r21
    2d3a:	6f 93       	push	r22
    2d3c:	7f 93       	push	r23
    2d3e:	8f 93       	push	r24
    2d40:	9f 93       	push	r25
    2d42:	af 93       	push	r26
    2d44:	bf 93       	push	r27
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	ef 93       	push	r30
    2d4c:	ff 93       	push	r31
    2d4e:	a0 91 c5 06 	lds	r26, 0x06C5	; 0x8006c5 <_ser_handle+0x6>
    2d52:	b0 91 c6 06 	lds	r27, 0x06C6	; 0x8006c6 <_ser_handle+0x7>
    2d56:	10 97       	sbiw	r26, 0x00	; 0
    2d58:	11 f1       	breq	.+68     	; 0x2d9e <__vector_54+0x7a>
    2d5a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2d5e:	14 96       	adiw	r26, 0x04	; 4
    2d60:	ed 91       	ld	r30, X+
    2d62:	fc 91       	ld	r31, X
    2d64:	15 97       	sbiw	r26, 0x05	; 5
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	82 81       	ldd	r24, Z+2	; 0x02
    2d6a:	25 81       	ldd	r18, Z+5	; 0x05
    2d6c:	98 1b       	sub	r25, r24
    2d6e:	92 23       	and	r25, r18
    2d70:	84 81       	ldd	r24, Z+4	; 0x04
    2d72:	98 17       	cp	r25, r24
    2d74:	61 f0       	breq	.+24     	; 0x2d8e <__vector_54+0x6a>
    2d76:	83 81       	ldd	r24, Z+3	; 0x03
    2d78:	26 95       	lsr	r18
    2d7a:	28 23       	and	r18, r24
    2d7c:	c0 81       	ld	r28, Z
    2d7e:	d1 81       	ldd	r29, Z+1	; 0x01
    2d80:	c2 0f       	add	r28, r18
    2d82:	d1 1d       	adc	r29, r1
    2d84:	68 83       	st	Y, r22
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	95 81       	ldd	r25, Z+5	; 0x05
    2d8a:	89 23       	and	r24, r25
    2d8c:	83 83       	std	Z+3, r24	; 0x03
    2d8e:	16 96       	adiw	r26, 0x06	; 6
    2d90:	ed 91       	ld	r30, X+
    2d92:	fc 91       	ld	r31, X
    2d94:	17 97       	sbiw	r26, 0x07	; 7
    2d96:	30 97       	sbiw	r30, 0x00	; 0
    2d98:	11 f0       	breq	.+4      	; 0x2d9e <__vector_54+0x7a>
    2d9a:	cd 01       	movw	r24, r26
    2d9c:	19 95       	eicall
    2d9e:	ff 91       	pop	r31
    2da0:	ef 91       	pop	r30
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	7f 91       	pop	r23
    2db0:	6f 91       	pop	r22
    2db2:	5f 91       	pop	r21
    2db4:	4f 91       	pop	r20
    2db6:	3f 91       	pop	r19
    2db8:	2f 91       	pop	r18
    2dba:	0f 90       	pop	r0
    2dbc:	0b be       	out	0x3b, r0	; 59
    2dbe:	0f 90       	pop	r0
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	0f 90       	pop	r0
    2dc4:	1f 90       	pop	r1
    2dc6:	18 95       	reti

00002dc8 <__vector_55>:
    2dc8:	1f 92       	push	r1
    2dca:	0f 92       	push	r0
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	0f 92       	push	r0
    2dd0:	11 24       	eor	r1, r1
    2dd2:	0b b6       	in	r0, 0x3b	; 59
    2dd4:	0f 92       	push	r0
    2dd6:	2f 93       	push	r18
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31
    2de4:	e0 91 c5 06 	lds	r30, 0x06C5	; 0x8006c5 <_ser_handle+0x6>
    2de8:	f0 91 c6 06 	lds	r31, 0x06C6	; 0x8006c6 <_ser_handle+0x7>
    2dec:	30 97       	sbiw	r30, 0x00	; 0
    2dee:	b9 f0       	breq	.+46     	; 0x2e1e <__vector_55+0x56>
    2df0:	02 80       	ldd	r0, Z+2	; 0x02
    2df2:	f3 81       	ldd	r31, Z+3	; 0x03
    2df4:	e0 2d       	mov	r30, r0
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	98 17       	cp	r25, r24
    2dfc:	b1 f0       	breq	.+44     	; 0x2e2a <__vector_55+0x62>
    2dfe:	92 81       	ldd	r25, Z+2	; 0x02
    2e00:	85 81       	ldd	r24, Z+5	; 0x05
    2e02:	28 2f       	mov	r18, r24
    2e04:	26 95       	lsr	r18
    2e06:	29 23       	and	r18, r25
    2e08:	a0 81       	ld	r26, Z
    2e0a:	b1 81       	ldd	r27, Z+1	; 0x01
    2e0c:	a2 0f       	add	r26, r18
    2e0e:	b1 1d       	adc	r27, r1
    2e10:	2c 91       	ld	r18, X
    2e12:	9f 5f       	subi	r25, 0xFF	; 255
    2e14:	89 23       	and	r24, r25
    2e16:	82 83       	std	Z+2, r24	; 0x02
    2e18:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2e1c:	0b c0       	rjmp	.+22     	; 0x2e34 <__vector_55+0x6c>
    2e1e:	e1 e3       	ldi	r30, 0x31	; 49
    2e20:	f1 e0       	ldi	r31, 0x01	; 1
    2e22:	80 81       	ld	r24, Z
    2e24:	8f 7d       	andi	r24, 0xDF	; 223
    2e26:	80 83       	st	Z, r24
    2e28:	05 c0       	rjmp	.+10     	; 0x2e34 <__vector_55+0x6c>
    2e2a:	e1 e3       	ldi	r30, 0x31	; 49
    2e2c:	f1 e0       	ldi	r31, 0x01	; 1
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7d       	andi	r24, 0xDF	; 223
    2e32:	80 83       	st	Z, r24
    2e34:	ff 91       	pop	r31
    2e36:	ef 91       	pop	r30
    2e38:	bf 91       	pop	r27
    2e3a:	af 91       	pop	r26
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	2f 91       	pop	r18
    2e42:	0f 90       	pop	r0
    2e44:	0b be       	out	0x3b, r0	; 59
    2e46:	0f 90       	pop	r0
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	0f 90       	pop	r0
    2e4c:	1f 90       	pop	r1
    2e4e:	18 95       	reti

00002e50 <usart_getchar>:
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	1f 92       	push	r1
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	be 01       	movw	r22, r28
    2e5c:	6f 5f       	subi	r22, 0xFF	; 255
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <_com_serial_instance>
    2e64:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <_com_serial_instance+0x1>
    2e68:	7f dd       	rcall	.-1282   	; 0x2968 <serial_get_byte>
    2e6a:	81 11       	cpse	r24, r1
    2e6c:	f6 cf       	rjmp	.-20     	; 0x2e5a <usart_getchar+0xa>
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0f 90       	pop	r0
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	08 95       	ret

00002e7a <usart_putchar>:
    2e7a:	68 2f       	mov	r22, r24
    2e7c:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <_com_serial_instance>
    2e80:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <_com_serial_instance+0x1>
    2e84:	4c dd       	rcall	.-1384   	; 0x291e <serial_send_byte>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	08 95       	ret

00002e8c <stdioCreate>:
    2e8c:	8f 92       	push	r8
    2e8e:	9f 92       	push	r9
    2e90:	af 92       	push	r10
    2e92:	cf 92       	push	r12
    2e94:	ef 92       	push	r14
    2e96:	0f 93       	push	r16
    2e98:	81 2c       	mov	r8, r1
    2e9a:	91 2c       	mov	r9, r1
    2e9c:	68 94       	set
    2e9e:	aa 24       	eor	r10, r10
    2ea0:	a7 f8       	bld	r10, 7
    2ea2:	68 94       	set
    2ea4:	cc 24       	eor	r12, r12
    2ea6:	c7 f8       	bld	r12, 7
    2ea8:	e1 2c       	mov	r14, r1
    2eaa:	00 e0       	ldi	r16, 0x00	; 0
    2eac:	23 e0       	ldi	r18, 0x03	; 3
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	51 ee       	ldi	r21, 0xE1	; 225
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	9d dc       	rcall	.-1734   	; 0x27f2 <serial_new_instance>
    2eb8:	90 93 c8 06 	sts	0x06C8, r25	; 0x8006c8 <_com_serial_instance+0x1>
    2ebc:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <_com_serial_instance>
    2ec0:	ef ee       	ldi	r30, 0xEF	; 239
    2ec2:	f6 e0       	ldi	r31, 0x06	; 6
    2ec4:	82 e1       	ldi	r24, 0x12	; 18
    2ec6:	92 e0       	ldi	r25, 0x02	; 2
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	93 83       	std	Z+3, r25	; 0x03
    2ece:	82 83       	std	Z+2, r24	; 0x02
    2ed0:	0f 91       	pop	r16
    2ed2:	ef 90       	pop	r14
    2ed4:	cf 90       	pop	r12
    2ed6:	af 90       	pop	r10
    2ed8:	9f 90       	pop	r9
    2eda:	8f 90       	pop	r8
    2edc:	08 95       	ret

00002ede <_initTwiInterface>:
    2ede:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_twiIsInitiated>
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	0c c0       	rjmp	.+24     	; 0x2efe <_initTwiInterface+0x20>
    2ee6:	8c e0       	ldi	r24, 0x0C	; 12
    2ee8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2eec:	8f ef       	ldi	r24, 0xFF	; 255
    2eee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ef2:	84 e0       	ldi	r24, 0x04	; 4
    2ef4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <_twiIsInitiated>
    2efe:	08 95       	ret

00002f00 <twiCreate>:
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	a8 2e       	mov	r10, r24
    2f16:	b6 2e       	mov	r11, r22
    2f18:	69 01       	movw	r12, r18
    2f1a:	7a 01       	movw	r14, r20
    2f1c:	84 e0       	ldi	r24, 0x04	; 4
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	c5 d3       	rcall	.+1930   	; 0x36ac <malloc>
    2f22:	ec 01       	movw	r28, r24
    2f24:	89 2b       	or	r24, r25
    2f26:	61 f1       	breq	.+88     	; 0x2f80 <twiCreate+0x80>
    2f28:	a8 82       	st	Y, r10
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	b8 12       	cpse	r11, r24
    2f2e:	12 c0       	rjmp	.+36     	; 0x2f54 <twiCreate+0x54>
    2f30:	c7 01       	movw	r24, r14
    2f32:	b6 01       	movw	r22, r12
    2f34:	20 ea       	ldi	r18, 0xA0	; 160
    2f36:	36 e8       	ldi	r19, 0x86	; 134
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	73 d3       	rcall	.+1766   	; 0x3624 <__udivmodsi4>
    2f3e:	da 01       	movw	r26, r20
    2f40:	c9 01       	movw	r24, r18
    2f42:	40 97       	sbiw	r24, 0x10	; 16
    2f44:	a1 09       	sbc	r26, r1
    2f46:	b1 09       	sbc	r27, r1
    2f48:	b6 95       	lsr	r27
    2f4a:	a7 95       	ror	r26
    2f4c:	97 95       	ror	r25
    2f4e:	87 95       	ror	r24
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	11 c0       	rjmp	.+34     	; 0x2f76 <twiCreate+0x76>
    2f54:	c7 01       	movw	r24, r14
    2f56:	b6 01       	movw	r22, r12
    2f58:	20 e8       	ldi	r18, 0x80	; 128
    2f5a:	3a e1       	ldi	r19, 0x1A	; 26
    2f5c:	46 e0       	ldi	r20, 0x06	; 6
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	61 d3       	rcall	.+1730   	; 0x3624 <__udivmodsi4>
    2f62:	da 01       	movw	r26, r20
    2f64:	c9 01       	movw	r24, r18
    2f66:	40 97       	sbiw	r24, 0x10	; 16
    2f68:	a1 09       	sbc	r26, r1
    2f6a:	b1 09       	sbc	r27, r1
    2f6c:	b6 95       	lsr	r27
    2f6e:	a7 95       	ror	r26
    2f70:	97 95       	ror	r25
    2f72:	87 95       	ror	r24
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	1b 83       	std	Y+3, r17	; 0x03
    2f78:	0a 83       	std	Y+2, r16	; 0x02
    2f7a:	8c 2f       	mov	r24, r28
    2f7c:	9d 2f       	mov	r25, r29
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <twiCreate+0x84>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	cf 90       	pop	r12
    2f94:	bf 90       	pop	r11
    2f96:	af 90       	pop	r10
    2f98:	08 95       	ret

00002f9a <twiIsBusy>:
    2f9a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2f9e:	81 70       	andi	r24, 0x01	; 1
    2fa0:	08 95       	ret

00002fa2 <twiTransmit>:
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	c9 f1       	breq	.+114    	; 0x3022 <twiTransmit+0x80>
    2fb0:	4a 30       	cpi	r20, 0x0A	; 10
    2fb2:	c8 f5       	brcc	.+114    	; 0x3026 <twiTransmit+0x84>
    2fb4:	f4 2e       	mov	r15, r20
    2fb6:	8b 01       	movw	r16, r22
    2fb8:	ec 01       	movw	r28, r24
    2fba:	ef df       	rcall	.-34     	; 0x2f9a <twiIsBusy>
    2fbc:	81 11       	cpse	r24, r1
    2fbe:	35 c0       	rjmp	.+106    	; 0x302a <twiTransmit+0x88>
    2fc0:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_twiCurrentHandler>
    2fc4:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <_twiCurrentHandler+0x1>
    2fc8:	c8 17       	cp	r28, r24
    2fca:	d9 07       	cpc	r29, r25
    2fcc:	41 f0       	breq	.+16     	; 0x2fde <twiTransmit+0x3c>
    2fce:	87 df       	rcall	.-242    	; 0x2ede <_initTwiInterface>
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2fd6:	d0 93 cb 06 	sts	0x06CB, r29	; 0x8006cb <_twiCurrentHandler+0x1>
    2fda:	c0 93 ca 06 	sts	0x06CA, r28	; 0x8006ca <_twiCurrentHandler>
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	8f 0d       	add	r24, r15
    2fe2:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <_twiMessageLen>
    2fe6:	88 81       	ld	r24, Y
    2fe8:	88 0f       	add	r24, r24
    2fea:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <_twiMessageBuffer>
    2fee:	ff 20       	and	r15, r15
    2ff0:	81 f0       	breq	.+32     	; 0x3012 <twiTransmit+0x70>
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	ae ec       	ldi	r26, 0xCE	; 206
    2ff6:	b6 e0       	ldi	r27, 0x06	; 6
    2ff8:	4f ef       	ldi	r20, 0xFF	; 255
    2ffa:	4f 0d       	add	r20, r15
    2ffc:	64 2f       	mov	r22, r20
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	6f 5f       	subi	r22, 0xFF	; 255
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	60 0f       	add	r22, r16
    3006:	71 1f       	adc	r23, r17
    3008:	81 91       	ld	r24, Z+
    300a:	8d 93       	st	X+, r24
    300c:	e6 17       	cp	r30, r22
    300e:	f7 07       	cpc	r31, r23
    3010:	d9 f7       	brne	.-10     	; 0x3008 <twiTransmit+0x66>
    3012:	88 ef       	ldi	r24, 0xF8	; 248
    3014:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3018:	85 ea       	ldi	r24, 0xA5	; 165
    301a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	05 c0       	rjmp	.+10     	; 0x302c <twiTransmit+0x8a>
    3022:	86 e0       	ldi	r24, 0x06	; 6
    3024:	03 c0       	rjmp	.+6      	; 0x302c <twiTransmit+0x8a>
    3026:	87 e0       	ldi	r24, 0x07	; 7
    3028:	01 c0       	rjmp	.+2      	; 0x302c <twiTransmit+0x8a>
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	08 95       	ret

00003038 <twiReceive>:
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	29 f1       	breq	.+74     	; 0x308c <twiReceive+0x54>
    3042:	6b 30       	cpi	r22, 0x0B	; 11
    3044:	28 f5       	brcc	.+74     	; 0x3090 <twiReceive+0x58>
    3046:	16 2f       	mov	r17, r22
    3048:	ec 01       	movw	r28, r24
    304a:	a7 df       	rcall	.-178    	; 0x2f9a <twiIsBusy>
    304c:	81 11       	cpse	r24, r1
    304e:	22 c0       	rjmp	.+68     	; 0x3094 <twiReceive+0x5c>
    3050:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_twiCurrentHandler>
    3054:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <_twiCurrentHandler+0x1>
    3058:	c8 17       	cp	r28, r24
    305a:	d9 07       	cpc	r29, r25
    305c:	41 f0       	breq	.+16     	; 0x306e <twiReceive+0x36>
    305e:	3f df       	rcall	.-386    	; 0x2ede <_initTwiInterface>
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3066:	d0 93 cb 06 	sts	0x06CB, r29	; 0x8006cb <_twiCurrentHandler+0x1>
    306a:	c0 93 ca 06 	sts	0x06CA, r28	; 0x8006ca <_twiCurrentHandler>
    306e:	10 93 cc 06 	sts	0x06CC, r17	; 0x8006cc <_twiMessageLen>
    3072:	88 81       	ld	r24, Y
    3074:	88 0f       	add	r24, r24
    3076:	81 60       	ori	r24, 0x01	; 1
    3078:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <_twiMessageBuffer>
    307c:	88 ef       	ldi	r24, 0xF8	; 248
    307e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3082:	85 ea       	ldi	r24, 0xA5	; 165
    3084:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	05 c0       	rjmp	.+10     	; 0x3096 <twiReceive+0x5e>
    308c:	86 e0       	ldi	r24, 0x06	; 6
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <twiReceive+0x5e>
    3090:	87 e0       	ldi	r24, 0x07	; 7
    3092:	01 c0       	rjmp	.+2      	; 0x3096 <twiReceive+0x5e>
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	08 95       	ret

0000309e <__vector_39>:
    309e:	1f 92       	push	r1
    30a0:	0f 92       	push	r0
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	0f 92       	push	r0
    30a6:	11 24       	eor	r1, r1
    30a8:	0b b6       	in	r0, 0x3b	; 59
    30aa:	0f 92       	push	r0
    30ac:	2f 93       	push	r18
    30ae:	3f 93       	push	r19
    30b0:	4f 93       	push	r20
    30b2:	5f 93       	push	r21
    30b4:	6f 93       	push	r22
    30b6:	7f 93       	push	r23
    30b8:	8f 93       	push	r24
    30ba:	9f 93       	push	r25
    30bc:	af 93       	push	r26
    30be:	bf 93       	push	r27
    30c0:	ef 93       	push	r30
    30c2:	ff 93       	push	r31
    30c4:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    30c8:	8e 2f       	mov	r24, r30
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	fc 01       	movw	r30, r24
    30ce:	38 97       	sbiw	r30, 0x08	; 8
    30d0:	e1 35       	cpi	r30, 0x51	; 81
    30d2:	f1 05       	cpc	r31, r1
    30d4:	08 f0       	brcs	.+2      	; 0x30d8 <__vector_39+0x3a>
    30d6:	75 c0       	rjmp	.+234    	; 0x31c2 <__vector_39+0x124>
    30d8:	88 27       	eor	r24, r24
    30da:	e4 58       	subi	r30, 0x84	; 132
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	8f 4f       	sbci	r24, 0xFF	; 255
    30e0:	c3 c2       	rjmp	.+1414   	; 0x3668 <__tablejump2__>
    30e2:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <_index.1885>
    30e6:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <_index.1885>
    30ea:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <_twiMessageLen>
    30ee:	e8 17       	cp	r30, r24
    30f0:	70 f4       	brcc	.+28     	; 0x310e <__vector_39+0x70>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	8e 0f       	add	r24, r30
    30f6:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <_index.1885>
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	e3 53       	subi	r30, 0x33	; 51
    30fe:	f9 4f       	sbci	r31, 0xF9	; 249
    3100:	80 81       	ld	r24, Z
    3102:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3106:	85 e8       	ldi	r24, 0x85	; 133
    3108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    310c:	72 c0       	rjmp	.+228    	; 0x31f2 <__vector_39+0x154>
    310e:	84 e9       	ldi	r24, 0x94	; 148
    3110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3114:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_twiCurrentHandler>
    3118:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <_twiCurrentHandler+0x1>
    311c:	dc 01       	movw	r26, r24
    311e:	12 96       	adiw	r26, 0x02	; 2
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	13 97       	sbiw	r26, 0x03	; 3
    3126:	30 97       	sbiw	r30, 0x00	; 0
    3128:	09 f4       	brne	.+2      	; 0x312c <__vector_39+0x8e>
    312a:	63 c0       	rjmp	.+198    	; 0x31f2 <__vector_39+0x154>
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	40 e0       	ldi	r20, 0x00	; 0
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	64 e0       	ldi	r22, 0x04	; 4
    3134:	19 95       	eicall
    3136:	5d c0       	rjmp	.+186    	; 0x31f2 <__vector_39+0x154>
    3138:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <_index.1885>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	8e 0f       	add	r24, r30
    3140:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <_index.1885>
    3144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	e3 53       	subi	r30, 0x33	; 51
    314c:	f9 4f       	sbci	r31, 0xF9	; 249
    314e:	80 83       	st	Z, r24
    3150:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3154:	80 34       	cpi	r24, 0x40	; 64
    3156:	11 f4       	brne	.+4      	; 0x315c <__vector_39+0xbe>
    3158:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <_index.1885>
    315c:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <_index.1885>
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <_twiMessageLen>
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	28 17       	cp	r18, r24
    316c:	39 07       	cpc	r19, r25
    316e:	24 f4       	brge	.+8      	; 0x3178 <__vector_39+0xda>
    3170:	85 ec       	ldi	r24, 0xC5	; 197
    3172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3176:	3d c0       	rjmp	.+122    	; 0x31f2 <__vector_39+0x154>
    3178:	85 e8       	ldi	r24, 0x85	; 133
    317a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    317e:	39 c0       	rjmp	.+114    	; 0x31f2 <__vector_39+0x154>
    3180:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3184:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <_index.1885>
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	e3 53       	subi	r30, 0x33	; 51
    318c:	f9 4f       	sbci	r31, 0xF9	; 249
    318e:	80 83       	st	Z, r24
    3190:	84 e9       	ldi	r24, 0x94	; 148
    3192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3196:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_twiCurrentHandler>
    319a:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <_twiCurrentHandler+0x1>
    319e:	dc 01       	movw	r26, r24
    31a0:	12 96       	adiw	r26, 0x02	; 2
    31a2:	ed 91       	ld	r30, X+
    31a4:	fc 91       	ld	r31, X
    31a6:	13 97       	sbiw	r26, 0x03	; 3
    31a8:	30 97       	sbiw	r30, 0x00	; 0
    31aa:	19 f1       	breq	.+70     	; 0x31f2 <__vector_39+0x154>
    31ac:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <_twiMessageLen>
    31b0:	4d ec       	ldi	r20, 0xCD	; 205
    31b2:	56 e0       	ldi	r21, 0x06	; 6
    31b4:	65 e0       	ldi	r22, 0x05	; 5
    31b6:	19 95       	eicall
    31b8:	1c c0       	rjmp	.+56     	; 0x31f2 <__vector_39+0x154>
    31ba:	85 ea       	ldi	r24, 0xA5	; 165
    31bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    31c0:	18 c0       	rjmp	.+48     	; 0x31f2 <__vector_39+0x154>
    31c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    31c6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    31ca:	84 e0       	ldi	r24, 0x04	; 4
    31cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    31d0:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_twiCurrentHandler>
    31d4:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <_twiCurrentHandler+0x1>
    31d8:	dc 01       	movw	r26, r24
    31da:	12 96       	adiw	r26, 0x02	; 2
    31dc:	ed 91       	ld	r30, X+
    31de:	fc 91       	ld	r31, X
    31e0:	13 97       	sbiw	r26, 0x03	; 3
    31e2:	30 97       	sbiw	r30, 0x00	; 0
    31e4:	31 f0       	breq	.+12     	; 0x31f2 <__vector_39+0x154>
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    31f0:	19 95       	eicall
    31f2:	ff 91       	pop	r31
    31f4:	ef 91       	pop	r30
    31f6:	bf 91       	pop	r27
    31f8:	af 91       	pop	r26
    31fa:	9f 91       	pop	r25
    31fc:	8f 91       	pop	r24
    31fe:	7f 91       	pop	r23
    3200:	6f 91       	pop	r22
    3202:	5f 91       	pop	r21
    3204:	4f 91       	pop	r20
    3206:	3f 91       	pop	r19
    3208:	2f 91       	pop	r18
    320a:	0f 90       	pop	r0
    320c:	0b be       	out	0x3b, r0	; 59
    320e:	0f 90       	pop	r0
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	0f 90       	pop	r0
    3214:	1f 90       	pop	r1
    3216:	18 95       	reti

00003218 <fifo_init>:
    3218:	fc 01       	movw	r30, r24
    321a:	41 11       	cpse	r20, r1
    321c:	01 c0       	rjmp	.+2      	; 0x3220 <fifo_init+0x8>
    321e:	67 d3       	rcall	.+1742   	; 0x38ee <abort>
    3220:	84 2f       	mov	r24, r20
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	9c 01       	movw	r18, r24
    3226:	21 50       	subi	r18, 0x01	; 1
    3228:	31 09       	sbc	r19, r1
    322a:	82 23       	and	r24, r18
    322c:	93 23       	and	r25, r19
    322e:	89 2b       	or	r24, r25
    3230:	09 f0       	breq	.+2      	; 0x3234 <fifo_init+0x1c>
    3232:	5d d3       	rcall	.+1722   	; 0x38ee <abort>
    3234:	41 38       	cpi	r20, 0x81	; 129
    3236:	08 f0       	brcs	.+2      	; 0x323a <fifo_init+0x22>
    3238:	5a d3       	rcall	.+1716   	; 0x38ee <abort>
    323a:	12 82       	std	Z+2, r1	; 0x02
    323c:	13 82       	std	Z+3, r1	; 0x03
    323e:	44 83       	std	Z+4, r20	; 0x04
    3240:	44 0f       	add	r20, r20
    3242:	41 50       	subi	r20, 0x01	; 1
    3244:	45 83       	std	Z+5, r20	; 0x05
    3246:	71 83       	std	Z+1, r23	; 0x01
    3248:	60 83       	st	Z, r22
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	08 95       	ret

00003250 <__subsf3>:
    3250:	50 58       	subi	r21, 0x80	; 128

00003252 <__addsf3>:
    3252:	bb 27       	eor	r27, r27
    3254:	aa 27       	eor	r26, r26
    3256:	0e d0       	rcall	.+28     	; 0x3274 <__addsf3x>
    3258:	48 c1       	rjmp	.+656    	; 0x34ea <__fp_round>
    325a:	39 d1       	rcall	.+626    	; 0x34ce <__fp_pscA>
    325c:	30 f0       	brcs	.+12     	; 0x326a <__addsf3+0x18>
    325e:	3e d1       	rcall	.+636    	; 0x34dc <__fp_pscB>
    3260:	20 f0       	brcs	.+8      	; 0x326a <__addsf3+0x18>
    3262:	31 f4       	brne	.+12     	; 0x3270 <__addsf3+0x1e>
    3264:	9f 3f       	cpi	r25, 0xFF	; 255
    3266:	11 f4       	brne	.+4      	; 0x326c <__addsf3+0x1a>
    3268:	1e f4       	brtc	.+6      	; 0x3270 <__addsf3+0x1e>
    326a:	2e c1       	rjmp	.+604    	; 0x34c8 <__fp_nan>
    326c:	0e f4       	brtc	.+2      	; 0x3270 <__addsf3+0x1e>
    326e:	e0 95       	com	r30
    3270:	e7 fb       	bst	r30, 7
    3272:	24 c1       	rjmp	.+584    	; 0x34bc <__fp_inf>

00003274 <__addsf3x>:
    3274:	e9 2f       	mov	r30, r25
    3276:	4a d1       	rcall	.+660    	; 0x350c <__fp_split3>
    3278:	80 f3       	brcs	.-32     	; 0x325a <__addsf3+0x8>
    327a:	ba 17       	cp	r27, r26
    327c:	62 07       	cpc	r22, r18
    327e:	73 07       	cpc	r23, r19
    3280:	84 07       	cpc	r24, r20
    3282:	95 07       	cpc	r25, r21
    3284:	18 f0       	brcs	.+6      	; 0x328c <__addsf3x+0x18>
    3286:	71 f4       	brne	.+28     	; 0x32a4 <__addsf3x+0x30>
    3288:	9e f5       	brtc	.+102    	; 0x32f0 <__addsf3x+0x7c>
    328a:	62 c1       	rjmp	.+708    	; 0x3550 <__fp_zero>
    328c:	0e f4       	brtc	.+2      	; 0x3290 <__addsf3x+0x1c>
    328e:	e0 95       	com	r30
    3290:	0b 2e       	mov	r0, r27
    3292:	ba 2f       	mov	r27, r26
    3294:	a0 2d       	mov	r26, r0
    3296:	0b 01       	movw	r0, r22
    3298:	b9 01       	movw	r22, r18
    329a:	90 01       	movw	r18, r0
    329c:	0c 01       	movw	r0, r24
    329e:	ca 01       	movw	r24, r20
    32a0:	a0 01       	movw	r20, r0
    32a2:	11 24       	eor	r1, r1
    32a4:	ff 27       	eor	r31, r31
    32a6:	59 1b       	sub	r21, r25
    32a8:	99 f0       	breq	.+38     	; 0x32d0 <__addsf3x+0x5c>
    32aa:	59 3f       	cpi	r21, 0xF9	; 249
    32ac:	50 f4       	brcc	.+20     	; 0x32c2 <__addsf3x+0x4e>
    32ae:	50 3e       	cpi	r21, 0xE0	; 224
    32b0:	68 f1       	brcs	.+90     	; 0x330c <__addsf3x+0x98>
    32b2:	1a 16       	cp	r1, r26
    32b4:	f0 40       	sbci	r31, 0x00	; 0
    32b6:	a2 2f       	mov	r26, r18
    32b8:	23 2f       	mov	r18, r19
    32ba:	34 2f       	mov	r19, r20
    32bc:	44 27       	eor	r20, r20
    32be:	58 5f       	subi	r21, 0xF8	; 248
    32c0:	f3 cf       	rjmp	.-26     	; 0x32a8 <__addsf3x+0x34>
    32c2:	46 95       	lsr	r20
    32c4:	37 95       	ror	r19
    32c6:	27 95       	ror	r18
    32c8:	a7 95       	ror	r26
    32ca:	f0 40       	sbci	r31, 0x00	; 0
    32cc:	53 95       	inc	r21
    32ce:	c9 f7       	brne	.-14     	; 0x32c2 <__addsf3x+0x4e>
    32d0:	7e f4       	brtc	.+30     	; 0x32f0 <__addsf3x+0x7c>
    32d2:	1f 16       	cp	r1, r31
    32d4:	ba 0b       	sbc	r27, r26
    32d6:	62 0b       	sbc	r22, r18
    32d8:	73 0b       	sbc	r23, r19
    32da:	84 0b       	sbc	r24, r20
    32dc:	ba f0       	brmi	.+46     	; 0x330c <__addsf3x+0x98>
    32de:	91 50       	subi	r25, 0x01	; 1
    32e0:	a1 f0       	breq	.+40     	; 0x330a <__addsf3x+0x96>
    32e2:	ff 0f       	add	r31, r31
    32e4:	bb 1f       	adc	r27, r27
    32e6:	66 1f       	adc	r22, r22
    32e8:	77 1f       	adc	r23, r23
    32ea:	88 1f       	adc	r24, r24
    32ec:	c2 f7       	brpl	.-16     	; 0x32de <__addsf3x+0x6a>
    32ee:	0e c0       	rjmp	.+28     	; 0x330c <__addsf3x+0x98>
    32f0:	ba 0f       	add	r27, r26
    32f2:	62 1f       	adc	r22, r18
    32f4:	73 1f       	adc	r23, r19
    32f6:	84 1f       	adc	r24, r20
    32f8:	48 f4       	brcc	.+18     	; 0x330c <__addsf3x+0x98>
    32fa:	87 95       	ror	r24
    32fc:	77 95       	ror	r23
    32fe:	67 95       	ror	r22
    3300:	b7 95       	ror	r27
    3302:	f7 95       	ror	r31
    3304:	9e 3f       	cpi	r25, 0xFE	; 254
    3306:	08 f0       	brcs	.+2      	; 0x330a <__addsf3x+0x96>
    3308:	b3 cf       	rjmp	.-154    	; 0x3270 <__addsf3+0x1e>
    330a:	93 95       	inc	r25
    330c:	88 0f       	add	r24, r24
    330e:	08 f0       	brcs	.+2      	; 0x3312 <__addsf3x+0x9e>
    3310:	99 27       	eor	r25, r25
    3312:	ee 0f       	add	r30, r30
    3314:	97 95       	ror	r25
    3316:	87 95       	ror	r24
    3318:	08 95       	ret

0000331a <__divsf3>:
    331a:	0c d0       	rcall	.+24     	; 0x3334 <__divsf3x>
    331c:	e6 c0       	rjmp	.+460    	; 0x34ea <__fp_round>
    331e:	de d0       	rcall	.+444    	; 0x34dc <__fp_pscB>
    3320:	40 f0       	brcs	.+16     	; 0x3332 <__divsf3+0x18>
    3322:	d5 d0       	rcall	.+426    	; 0x34ce <__fp_pscA>
    3324:	30 f0       	brcs	.+12     	; 0x3332 <__divsf3+0x18>
    3326:	21 f4       	brne	.+8      	; 0x3330 <__divsf3+0x16>
    3328:	5f 3f       	cpi	r21, 0xFF	; 255
    332a:	19 f0       	breq	.+6      	; 0x3332 <__divsf3+0x18>
    332c:	c7 c0       	rjmp	.+398    	; 0x34bc <__fp_inf>
    332e:	51 11       	cpse	r21, r1
    3330:	10 c1       	rjmp	.+544    	; 0x3552 <__fp_szero>
    3332:	ca c0       	rjmp	.+404    	; 0x34c8 <__fp_nan>

00003334 <__divsf3x>:
    3334:	eb d0       	rcall	.+470    	; 0x350c <__fp_split3>
    3336:	98 f3       	brcs	.-26     	; 0x331e <__divsf3+0x4>

00003338 <__divsf3_pse>:
    3338:	99 23       	and	r25, r25
    333a:	c9 f3       	breq	.-14     	; 0x332e <__divsf3+0x14>
    333c:	55 23       	and	r21, r21
    333e:	b1 f3       	breq	.-20     	; 0x332c <__divsf3+0x12>
    3340:	95 1b       	sub	r25, r21
    3342:	55 0b       	sbc	r21, r21
    3344:	bb 27       	eor	r27, r27
    3346:	aa 27       	eor	r26, r26
    3348:	62 17       	cp	r22, r18
    334a:	73 07       	cpc	r23, r19
    334c:	84 07       	cpc	r24, r20
    334e:	38 f0       	brcs	.+14     	; 0x335e <__divsf3_pse+0x26>
    3350:	9f 5f       	subi	r25, 0xFF	; 255
    3352:	5f 4f       	sbci	r21, 0xFF	; 255
    3354:	22 0f       	add	r18, r18
    3356:	33 1f       	adc	r19, r19
    3358:	44 1f       	adc	r20, r20
    335a:	aa 1f       	adc	r26, r26
    335c:	a9 f3       	breq	.-22     	; 0x3348 <__divsf3_pse+0x10>
    335e:	33 d0       	rcall	.+102    	; 0x33c6 <__divsf3_pse+0x8e>
    3360:	0e 2e       	mov	r0, r30
    3362:	3a f0       	brmi	.+14     	; 0x3372 <__divsf3_pse+0x3a>
    3364:	e0 e8       	ldi	r30, 0x80	; 128
    3366:	30 d0       	rcall	.+96     	; 0x33c8 <__divsf3_pse+0x90>
    3368:	91 50       	subi	r25, 0x01	; 1
    336a:	50 40       	sbci	r21, 0x00	; 0
    336c:	e6 95       	lsr	r30
    336e:	00 1c       	adc	r0, r0
    3370:	ca f7       	brpl	.-14     	; 0x3364 <__divsf3_pse+0x2c>
    3372:	29 d0       	rcall	.+82     	; 0x33c6 <__divsf3_pse+0x8e>
    3374:	fe 2f       	mov	r31, r30
    3376:	27 d0       	rcall	.+78     	; 0x33c6 <__divsf3_pse+0x8e>
    3378:	66 0f       	add	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	bb 1f       	adc	r27, r27
    3380:	26 17       	cp	r18, r22
    3382:	37 07       	cpc	r19, r23
    3384:	48 07       	cpc	r20, r24
    3386:	ab 07       	cpc	r26, r27
    3388:	b0 e8       	ldi	r27, 0x80	; 128
    338a:	09 f0       	breq	.+2      	; 0x338e <__divsf3_pse+0x56>
    338c:	bb 0b       	sbc	r27, r27
    338e:	80 2d       	mov	r24, r0
    3390:	bf 01       	movw	r22, r30
    3392:	ff 27       	eor	r31, r31
    3394:	93 58       	subi	r25, 0x83	; 131
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	2a f0       	brmi	.+10     	; 0x33a4 <__divsf3_pse+0x6c>
    339a:	9e 3f       	cpi	r25, 0xFE	; 254
    339c:	51 05       	cpc	r21, r1
    339e:	68 f0       	brcs	.+26     	; 0x33ba <__divsf3_pse+0x82>
    33a0:	8d c0       	rjmp	.+282    	; 0x34bc <__fp_inf>
    33a2:	d7 c0       	rjmp	.+430    	; 0x3552 <__fp_szero>
    33a4:	5f 3f       	cpi	r21, 0xFF	; 255
    33a6:	ec f3       	brlt	.-6      	; 0x33a2 <__divsf3_pse+0x6a>
    33a8:	98 3e       	cpi	r25, 0xE8	; 232
    33aa:	dc f3       	brlt	.-10     	; 0x33a2 <__divsf3_pse+0x6a>
    33ac:	86 95       	lsr	r24
    33ae:	77 95       	ror	r23
    33b0:	67 95       	ror	r22
    33b2:	b7 95       	ror	r27
    33b4:	f7 95       	ror	r31
    33b6:	9f 5f       	subi	r25, 0xFF	; 255
    33b8:	c9 f7       	brne	.-14     	; 0x33ac <__divsf3_pse+0x74>
    33ba:	88 0f       	add	r24, r24
    33bc:	91 1d       	adc	r25, r1
    33be:	96 95       	lsr	r25
    33c0:	87 95       	ror	r24
    33c2:	97 f9       	bld	r25, 7
    33c4:	08 95       	ret
    33c6:	e1 e0       	ldi	r30, 0x01	; 1
    33c8:	66 0f       	add	r22, r22
    33ca:	77 1f       	adc	r23, r23
    33cc:	88 1f       	adc	r24, r24
    33ce:	bb 1f       	adc	r27, r27
    33d0:	62 17       	cp	r22, r18
    33d2:	73 07       	cpc	r23, r19
    33d4:	84 07       	cpc	r24, r20
    33d6:	ba 07       	cpc	r27, r26
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <__divsf3_pse+0xaa>
    33da:	62 1b       	sub	r22, r18
    33dc:	73 0b       	sbc	r23, r19
    33de:	84 0b       	sbc	r24, r20
    33e0:	ba 0b       	sbc	r27, r26
    33e2:	ee 1f       	adc	r30, r30
    33e4:	88 f7       	brcc	.-30     	; 0x33c8 <__divsf3_pse+0x90>
    33e6:	e0 95       	com	r30
    33e8:	08 95       	ret

000033ea <__fixunssfsi>:
    33ea:	98 d0       	rcall	.+304    	; 0x351c <__fp_splitA>
    33ec:	88 f0       	brcs	.+34     	; 0x3410 <__fixunssfsi+0x26>
    33ee:	9f 57       	subi	r25, 0x7F	; 127
    33f0:	90 f0       	brcs	.+36     	; 0x3416 <__fixunssfsi+0x2c>
    33f2:	b9 2f       	mov	r27, r25
    33f4:	99 27       	eor	r25, r25
    33f6:	b7 51       	subi	r27, 0x17	; 23
    33f8:	a0 f0       	brcs	.+40     	; 0x3422 <__fixunssfsi+0x38>
    33fa:	d1 f0       	breq	.+52     	; 0x3430 <__fixunssfsi+0x46>
    33fc:	66 0f       	add	r22, r22
    33fe:	77 1f       	adc	r23, r23
    3400:	88 1f       	adc	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	1a f0       	brmi	.+6      	; 0x340c <__fixunssfsi+0x22>
    3406:	ba 95       	dec	r27
    3408:	c9 f7       	brne	.-14     	; 0x33fc <__fixunssfsi+0x12>
    340a:	12 c0       	rjmp	.+36     	; 0x3430 <__fixunssfsi+0x46>
    340c:	b1 30       	cpi	r27, 0x01	; 1
    340e:	81 f0       	breq	.+32     	; 0x3430 <__fixunssfsi+0x46>
    3410:	9f d0       	rcall	.+318    	; 0x3550 <__fp_zero>
    3412:	b1 e0       	ldi	r27, 0x01	; 1
    3414:	08 95       	ret
    3416:	9c c0       	rjmp	.+312    	; 0x3550 <__fp_zero>
    3418:	67 2f       	mov	r22, r23
    341a:	78 2f       	mov	r23, r24
    341c:	88 27       	eor	r24, r24
    341e:	b8 5f       	subi	r27, 0xF8	; 248
    3420:	39 f0       	breq	.+14     	; 0x3430 <__fixunssfsi+0x46>
    3422:	b9 3f       	cpi	r27, 0xF9	; 249
    3424:	cc f3       	brlt	.-14     	; 0x3418 <__fixunssfsi+0x2e>
    3426:	86 95       	lsr	r24
    3428:	77 95       	ror	r23
    342a:	67 95       	ror	r22
    342c:	b3 95       	inc	r27
    342e:	d9 f7       	brne	.-10     	; 0x3426 <__fixunssfsi+0x3c>
    3430:	3e f4       	brtc	.+14     	; 0x3440 <__fixunssfsi+0x56>
    3432:	90 95       	com	r25
    3434:	80 95       	com	r24
    3436:	70 95       	com	r23
    3438:	61 95       	neg	r22
    343a:	7f 4f       	sbci	r23, 0xFF	; 255
    343c:	8f 4f       	sbci	r24, 0xFF	; 255
    343e:	9f 4f       	sbci	r25, 0xFF	; 255
    3440:	08 95       	ret

00003442 <__floatunsisf>:
    3442:	e8 94       	clt
    3444:	09 c0       	rjmp	.+18     	; 0x3458 <__floatsisf+0x12>

00003446 <__floatsisf>:
    3446:	97 fb       	bst	r25, 7
    3448:	3e f4       	brtc	.+14     	; 0x3458 <__floatsisf+0x12>
    344a:	90 95       	com	r25
    344c:	80 95       	com	r24
    344e:	70 95       	com	r23
    3450:	61 95       	neg	r22
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	8f 4f       	sbci	r24, 0xFF	; 255
    3456:	9f 4f       	sbci	r25, 0xFF	; 255
    3458:	99 23       	and	r25, r25
    345a:	a9 f0       	breq	.+42     	; 0x3486 <__floatsisf+0x40>
    345c:	f9 2f       	mov	r31, r25
    345e:	96 e9       	ldi	r25, 0x96	; 150
    3460:	bb 27       	eor	r27, r27
    3462:	93 95       	inc	r25
    3464:	f6 95       	lsr	r31
    3466:	87 95       	ror	r24
    3468:	77 95       	ror	r23
    346a:	67 95       	ror	r22
    346c:	b7 95       	ror	r27
    346e:	f1 11       	cpse	r31, r1
    3470:	f8 cf       	rjmp	.-16     	; 0x3462 <__floatsisf+0x1c>
    3472:	fa f4       	brpl	.+62     	; 0x34b2 <__floatsisf+0x6c>
    3474:	bb 0f       	add	r27, r27
    3476:	11 f4       	brne	.+4      	; 0x347c <__floatsisf+0x36>
    3478:	60 ff       	sbrs	r22, 0
    347a:	1b c0       	rjmp	.+54     	; 0x34b2 <__floatsisf+0x6c>
    347c:	6f 5f       	subi	r22, 0xFF	; 255
    347e:	7f 4f       	sbci	r23, 0xFF	; 255
    3480:	8f 4f       	sbci	r24, 0xFF	; 255
    3482:	9f 4f       	sbci	r25, 0xFF	; 255
    3484:	16 c0       	rjmp	.+44     	; 0x34b2 <__floatsisf+0x6c>
    3486:	88 23       	and	r24, r24
    3488:	11 f0       	breq	.+4      	; 0x348e <__floatsisf+0x48>
    348a:	96 e9       	ldi	r25, 0x96	; 150
    348c:	11 c0       	rjmp	.+34     	; 0x34b0 <__floatsisf+0x6a>
    348e:	77 23       	and	r23, r23
    3490:	21 f0       	breq	.+8      	; 0x349a <__floatsisf+0x54>
    3492:	9e e8       	ldi	r25, 0x8E	; 142
    3494:	87 2f       	mov	r24, r23
    3496:	76 2f       	mov	r23, r22
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <__floatsisf+0x5e>
    349a:	66 23       	and	r22, r22
    349c:	71 f0       	breq	.+28     	; 0x34ba <__floatsisf+0x74>
    349e:	96 e8       	ldi	r25, 0x86	; 134
    34a0:	86 2f       	mov	r24, r22
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	2a f0       	brmi	.+10     	; 0x34b2 <__floatsisf+0x6c>
    34a8:	9a 95       	dec	r25
    34aa:	66 0f       	add	r22, r22
    34ac:	77 1f       	adc	r23, r23
    34ae:	88 1f       	adc	r24, r24
    34b0:	da f7       	brpl	.-10     	; 0x34a8 <__floatsisf+0x62>
    34b2:	88 0f       	add	r24, r24
    34b4:	96 95       	lsr	r25
    34b6:	87 95       	ror	r24
    34b8:	97 f9       	bld	r25, 7
    34ba:	08 95       	ret

000034bc <__fp_inf>:
    34bc:	97 f9       	bld	r25, 7
    34be:	9f 67       	ori	r25, 0x7F	; 127
    34c0:	80 e8       	ldi	r24, 0x80	; 128
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	08 95       	ret

000034c8 <__fp_nan>:
    34c8:	9f ef       	ldi	r25, 0xFF	; 255
    34ca:	80 ec       	ldi	r24, 0xC0	; 192
    34cc:	08 95       	ret

000034ce <__fp_pscA>:
    34ce:	00 24       	eor	r0, r0
    34d0:	0a 94       	dec	r0
    34d2:	16 16       	cp	r1, r22
    34d4:	17 06       	cpc	r1, r23
    34d6:	18 06       	cpc	r1, r24
    34d8:	09 06       	cpc	r0, r25
    34da:	08 95       	ret

000034dc <__fp_pscB>:
    34dc:	00 24       	eor	r0, r0
    34de:	0a 94       	dec	r0
    34e0:	12 16       	cp	r1, r18
    34e2:	13 06       	cpc	r1, r19
    34e4:	14 06       	cpc	r1, r20
    34e6:	05 06       	cpc	r0, r21
    34e8:	08 95       	ret

000034ea <__fp_round>:
    34ea:	09 2e       	mov	r0, r25
    34ec:	03 94       	inc	r0
    34ee:	00 0c       	add	r0, r0
    34f0:	11 f4       	brne	.+4      	; 0x34f6 <__fp_round+0xc>
    34f2:	88 23       	and	r24, r24
    34f4:	52 f0       	brmi	.+20     	; 0x350a <__fp_round+0x20>
    34f6:	bb 0f       	add	r27, r27
    34f8:	40 f4       	brcc	.+16     	; 0x350a <__fp_round+0x20>
    34fa:	bf 2b       	or	r27, r31
    34fc:	11 f4       	brne	.+4      	; 0x3502 <__fp_round+0x18>
    34fe:	60 ff       	sbrs	r22, 0
    3500:	04 c0       	rjmp	.+8      	; 0x350a <__fp_round+0x20>
    3502:	6f 5f       	subi	r22, 0xFF	; 255
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	8f 4f       	sbci	r24, 0xFF	; 255
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	08 95       	ret

0000350c <__fp_split3>:
    350c:	57 fd       	sbrc	r21, 7
    350e:	90 58       	subi	r25, 0x80	; 128
    3510:	44 0f       	add	r20, r20
    3512:	55 1f       	adc	r21, r21
    3514:	59 f0       	breq	.+22     	; 0x352c <__fp_splitA+0x10>
    3516:	5f 3f       	cpi	r21, 0xFF	; 255
    3518:	71 f0       	breq	.+28     	; 0x3536 <__fp_splitA+0x1a>
    351a:	47 95       	ror	r20

0000351c <__fp_splitA>:
    351c:	88 0f       	add	r24, r24
    351e:	97 fb       	bst	r25, 7
    3520:	99 1f       	adc	r25, r25
    3522:	61 f0       	breq	.+24     	; 0x353c <__fp_splitA+0x20>
    3524:	9f 3f       	cpi	r25, 0xFF	; 255
    3526:	79 f0       	breq	.+30     	; 0x3546 <__fp_splitA+0x2a>
    3528:	87 95       	ror	r24
    352a:	08 95       	ret
    352c:	12 16       	cp	r1, r18
    352e:	13 06       	cpc	r1, r19
    3530:	14 06       	cpc	r1, r20
    3532:	55 1f       	adc	r21, r21
    3534:	f2 cf       	rjmp	.-28     	; 0x351a <__fp_split3+0xe>
    3536:	46 95       	lsr	r20
    3538:	f1 df       	rcall	.-30     	; 0x351c <__fp_splitA>
    353a:	08 c0       	rjmp	.+16     	; 0x354c <__fp_splitA+0x30>
    353c:	16 16       	cp	r1, r22
    353e:	17 06       	cpc	r1, r23
    3540:	18 06       	cpc	r1, r24
    3542:	99 1f       	adc	r25, r25
    3544:	f1 cf       	rjmp	.-30     	; 0x3528 <__fp_splitA+0xc>
    3546:	86 95       	lsr	r24
    3548:	71 05       	cpc	r23, r1
    354a:	61 05       	cpc	r22, r1
    354c:	08 94       	sec
    354e:	08 95       	ret

00003550 <__fp_zero>:
    3550:	e8 94       	clt

00003552 <__fp_szero>:
    3552:	bb 27       	eor	r27, r27
    3554:	66 27       	eor	r22, r22
    3556:	77 27       	eor	r23, r23
    3558:	cb 01       	movw	r24, r22
    355a:	97 f9       	bld	r25, 7
    355c:	08 95       	ret

0000355e <__mulsf3>:
    355e:	0b d0       	rcall	.+22     	; 0x3576 <__mulsf3x>
    3560:	c4 cf       	rjmp	.-120    	; 0x34ea <__fp_round>
    3562:	b5 df       	rcall	.-150    	; 0x34ce <__fp_pscA>
    3564:	28 f0       	brcs	.+10     	; 0x3570 <__mulsf3+0x12>
    3566:	ba df       	rcall	.-140    	; 0x34dc <__fp_pscB>
    3568:	18 f0       	brcs	.+6      	; 0x3570 <__mulsf3+0x12>
    356a:	95 23       	and	r25, r21
    356c:	09 f0       	breq	.+2      	; 0x3570 <__mulsf3+0x12>
    356e:	a6 cf       	rjmp	.-180    	; 0x34bc <__fp_inf>
    3570:	ab cf       	rjmp	.-170    	; 0x34c8 <__fp_nan>
    3572:	11 24       	eor	r1, r1
    3574:	ee cf       	rjmp	.-36     	; 0x3552 <__fp_szero>

00003576 <__mulsf3x>:
    3576:	ca df       	rcall	.-108    	; 0x350c <__fp_split3>
    3578:	a0 f3       	brcs	.-24     	; 0x3562 <__mulsf3+0x4>

0000357a <__mulsf3_pse>:
    357a:	95 9f       	mul	r25, r21
    357c:	d1 f3       	breq	.-12     	; 0x3572 <__mulsf3+0x14>
    357e:	95 0f       	add	r25, r21
    3580:	50 e0       	ldi	r21, 0x00	; 0
    3582:	55 1f       	adc	r21, r21
    3584:	62 9f       	mul	r22, r18
    3586:	f0 01       	movw	r30, r0
    3588:	72 9f       	mul	r23, r18
    358a:	bb 27       	eor	r27, r27
    358c:	f0 0d       	add	r31, r0
    358e:	b1 1d       	adc	r27, r1
    3590:	63 9f       	mul	r22, r19
    3592:	aa 27       	eor	r26, r26
    3594:	f0 0d       	add	r31, r0
    3596:	b1 1d       	adc	r27, r1
    3598:	aa 1f       	adc	r26, r26
    359a:	64 9f       	mul	r22, r20
    359c:	66 27       	eor	r22, r22
    359e:	b0 0d       	add	r27, r0
    35a0:	a1 1d       	adc	r26, r1
    35a2:	66 1f       	adc	r22, r22
    35a4:	82 9f       	mul	r24, r18
    35a6:	22 27       	eor	r18, r18
    35a8:	b0 0d       	add	r27, r0
    35aa:	a1 1d       	adc	r26, r1
    35ac:	62 1f       	adc	r22, r18
    35ae:	73 9f       	mul	r23, r19
    35b0:	b0 0d       	add	r27, r0
    35b2:	a1 1d       	adc	r26, r1
    35b4:	62 1f       	adc	r22, r18
    35b6:	83 9f       	mul	r24, r19
    35b8:	a0 0d       	add	r26, r0
    35ba:	61 1d       	adc	r22, r1
    35bc:	22 1f       	adc	r18, r18
    35be:	74 9f       	mul	r23, r20
    35c0:	33 27       	eor	r19, r19
    35c2:	a0 0d       	add	r26, r0
    35c4:	61 1d       	adc	r22, r1
    35c6:	23 1f       	adc	r18, r19
    35c8:	84 9f       	mul	r24, r20
    35ca:	60 0d       	add	r22, r0
    35cc:	21 1d       	adc	r18, r1
    35ce:	82 2f       	mov	r24, r18
    35d0:	76 2f       	mov	r23, r22
    35d2:	6a 2f       	mov	r22, r26
    35d4:	11 24       	eor	r1, r1
    35d6:	9f 57       	subi	r25, 0x7F	; 127
    35d8:	50 40       	sbci	r21, 0x00	; 0
    35da:	8a f0       	brmi	.+34     	; 0x35fe <__mulsf3_pse+0x84>
    35dc:	e1 f0       	breq	.+56     	; 0x3616 <__mulsf3_pse+0x9c>
    35de:	88 23       	and	r24, r24
    35e0:	4a f0       	brmi	.+18     	; 0x35f4 <__mulsf3_pse+0x7a>
    35e2:	ee 0f       	add	r30, r30
    35e4:	ff 1f       	adc	r31, r31
    35e6:	bb 1f       	adc	r27, r27
    35e8:	66 1f       	adc	r22, r22
    35ea:	77 1f       	adc	r23, r23
    35ec:	88 1f       	adc	r24, r24
    35ee:	91 50       	subi	r25, 0x01	; 1
    35f0:	50 40       	sbci	r21, 0x00	; 0
    35f2:	a9 f7       	brne	.-22     	; 0x35de <__mulsf3_pse+0x64>
    35f4:	9e 3f       	cpi	r25, 0xFE	; 254
    35f6:	51 05       	cpc	r21, r1
    35f8:	70 f0       	brcs	.+28     	; 0x3616 <__mulsf3_pse+0x9c>
    35fa:	60 cf       	rjmp	.-320    	; 0x34bc <__fp_inf>
    35fc:	aa cf       	rjmp	.-172    	; 0x3552 <__fp_szero>
    35fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3600:	ec f3       	brlt	.-6      	; 0x35fc <__mulsf3_pse+0x82>
    3602:	98 3e       	cpi	r25, 0xE8	; 232
    3604:	dc f3       	brlt	.-10     	; 0x35fc <__mulsf3_pse+0x82>
    3606:	86 95       	lsr	r24
    3608:	77 95       	ror	r23
    360a:	67 95       	ror	r22
    360c:	b7 95       	ror	r27
    360e:	f7 95       	ror	r31
    3610:	e7 95       	ror	r30
    3612:	9f 5f       	subi	r25, 0xFF	; 255
    3614:	c1 f7       	brne	.-16     	; 0x3606 <__mulsf3_pse+0x8c>
    3616:	fe 2b       	or	r31, r30
    3618:	88 0f       	add	r24, r24
    361a:	91 1d       	adc	r25, r1
    361c:	96 95       	lsr	r25
    361e:	87 95       	ror	r24
    3620:	97 f9       	bld	r25, 7
    3622:	08 95       	ret

00003624 <__udivmodsi4>:
    3624:	a1 e2       	ldi	r26, 0x21	; 33
    3626:	1a 2e       	mov	r1, r26
    3628:	aa 1b       	sub	r26, r26
    362a:	bb 1b       	sub	r27, r27
    362c:	fd 01       	movw	r30, r26
    362e:	0d c0       	rjmp	.+26     	; 0x364a <__udivmodsi4_ep>

00003630 <__udivmodsi4_loop>:
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	ee 1f       	adc	r30, r30
    3636:	ff 1f       	adc	r31, r31
    3638:	a2 17       	cp	r26, r18
    363a:	b3 07       	cpc	r27, r19
    363c:	e4 07       	cpc	r30, r20
    363e:	f5 07       	cpc	r31, r21
    3640:	20 f0       	brcs	.+8      	; 0x364a <__udivmodsi4_ep>
    3642:	a2 1b       	sub	r26, r18
    3644:	b3 0b       	sbc	r27, r19
    3646:	e4 0b       	sbc	r30, r20
    3648:	f5 0b       	sbc	r31, r21

0000364a <__udivmodsi4_ep>:
    364a:	66 1f       	adc	r22, r22
    364c:	77 1f       	adc	r23, r23
    364e:	88 1f       	adc	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	1a 94       	dec	r1
    3654:	69 f7       	brne	.-38     	; 0x3630 <__udivmodsi4_loop>
    3656:	60 95       	com	r22
    3658:	70 95       	com	r23
    365a:	80 95       	com	r24
    365c:	90 95       	com	r25
    365e:	9b 01       	movw	r18, r22
    3660:	ac 01       	movw	r20, r24
    3662:	bd 01       	movw	r22, r26
    3664:	cf 01       	movw	r24, r30
    3666:	08 95       	ret

00003668 <__tablejump2__>:
    3668:	ee 0f       	add	r30, r30
    366a:	ff 1f       	adc	r31, r31
    366c:	88 1f       	adc	r24, r24
    366e:	8b bf       	out	0x3b, r24	; 59
    3670:	07 90       	elpm	r0, Z+
    3672:	f6 91       	elpm	r31, Z
    3674:	e0 2d       	mov	r30, r0
    3676:	19 94       	eijmp

00003678 <calloc>:
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	86 9f       	mul	r24, r22
    3682:	80 01       	movw	r16, r0
    3684:	87 9f       	mul	r24, r23
    3686:	10 0d       	add	r17, r0
    3688:	96 9f       	mul	r25, r22
    368a:	10 0d       	add	r17, r0
    368c:	11 24       	eor	r1, r1
    368e:	c8 01       	movw	r24, r16
    3690:	0d d0       	rcall	.+26     	; 0x36ac <malloc>
    3692:	ec 01       	movw	r28, r24
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	21 f0       	breq	.+8      	; 0x36a0 <calloc+0x28>
    3698:	a8 01       	movw	r20, r16
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	70 e0       	ldi	r23, 0x00	; 0
    369e:	17 d2       	rcall	.+1070   	; 0x3ace <memset>
    36a0:	ce 01       	movw	r24, r28
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <malloc>:
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	82 30       	cpi	r24, 0x02	; 2
    36b6:	91 05       	cpc	r25, r1
    36b8:	10 f4       	brcc	.+4      	; 0x36be <malloc+0x12>
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	e0 91 ed 06 	lds	r30, 0x06ED	; 0x8006ed <__flp>
    36c2:	f0 91 ee 06 	lds	r31, 0x06EE	; 0x8006ee <__flp+0x1>
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	a0 e0       	ldi	r26, 0x00	; 0
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	30 97       	sbiw	r30, 0x00	; 0
    36d0:	19 f1       	breq	.+70     	; 0x3718 <malloc+0x6c>
    36d2:	40 81       	ld	r20, Z
    36d4:	51 81       	ldd	r21, Z+1	; 0x01
    36d6:	02 81       	ldd	r16, Z+2	; 0x02
    36d8:	13 81       	ldd	r17, Z+3	; 0x03
    36da:	48 17       	cp	r20, r24
    36dc:	59 07       	cpc	r21, r25
    36de:	c8 f0       	brcs	.+50     	; 0x3712 <malloc+0x66>
    36e0:	84 17       	cp	r24, r20
    36e2:	95 07       	cpc	r25, r21
    36e4:	69 f4       	brne	.+26     	; 0x3700 <malloc+0x54>
    36e6:	10 97       	sbiw	r26, 0x00	; 0
    36e8:	31 f0       	breq	.+12     	; 0x36f6 <malloc+0x4a>
    36ea:	12 96       	adiw	r26, 0x02	; 2
    36ec:	0c 93       	st	X, r16
    36ee:	12 97       	sbiw	r26, 0x02	; 2
    36f0:	13 96       	adiw	r26, 0x03	; 3
    36f2:	1c 93       	st	X, r17
    36f4:	27 c0       	rjmp	.+78     	; 0x3744 <malloc+0x98>
    36f6:	00 93 ed 06 	sts	0x06ED, r16	; 0x8006ed <__flp>
    36fa:	10 93 ee 06 	sts	0x06EE, r17	; 0x8006ee <__flp+0x1>
    36fe:	22 c0       	rjmp	.+68     	; 0x3744 <malloc+0x98>
    3700:	21 15       	cp	r18, r1
    3702:	31 05       	cpc	r19, r1
    3704:	19 f0       	breq	.+6      	; 0x370c <malloc+0x60>
    3706:	42 17       	cp	r20, r18
    3708:	53 07       	cpc	r21, r19
    370a:	18 f4       	brcc	.+6      	; 0x3712 <malloc+0x66>
    370c:	9a 01       	movw	r18, r20
    370e:	bd 01       	movw	r22, r26
    3710:	ef 01       	movw	r28, r30
    3712:	df 01       	movw	r26, r30
    3714:	f8 01       	movw	r30, r16
    3716:	db cf       	rjmp	.-74     	; 0x36ce <malloc+0x22>
    3718:	21 15       	cp	r18, r1
    371a:	31 05       	cpc	r19, r1
    371c:	f9 f0       	breq	.+62     	; 0x375c <malloc+0xb0>
    371e:	28 1b       	sub	r18, r24
    3720:	39 0b       	sbc	r19, r25
    3722:	24 30       	cpi	r18, 0x04	; 4
    3724:	31 05       	cpc	r19, r1
    3726:	80 f4       	brcc	.+32     	; 0x3748 <malloc+0x9c>
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	61 15       	cp	r22, r1
    372e:	71 05       	cpc	r23, r1
    3730:	21 f0       	breq	.+8      	; 0x373a <malloc+0x8e>
    3732:	fb 01       	movw	r30, r22
    3734:	93 83       	std	Z+3, r25	; 0x03
    3736:	82 83       	std	Z+2, r24	; 0x02
    3738:	04 c0       	rjmp	.+8      	; 0x3742 <malloc+0x96>
    373a:	90 93 ee 06 	sts	0x06EE, r25	; 0x8006ee <__flp+0x1>
    373e:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <__flp>
    3742:	fe 01       	movw	r30, r28
    3744:	32 96       	adiw	r30, 0x02	; 2
    3746:	44 c0       	rjmp	.+136    	; 0x37d0 <malloc+0x124>
    3748:	fe 01       	movw	r30, r28
    374a:	e2 0f       	add	r30, r18
    374c:	f3 1f       	adc	r31, r19
    374e:	81 93       	st	Z+, r24
    3750:	91 93       	st	Z+, r25
    3752:	22 50       	subi	r18, 0x02	; 2
    3754:	31 09       	sbc	r19, r1
    3756:	39 83       	std	Y+1, r19	; 0x01
    3758:	28 83       	st	Y, r18
    375a:	3a c0       	rjmp	.+116    	; 0x37d0 <malloc+0x124>
    375c:	20 91 eb 06 	lds	r18, 0x06EB	; 0x8006eb <__brkval>
    3760:	30 91 ec 06 	lds	r19, 0x06EC	; 0x8006ec <__brkval+0x1>
    3764:	23 2b       	or	r18, r19
    3766:	41 f4       	brne	.+16     	; 0x3778 <malloc+0xcc>
    3768:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    376c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3770:	30 93 ec 06 	sts	0x06EC, r19	; 0x8006ec <__brkval+0x1>
    3774:	20 93 eb 06 	sts	0x06EB, r18	; 0x8006eb <__brkval>
    3778:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    377c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3780:	21 15       	cp	r18, r1
    3782:	31 05       	cpc	r19, r1
    3784:	41 f4       	brne	.+16     	; 0x3796 <malloc+0xea>
    3786:	2d b7       	in	r18, 0x3d	; 61
    3788:	3e b7       	in	r19, 0x3e	; 62
    378a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    378e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3792:	24 1b       	sub	r18, r20
    3794:	35 0b       	sbc	r19, r21
    3796:	e0 91 eb 06 	lds	r30, 0x06EB	; 0x8006eb <__brkval>
    379a:	f0 91 ec 06 	lds	r31, 0x06EC	; 0x8006ec <__brkval+0x1>
    379e:	e2 17       	cp	r30, r18
    37a0:	f3 07       	cpc	r31, r19
    37a2:	a0 f4       	brcc	.+40     	; 0x37cc <malloc+0x120>
    37a4:	2e 1b       	sub	r18, r30
    37a6:	3f 0b       	sbc	r19, r31
    37a8:	28 17       	cp	r18, r24
    37aa:	39 07       	cpc	r19, r25
    37ac:	78 f0       	brcs	.+30     	; 0x37cc <malloc+0x120>
    37ae:	ac 01       	movw	r20, r24
    37b0:	4e 5f       	subi	r20, 0xFE	; 254
    37b2:	5f 4f       	sbci	r21, 0xFF	; 255
    37b4:	24 17       	cp	r18, r20
    37b6:	35 07       	cpc	r19, r21
    37b8:	48 f0       	brcs	.+18     	; 0x37cc <malloc+0x120>
    37ba:	4e 0f       	add	r20, r30
    37bc:	5f 1f       	adc	r21, r31
    37be:	50 93 ec 06 	sts	0x06EC, r21	; 0x8006ec <__brkval+0x1>
    37c2:	40 93 eb 06 	sts	0x06EB, r20	; 0x8006eb <__brkval>
    37c6:	81 93       	st	Z+, r24
    37c8:	91 93       	st	Z+, r25
    37ca:	02 c0       	rjmp	.+4      	; 0x37d0 <malloc+0x124>
    37cc:	e0 e0       	ldi	r30, 0x00	; 0
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	cf 01       	movw	r24, r30
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	08 95       	ret

000037dc <free>:
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <free+0xa>
    37e4:	81 c0       	rjmp	.+258    	; 0x38e8 <free+0x10c>
    37e6:	fc 01       	movw	r30, r24
    37e8:	32 97       	sbiw	r30, 0x02	; 2
    37ea:	13 82       	std	Z+3, r1	; 0x03
    37ec:	12 82       	std	Z+2, r1	; 0x02
    37ee:	a0 91 ed 06 	lds	r26, 0x06ED	; 0x8006ed <__flp>
    37f2:	b0 91 ee 06 	lds	r27, 0x06EE	; 0x8006ee <__flp+0x1>
    37f6:	10 97       	sbiw	r26, 0x00	; 0
    37f8:	81 f4       	brne	.+32     	; 0x381a <free+0x3e>
    37fa:	20 81       	ld	r18, Z
    37fc:	31 81       	ldd	r19, Z+1	; 0x01
    37fe:	82 0f       	add	r24, r18
    3800:	93 1f       	adc	r25, r19
    3802:	20 91 eb 06 	lds	r18, 0x06EB	; 0x8006eb <__brkval>
    3806:	30 91 ec 06 	lds	r19, 0x06EC	; 0x8006ec <__brkval+0x1>
    380a:	28 17       	cp	r18, r24
    380c:	39 07       	cpc	r19, r25
    380e:	51 f5       	brne	.+84     	; 0x3864 <free+0x88>
    3810:	f0 93 ec 06 	sts	0x06EC, r31	; 0x8006ec <__brkval+0x1>
    3814:	e0 93 eb 06 	sts	0x06EB, r30	; 0x8006eb <__brkval>
    3818:	67 c0       	rjmp	.+206    	; 0x38e8 <free+0x10c>
    381a:	ed 01       	movw	r28, r26
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	ce 17       	cp	r28, r30
    3822:	df 07       	cpc	r29, r31
    3824:	40 f4       	brcc	.+16     	; 0x3836 <free+0x5a>
    3826:	4a 81       	ldd	r20, Y+2	; 0x02
    3828:	5b 81       	ldd	r21, Y+3	; 0x03
    382a:	9e 01       	movw	r18, r28
    382c:	41 15       	cp	r20, r1
    382e:	51 05       	cpc	r21, r1
    3830:	f1 f0       	breq	.+60     	; 0x386e <free+0x92>
    3832:	ea 01       	movw	r28, r20
    3834:	f5 cf       	rjmp	.-22     	; 0x3820 <free+0x44>
    3836:	d3 83       	std	Z+3, r29	; 0x03
    3838:	c2 83       	std	Z+2, r28	; 0x02
    383a:	40 81       	ld	r20, Z
    383c:	51 81       	ldd	r21, Z+1	; 0x01
    383e:	84 0f       	add	r24, r20
    3840:	95 1f       	adc	r25, r21
    3842:	c8 17       	cp	r28, r24
    3844:	d9 07       	cpc	r29, r25
    3846:	59 f4       	brne	.+22     	; 0x385e <free+0x82>
    3848:	88 81       	ld	r24, Y
    384a:	99 81       	ldd	r25, Y+1	; 0x01
    384c:	84 0f       	add	r24, r20
    384e:	95 1f       	adc	r25, r21
    3850:	02 96       	adiw	r24, 0x02	; 2
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	9b 81       	ldd	r25, Y+3	; 0x03
    385a:	93 83       	std	Z+3, r25	; 0x03
    385c:	82 83       	std	Z+2, r24	; 0x02
    385e:	21 15       	cp	r18, r1
    3860:	31 05       	cpc	r19, r1
    3862:	29 f4       	brne	.+10     	; 0x386e <free+0x92>
    3864:	f0 93 ee 06 	sts	0x06EE, r31	; 0x8006ee <__flp+0x1>
    3868:	e0 93 ed 06 	sts	0x06ED, r30	; 0x8006ed <__flp>
    386c:	3d c0       	rjmp	.+122    	; 0x38e8 <free+0x10c>
    386e:	e9 01       	movw	r28, r18
    3870:	fb 83       	std	Y+3, r31	; 0x03
    3872:	ea 83       	std	Y+2, r30	; 0x02
    3874:	49 91       	ld	r20, Y+
    3876:	59 91       	ld	r21, Y+
    3878:	c4 0f       	add	r28, r20
    387a:	d5 1f       	adc	r29, r21
    387c:	ec 17       	cp	r30, r28
    387e:	fd 07       	cpc	r31, r29
    3880:	61 f4       	brne	.+24     	; 0x389a <free+0xbe>
    3882:	80 81       	ld	r24, Z
    3884:	91 81       	ldd	r25, Z+1	; 0x01
    3886:	84 0f       	add	r24, r20
    3888:	95 1f       	adc	r25, r21
    388a:	02 96       	adiw	r24, 0x02	; 2
    388c:	e9 01       	movw	r28, r18
    388e:	99 83       	std	Y+1, r25	; 0x01
    3890:	88 83       	st	Y, r24
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	93 81       	ldd	r25, Z+3	; 0x03
    3896:	9b 83       	std	Y+3, r25	; 0x03
    3898:	8a 83       	std	Y+2, r24	; 0x02
    389a:	e0 e0       	ldi	r30, 0x00	; 0
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	12 96       	adiw	r26, 0x02	; 2
    38a0:	8d 91       	ld	r24, X+
    38a2:	9c 91       	ld	r25, X
    38a4:	13 97       	sbiw	r26, 0x03	; 3
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	19 f0       	breq	.+6      	; 0x38b0 <free+0xd4>
    38aa:	fd 01       	movw	r30, r26
    38ac:	dc 01       	movw	r26, r24
    38ae:	f7 cf       	rjmp	.-18     	; 0x389e <free+0xc2>
    38b0:	8d 91       	ld	r24, X+
    38b2:	9c 91       	ld	r25, X
    38b4:	11 97       	sbiw	r26, 0x01	; 1
    38b6:	9d 01       	movw	r18, r26
    38b8:	2e 5f       	subi	r18, 0xFE	; 254
    38ba:	3f 4f       	sbci	r19, 0xFF	; 255
    38bc:	82 0f       	add	r24, r18
    38be:	93 1f       	adc	r25, r19
    38c0:	20 91 eb 06 	lds	r18, 0x06EB	; 0x8006eb <__brkval>
    38c4:	30 91 ec 06 	lds	r19, 0x06EC	; 0x8006ec <__brkval+0x1>
    38c8:	28 17       	cp	r18, r24
    38ca:	39 07       	cpc	r19, r25
    38cc:	69 f4       	brne	.+26     	; 0x38e8 <free+0x10c>
    38ce:	30 97       	sbiw	r30, 0x00	; 0
    38d0:	29 f4       	brne	.+10     	; 0x38dc <free+0x100>
    38d2:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <__flp+0x1>
    38d6:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <__flp>
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <free+0x104>
    38dc:	13 82       	std	Z+3, r1	; 0x03
    38de:	12 82       	std	Z+2, r1	; 0x02
    38e0:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <__brkval+0x1>
    38e4:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <__brkval>
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	08 95       	ret

000038ee <abort>:
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	f8 94       	cli
    38f4:	dc c1       	rjmp	.+952    	; 0x3cae <_exit>

000038f6 <__ftoa_engine>:
    38f6:	28 30       	cpi	r18, 0x08	; 8
    38f8:	08 f0       	brcs	.+2      	; 0x38fc <__ftoa_engine+0x6>
    38fa:	27 e0       	ldi	r18, 0x07	; 7
    38fc:	33 27       	eor	r19, r19
    38fe:	da 01       	movw	r26, r20
    3900:	99 0f       	add	r25, r25
    3902:	31 1d       	adc	r19, r1
    3904:	87 fd       	sbrc	r24, 7
    3906:	91 60       	ori	r25, 0x01	; 1
    3908:	00 96       	adiw	r24, 0x00	; 0
    390a:	61 05       	cpc	r22, r1
    390c:	71 05       	cpc	r23, r1
    390e:	39 f4       	brne	.+14     	; 0x391e <__ftoa_engine+0x28>
    3910:	32 60       	ori	r19, 0x02	; 2
    3912:	2e 5f       	subi	r18, 0xFE	; 254
    3914:	3d 93       	st	X+, r19
    3916:	30 e3       	ldi	r19, 0x30	; 48
    3918:	2a 95       	dec	r18
    391a:	e1 f7       	brne	.-8      	; 0x3914 <__ftoa_engine+0x1e>
    391c:	08 95       	ret
    391e:	9f 3f       	cpi	r25, 0xFF	; 255
    3920:	30 f0       	brcs	.+12     	; 0x392e <__ftoa_engine+0x38>
    3922:	80 38       	cpi	r24, 0x80	; 128
    3924:	71 05       	cpc	r23, r1
    3926:	61 05       	cpc	r22, r1
    3928:	09 f0       	breq	.+2      	; 0x392c <__ftoa_engine+0x36>
    392a:	3c 5f       	subi	r19, 0xFC	; 252
    392c:	3c 5f       	subi	r19, 0xFC	; 252
    392e:	3d 93       	st	X+, r19
    3930:	91 30       	cpi	r25, 0x01	; 1
    3932:	08 f0       	brcs	.+2      	; 0x3936 <__ftoa_engine+0x40>
    3934:	80 68       	ori	r24, 0x80	; 128
    3936:	91 1d       	adc	r25, r1
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	1f 93       	push	r17
    393e:	0f 93       	push	r16
    3940:	ff 92       	push	r15
    3942:	ef 92       	push	r14
    3944:	19 2f       	mov	r17, r25
    3946:	98 7f       	andi	r25, 0xF8	; 248
    3948:	96 95       	lsr	r25
    394a:	e9 2f       	mov	r30, r25
    394c:	96 95       	lsr	r25
    394e:	96 95       	lsr	r25
    3950:	e9 0f       	add	r30, r25
    3952:	ff 27       	eor	r31, r31
    3954:	e4 50       	subi	r30, 0x04	; 4
    3956:	fe 4f       	sbci	r31, 0xFE	; 254
    3958:	99 27       	eor	r25, r25
    395a:	33 27       	eor	r19, r19
    395c:	ee 24       	eor	r14, r14
    395e:	ff 24       	eor	r15, r15
    3960:	a7 01       	movw	r20, r14
    3962:	e7 01       	movw	r28, r14
    3964:	05 90       	lpm	r0, Z+
    3966:	08 94       	sec
    3968:	07 94       	ror	r0
    396a:	28 f4       	brcc	.+10     	; 0x3976 <__ftoa_engine+0x80>
    396c:	36 0f       	add	r19, r22
    396e:	e7 1e       	adc	r14, r23
    3970:	f8 1e       	adc	r15, r24
    3972:	49 1f       	adc	r20, r25
    3974:	51 1d       	adc	r21, r1
    3976:	66 0f       	add	r22, r22
    3978:	77 1f       	adc	r23, r23
    397a:	88 1f       	adc	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	06 94       	lsr	r0
    3980:	a1 f7       	brne	.-24     	; 0x396a <__ftoa_engine+0x74>
    3982:	05 90       	lpm	r0, Z+
    3984:	07 94       	ror	r0
    3986:	28 f4       	brcc	.+10     	; 0x3992 <__ftoa_engine+0x9c>
    3988:	e7 0e       	add	r14, r23
    398a:	f8 1e       	adc	r15, r24
    398c:	49 1f       	adc	r20, r25
    398e:	56 1f       	adc	r21, r22
    3990:	c1 1d       	adc	r28, r1
    3992:	77 0f       	add	r23, r23
    3994:	88 1f       	adc	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	66 1f       	adc	r22, r22
    399a:	06 94       	lsr	r0
    399c:	a1 f7       	brne	.-24     	; 0x3986 <__ftoa_engine+0x90>
    399e:	05 90       	lpm	r0, Z+
    39a0:	07 94       	ror	r0
    39a2:	28 f4       	brcc	.+10     	; 0x39ae <__ftoa_engine+0xb8>
    39a4:	f8 0e       	add	r15, r24
    39a6:	49 1f       	adc	r20, r25
    39a8:	56 1f       	adc	r21, r22
    39aa:	c7 1f       	adc	r28, r23
    39ac:	d1 1d       	adc	r29, r1
    39ae:	88 0f       	add	r24, r24
    39b0:	99 1f       	adc	r25, r25
    39b2:	66 1f       	adc	r22, r22
    39b4:	77 1f       	adc	r23, r23
    39b6:	06 94       	lsr	r0
    39b8:	a1 f7       	brne	.-24     	; 0x39a2 <__ftoa_engine+0xac>
    39ba:	05 90       	lpm	r0, Z+
    39bc:	07 94       	ror	r0
    39be:	20 f4       	brcc	.+8      	; 0x39c8 <__ftoa_engine+0xd2>
    39c0:	49 0f       	add	r20, r25
    39c2:	56 1f       	adc	r21, r22
    39c4:	c7 1f       	adc	r28, r23
    39c6:	d8 1f       	adc	r29, r24
    39c8:	99 0f       	add	r25, r25
    39ca:	66 1f       	adc	r22, r22
    39cc:	77 1f       	adc	r23, r23
    39ce:	88 1f       	adc	r24, r24
    39d0:	06 94       	lsr	r0
    39d2:	a9 f7       	brne	.-22     	; 0x39be <__ftoa_engine+0xc8>
    39d4:	84 91       	lpm	r24, Z
    39d6:	10 95       	com	r17
    39d8:	17 70       	andi	r17, 0x07	; 7
    39da:	41 f0       	breq	.+16     	; 0x39ec <__ftoa_engine+0xf6>
    39dc:	d6 95       	lsr	r29
    39de:	c7 95       	ror	r28
    39e0:	57 95       	ror	r21
    39e2:	47 95       	ror	r20
    39e4:	f7 94       	ror	r15
    39e6:	e7 94       	ror	r14
    39e8:	1a 95       	dec	r17
    39ea:	c1 f7       	brne	.-16     	; 0x39dc <__ftoa_engine+0xe6>
    39ec:	e2 ea       	ldi	r30, 0xA2	; 162
    39ee:	f1 e0       	ldi	r31, 0x01	; 1
    39f0:	68 94       	set
    39f2:	15 90       	lpm	r1, Z+
    39f4:	15 91       	lpm	r17, Z+
    39f6:	35 91       	lpm	r19, Z+
    39f8:	65 91       	lpm	r22, Z+
    39fa:	95 91       	lpm	r25, Z+
    39fc:	05 90       	lpm	r0, Z+
    39fe:	7f e2       	ldi	r23, 0x2F	; 47
    3a00:	73 95       	inc	r23
    3a02:	e1 18       	sub	r14, r1
    3a04:	f1 0a       	sbc	r15, r17
    3a06:	43 0b       	sbc	r20, r19
    3a08:	56 0b       	sbc	r21, r22
    3a0a:	c9 0b       	sbc	r28, r25
    3a0c:	d0 09       	sbc	r29, r0
    3a0e:	c0 f7       	brcc	.-16     	; 0x3a00 <__ftoa_engine+0x10a>
    3a10:	e1 0c       	add	r14, r1
    3a12:	f1 1e       	adc	r15, r17
    3a14:	43 1f       	adc	r20, r19
    3a16:	56 1f       	adc	r21, r22
    3a18:	c9 1f       	adc	r28, r25
    3a1a:	d0 1d       	adc	r29, r0
    3a1c:	7e f4       	brtc	.+30     	; 0x3a3c <__ftoa_engine+0x146>
    3a1e:	70 33       	cpi	r23, 0x30	; 48
    3a20:	11 f4       	brne	.+4      	; 0x3a26 <__ftoa_engine+0x130>
    3a22:	8a 95       	dec	r24
    3a24:	e6 cf       	rjmp	.-52     	; 0x39f2 <__ftoa_engine+0xfc>
    3a26:	e8 94       	clt
    3a28:	01 50       	subi	r16, 0x01	; 1
    3a2a:	30 f0       	brcs	.+12     	; 0x3a38 <__ftoa_engine+0x142>
    3a2c:	08 0f       	add	r16, r24
    3a2e:	0a f4       	brpl	.+2      	; 0x3a32 <__ftoa_engine+0x13c>
    3a30:	00 27       	eor	r16, r16
    3a32:	02 17       	cp	r16, r18
    3a34:	08 f4       	brcc	.+2      	; 0x3a38 <__ftoa_engine+0x142>
    3a36:	20 2f       	mov	r18, r16
    3a38:	23 95       	inc	r18
    3a3a:	02 2f       	mov	r16, r18
    3a3c:	7a 33       	cpi	r23, 0x3A	; 58
    3a3e:	28 f0       	brcs	.+10     	; 0x3a4a <__ftoa_engine+0x154>
    3a40:	79 e3       	ldi	r23, 0x39	; 57
    3a42:	7d 93       	st	X+, r23
    3a44:	2a 95       	dec	r18
    3a46:	e9 f7       	brne	.-6      	; 0x3a42 <__ftoa_engine+0x14c>
    3a48:	10 c0       	rjmp	.+32     	; 0x3a6a <__ftoa_engine+0x174>
    3a4a:	7d 93       	st	X+, r23
    3a4c:	2a 95       	dec	r18
    3a4e:	89 f6       	brne	.-94     	; 0x39f2 <__ftoa_engine+0xfc>
    3a50:	06 94       	lsr	r0
    3a52:	97 95       	ror	r25
    3a54:	67 95       	ror	r22
    3a56:	37 95       	ror	r19
    3a58:	17 95       	ror	r17
    3a5a:	17 94       	ror	r1
    3a5c:	e1 18       	sub	r14, r1
    3a5e:	f1 0a       	sbc	r15, r17
    3a60:	43 0b       	sbc	r20, r19
    3a62:	56 0b       	sbc	r21, r22
    3a64:	c9 0b       	sbc	r28, r25
    3a66:	d0 09       	sbc	r29, r0
    3a68:	98 f0       	brcs	.+38     	; 0x3a90 <__ftoa_engine+0x19a>
    3a6a:	23 95       	inc	r18
    3a6c:	7e 91       	ld	r23, -X
    3a6e:	73 95       	inc	r23
    3a70:	7a 33       	cpi	r23, 0x3A	; 58
    3a72:	08 f0       	brcs	.+2      	; 0x3a76 <__ftoa_engine+0x180>
    3a74:	70 e3       	ldi	r23, 0x30	; 48
    3a76:	7c 93       	st	X, r23
    3a78:	20 13       	cpse	r18, r16
    3a7a:	b8 f7       	brcc	.-18     	; 0x3a6a <__ftoa_engine+0x174>
    3a7c:	7e 91       	ld	r23, -X
    3a7e:	70 61       	ori	r23, 0x10	; 16
    3a80:	7d 93       	st	X+, r23
    3a82:	30 f0       	brcs	.+12     	; 0x3a90 <__ftoa_engine+0x19a>
    3a84:	83 95       	inc	r24
    3a86:	71 e3       	ldi	r23, 0x31	; 49
    3a88:	7d 93       	st	X+, r23
    3a8a:	70 e3       	ldi	r23, 0x30	; 48
    3a8c:	2a 95       	dec	r18
    3a8e:	e1 f7       	brne	.-8      	; 0x3a88 <__ftoa_engine+0x192>
    3a90:	11 24       	eor	r1, r1
    3a92:	ef 90       	pop	r14
    3a94:	ff 90       	pop	r15
    3a96:	0f 91       	pop	r16
    3a98:	1f 91       	pop	r17
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	99 27       	eor	r25, r25
    3aa0:	87 fd       	sbrc	r24, 7
    3aa2:	90 95       	com	r25
    3aa4:	08 95       	ret

00003aa6 <strnlen_P>:
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	05 90       	lpm	r0, Z+
    3aaa:	61 50       	subi	r22, 0x01	; 1
    3aac:	70 40       	sbci	r23, 0x00	; 0
    3aae:	01 10       	cpse	r0, r1
    3ab0:	d8 f7       	brcc	.-10     	; 0x3aa8 <strnlen_P+0x2>
    3ab2:	80 95       	com	r24
    3ab4:	90 95       	com	r25
    3ab6:	8e 0f       	add	r24, r30
    3ab8:	9f 1f       	adc	r25, r31
    3aba:	08 95       	ret

00003abc <memcpy>:
    3abc:	fb 01       	movw	r30, r22
    3abe:	dc 01       	movw	r26, r24
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <memcpy+0xa>
    3ac2:	01 90       	ld	r0, Z+
    3ac4:	0d 92       	st	X+, r0
    3ac6:	41 50       	subi	r20, 0x01	; 1
    3ac8:	50 40       	sbci	r21, 0x00	; 0
    3aca:	d8 f7       	brcc	.-10     	; 0x3ac2 <memcpy+0x6>
    3acc:	08 95       	ret

00003ace <memset>:
    3ace:	dc 01       	movw	r26, r24
    3ad0:	01 c0       	rjmp	.+2      	; 0x3ad4 <memset+0x6>
    3ad2:	6d 93       	st	X+, r22
    3ad4:	41 50       	subi	r20, 0x01	; 1
    3ad6:	50 40       	sbci	r21, 0x00	; 0
    3ad8:	e0 f7       	brcc	.-8      	; 0x3ad2 <memset+0x4>
    3ada:	08 95       	ret

00003adc <strnlen>:
    3adc:	fc 01       	movw	r30, r24
    3ade:	61 50       	subi	r22, 0x01	; 1
    3ae0:	70 40       	sbci	r23, 0x00	; 0
    3ae2:	01 90       	ld	r0, Z+
    3ae4:	01 10       	cpse	r0, r1
    3ae6:	d8 f7       	brcc	.-10     	; 0x3ade <strnlen+0x2>
    3ae8:	80 95       	com	r24
    3aea:	90 95       	com	r25
    3aec:	8e 0f       	add	r24, r30
    3aee:	9f 1f       	adc	r25, r31
    3af0:	08 95       	ret

00003af2 <fputc>:
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	fb 01       	movw	r30, r22
    3afc:	23 81       	ldd	r18, Z+3	; 0x03
    3afe:	21 fd       	sbrc	r18, 1
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <fputc+0x16>
    3b02:	8f ef       	ldi	r24, 0xFF	; 255
    3b04:	9f ef       	ldi	r25, 0xFF	; 255
    3b06:	2c c0       	rjmp	.+88     	; 0x3b60 <fputc+0x6e>
    3b08:	22 ff       	sbrs	r18, 2
    3b0a:	16 c0       	rjmp	.+44     	; 0x3b38 <fputc+0x46>
    3b0c:	46 81       	ldd	r20, Z+6	; 0x06
    3b0e:	57 81       	ldd	r21, Z+7	; 0x07
    3b10:	24 81       	ldd	r18, Z+4	; 0x04
    3b12:	35 81       	ldd	r19, Z+5	; 0x05
    3b14:	42 17       	cp	r20, r18
    3b16:	53 07       	cpc	r21, r19
    3b18:	44 f4       	brge	.+16     	; 0x3b2a <fputc+0x38>
    3b1a:	a0 81       	ld	r26, Z
    3b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    3b1e:	9d 01       	movw	r18, r26
    3b20:	2f 5f       	subi	r18, 0xFF	; 255
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
    3b24:	31 83       	std	Z+1, r19	; 0x01
    3b26:	20 83       	st	Z, r18
    3b28:	8c 93       	st	X, r24
    3b2a:	26 81       	ldd	r18, Z+6	; 0x06
    3b2c:	37 81       	ldd	r19, Z+7	; 0x07
    3b2e:	2f 5f       	subi	r18, 0xFF	; 255
    3b30:	3f 4f       	sbci	r19, 0xFF	; 255
    3b32:	37 83       	std	Z+7, r19	; 0x07
    3b34:	26 83       	std	Z+6, r18	; 0x06
    3b36:	14 c0       	rjmp	.+40     	; 0x3b60 <fputc+0x6e>
    3b38:	8b 01       	movw	r16, r22
    3b3a:	ec 01       	movw	r28, r24
    3b3c:	fb 01       	movw	r30, r22
    3b3e:	00 84       	ldd	r0, Z+8	; 0x08
    3b40:	f1 85       	ldd	r31, Z+9	; 0x09
    3b42:	e0 2d       	mov	r30, r0
    3b44:	19 95       	eicall
    3b46:	89 2b       	or	r24, r25
    3b48:	e1 f6       	brne	.-72     	; 0x3b02 <fputc+0x10>
    3b4a:	d8 01       	movw	r26, r16
    3b4c:	16 96       	adiw	r26, 0x06	; 6
    3b4e:	8d 91       	ld	r24, X+
    3b50:	9c 91       	ld	r25, X
    3b52:	17 97       	sbiw	r26, 0x07	; 7
    3b54:	01 96       	adiw	r24, 0x01	; 1
    3b56:	17 96       	adiw	r26, 0x07	; 7
    3b58:	9c 93       	st	X, r25
    3b5a:	8e 93       	st	-X, r24
    3b5c:	16 97       	sbiw	r26, 0x06	; 6
    3b5e:	ce 01       	movw	r24, r28
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	08 95       	ret

00003b6a <printf>:
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	ae 01       	movw	r20, r28
    3b74:	4a 5f       	subi	r20, 0xFA	; 250
    3b76:	5f 4f       	sbci	r21, 0xFF	; 255
    3b78:	fa 01       	movw	r30, r20
    3b7a:	61 91       	ld	r22, Z+
    3b7c:	71 91       	ld	r23, Z+
    3b7e:	af 01       	movw	r20, r30
    3b80:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <__iob+0x2>
    3b84:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <__iob+0x3>
    3b88:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <vfprintf>
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	08 95       	ret

00003b92 <puts>:
    3b92:	0f 93       	push	r16
    3b94:	1f 93       	push	r17
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <__iob+0x2>
    3b9e:	f0 91 f2 06 	lds	r31, 0x06F2	; 0x8006f2 <__iob+0x3>
    3ba2:	23 81       	ldd	r18, Z+3	; 0x03
    3ba4:	21 ff       	sbrs	r18, 1
    3ba6:	1b c0       	rjmp	.+54     	; 0x3bde <puts+0x4c>
    3ba8:	8c 01       	movw	r16, r24
    3baa:	d0 e0       	ldi	r29, 0x00	; 0
    3bac:	c0 e0       	ldi	r28, 0x00	; 0
    3bae:	f8 01       	movw	r30, r16
    3bb0:	81 91       	ld	r24, Z+
    3bb2:	8f 01       	movw	r16, r30
    3bb4:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <__iob+0x2>
    3bb8:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <__iob+0x3>
    3bbc:	db 01       	movw	r26, r22
    3bbe:	18 96       	adiw	r26, 0x08	; 8
    3bc0:	ed 91       	ld	r30, X+
    3bc2:	fc 91       	ld	r31, X
    3bc4:	19 97       	sbiw	r26, 0x09	; 9
    3bc6:	88 23       	and	r24, r24
    3bc8:	31 f0       	breq	.+12     	; 0x3bd6 <puts+0x44>
    3bca:	19 95       	eicall
    3bcc:	89 2b       	or	r24, r25
    3bce:	79 f3       	breq	.-34     	; 0x3bae <puts+0x1c>
    3bd0:	df ef       	ldi	r29, 0xFF	; 255
    3bd2:	cf ef       	ldi	r28, 0xFF	; 255
    3bd4:	ec cf       	rjmp	.-40     	; 0x3bae <puts+0x1c>
    3bd6:	8a e0       	ldi	r24, 0x0A	; 10
    3bd8:	19 95       	eicall
    3bda:	89 2b       	or	r24, r25
    3bdc:	19 f0       	breq	.+6      	; 0x3be4 <puts+0x52>
    3bde:	8f ef       	ldi	r24, 0xFF	; 255
    3be0:	9f ef       	ldi	r25, 0xFF	; 255
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <puts+0x56>
    3be4:	8d 2f       	mov	r24, r29
    3be6:	9c 2f       	mov	r25, r28
    3be8:	df 91       	pop	r29
    3bea:	cf 91       	pop	r28
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	08 95       	ret

00003bf2 <__ultoa_invert>:
    3bf2:	fa 01       	movw	r30, r20
    3bf4:	aa 27       	eor	r26, r26
    3bf6:	28 30       	cpi	r18, 0x08	; 8
    3bf8:	51 f1       	breq	.+84     	; 0x3c4e <__ultoa_invert+0x5c>
    3bfa:	20 31       	cpi	r18, 0x10	; 16
    3bfc:	81 f1       	breq	.+96     	; 0x3c5e <__ultoa_invert+0x6c>
    3bfe:	e8 94       	clt
    3c00:	6f 93       	push	r22
    3c02:	6e 7f       	andi	r22, 0xFE	; 254
    3c04:	6e 5f       	subi	r22, 0xFE	; 254
    3c06:	7f 4f       	sbci	r23, 0xFF	; 255
    3c08:	8f 4f       	sbci	r24, 0xFF	; 255
    3c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0c:	af 4f       	sbci	r26, 0xFF	; 255
    3c0e:	b1 e0       	ldi	r27, 0x01	; 1
    3c10:	3e d0       	rcall	.+124    	; 0x3c8e <__ultoa_invert+0x9c>
    3c12:	b4 e0       	ldi	r27, 0x04	; 4
    3c14:	3c d0       	rcall	.+120    	; 0x3c8e <__ultoa_invert+0x9c>
    3c16:	67 0f       	add	r22, r23
    3c18:	78 1f       	adc	r23, r24
    3c1a:	89 1f       	adc	r24, r25
    3c1c:	9a 1f       	adc	r25, r26
    3c1e:	a1 1d       	adc	r26, r1
    3c20:	68 0f       	add	r22, r24
    3c22:	79 1f       	adc	r23, r25
    3c24:	8a 1f       	adc	r24, r26
    3c26:	91 1d       	adc	r25, r1
    3c28:	a1 1d       	adc	r26, r1
    3c2a:	6a 0f       	add	r22, r26
    3c2c:	71 1d       	adc	r23, r1
    3c2e:	81 1d       	adc	r24, r1
    3c30:	91 1d       	adc	r25, r1
    3c32:	a1 1d       	adc	r26, r1
    3c34:	20 d0       	rcall	.+64     	; 0x3c76 <__ultoa_invert+0x84>
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <__ultoa_invert+0x48>
    3c38:	68 94       	set
    3c3a:	3f 91       	pop	r19
    3c3c:	2a e0       	ldi	r18, 0x0A	; 10
    3c3e:	26 9f       	mul	r18, r22
    3c40:	11 24       	eor	r1, r1
    3c42:	30 19       	sub	r19, r0
    3c44:	30 5d       	subi	r19, 0xD0	; 208
    3c46:	31 93       	st	Z+, r19
    3c48:	de f6       	brtc	.-74     	; 0x3c00 <__ultoa_invert+0xe>
    3c4a:	cf 01       	movw	r24, r30
    3c4c:	08 95       	ret
    3c4e:	46 2f       	mov	r20, r22
    3c50:	47 70       	andi	r20, 0x07	; 7
    3c52:	40 5d       	subi	r20, 0xD0	; 208
    3c54:	41 93       	st	Z+, r20
    3c56:	b3 e0       	ldi	r27, 0x03	; 3
    3c58:	0f d0       	rcall	.+30     	; 0x3c78 <__ultoa_invert+0x86>
    3c5a:	c9 f7       	brne	.-14     	; 0x3c4e <__ultoa_invert+0x5c>
    3c5c:	f6 cf       	rjmp	.-20     	; 0x3c4a <__ultoa_invert+0x58>
    3c5e:	46 2f       	mov	r20, r22
    3c60:	4f 70       	andi	r20, 0x0F	; 15
    3c62:	40 5d       	subi	r20, 0xD0	; 208
    3c64:	4a 33       	cpi	r20, 0x3A	; 58
    3c66:	18 f0       	brcs	.+6      	; 0x3c6e <__ultoa_invert+0x7c>
    3c68:	49 5d       	subi	r20, 0xD9	; 217
    3c6a:	31 fd       	sbrc	r19, 1
    3c6c:	40 52       	subi	r20, 0x20	; 32
    3c6e:	41 93       	st	Z+, r20
    3c70:	02 d0       	rcall	.+4      	; 0x3c76 <__ultoa_invert+0x84>
    3c72:	a9 f7       	brne	.-22     	; 0x3c5e <__ultoa_invert+0x6c>
    3c74:	ea cf       	rjmp	.-44     	; 0x3c4a <__ultoa_invert+0x58>
    3c76:	b4 e0       	ldi	r27, 0x04	; 4
    3c78:	a6 95       	lsr	r26
    3c7a:	97 95       	ror	r25
    3c7c:	87 95       	ror	r24
    3c7e:	77 95       	ror	r23
    3c80:	67 95       	ror	r22
    3c82:	ba 95       	dec	r27
    3c84:	c9 f7       	brne	.-14     	; 0x3c78 <__ultoa_invert+0x86>
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	61 05       	cpc	r22, r1
    3c8a:	71 05       	cpc	r23, r1
    3c8c:	08 95       	ret
    3c8e:	9b 01       	movw	r18, r22
    3c90:	ac 01       	movw	r20, r24
    3c92:	0a 2e       	mov	r0, r26
    3c94:	06 94       	lsr	r0
    3c96:	57 95       	ror	r21
    3c98:	47 95       	ror	r20
    3c9a:	37 95       	ror	r19
    3c9c:	27 95       	ror	r18
    3c9e:	ba 95       	dec	r27
    3ca0:	c9 f7       	brne	.-14     	; 0x3c94 <__ultoa_invert+0xa2>
    3ca2:	62 0f       	add	r22, r18
    3ca4:	73 1f       	adc	r23, r19
    3ca6:	84 1f       	adc	r24, r20
    3ca8:	95 1f       	adc	r25, r21
    3caa:	a0 1d       	adc	r26, r0
    3cac:	08 95       	ret

00003cae <_exit>:
    3cae:	f8 94       	cli

00003cb0 <__stop_program>:
    3cb0:	ff cf       	rjmp	.-2      	; 0x3cb0 <__stop_program>
