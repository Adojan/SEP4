
IMS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  00003b0e  00003ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c0  008002dc  008002dc  00003c7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008cb2  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002720  00000000  00000000  0000d086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045c9  00000000  00000000  0000f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015bc  00000000  00000000  00013d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d60  00000000  00000000  0001532c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007c36  00000000  00000000  0001808c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  0001fcc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c2       	rjmp	.+1288   	; 0x50a <__ctors_end>
       2:	00 00       	nop
       4:	a3 c2       	rjmp	.+1350   	; 0x54c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c2       	rjmp	.+1346   	; 0x54c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c2       	rjmp	.+1342   	; 0x54c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c2       	rjmp	.+1338   	; 0x54c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c2       	rjmp	.+1334   	; 0x54c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c2       	rjmp	.+1330   	; 0x54c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c2       	rjmp	.+1326   	; 0x54c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c2       	rjmp	.+1322   	; 0x54c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c2       	rjmp	.+1318   	; 0x54c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c2       	rjmp	.+1314   	; 0x54c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c2       	rjmp	.+1310   	; 0x54c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c4       	rjmp	.+2416   	; 0x9a2 <__vector_12>
      32:	00 00       	nop
      34:	8b c2       	rjmp	.+1302   	; 0x54c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c2       	rjmp	.+1298   	; 0x54c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c2       	rjmp	.+1294   	; 0x54c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c2       	rjmp	.+1290   	; 0x54c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c2       	rjmp	.+1286   	; 0x54c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c2       	rjmp	.+1282   	; 0x54c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c2       	rjmp	.+1278   	; 0x54c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c2       	rjmp	.+1274   	; 0x54c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c2       	rjmp	.+1270   	; 0x54c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c2       	rjmp	.+1266   	; 0x54c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c2       	rjmp	.+1262   	; 0x54c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c2       	rjmp	.+1258   	; 0x54c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__vector_25>
      68:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__vector_26>
      6c:	6f c2       	rjmp	.+1246   	; 0x54c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c2       	rjmp	.+1242   	; 0x54c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c2       	rjmp	.+1238   	; 0x54c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c2       	rjmp	.+1234   	; 0x54c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c2       	rjmp	.+1230   	; 0x54c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c2       	rjmp	.+1226   	; 0x54c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c2       	rjmp	.+1222   	; 0x54c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c2       	rjmp	.+1218   	; 0x54c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c2       	rjmp	.+1214   	; 0x54c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__vector_36>
      94:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__vector_37>
      98:	59 c2       	rjmp	.+1202   	; 0x54c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__vector_39>
      a0:	55 c2       	rjmp	.+1194   	; 0x54c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c2       	rjmp	.+1190   	; 0x54c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c2       	rjmp	.+1186   	; 0x54c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c2       	rjmp	.+1182   	; 0x54c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c2       	rjmp	.+1178   	; 0x54c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c2       	rjmp	.+1174   	; 0x54c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c2       	rjmp	.+1170   	; 0x54c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c2       	rjmp	.+1166   	; 0x54c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c2       	rjmp	.+1162   	; 0x54c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c2       	rjmp	.+1158   	; 0x54c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c2       	rjmp	.+1154   	; 0x54c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__vector_51>
      d0:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__vector_52>
      d4:	3b c2       	rjmp	.+1142   	; 0x54c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__vector_54>
      dc:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_55>
      e0:	35 c2       	rjmp	.+1130   	; 0x54c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	15 02       	muls	r17, r21
      e6:	15 02       	muls	r17, r21
      e8:	15 02       	muls	r17, r21
      ea:	44 02       	muls	r20, r20
      ec:	4c 02       	muls	r20, r28
      ee:	5b 02       	muls	r21, r27
      f0:	15 02       	muls	r17, r21
      f2:	15 02       	muls	r17, r21
      f4:	44 02       	muls	r20, r20
      f6:	4c 02       	muls	r20, r28
      f8:	9f 17       	cp	r25, r31
      fa:	0f 18       	sub	r0, r15
      fc:	0f 18       	sub	r0, r15
      fe:	0f 18       	sub	r0, r15
     100:	0f 18       	sub	r0, r15
     102:	0f 18       	sub	r0, r15
     104:	0f 18       	sub	r0, r15
     106:	0f 18       	sub	r0, r15
     108:	9f 17       	cp	r25, r31
     10a:	0f 18       	sub	r0, r15
     10c:	0f 18       	sub	r0, r15
     10e:	0f 18       	sub	r0, r15
     110:	0f 18       	sub	r0, r15
     112:	0f 18       	sub	r0, r15
     114:	0f 18       	sub	r0, r15
     116:	0f 18       	sub	r0, r15
     118:	a1 17       	cp	r26, r17
     11a:	0f 18       	sub	r0, r15
     11c:	0f 18       	sub	r0, r15
     11e:	0f 18       	sub	r0, r15
     120:	0f 18       	sub	r0, r15
     122:	0f 18       	sub	r0, r15
     124:	0f 18       	sub	r0, r15
     126:	0f 18       	sub	r0, r15
     128:	0f 18       	sub	r0, r15
     12a:	0f 18       	sub	r0, r15
     12c:	0f 18       	sub	r0, r15
     12e:	0f 18       	sub	r0, r15
     130:	0f 18       	sub	r0, r15
     132:	0f 18       	sub	r0, r15
     134:	0f 18       	sub	r0, r15
     136:	0f 18       	sub	r0, r15
     138:	a1 17       	cp	r26, r17
     13a:	0f 18       	sub	r0, r15
     13c:	0f 18       	sub	r0, r15
     13e:	0f 18       	sub	r0, r15
     140:	0f 18       	sub	r0, r15
     142:	0f 18       	sub	r0, r15
     144:	0f 18       	sub	r0, r15
     146:	0f 18       	sub	r0, r15
     148:	0f 18       	sub	r0, r15
     14a:	0f 18       	sub	r0, r15
     14c:	0f 18       	sub	r0, r15
     14e:	0f 18       	sub	r0, r15
     150:	0f 18       	sub	r0, r15
     152:	0f 18       	sub	r0, r15
     154:	0f 18       	sub	r0, r15
     156:	0f 18       	sub	r0, r15
     158:	0b 18       	sub	r0, r11
     15a:	0f 18       	sub	r0, r15
     15c:	0f 18       	sub	r0, r15
     15e:	0f 18       	sub	r0, r15
     160:	0f 18       	sub	r0, r15
     162:	0f 18       	sub	r0, r15
     164:	0f 18       	sub	r0, r15
     166:	0f 18       	sub	r0, r15
     168:	d6 17       	cp	r29, r22
     16a:	0f 18       	sub	r0, r15
     16c:	0f 18       	sub	r0, r15
     16e:	0f 18       	sub	r0, r15
     170:	0f 18       	sub	r0, r15
     172:	0f 18       	sub	r0, r15
     174:	0f 18       	sub	r0, r15
     176:	0f 18       	sub	r0, r15
     178:	0f 18       	sub	r0, r15
     17a:	0f 18       	sub	r0, r15
     17c:	0f 18       	sub	r0, r15
     17e:	0f 18       	sub	r0, r15
     180:	0f 18       	sub	r0, r15
     182:	0f 18       	sub	r0, r15
     184:	0f 18       	sub	r0, r15
     186:	0f 18       	sub	r0, r15
     188:	ca 17       	cp	r28, r26
     18a:	0f 18       	sub	r0, r15
     18c:	0f 18       	sub	r0, r15
     18e:	0f 18       	sub	r0, r15
     190:	0f 18       	sub	r0, r15
     192:	0f 18       	sub	r0, r15
     194:	0f 18       	sub	r0, r15
     196:	0f 18       	sub	r0, r15
     198:	ee 17       	cp	r30, r30

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     29c:	04 ef       	ldi	r16, 0xF4	; 244
     29e:	12 e0       	ldi	r17, 0x02	; 2
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fc e1       	ldi	r31, 0x1C	; 28
     2a4:	ef 2e       	mov	r14, r31
     2a6:	f3 e0       	ldi	r31, 0x03	; 3
     2a8:	ff 2e       	mov	r15, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <uxDeletedTasksWaitingCleanUp>
     2b0:	88 23       	and	r24, r24
     2b2:	11 f1       	breq	.+68     	; 0x2f8 <prvIdleTask+0x5c>
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	0f 92       	push	r0
     2ba:	d8 01       	movw	r26, r16
     2bc:	15 96       	adiw	r26, 0x05	; 5
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	16 97       	sbiw	r26, 0x06	; 6
     2c4:	c6 81       	ldd	r28, Z+6	; 0x06
     2c6:	d7 81       	ldd	r29, Z+7	; 0x07
     2c8:	ce 01       	movw	r24, r28
     2ca:	02 96       	adiw	r24, 0x02	; 2
     2cc:	d2 d1       	rcall	.+932    	; 0x672 <uxListRemove>
     2ce:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <uxCurrentNumberOfTasks>
     2d2:	81 50       	subi	r24, 0x01	; 1
     2d4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <uxCurrentNumberOfTasks>
     2d8:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <uxDeletedTasksWaitingCleanUp>
     2dc:	81 50       	subi	r24, 0x01	; 1
     2de:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <uxDeletedTasksWaitingCleanUp>
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	8f 89       	ldd	r24, Y+23	; 0x17
     2e8:	98 8d       	ldd	r25, Y+24	; 0x18
     2ea:	52 d1       	rcall	.+676    	; 0x590 <vPortFree>
     2ec:	ce 01       	movw	r24, r28
     2ee:	50 d1       	rcall	.+672    	; 0x590 <vPortFree>
     2f0:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <uxDeletedTasksWaitingCleanUp>
     2f4:	81 11       	cpse	r24, r1
     2f6:	de cf       	rjmp	.-68     	; 0x2b4 <prvIdleTask+0x18>
     2f8:	f7 01       	movw	r30, r14
     2fa:	80 81       	ld	r24, Z
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	08 f0       	brcs	.+2      	; 0x302 <prvIdleTask+0x66>
     300:	8d d2       	rcall	.+1306   	; 0x81c <vPortYield>
     302:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vApplicationIdleHook>
     306:	d2 cf       	rjmp	.-92     	; 0x2ac <prvIdleTask+0x10>

00000308 <prvTimerTask>:
     308:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <prvTimerTask+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <prvTimerTask+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	4c 01       	movw	r8, r24
     31a:	44 24       	eor	r4, r4
     31c:	43 94       	inc	r4
     31e:	e1 2c       	mov	r14, r1
     320:	f1 2c       	mov	r15, r1
     322:	51 2c       	mov	r5, r1
     324:	c8 2e       	mov	r12, r24
     326:	d9 2c       	mov	r13, r9
     328:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <pxCurrentTimerList>
     32c:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <pxCurrentTimerList+0x1>
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	09 f4       	brne	.+2      	; 0x338 <prvTimerTask+0x30>
     336:	d6 c0       	rjmp	.+428    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     338:	05 80       	ldd	r0, Z+5	; 0x05
     33a:	f6 81       	ldd	r31, Z+6	; 0x06
     33c:	e0 2d       	mov	r30, r0
     33e:	a0 80       	ld	r10, Z
     340:	b1 80       	ldd	r11, Z+1	; 0x01
     342:	8d d7       	rcall	.+3866   	; 0x125e <vTaskSuspendAll>
     344:	c4 01       	movw	r24, r8
     346:	0e 94 b8 0c 	call	0x1970	; 0x1970 <prvSampleTimeNow>
     34a:	8c 01       	movw	r16, r24
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	81 11       	cpse	r24, r1
     350:	48 c0       	rjmp	.+144    	; 0x3e2 <prvTimerTask+0xda>
     352:	0a 15       	cp	r16, r10
     354:	1b 05       	cpc	r17, r11
     356:	b0 f1       	brcs	.+108    	; 0x3c4 <prvTimerTask+0xbc>
     358:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xTaskResumeAll>
     35c:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <pxCurrentTimerList>
     360:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <pxCurrentTimerList+0x1>
     364:	05 80       	ldd	r0, Z+5	; 0x05
     366:	f6 81       	ldd	r31, Z+6	; 0x06
     368:	e0 2d       	mov	r30, r0
     36a:	66 80       	ldd	r6, Z+6	; 0x06
     36c:	77 80       	ldd	r7, Z+7	; 0x07
     36e:	c3 01       	movw	r24, r6
     370:	02 96       	adiw	r24, 0x02	; 2
     372:	7f d1       	rcall	.+766    	; 0x672 <uxListRemove>
     374:	d3 01       	movw	r26, r6
     376:	53 96       	adiw	r26, 0x13	; 19
     378:	8c 91       	ld	r24, X
     37a:	53 97       	sbiw	r26, 0x13	; 19
     37c:	82 ff       	sbrs	r24, 2
     37e:	17 c0       	rjmp	.+46     	; 0x3ae <prvTimerTask+0xa6>
     380:	1c 96       	adiw	r26, 0x0c	; 12
     382:	6d 91       	ld	r22, X+
     384:	7c 91       	ld	r23, X
     386:	1d 97       	sbiw	r26, 0x0d	; 13
     388:	6a 0d       	add	r22, r10
     38a:	7b 1d       	adc	r23, r11
     38c:	95 01       	movw	r18, r10
     38e:	a8 01       	movw	r20, r16
     390:	c3 01       	movw	r24, r6
     392:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <prvInsertTimerInActiveList>
     396:	88 23       	and	r24, r24
     398:	69 f0       	breq	.+26     	; 0x3b4 <prvTimerTask+0xac>
     39a:	0e 2d       	mov	r16, r14
     39c:	1f 2d       	mov	r17, r15
     39e:	2e 2d       	mov	r18, r14
     3a0:	3f 2d       	mov	r19, r15
     3a2:	a5 01       	movw	r20, r10
     3a4:	65 2d       	mov	r22, r5
     3a6:	c3 01       	movw	r24, r6
     3a8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTimerGenericCommand>
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <prvTimerTask+0xac>
     3ae:	8e 7f       	andi	r24, 0xFE	; 254
     3b0:	f3 01       	movw	r30, r6
     3b2:	83 8b       	std	Z+19, r24	; 0x13
     3b4:	d3 01       	movw	r26, r6
     3b6:	50 96       	adiw	r26, 0x10	; 16
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	51 97       	sbiw	r26, 0x11	; 17
     3be:	c3 01       	movw	r24, r6
     3c0:	19 95       	eicall
     3c2:	84 c0       	rjmp	.+264    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     3c4:	45 2d       	mov	r20, r5
     3c6:	b5 01       	movw	r22, r10
     3c8:	60 1b       	sub	r22, r16
     3ca:	71 0b       	sbc	r23, r17
     3cc:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xTimerQueue>
     3d0:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xTimerQueue+0x1>
     3d4:	77 d5       	rcall	.+2798   	; 0xec4 <vQueueWaitForMessageRestricted>
     3d6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xTaskResumeAll>
     3da:	81 11       	cpse	r24, r1
     3dc:	77 c0       	rjmp	.+238    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     3de:	1e d2       	rcall	.+1084   	; 0x81c <vPortYield>
     3e0:	75 c0       	rjmp	.+234    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     3e2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xTaskResumeAll>
     3e6:	72 c0       	rjmp	.+228    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 23       	and	r24, r24
     3ec:	0c f4       	brge	.+2      	; 0x3f0 <prvTimerTask+0xe8>
     3ee:	6e c0       	rjmp	.+220    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     3f0:	ac 80       	ldd	r10, Y+4	; 0x04
     3f2:	bd 80       	ldd	r11, Y+5	; 0x05
     3f4:	f5 01       	movw	r30, r10
     3f6:	82 85       	ldd	r24, Z+10	; 0x0a
     3f8:	93 85       	ldd	r25, Z+11	; 0x0b
     3fa:	89 2b       	or	r24, r25
     3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3fe:	c5 01       	movw	r24, r10
     400:	02 96       	adiw	r24, 0x02	; 2
     402:	37 d1       	rcall	.+622    	; 0x672 <uxListRemove>
     404:	ce 01       	movw	r24, r28
     406:	06 96       	adiw	r24, 0x06	; 6
     408:	0e 94 b8 0c 	call	0x1970	; 0x1970 <prvSampleTimeNow>
     40c:	ac 01       	movw	r20, r24
     40e:	e9 81       	ldd	r30, Y+1	; 0x01
     410:	0e 2e       	mov	r0, r30
     412:	00 0c       	add	r0, r0
     414:	ff 0b       	sbc	r31, r31
     416:	ea 30       	cpi	r30, 0x0A	; 10
     418:	f1 05       	cpc	r31, r1
     41a:	08 f0       	brcs	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	57 c0       	rjmp	.+174    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     41e:	88 27       	eor	r24, r24
     420:	ee 58       	subi	r30, 0x8E	; 142
     422:	ff 4f       	sbci	r31, 0xFF	; 255
     424:	8f 4f       	sbci	r24, 0xFF	; 255
     426:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__tablejump2__>
     42a:	d5 01       	movw	r26, r10
     42c:	53 96       	adiw	r26, 0x13	; 19
     42e:	8c 91       	ld	r24, X
     430:	53 97       	sbiw	r26, 0x13	; 19
     432:	81 60       	ori	r24, 0x01	; 1
     434:	53 96       	adiw	r26, 0x13	; 19
     436:	8c 93       	st	X, r24
     438:	53 97       	sbiw	r26, 0x13	; 19
     43a:	2a 81       	ldd	r18, Y+2	; 0x02
     43c:	3b 81       	ldd	r19, Y+3	; 0x03
     43e:	1c 96       	adiw	r26, 0x0c	; 12
     440:	6d 91       	ld	r22, X+
     442:	7c 91       	ld	r23, X
     444:	1d 97       	sbiw	r26, 0x0d	; 13
     446:	62 0f       	add	r22, r18
     448:	73 1f       	adc	r23, r19
     44a:	c5 01       	movw	r24, r10
     44c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <prvInsertTimerInActiveList>
     450:	88 23       	and	r24, r24
     452:	e1 f1       	breq	.+120    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     454:	d5 01       	movw	r26, r10
     456:	50 96       	adiw	r26, 0x10	; 16
     458:	ed 91       	ld	r30, X+
     45a:	fc 91       	ld	r31, X
     45c:	51 97       	sbiw	r26, 0x11	; 17
     45e:	c5 01       	movw	r24, r10
     460:	19 95       	eicall
     462:	f5 01       	movw	r30, r10
     464:	83 89       	ldd	r24, Z+19	; 0x13
     466:	82 ff       	sbrs	r24, 2
     468:	31 c0       	rjmp	.+98     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     46a:	4a 81       	ldd	r20, Y+2	; 0x02
     46c:	5b 81       	ldd	r21, Y+3	; 0x03
     46e:	84 85       	ldd	r24, Z+12	; 0x0c
     470:	95 85       	ldd	r25, Z+13	; 0x0d
     472:	48 0f       	add	r20, r24
     474:	59 1f       	adc	r21, r25
     476:	0e 2d       	mov	r16, r14
     478:	1f 2d       	mov	r17, r15
     47a:	2e 2d       	mov	r18, r14
     47c:	3f 2d       	mov	r19, r15
     47e:	65 2d       	mov	r22, r5
     480:	c5 01       	movw	r24, r10
     482:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTimerGenericCommand>
     486:	22 c0       	rjmp	.+68     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     488:	d5 01       	movw	r26, r10
     48a:	53 96       	adiw	r26, 0x13	; 19
     48c:	8c 91       	ld	r24, X
     48e:	53 97       	sbiw	r26, 0x13	; 19
     490:	8e 7f       	andi	r24, 0xFE	; 254
     492:	53 96       	adiw	r26, 0x13	; 19
     494:	8c 93       	st	X, r24
     496:	1a c0       	rjmp	.+52     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     498:	f5 01       	movw	r30, r10
     49a:	83 89       	ldd	r24, Z+19	; 0x13
     49c:	81 60       	ori	r24, 0x01	; 1
     49e:	83 8b       	std	Z+19, r24	; 0x13
     4a0:	6a 81       	ldd	r22, Y+2	; 0x02
     4a2:	7b 81       	ldd	r23, Y+3	; 0x03
     4a4:	75 87       	std	Z+13, r23	; 0x0d
     4a6:	64 87       	std	Z+12, r22	; 0x0c
     4a8:	64 0f       	add	r22, r20
     4aa:	75 1f       	adc	r23, r21
     4ac:	9a 01       	movw	r18, r20
     4ae:	c5 01       	movw	r24, r10
     4b0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <prvInsertTimerInActiveList>
     4b4:	0b c0       	rjmp	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4b6:	d5 01       	movw	r26, r10
     4b8:	53 96       	adiw	r26, 0x13	; 19
     4ba:	8c 91       	ld	r24, X
     4bc:	81 fd       	sbrc	r24, 1
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c0:	c5 01       	movw	r24, r10
     4c2:	66 d0       	rcall	.+204    	; 0x590 <vPortFree>
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c6:	8e 7f       	andi	r24, 0xFE	; 254
     4c8:	f5 01       	movw	r30, r10
     4ca:	83 8b       	std	Z+19, r24	; 0x13
     4cc:	4e 2d       	mov	r20, r14
     4ce:	5f 2d       	mov	r21, r15
     4d0:	6c 2d       	mov	r22, r12
     4d2:	7d 2d       	mov	r23, r13
     4d4:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xTimerQueue>
     4d8:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xTimerQueue+0x1>
     4dc:	6a d4       	rcall	.+2260   	; 0xdb2 <xQueueReceive>
     4de:	81 11       	cpse	r24, r1
     4e0:	83 cf       	rjmp	.-250    	; 0x3e8 <prvTimerTask+0xe0>
     4e2:	22 cf       	rjmp	.-444    	; 0x328 <prvTimerTask+0x20>
     4e4:	bc d6       	rcall	.+3448   	; 0x125e <vTaskSuspendAll>
     4e6:	c4 01       	movw	r24, r8
     4e8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <prvSampleTimeNow>
     4ec:	8c 01       	movw	r16, r24
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	81 11       	cpse	r24, r1
     4f2:	77 cf       	rjmp	.-274    	; 0x3e2 <prvTimerTask+0xda>
     4f4:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <pxOverflowTimerList>
     4f8:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <pxOverflowTimerList+0x1>
     4fc:	80 81       	ld	r24, Z
     4fe:	44 2d       	mov	r20, r4
     500:	81 11       	cpse	r24, r1
     502:	45 2d       	mov	r20, r5
     504:	ae 2c       	mov	r10, r14
     506:	bf 2c       	mov	r11, r15
     508:	5e cf       	rjmp	.-324    	; 0x3c6 <prvTimerTask+0xbe>

0000050a <__ctors_end>:
     50a:	11 24       	eor	r1, r1
     50c:	1f be       	out	0x3f, r1	; 63
     50e:	cf ef       	ldi	r28, 0xFF	; 255
     510:	d1 e2       	ldi	r29, 0x21	; 33
     512:	de bf       	out	0x3e, r29	; 62
     514:	cd bf       	out	0x3d, r28	; 61
     516:	00 e0       	ldi	r16, 0x00	; 0
     518:	0c bf       	out	0x3c, r16	; 60

0000051a <__do_copy_data>:
     51a:	12 e0       	ldi	r17, 0x02	; 2
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b2 e0       	ldi	r27, 0x02	; 2
     520:	ee e0       	ldi	r30, 0x0E	; 14
     522:	fb e3       	ldi	r31, 0x3B	; 59
     524:	00 e0       	ldi	r16, 0x00	; 0
     526:	0b bf       	out	0x3b, r16	; 59
     528:	02 c0       	rjmp	.+4      	; 0x52e <__do_copy_data+0x14>
     52a:	07 90       	elpm	r0, Z+
     52c:	0d 92       	st	X+, r0
     52e:	ac 3d       	cpi	r26, 0xDC	; 220
     530:	b1 07       	cpc	r27, r17
     532:	d9 f7       	brne	.-10     	; 0x52a <__do_copy_data+0x10>

00000534 <__do_clear_bss>:
     534:	23 e0       	ldi	r18, 0x03	; 3
     536:	ac ed       	ldi	r26, 0xDC	; 220
     538:	b2 e0       	ldi	r27, 0x02	; 2
     53a:	01 c0       	rjmp	.+2      	; 0x53e <.do_clear_bss_start>

0000053c <.do_clear_bss_loop>:
     53c:	1d 92       	st	X+, r1

0000053e <.do_clear_bss_start>:
     53e:	ac 39       	cpi	r26, 0x9C	; 156
     540:	b2 07       	cpc	r27, r18
     542:	e1 f7       	brne	.-8      	; 0x53c <.do_clear_bss_loop>
     544:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <main>
     548:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <_exit>

0000054c <__bad_interrupt>:
     54c:	59 cd       	rjmp	.-1358   	; 0x0 <__vectors>

0000054e <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     54e:	e8 e0       	ldi	r30, 0x08	; 8
     550:	f1 e0       	ldi	r31, 0x01	; 1
     552:	90 81       	ld	r25, Z
     554:	90 7f       	andi	r25, 0xF0	; 240
     556:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     558:	90 81       	ld	r25, Z
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	98 2b       	or	r25, r24
     55e:	90 83       	st	Z, r25
     560:	08 95       	ret

00000562 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     562:	e8 e0       	ldi	r30, 0x08	; 8
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	80 81       	ld	r24, Z
     568:	80 7f       	andi	r24, 0xF0	; 240
     56a:	80 83       	st	Z, r24
     56c:	08 95       	ret

0000056e <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     574:	74 d6       	rcall	.+3304   	; 0x125e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     576:	ce 01       	movw	r24, r28
     578:	0e 94 84 1a 	call	0x3508	; 0x3508 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     57c:	ec 01       	movw	r28, r24
     57e:	36 d7       	rcall	.+3692   	; 0x13ec <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     580:	20 97       	sbiw	r28, 0x00	; 0
     582:	11 f4       	brne	.+4      	; 0x588 <pvPortMalloc+0x1a>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     584:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     588:	ce 01       	movw	r24, r28
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
    if( pv )
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	31 f0       	breq	.+12     	; 0x5a4 <vPortFree+0x14>
     598:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     59a:	61 d6       	rcall	.+3266   	; 0x125e <vTaskSuspendAll>
        {
            free( pv );
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     5a2:	24 d7       	rcall	.+3656   	; 0x13ec <xTaskResumeAll>
    }
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5aa:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ac:	03 96       	adiw	r24, 0x03	; 3
     5ae:	92 83       	std	Z+2, r25	; 0x02
     5b0:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	3f ef       	ldi	r19, 0xFF	; 255
     5b6:	34 83       	std	Z+4, r19	; 0x04
     5b8:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ba:	96 83       	std	Z+6, r25	; 0x06
     5bc:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5be:	90 87       	std	Z+8, r25	; 0x08
     5c0:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5c2:	10 82       	st	Z, r1
     5c4:	08 95       	ret

000005c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     5c6:	fc 01       	movw	r30, r24
     5c8:	11 86       	std	Z+9, r1	; 0x09
     5ca:	10 86       	std	Z+8, r1	; 0x08
     5cc:	08 95       	ret

000005ce <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	9c 01       	movw	r18, r24
     5d4:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     5d6:	dc 01       	movw	r26, r24
     5d8:	11 96       	adiw	r26, 0x01	; 1
     5da:	cd 91       	ld	r28, X+
     5dc:	dc 91       	ld	r29, X
     5de:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     5e0:	d3 83       	std	Z+3, r29	; 0x03
     5e2:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5e4:	8c 81       	ldd	r24, Y+4	; 0x04
     5e6:	9d 81       	ldd	r25, Y+5	; 0x05
     5e8:	95 83       	std	Z+5, r25	; 0x05
     5ea:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     5ec:	8c 81       	ldd	r24, Y+4	; 0x04
     5ee:	9d 81       	ldd	r25, Y+5	; 0x05
     5f0:	dc 01       	movw	r26, r24
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	7c 93       	st	X, r23
     5f6:	6e 93       	st	-X, r22
     5f8:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     5fa:	7d 83       	std	Y+5, r23	; 0x05
     5fc:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     5fe:	31 87       	std	Z+9, r19	; 0x09
     600:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     602:	f9 01       	movw	r30, r18
     604:	80 81       	ld	r24, Z
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	80 83       	st	Z, r24
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     616:	48 81       	ld	r20, Y
     618:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     61a:	4f 3f       	cpi	r20, 0xFF	; 255
     61c:	2f ef       	ldi	r18, 0xFF	; 255
     61e:	52 07       	cpc	r21, r18
     620:	21 f4       	brne	.+8      	; 0x62a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     622:	fc 01       	movw	r30, r24
     624:	a7 81       	ldd	r26, Z+7	; 0x07
     626:	b0 85       	ldd	r27, Z+8	; 0x08
     628:	0d c0       	rjmp	.+26     	; 0x644 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     62a:	dc 01       	movw	r26, r24
     62c:	13 96       	adiw	r26, 0x03	; 3
     62e:	01 c0       	rjmp	.+2      	; 0x632 <vListInsert+0x22>
     630:	df 01       	movw	r26, r30
     632:	12 96       	adiw	r26, 0x02	; 2
     634:	ed 91       	ld	r30, X+
     636:	fc 91       	ld	r31, X
     638:	13 97       	sbiw	r26, 0x03	; 3
     63a:	20 81       	ld	r18, Z
     63c:	31 81       	ldd	r19, Z+1	; 0x01
     63e:	42 17       	cp	r20, r18
     640:	53 07       	cpc	r21, r19
     642:	b0 f7       	brcc	.-20     	; 0x630 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     644:	12 96       	adiw	r26, 0x02	; 2
     646:	ed 91       	ld	r30, X+
     648:	fc 91       	ld	r31, X
     64a:	13 97       	sbiw	r26, 0x03	; 3
     64c:	fb 83       	std	Y+3, r31	; 0x03
     64e:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     650:	d5 83       	std	Z+5, r29	; 0x05
     652:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     654:	bd 83       	std	Y+5, r27	; 0x05
     656:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     658:	13 96       	adiw	r26, 0x03	; 3
     65a:	dc 93       	st	X, r29
     65c:	ce 93       	st	-X, r28
     65e:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     660:	99 87       	std	Y+9, r25	; 0x09
     662:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     664:	fc 01       	movw	r30, r24
     666:	20 81       	ld	r18, Z
     668:	2f 5f       	subi	r18, 0xFF	; 255
     66a:	20 83       	st	Z, r18
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     678:	a0 85       	ldd	r26, Z+8	; 0x08
     67a:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     67c:	c2 81       	ldd	r28, Z+2	; 0x02
     67e:	d3 81       	ldd	r29, Z+3	; 0x03
     680:	84 81       	ldd	r24, Z+4	; 0x04
     682:	95 81       	ldd	r25, Z+5	; 0x05
     684:	9d 83       	std	Y+5, r25	; 0x05
     686:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     688:	c4 81       	ldd	r28, Z+4	; 0x04
     68a:	d5 81       	ldd	r29, Z+5	; 0x05
     68c:	82 81       	ldd	r24, Z+2	; 0x02
     68e:	93 81       	ldd	r25, Z+3	; 0x03
     690:	9b 83       	std	Y+3, r25	; 0x03
     692:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     694:	11 96       	adiw	r26, 0x01	; 1
     696:	8d 91       	ld	r24, X+
     698:	9c 91       	ld	r25, X
     69a:	12 97       	sbiw	r26, 0x02	; 2
     69c:	e8 17       	cp	r30, r24
     69e:	f9 07       	cpc	r31, r25
     6a0:	31 f4       	brne	.+12     	; 0x6ae <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6a2:	84 81       	ldd	r24, Z+4	; 0x04
     6a4:	95 81       	ldd	r25, Z+5	; 0x05
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	9c 93       	st	X, r25
     6aa:	8e 93       	st	-X, r24
     6ac:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6ae:	11 86       	std	Z+9, r1	; 0x09
     6b0:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     6b2:	8c 91       	ld	r24, X
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6b8:	8c 91       	ld	r24, X
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     6c0:	31 e1       	ldi	r19, 0x11	; 17
     6c2:	fc 01       	movw	r30, r24
     6c4:	30 83       	st	Z, r19
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	22 e2       	ldi	r18, 0x22	; 34
     6ca:	20 83       	st	Z, r18
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	a3 e3       	ldi	r26, 0x33	; 51
     6d0:	a0 83       	st	Z, r26
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	60 83       	st	Z, r22
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	70 83       	st	Z, r23
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	10 82       	st	Z, r1
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	10 82       	st	Z, r1
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	60 e8       	ldi	r22, 0x80	; 128
     6e6:	60 83       	st	Z, r22
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	10 82       	st	Z, r1
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	10 82       	st	Z, r1
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	62 e0       	ldi	r22, 0x02	; 2
     6f8:	60 83       	st	Z, r22
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	60 83       	st	Z, r22
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	60 83       	st	Z, r22
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	65 e0       	ldi	r22, 0x05	; 5
     70a:	60 83       	st	Z, r22
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	66 e0       	ldi	r22, 0x06	; 6
     710:	60 83       	st	Z, r22
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	67 e0       	ldi	r22, 0x07	; 7
     716:	60 83       	st	Z, r22
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	68 e0       	ldi	r22, 0x08	; 8
     71c:	60 83       	st	Z, r22
     71e:	31 97       	sbiw	r30, 0x01	; 1
     720:	69 e0       	ldi	r22, 0x09	; 9
     722:	60 83       	st	Z, r22
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	60 e1       	ldi	r22, 0x10	; 16
     728:	60 83       	st	Z, r22
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	30 83       	st	Z, r19
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	32 e1       	ldi	r19, 0x12	; 18
     732:	30 83       	st	Z, r19
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	33 e1       	ldi	r19, 0x13	; 19
     738:	30 83       	st	Z, r19
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	34 e1       	ldi	r19, 0x14	; 20
     73e:	30 83       	st	Z, r19
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	35 e1       	ldi	r19, 0x15	; 21
     744:	30 83       	st	Z, r19
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	36 e1       	ldi	r19, 0x16	; 22
     74a:	30 83       	st	Z, r19
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	37 e1       	ldi	r19, 0x17	; 23
     750:	30 83       	st	Z, r19
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	38 e1       	ldi	r19, 0x18	; 24
     756:	30 83       	st	Z, r19
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	39 e1       	ldi	r19, 0x19	; 25
     75c:	30 83       	st	Z, r19
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	30 e2       	ldi	r19, 0x20	; 32
     762:	30 83       	st	Z, r19
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	31 e2       	ldi	r19, 0x21	; 33
     768:	30 83       	st	Z, r19
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	20 83       	st	Z, r18
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	23 e2       	ldi	r18, 0x23	; 35
     772:	20 83       	st	Z, r18
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	40 83       	st	Z, r20
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	50 83       	st	Z, r21
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	26 e2       	ldi	r18, 0x26	; 38
     780:	20 83       	st	Z, r18
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	27 e2       	ldi	r18, 0x27	; 39
     786:	20 83       	st	Z, r18
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	28 e2       	ldi	r18, 0x28	; 40
     78c:	20 83       	st	Z, r18
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	29 e2       	ldi	r18, 0x29	; 41
     792:	20 83       	st	Z, r18
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	20 e3       	ldi	r18, 0x30	; 48
     798:	20 83       	st	Z, r18
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	21 e3       	ldi	r18, 0x31	; 49
     79e:	20 83       	st	Z, r18
     7a0:	89 97       	sbiw	r24, 0x29	; 41
     7a2:	08 95       	ret

000007a4 <xPortStartScheduler>:
     7a4:	a8 95       	wdr
     7a6:	90 ec       	ldi	r25, 0xC0	; 192
     7a8:	88 e1       	ldi	r24, 0x18	; 24
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	a8 95       	wdr
     7b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7ba:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <pxCurrentTCB>
     7be:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     7c2:	cd 91       	ld	r28, X+
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	dd 91       	ld	r29, X+
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	7f 91       	pop	r23
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	7f 90       	pop	r7
     7fc:	6f 90       	pop	r6
     7fe:	5f 90       	pop	r5
     800:	4f 90       	pop	r4
     802:	3f 90       	pop	r3
     804:	2f 90       	pop	r2
     806:	1f 90       	pop	r1
     808:	0f 90       	pop	r0
     80a:	0c be       	out	0x3c, r0	; 60
     80c:	0f 90       	pop	r0
     80e:	0b be       	out	0x3b, r0	; 59
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	08 95       	ret
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	08 95       	ret

0000081c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	0f 92       	push	r0
     824:	0b b6       	in	r0, 0x3b	; 59
     826:	0f 92       	push	r0
     828:	0c b6       	in	r0, 0x3c	; 60
     82a:	0f 92       	push	r0
     82c:	1f 92       	push	r1
     82e:	11 24       	eor	r1, r1
     830:	2f 92       	push	r2
     832:	3f 92       	push	r3
     834:	4f 92       	push	r4
     836:	5f 92       	push	r5
     838:	6f 92       	push	r6
     83a:	7f 92       	push	r7
     83c:	8f 92       	push	r8
     83e:	9f 92       	push	r9
     840:	af 92       	push	r10
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	2f 93       	push	r18
     852:	3f 93       	push	r19
     854:	4f 93       	push	r20
     856:	5f 93       	push	r21
     858:	6f 93       	push	r22
     85a:	7f 93       	push	r23
     85c:	8f 93       	push	r24
     85e:	9f 93       	push	r25
     860:	af 93       	push	r26
     862:	bf 93       	push	r27
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31
     86c:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <pxCurrentTCB>
     870:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     874:	0d b6       	in	r0, 0x3d	; 61
     876:	0d 92       	st	X+, r0
     878:	0e b6       	in	r0, 0x3e	; 62
     87a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     87c:	30 d6       	rcall	.+3168   	; 0x14de <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     87e:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <pxCurrentTCB>
     882:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     886:	cd 91       	ld	r28, X+
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	dd 91       	ld	r29, X+
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	bf 90       	pop	r11
     8b8:	af 90       	pop	r10
     8ba:	9f 90       	pop	r9
     8bc:	8f 90       	pop	r8
     8be:	7f 90       	pop	r7
     8c0:	6f 90       	pop	r6
     8c2:	5f 90       	pop	r5
     8c4:	4f 90       	pop	r4
     8c6:	3f 90       	pop	r3
     8c8:	2f 90       	pop	r2
     8ca:	1f 90       	pop	r1
     8cc:	0f 90       	pop	r0
     8ce:	0c be       	out	0x3c, r0	; 60
     8d0:	0f 90       	pop	r0
     8d2:	0b be       	out	0x3b, r0	; 59
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8da:	08 95       	ret

000008dc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	0f 92       	push	r0
     8e4:	0b b6       	in	r0, 0x3b	; 59
     8e6:	0f 92       	push	r0
     8e8:	0c b6       	in	r0, 0x3c	; 60
     8ea:	0f 92       	push	r0
     8ec:	1f 92       	push	r1
     8ee:	11 24       	eor	r1, r1
     8f0:	2f 92       	push	r2
     8f2:	3f 92       	push	r3
     8f4:	4f 92       	push	r4
     8f6:	5f 92       	push	r5
     8f8:	6f 92       	push	r6
     8fa:	7f 92       	push	r7
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
     92c:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <pxCurrentTCB>
     930:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     934:	0d b6       	in	r0, 0x3d	; 61
     936:	0d 92       	st	X+, r0
     938:	0e b6       	in	r0, 0x3e	; 62
     93a:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     93c:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     93e:	9f d4       	rcall	.+2366   	; 0x127e <xTaskIncrementTick>
     940:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     942:	cd d5       	rcall	.+2970   	; 0x14de <vTaskSwitchContext>
     944:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     948:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     94c:	cd 91       	ld	r28, X+
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	dd 91       	ld	r29, X+
     952:	de bf       	out	0x3e, r29	; 62
     954:	ff 91       	pop	r31
     956:	ef 91       	pop	r30
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	cf 90       	pop	r12
     97c:	bf 90       	pop	r11
     97e:	af 90       	pop	r10
     980:	9f 90       	pop	r9
     982:	8f 90       	pop	r8
     984:	7f 90       	pop	r7
     986:	6f 90       	pop	r6
     988:	5f 90       	pop	r5
     98a:	4f 90       	pop	r4
     98c:	3f 90       	pop	r3
     98e:	2f 90       	pop	r2
     990:	1f 90       	pop	r1
     992:	0f 90       	pop	r0
     994:	0c be       	out	0x3c, r0	; 60
     996:	0f 90       	pop	r0
     998:	0b be       	out	0x3b, r0	; 59
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	08 95       	ret

000009a2 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     9a2:	9c df       	rcall	.-200    	; 0x8dc <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     9a4:	18 95       	reti

000009a6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	0f 92       	push	r0
     9ac:	fc 01       	movw	r30, r24
     9ae:	92 8d       	ldd	r25, Z+26	; 0x1a
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	91 11       	cpse	r25, r1
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret

000009bc <prvCopyDataToQueue>:
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
     9c6:	04 2f       	mov	r16, r20
     9c8:	1a 8d       	ldd	r17, Y+26	; 0x1a
     9ca:	4c 8d       	ldd	r20, Y+28	; 0x1c
     9cc:	41 11       	cpse	r20, r1
     9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <prvCopyDataToQueue+0x2a>
     9d0:	88 81       	ld	r24, Y
     9d2:	99 81       	ldd	r25, Y+1	; 0x01
     9d4:	89 2b       	or	r24, r25
     9d6:	09 f0       	breq	.+2      	; 0x9da <prvCopyDataToQueue+0x1e>
     9d8:	41 c0       	rjmp	.+130    	; 0xa5c <prvCopyDataToQueue+0xa0>
     9da:	8c 81       	ldd	r24, Y+4	; 0x04
     9dc:	9d 81       	ldd	r25, Y+5	; 0x05
     9de:	cd d6       	rcall	.+3482   	; 0x177a <xTaskPriorityDisinherit>
     9e0:	1d 82       	std	Y+5, r1	; 0x05
     9e2:	1c 82       	std	Y+4, r1	; 0x04
     9e4:	42 c0       	rjmp	.+132    	; 0xa6a <prvCopyDataToQueue+0xae>
     9e6:	01 11       	cpse	r16, r1
     9e8:	17 c0       	rjmp	.+46     	; 0xa18 <prvCopyDataToQueue+0x5c>
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	9b 81       	ldd	r25, Y+3	; 0x03
     9f0:	0e 94 8c 1c 	call	0x3918	; 0x3918 <memcpy>
     9f4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	9b 81       	ldd	r25, Y+3	; 0x03
     9fa:	82 0f       	add	r24, r18
     9fc:	91 1d       	adc	r25, r1
     9fe:	9b 83       	std	Y+3, r25	; 0x03
     a00:	8a 83       	std	Y+2, r24	; 0x02
     a02:	2c 81       	ldd	r18, Y+4	; 0x04
     a04:	3d 81       	ldd	r19, Y+5	; 0x05
     a06:	82 17       	cp	r24, r18
     a08:	93 07       	cpc	r25, r19
     a0a:	50 f1       	brcs	.+84     	; 0xa60 <prvCopyDataToQueue+0xa4>
     a0c:	88 81       	ld	r24, Y
     a0e:	99 81       	ldd	r25, Y+1	; 0x01
     a10:	9b 83       	std	Y+3, r25	; 0x03
     a12:	8a 83       	std	Y+2, r24	; 0x02
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	29 c0       	rjmp	.+82     	; 0xa6a <prvCopyDataToQueue+0xae>
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	8e 81       	ldd	r24, Y+6	; 0x06
     a1c:	9f 81       	ldd	r25, Y+7	; 0x07
     a1e:	0e 94 8c 1c 	call	0x3918	; 0x3918 <memcpy>
     a22:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	91 95       	neg	r25
     a28:	81 95       	neg	r24
     a2a:	91 09       	sbc	r25, r1
     a2c:	2e 81       	ldd	r18, Y+6	; 0x06
     a2e:	3f 81       	ldd	r19, Y+7	; 0x07
     a30:	28 0f       	add	r18, r24
     a32:	39 1f       	adc	r19, r25
     a34:	3f 83       	std	Y+7, r19	; 0x07
     a36:	2e 83       	std	Y+6, r18	; 0x06
     a38:	48 81       	ld	r20, Y
     a3a:	59 81       	ldd	r21, Y+1	; 0x01
     a3c:	24 17       	cp	r18, r20
     a3e:	35 07       	cpc	r19, r21
     a40:	30 f4       	brcc	.+12     	; 0xa4e <prvCopyDataToQueue+0x92>
     a42:	2c 81       	ldd	r18, Y+4	; 0x04
     a44:	3d 81       	ldd	r19, Y+5	; 0x05
     a46:	82 0f       	add	r24, r18
     a48:	93 1f       	adc	r25, r19
     a4a:	9f 83       	std	Y+7, r25	; 0x07
     a4c:	8e 83       	std	Y+6, r24	; 0x06
     a4e:	02 30       	cpi	r16, 0x02	; 2
     a50:	49 f4       	brne	.+18     	; 0xa64 <prvCopyDataToQueue+0xa8>
     a52:	11 23       	and	r17, r17
     a54:	49 f0       	breq	.+18     	; 0xa68 <prvCopyDataToQueue+0xac>
     a56:	11 50       	subi	r17, 0x01	; 1
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <prvCopyDataToQueue+0xae>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <prvCopyDataToQueue+0xae>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <prvCopyDataToQueue+0xae>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <prvCopyDataToQueue+0xae>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	1f 5f       	subi	r17, 0xFF	; 255
     a6c:	1a 8f       	std	Y+26, r17	; 0x1a
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <prvCopyDataFromQueue>:
     a78:	fc 01       	movw	r30, r24
     a7a:	44 8d       	ldd	r20, Z+28	; 0x1c
     a7c:	44 23       	and	r20, r20
     a7e:	a9 f0       	breq	.+42     	; 0xaaa <prvCopyDataFromQueue+0x32>
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	26 81       	ldd	r18, Z+6	; 0x06
     a84:	37 81       	ldd	r19, Z+7	; 0x07
     a86:	24 0f       	add	r18, r20
     a88:	35 1f       	adc	r19, r21
     a8a:	37 83       	std	Z+7, r19	; 0x07
     a8c:	26 83       	std	Z+6, r18	; 0x06
     a8e:	84 81       	ldd	r24, Z+4	; 0x04
     a90:	95 81       	ldd	r25, Z+5	; 0x05
     a92:	28 17       	cp	r18, r24
     a94:	39 07       	cpc	r19, r25
     a96:	20 f0       	brcs	.+8      	; 0xaa0 <prvCopyDataFromQueue+0x28>
     a98:	80 81       	ld	r24, Z
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	97 83       	std	Z+7, r25	; 0x07
     a9e:	86 83       	std	Z+6, r24	; 0x06
     aa0:	cb 01       	movw	r24, r22
     aa2:	66 81       	ldd	r22, Z+6	; 0x06
     aa4:	77 81       	ldd	r23, Z+7	; 0x07
     aa6:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <memcpy>
     aaa:	08 95       	ret

00000aac <prvUnlockQueue>:
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	8c 01       	movw	r16, r24
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	0f 92       	push	r0
     abe:	fc 01       	movw	r30, r24
     ac0:	c6 8d       	ldd	r28, Z+30	; 0x1e
     ac2:	1c 16       	cp	r1, r28
     ac4:	9c f4       	brge	.+38     	; 0xaec <prvUnlockQueue+0x40>
     ac6:	81 89       	ldd	r24, Z+17	; 0x11
     ac8:	81 11       	cpse	r24, r1
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <prvUnlockQueue+0x2c>
     acc:	0f c0       	rjmp	.+30     	; 0xaec <prvUnlockQueue+0x40>
     ace:	f8 01       	movw	r30, r16
     ad0:	81 89       	ldd	r24, Z+17	; 0x11
     ad2:	81 11       	cpse	r24, r1
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <prvUnlockQueue+0x34>
     ad6:	0a c0       	rjmp	.+20     	; 0xaec <prvUnlockQueue+0x40>
     ad8:	78 01       	movw	r14, r16
     ada:	f1 e1       	ldi	r31, 0x11	; 17
     adc:	ef 0e       	add	r14, r31
     ade:	f1 1c       	adc	r15, r1
     ae0:	c7 01       	movw	r24, r14
     ae2:	b2 d5       	rcall	.+2916   	; 0x1648 <xTaskRemoveFromEventList>
     ae4:	81 11       	cpse	r24, r1
     ae6:	37 d6       	rcall	.+3182   	; 0x1756 <vTaskMissedYield>
     ae8:	c1 50       	subi	r28, 0x01	; 1
     aea:	89 f7       	brne	.-30     	; 0xace <prvUnlockQueue+0x22>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	f8 01       	movw	r30, r16
     af0:	86 8f       	std	Z+30, r24	; 0x1e
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	0f 92       	push	r0
     afc:	c5 8d       	ldd	r28, Z+29	; 0x1d
     afe:	1c 16       	cp	r1, r28
     b00:	9c f4       	brge	.+38     	; 0xb28 <prvUnlockQueue+0x7c>
     b02:	80 85       	ldd	r24, Z+8	; 0x08
     b04:	81 11       	cpse	r24, r1
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <prvUnlockQueue+0x68>
     b08:	0f c0       	rjmp	.+30     	; 0xb28 <prvUnlockQueue+0x7c>
     b0a:	f8 01       	movw	r30, r16
     b0c:	80 85       	ldd	r24, Z+8	; 0x08
     b0e:	81 11       	cpse	r24, r1
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <prvUnlockQueue+0x70>
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <prvUnlockQueue+0x7c>
     b14:	78 01       	movw	r14, r16
     b16:	f8 e0       	ldi	r31, 0x08	; 8
     b18:	ef 0e       	add	r14, r31
     b1a:	f1 1c       	adc	r15, r1
     b1c:	c7 01       	movw	r24, r14
     b1e:	94 d5       	rcall	.+2856   	; 0x1648 <xTaskRemoveFromEventList>
     b20:	81 11       	cpse	r24, r1
     b22:	19 d6       	rcall	.+3122   	; 0x1756 <vTaskMissedYield>
     b24:	c1 50       	subi	r28, 0x01	; 1
     b26:	89 f7       	brne	.-30     	; 0xb0a <prvUnlockQueue+0x5e>
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	f8 01       	movw	r30, r16
     b2c:	85 8f       	std	Z+29, r24	; 0x1d
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <xQueueGenericReset>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	0f 92       	push	r0
     b4a:	e8 81       	ld	r30, Y
     b4c:	f9 81       	ldd	r31, Y+1	; 0x01
     b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b50:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	82 9f       	mul	r24, r18
     b58:	a0 01       	movw	r20, r0
     b5a:	83 9f       	mul	r24, r19
     b5c:	50 0d       	add	r21, r0
     b5e:	92 9f       	mul	r25, r18
     b60:	50 0d       	add	r21, r0
     b62:	11 24       	eor	r1, r1
     b64:	4e 0f       	add	r20, r30
     b66:	5f 1f       	adc	r21, r31
     b68:	5d 83       	std	Y+5, r21	; 0x05
     b6a:	4c 83       	std	Y+4, r20	; 0x04
     b6c:	1a 8e       	std	Y+26, r1	; 0x1a
     b6e:	fb 83       	std	Y+3, r31	; 0x03
     b70:	ea 83       	std	Y+2, r30	; 0x02
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	82 9f       	mul	r24, r18
     b76:	a0 01       	movw	r20, r0
     b78:	83 9f       	mul	r24, r19
     b7a:	50 0d       	add	r21, r0
     b7c:	92 9f       	mul	r25, r18
     b7e:	50 0d       	add	r21, r0
     b80:	11 24       	eor	r1, r1
     b82:	cf 01       	movw	r24, r30
     b84:	84 0f       	add	r24, r20
     b86:	95 1f       	adc	r25, r21
     b88:	9f 83       	std	Y+7, r25	; 0x07
     b8a:	8e 83       	std	Y+6, r24	; 0x06
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	8d 8f       	std	Y+29, r24	; 0x1d
     b90:	8e 8f       	std	Y+30, r24	; 0x1e
     b92:	61 11       	cpse	r22, r1
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <xQueueGenericReset+0x6c>
     b96:	88 85       	ldd	r24, Y+8	; 0x08
     b98:	88 23       	and	r24, r24
     b9a:	69 f0       	breq	.+26     	; 0xbb6 <xQueueGenericReset+0x78>
     b9c:	ce 01       	movw	r24, r28
     b9e:	08 96       	adiw	r24, 0x08	; 8
     ba0:	53 d5       	rcall	.+2726   	; 0x1648 <xTaskRemoveFromEventList>
     ba2:	88 23       	and	r24, r24
     ba4:	41 f0       	breq	.+16     	; 0xbb6 <xQueueGenericReset+0x78>
     ba6:	3a de       	rcall	.-908    	; 0x81c <vPortYield>
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <xQueueGenericReset+0x78>
     baa:	ce 01       	movw	r24, r28
     bac:	08 96       	adiw	r24, 0x08	; 8
     bae:	fd dc       	rcall	.-1542   	; 0x5aa <vListInitialise>
     bb0:	ce 01       	movw	r24, r28
     bb2:	41 96       	adiw	r24, 0x11	; 17
     bb4:	fa dc       	rcall	.-1548   	; 0x5aa <vListInitialise>
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <xQueueGenericCreate>:
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	08 2f       	mov	r16, r24
     bce:	16 2f       	mov	r17, r22
     bd0:	f4 2e       	mov	r15, r20
     bd2:	66 23       	and	r22, r22
     bd4:	b9 f0       	breq	.+46     	; 0xc04 <xQueueGenericCreate+0x42>
     bd6:	86 9f       	mul	r24, r22
     bd8:	c0 01       	movw	r24, r0
     bda:	11 24       	eor	r1, r1
     bdc:	81 96       	adiw	r24, 0x21	; 33
     bde:	c7 dc       	rcall	.-1650   	; 0x56e <pvPortMalloc>
     be0:	ec 01       	movw	r28, r24
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	41 f4       	brne	.+16     	; 0xbf6 <xQueueGenericCreate+0x34>
     be6:	14 c0       	rjmp	.+40     	; 0xc10 <xQueueGenericCreate+0x4e>
     be8:	0b 8f       	std	Y+27, r16	; 0x1b
     bea:	1c 8f       	std	Y+28, r17	; 0x1c
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	ce 01       	movw	r24, r28
     bf0:	a6 df       	rcall	.-180    	; 0xb3e <xQueueGenericReset>
     bf2:	f8 a2       	std	Y+32, r15	; 0x20
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <xQueueGenericCreate+0x4e>
     bf6:	81 96       	adiw	r24, 0x21	; 33
     bf8:	99 83       	std	Y+1, r25	; 0x01
     bfa:	88 83       	st	Y, r24
     bfc:	f5 cf       	rjmp	.-22     	; 0xbe8 <xQueueGenericCreate+0x26>
     bfe:	d9 83       	std	Y+1, r29	; 0x01
     c00:	c8 83       	st	Y, r28
     c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <xQueueGenericCreate+0x26>
     c04:	81 e2       	ldi	r24, 0x21	; 33
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	b2 dc       	rcall	.-1692   	; 0x56e <pvPortMalloc>
     c0a:	ec 01       	movw	r28, r24
     c0c:	89 2b       	or	r24, r25
     c0e:	b9 f7       	brne	.-18     	; 0xbfe <xQueueGenericCreate+0x3c>
     c10:	ce 01       	movw	r24, r28
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	08 95       	ret

00000c1e <xQueueGenericSend>:
     c1e:	9f 92       	push	r9
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <xQueueGenericSend+0x18>
     c36:	1f 92       	push	r1
     c38:	1f 92       	push	r1
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	8c 01       	movw	r16, r24
     c40:	6b 01       	movw	r12, r22
     c42:	5d 83       	std	Y+5, r21	; 0x05
     c44:	4c 83       	std	Y+4, r20	; 0x04
     c46:	a2 2e       	mov	r10, r18
     c48:	b1 2c       	mov	r11, r1
     c4a:	99 24       	eor	r9, r9
     c4c:	93 94       	inc	r9
     c4e:	7c 01       	movw	r14, r24
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	e8 0e       	add	r14, r24
     c54:	f1 1c       	adc	r15, r1
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	0f 92       	push	r0
     c5c:	f8 01       	movw	r30, r16
     c5e:	92 8d       	ldd	r25, Z+26	; 0x1a
     c60:	83 8d       	ldd	r24, Z+27	; 0x1b
     c62:	98 17       	cp	r25, r24
     c64:	18 f0       	brcs	.+6      	; 0xc6c <xQueueGenericSend+0x4e>
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	af 12       	cpse	r10, r31
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <xQueueGenericSend+0x78>
     c6c:	4a 2d       	mov	r20, r10
     c6e:	b6 01       	movw	r22, r12
     c70:	c8 01       	movw	r24, r16
     c72:	a4 de       	rcall	.-696    	; 0x9bc <prvCopyDataToQueue>
     c74:	f8 01       	movw	r30, r16
     c76:	91 89       	ldd	r25, Z+17	; 0x11
     c78:	99 23       	and	r25, r25
     c7a:	39 f0       	breq	.+14     	; 0xc8a <xQueueGenericSend+0x6c>
     c7c:	c8 01       	movw	r24, r16
     c7e:	41 96       	adiw	r24, 0x11	; 17
     c80:	e3 d4       	rcall	.+2502   	; 0x1648 <xTaskRemoveFromEventList>
     c82:	88 23       	and	r24, r24
     c84:	21 f0       	breq	.+8      	; 0xc8e <xQueueGenericSend+0x70>
     c86:	ca dd       	rcall	.-1132   	; 0x81c <vPortYield>
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <xQueueGenericSend+0x70>
     c8a:	81 11       	cpse	r24, r1
     c8c:	c7 dd       	rcall	.-1138   	; 0x81c <vPortYield>
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	45 c0       	rjmp	.+138    	; 0xd20 <xQueueGenericSend+0x102>
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	9d 81       	ldd	r25, Y+5	; 0x05
     c9a:	89 2b       	or	r24, r25
     c9c:	21 f4       	brne	.+8      	; 0xca6 <xQueueGenericSend+0x88>
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	3d c0       	rjmp	.+122    	; 0xd20 <xQueueGenericSend+0x102>
     ca6:	b1 10       	cpse	r11, r1
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <xQueueGenericSend+0x94>
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	13 d5       	rcall	.+2598   	; 0x16d6 <vTaskInternalSetTimeOutState>
     cb0:	b9 2c       	mov	r11, r9
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	d3 d2       	rcall	.+1446   	; 0x125e <vTaskSuspendAll>
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	0f 92       	push	r0
     cbe:	f8 01       	movw	r30, r16
     cc0:	85 8d       	ldd	r24, Z+29	; 0x1d
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <xQueueGenericSend+0xaa>
     cc6:	15 8e       	std	Z+29, r1	; 0x1d
     cc8:	f8 01       	movw	r30, r16
     cca:	86 8d       	ldd	r24, Z+30	; 0x1e
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	09 f4       	brne	.+2      	; 0xcd2 <xQueueGenericSend+0xb4>
     cd0:	16 8e       	std	Z+30, r1	; 0x1e
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	be 01       	movw	r22, r28
     cd8:	6c 5f       	subi	r22, 0xFC	; 252
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	05 d5       	rcall	.+2570   	; 0x16ec <xTaskCheckForTimeOut>
     ce2:	81 11       	cpse	r24, r1
     ce4:	19 c0       	rjmp	.+50     	; 0xd18 <xQueueGenericSend+0xfa>
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	0f 92       	push	r0
     cec:	f8 01       	movw	r30, r16
     cee:	92 8d       	ldd	r25, Z+26	; 0x1a
     cf0:	83 8d       	ldd	r24, Z+27	; 0x1b
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	98 13       	cpse	r25, r24
     cf8:	0b c0       	rjmp	.+22     	; 0xd10 <xQueueGenericSend+0xf2>
     cfa:	6c 81       	ldd	r22, Y+4	; 0x04
     cfc:	7d 81       	ldd	r23, Y+5	; 0x05
     cfe:	c7 01       	movw	r24, r14
     d00:	7b d4       	rcall	.+2294   	; 0x15f8 <vTaskPlaceOnEventList>
     d02:	c8 01       	movw	r24, r16
     d04:	d3 de       	rcall	.-602    	; 0xaac <prvUnlockQueue>
     d06:	72 d3       	rcall	.+1764   	; 0x13ec <xTaskResumeAll>
     d08:	81 11       	cpse	r24, r1
     d0a:	a5 cf       	rjmp	.-182    	; 0xc56 <xQueueGenericSend+0x38>
     d0c:	87 dd       	rcall	.-1266   	; 0x81c <vPortYield>
     d0e:	a3 cf       	rjmp	.-186    	; 0xc56 <xQueueGenericSend+0x38>
     d10:	c8 01       	movw	r24, r16
     d12:	cc de       	rcall	.-616    	; 0xaac <prvUnlockQueue>
     d14:	6b d3       	rcall	.+1750   	; 0x13ec <xTaskResumeAll>
     d16:	9f cf       	rjmp	.-194    	; 0xc56 <xQueueGenericSend+0x38>
     d18:	c8 01       	movw	r24, r16
     d1a:	c8 de       	rcall	.-624    	; 0xaac <prvUnlockQueue>
     d1c:	67 d3       	rcall	.+1742   	; 0x13ec <xTaskResumeAll>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	bf 90       	pop	r11
     d3c:	af 90       	pop	r10
     d3e:	9f 90       	pop	r9
     d40:	08 95       	ret

00000d42 <xQueueGenericSendFromISR>:
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	8a 01       	movw	r16, r20
     d50:	fc 01       	movw	r30, r24
     d52:	52 8d       	ldd	r21, Z+26	; 0x1a
     d54:	33 8d       	ldd	r19, Z+27	; 0x1b
     d56:	53 17       	cp	r21, r19
     d58:	10 f0       	brcs	.+4      	; 0xd5e <xQueueGenericSendFromISR+0x1c>
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	e1 f4       	brne	.+56     	; 0xd96 <xQueueGenericSendFromISR+0x54>
     d5e:	42 2f       	mov	r20, r18
     d60:	78 01       	movw	r14, r16
     d62:	ec 01       	movw	r28, r24
     d64:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d66:	2a de       	rcall	.-940    	; 0x9bc <prvCopyDataToQueue>
     d68:	1f 3f       	cpi	r17, 0xFF	; 255
     d6a:	79 f4       	brne	.+30     	; 0xd8a <xQueueGenericSendFromISR+0x48>
     d6c:	89 89       	ldd	r24, Y+17	; 0x11
     d6e:	88 23       	and	r24, r24
     d70:	a1 f0       	breq	.+40     	; 0xd9a <xQueueGenericSendFromISR+0x58>
     d72:	ce 01       	movw	r24, r28
     d74:	41 96       	adiw	r24, 0x11	; 17
     d76:	68 d4       	rcall	.+2256   	; 0x1648 <xTaskRemoveFromEventList>
     d78:	88 23       	and	r24, r24
     d7a:	89 f0       	breq	.+34     	; 0xd9e <xQueueGenericSendFromISR+0x5c>
     d7c:	e1 14       	cp	r14, r1
     d7e:	f1 04       	cpc	r15, r1
     d80:	81 f0       	breq	.+32     	; 0xda2 <xQueueGenericSendFromISR+0x60>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	f7 01       	movw	r30, r14
     d86:	80 83       	st	Z, r24
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <xQueueGenericSendFromISR+0x62>
     d8a:	ff 24       	eor	r15, r15
     d8c:	f3 94       	inc	r15
     d8e:	f1 0e       	add	r15, r17
     d90:	fe 8e       	std	Y+30, r15	; 0x1e
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <xQueueGenericSendFromISR+0x62>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <xQueueGenericSendFromISR+0x62>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <xQueueGenericSendFromISR+0x62>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <xQueueGenericSendFromISR+0x62>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	08 95       	ret

00000db2 <xQueueReceive>:
     db2:	9f 92       	push	r9
     db4:	af 92       	push	r10
     db6:	bf 92       	push	r11
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <xQueueReceive+0x18>
     dca:	1f 92       	push	r1
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8c 01       	movw	r16, r24
     dd4:	5b 01       	movw	r10, r22
     dd6:	5d 83       	std	Y+5, r21	; 0x05
     dd8:	4c 83       	std	Y+4, r20	; 0x04
     dda:	e1 2c       	mov	r14, r1
     ddc:	99 24       	eor	r9, r9
     dde:	93 94       	inc	r9
     de0:	6c 01       	movw	r12, r24
     de2:	81 e1       	ldi	r24, 0x11	; 17
     de4:	c8 0e       	add	r12, r24
     de6:	d1 1c       	adc	r13, r1
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	0f 92       	push	r0
     dee:	f8 01       	movw	r30, r16
     df0:	f2 8c       	ldd	r15, Z+26	; 0x1a
     df2:	ff 20       	and	r15, r15
     df4:	91 f0       	breq	.+36     	; 0xe1a <xQueueReceive+0x68>
     df6:	b5 01       	movw	r22, r10
     df8:	c8 01       	movw	r24, r16
     dfa:	3e de       	rcall	.-900    	; 0xa78 <prvCopyDataFromQueue>
     dfc:	fa 94       	dec	r15
     dfe:	f8 01       	movw	r30, r16
     e00:	f2 8e       	std	Z+26, r15	; 0x1a
     e02:	80 85       	ldd	r24, Z+8	; 0x08
     e04:	88 23       	and	r24, r24
     e06:	29 f0       	breq	.+10     	; 0xe12 <xQueueReceive+0x60>
     e08:	c8 01       	movw	r24, r16
     e0a:	08 96       	adiw	r24, 0x08	; 8
     e0c:	1d d4       	rcall	.+2106   	; 0x1648 <xTaskRemoveFromEventList>
     e0e:	81 11       	cpse	r24, r1
     e10:	05 dd       	rcall	.-1526   	; 0x81c <vPortYield>
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	44 c0       	rjmp	.+136    	; 0xea2 <xQueueReceive+0xf0>
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	89 2b       	or	r24, r25
     e20:	21 f4       	brne	.+8      	; 0xe2a <xQueueReceive+0x78>
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	3c c0       	rjmp	.+120    	; 0xea2 <xQueueReceive+0xf0>
     e2a:	e1 10       	cpse	r14, r1
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <xQueueReceive+0x84>
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	51 d4       	rcall	.+2210   	; 0x16d6 <vTaskInternalSetTimeOutState>
     e34:	e9 2c       	mov	r14, r9
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	11 d2       	rcall	.+1058   	; 0x125e <vTaskSuspendAll>
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	0f 92       	push	r0
     e42:	f8 01       	movw	r30, r16
     e44:	85 8d       	ldd	r24, Z+29	; 0x1d
     e46:	8f 3f       	cpi	r24, 0xFF	; 255
     e48:	09 f4       	brne	.+2      	; 0xe4c <xQueueReceive+0x9a>
     e4a:	15 8e       	std	Z+29, r1	; 0x1d
     e4c:	f8 01       	movw	r30, r16
     e4e:	86 8d       	ldd	r24, Z+30	; 0x1e
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	09 f4       	brne	.+2      	; 0xe56 <xQueueReceive+0xa4>
     e54:	16 8e       	std	Z+30, r1	; 0x1e
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	be 01       	movw	r22, r28
     e5c:	6c 5f       	subi	r22, 0xFC	; 252
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	43 d4       	rcall	.+2182   	; 0x16ec <xTaskCheckForTimeOut>
     e66:	81 11       	cpse	r24, r1
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <xQueueReceive+0xde>
     e6a:	c8 01       	movw	r24, r16
     e6c:	9c dd       	rcall	.-1224   	; 0x9a6 <prvIsQueueEmpty>
     e6e:	88 23       	and	r24, r24
     e70:	59 f0       	breq	.+22     	; 0xe88 <xQueueReceive+0xd6>
     e72:	6c 81       	ldd	r22, Y+4	; 0x04
     e74:	7d 81       	ldd	r23, Y+5	; 0x05
     e76:	c6 01       	movw	r24, r12
     e78:	bf d3       	rcall	.+1918   	; 0x15f8 <vTaskPlaceOnEventList>
     e7a:	c8 01       	movw	r24, r16
     e7c:	17 de       	rcall	.-978    	; 0xaac <prvUnlockQueue>
     e7e:	b6 d2       	rcall	.+1388   	; 0x13ec <xTaskResumeAll>
     e80:	81 11       	cpse	r24, r1
     e82:	b2 cf       	rjmp	.-156    	; 0xde8 <xQueueReceive+0x36>
     e84:	cb dc       	rcall	.-1642   	; 0x81c <vPortYield>
     e86:	b0 cf       	rjmp	.-160    	; 0xde8 <xQueueReceive+0x36>
     e88:	c8 01       	movw	r24, r16
     e8a:	10 de       	rcall	.-992    	; 0xaac <prvUnlockQueue>
     e8c:	af d2       	rcall	.+1374   	; 0x13ec <xTaskResumeAll>
     e8e:	ac cf       	rjmp	.-168    	; 0xde8 <xQueueReceive+0x36>
     e90:	c8 01       	movw	r24, r16
     e92:	0c de       	rcall	.-1000   	; 0xaac <prvUnlockQueue>
     e94:	ab d2       	rcall	.+1366   	; 0x13ec <xTaskResumeAll>
     e96:	c8 01       	movw	r24, r16
     e98:	86 dd       	rcall	.-1268   	; 0x9a6 <prvIsQueueEmpty>
     e9a:	88 23       	and	r24, r24
     e9c:	09 f4       	brne	.+2      	; 0xea0 <xQueueReceive+0xee>
     e9e:	a4 cf       	rjmp	.-184    	; 0xde8 <xQueueReceive+0x36>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	08 95       	ret

00000ec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	0f 92       	push	r0
     ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	09 f4       	brne	.+2      	; 0xed8 <vQueueWaitForMessageRestricted+0x14>
     ed6:	1d 8e       	std	Y+29, r1	; 0x1d
     ed8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eda:	8f 3f       	cpi	r24, 0xFF	; 255
     edc:	09 f4       	brne	.+2      	; 0xee0 <vQueueWaitForMessageRestricted+0x1c>
     ede:	1e 8e       	std	Y+30, r1	; 0x1e
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ee4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ee6:	81 11       	cpse	r24, r1
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     eea:	ce 01       	movw	r24, r28
     eec:	41 96       	adiw	r24, 0x11	; 17
     eee:	94 d3       	rcall	.+1832   	; 0x1618 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     ef0:	ce 01       	movw	r24, r28
     ef2:	dc dd       	rcall	.-1096   	; 0xaac <prvUnlockQueue>
    }
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <prvResetNextTaskUnblockTime>:
     efa:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <pxDelayedTaskList>
     efe:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <pxDelayedTaskList+0x1>
     f02:	80 81       	ld	r24, Z
     f04:	81 11       	cpse	r24, r1
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <prvResetNextTaskUnblockTime+0x1c>
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	9f ef       	ldi	r25, 0xFF	; 255
     f0c:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <xNextTaskUnblockTime+0x1>
     f10:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <xNextTaskUnblockTime>
     f14:	08 95       	ret
     f16:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <pxDelayedTaskList>
     f1a:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <pxDelayedTaskList+0x1>
     f1e:	05 80       	ldd	r0, Z+5	; 0x05
     f20:	f6 81       	ldd	r31, Z+6	; 0x06
     f22:	e0 2d       	mov	r30, r0
     f24:	06 80       	ldd	r0, Z+6	; 0x06
     f26:	f7 81       	ldd	r31, Z+7	; 0x07
     f28:	e0 2d       	mov	r30, r0
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <xNextTaskUnblockTime+0x1>
     f32:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <xNextTaskUnblockTime>
     f36:	08 95       	ret

00000f38 <prvAddCurrentTaskToDelayedList>:
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
     f44:	f6 2e       	mov	r15, r22
     f46:	00 91 e7 02 	lds	r16, 0x02E7	; 0x8002e7 <xTickCount>
     f4a:	10 91 e8 02 	lds	r17, 0x02E8	; 0x8002e8 <xTickCount+0x1>
     f4e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <pxCurrentTCB>
     f52:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     f56:	02 96       	adiw	r24, 0x02	; 2
     f58:	8c db       	rcall	.-2280   	; 0x672 <uxListRemove>
     f5a:	cf 3f       	cpi	r28, 0xFF	; 255
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	d8 07       	cpc	r29, r24
     f60:	61 f4       	brne	.+24     	; 0xf7a <prvAddCurrentTaskToDelayedList+0x42>
     f62:	ff 20       	and	r15, r15
     f64:	51 f0       	breq	.+20     	; 0xf7a <prvAddCurrentTaskToDelayedList+0x42>
     f66:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <pxCurrentTCB>
     f6a:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     f6e:	6e 5f       	subi	r22, 0xFE	; 254
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8a ee       	ldi	r24, 0xEA	; 234
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	2b db       	rcall	.-2474   	; 0x5ce <vListInsertEnd>
     f78:	2d c0       	rjmp	.+90     	; 0xfd4 <prvAddCurrentTaskToDelayedList+0x9c>
     f7a:	c0 0f       	add	r28, r16
     f7c:	d1 1f       	adc	r29, r17
     f7e:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
     f82:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     f86:	d3 83       	std	Z+3, r29	; 0x03
     f88:	c2 83       	std	Z+2, r28	; 0x02
     f8a:	c0 17       	cp	r28, r16
     f8c:	d1 07       	cpc	r29, r17
     f8e:	60 f4       	brcc	.+24     	; 0xfa8 <prvAddCurrentTaskToDelayedList+0x70>
     f90:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <pxCurrentTCB>
     f94:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     f98:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pxOverflowDelayedTaskList>
     f9c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pxOverflowDelayedTaskList+0x1>
     fa0:	6e 5f       	subi	r22, 0xFE	; 254
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	35 db       	rcall	.-2454   	; 0x610 <vListInsert>
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <prvAddCurrentTaskToDelayedList+0x9c>
     fa8:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <pxCurrentTCB>
     fac:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
     fb0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <pxDelayedTaskList>
     fb4:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <pxDelayedTaskList+0x1>
     fb8:	6e 5f       	subi	r22, 0xFE	; 254
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	29 db       	rcall	.-2478   	; 0x610 <vListInsert>
     fbe:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <xNextTaskUnblockTime>
     fc2:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <xNextTaskUnblockTime+0x1>
     fc6:	c8 17       	cp	r28, r24
     fc8:	d9 07       	cpc	r29, r25
     fca:	20 f4       	brcc	.+8      	; 0xfd4 <prvAddCurrentTaskToDelayedList+0x9c>
     fcc:	d0 93 e0 02 	sts	0x02E0, r29	; 0x8002e0 <xNextTaskUnblockTime+0x1>
     fd0:	c0 93 df 02 	sts	0x02DF, r28	; 0x8002df <xNextTaskUnblockTime>
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	08 95       	ret

00000fe0 <xTaskCreate>:
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	4c 01       	movw	r8, r24
    1000:	6b 01       	movw	r12, r22
    1002:	5a 01       	movw	r10, r20
    1004:	29 01       	movw	r4, r18
    1006:	ca 01       	movw	r24, r20
    1008:	b2 da       	rcall	.-2716   	; 0x56e <pvPortMalloc>
    100a:	3c 01       	movw	r6, r24
    100c:	89 2b       	or	r24, r25
    100e:	09 f4       	brne	.+2      	; 0x1012 <xTaskCreate+0x32>
    1010:	e4 c0       	rjmp	.+456    	; 0x11da <xTaskCreate+0x1fa>
    1012:	8c e2       	ldi	r24, 0x2C	; 44
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	ab da       	rcall	.-2730   	; 0x56e <pvPortMalloc>
    1018:	ec 01       	movw	r28, r24
    101a:	89 2b       	or	r24, r25
    101c:	99 f0       	breq	.+38     	; 0x1044 <xTaskCreate+0x64>
    101e:	78 8e       	std	Y+24, r7	; 0x18
    1020:	6f 8a       	std	Y+23, r6	; 0x17
    1022:	a5 01       	movw	r20, r10
    1024:	65 ea       	ldi	r22, 0xA5	; 165
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	c3 01       	movw	r24, r6
    102a:	0e 94 95 1c 	call	0x392a	; 0x392a <memset>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	a8 1a       	sub	r10, r24
    1032:	b1 08       	sbc	r11, r1
    1034:	8f 89       	ldd	r24, Y+23	; 0x17
    1036:	98 8d       	ldd	r25, Y+24	; 0x18
    1038:	a8 0e       	add	r10, r24
    103a:	b9 1e       	adc	r11, r25
    103c:	c1 14       	cp	r12, r1
    103e:	d1 04       	cpc	r13, r1
    1040:	21 f4       	brne	.+8      	; 0x104a <xTaskCreate+0x6a>
    1042:	1f c0       	rjmp	.+62     	; 0x1082 <xTaskCreate+0xa2>
    1044:	c3 01       	movw	r24, r6
    1046:	a4 da       	rcall	.-2744   	; 0x590 <vPortFree>
    1048:	c8 c0       	rjmp	.+400    	; 0x11da <xTaskCreate+0x1fa>
    104a:	d6 01       	movw	r26, r12
    104c:	8c 91       	ld	r24, X
    104e:	89 8f       	std	Y+25, r24	; 0x19
    1050:	8c 91       	ld	r24, X
    1052:	88 23       	and	r24, r24
    1054:	a1 f0       	breq	.+40     	; 0x107e <xTaskCreate+0x9e>
    1056:	ae 01       	movw	r20, r28
    1058:	46 5e       	subi	r20, 0xE6	; 230
    105a:	5f 4f       	sbci	r21, 0xFF	; 255
    105c:	f6 01       	movw	r30, r12
    105e:	31 96       	adiw	r30, 0x01	; 1
    1060:	b8 e0       	ldi	r27, 0x08	; 8
    1062:	cb 0e       	add	r12, r27
    1064:	d1 1c       	adc	r13, r1
    1066:	cf 01       	movw	r24, r30
    1068:	21 91       	ld	r18, Z+
    106a:	da 01       	movw	r26, r20
    106c:	2d 93       	st	X+, r18
    106e:	ad 01       	movw	r20, r26
    1070:	dc 01       	movw	r26, r24
    1072:	8c 91       	ld	r24, X
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <xTaskCreate+0x9e>
    1078:	ec 15       	cp	r30, r12
    107a:	fd 05       	cpc	r31, r13
    107c:	a1 f7       	brne	.-24     	; 0x1066 <xTaskCreate+0x86>
    107e:	18 a2       	std	Y+32, r1	; 0x20
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <xTaskCreate+0xa4>
    1082:	19 8e       	std	Y+25, r1	; 0x19
    1084:	04 30       	cpi	r16, 0x04	; 4
    1086:	08 f0       	brcs	.+2      	; 0x108a <xTaskCreate+0xaa>
    1088:	03 e0       	ldi	r16, 0x03	; 3
    108a:	0e 8b       	std	Y+22, r16	; 0x16
    108c:	0b a3       	std	Y+35, r16	; 0x23
    108e:	1c a2       	std	Y+36, r1	; 0x24
    1090:	6e 01       	movw	r12, r28
    1092:	b2 e0       	ldi	r27, 0x02	; 2
    1094:	cb 0e       	add	r12, r27
    1096:	d1 1c       	adc	r13, r1
    1098:	c6 01       	movw	r24, r12
    109a:	95 da       	rcall	.-2774   	; 0x5c6 <vListInitialiseItem>
    109c:	ce 01       	movw	r24, r28
    109e:	0c 96       	adiw	r24, 0x0c	; 12
    10a0:	92 da       	rcall	.-2780   	; 0x5c6 <vListInitialiseItem>
    10a2:	d9 87       	std	Y+9, r29	; 0x09
    10a4:	c8 87       	std	Y+8, r28	; 0x08
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	80 1b       	sub	r24, r16
    10ac:	91 09       	sbc	r25, r1
    10ae:	9d 87       	std	Y+13, r25	; 0x0d
    10b0:	8c 87       	std	Y+12, r24	; 0x0c
    10b2:	db 8b       	std	Y+19, r29	; 0x13
    10b4:	ca 8b       	std	Y+18, r28	; 0x12
    10b6:	1e a2       	std	Y+38, r1	; 0x26
    10b8:	1d a2       	std	Y+37, r1	; 0x25
    10ba:	1f a2       	std	Y+39, r1	; 0x27
    10bc:	18 a6       	std	Y+40, r1	; 0x28
    10be:	19 a6       	std	Y+41, r1	; 0x29
    10c0:	1a a6       	std	Y+42, r1	; 0x2a
    10c2:	1b a6       	std	Y+43, r1	; 0x2b
    10c4:	a2 01       	movw	r20, r4
    10c6:	b4 01       	movw	r22, r8
    10c8:	c5 01       	movw	r24, r10
    10ca:	fa da       	rcall	.-2572   	; 0x6c0 <pxPortInitialiseStack>
    10cc:	99 83       	std	Y+1, r25	; 0x01
    10ce:	88 83       	st	Y, r24
    10d0:	e1 14       	cp	r14, r1
    10d2:	f1 04       	cpc	r15, r1
    10d4:	19 f0       	breq	.+6      	; 0x10dc <xTaskCreate+0xfc>
    10d6:	f7 01       	movw	r30, r14
    10d8:	d1 83       	std	Z+1, r29	; 0x01
    10da:	c0 83       	st	Z, r28
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	0f 92       	push	r0
    10e2:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <uxCurrentNumberOfTasks>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <uxCurrentNumberOfTasks>
    10ec:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <pxCurrentTCB>
    10f0:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    10f4:	89 2b       	or	r24, r25
    10f6:	89 f5       	brne	.+98     	; 0x115a <xTaskCreate+0x17a>
    10f8:	d0 93 41 03 	sts	0x0341, r29	; 0x800341 <pxCurrentTCB+0x1>
    10fc:	c0 93 40 03 	sts	0x0340, r28	; 0x800340 <pxCurrentTCB>
    1100:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <uxCurrentNumberOfTasks>
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	09 f0       	breq	.+2      	; 0x110a <xTaskCreate+0x12a>
    1108:	38 c0       	rjmp	.+112    	; 0x117a <xTaskCreate+0x19a>
    110a:	8c e1       	ldi	r24, 0x1C	; 28
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	4d da       	rcall	.-2918   	; 0x5aa <vListInitialise>
    1110:	85 e2       	ldi	r24, 0x25	; 37
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	4a da       	rcall	.-2924   	; 0x5aa <vListInitialise>
    1116:	8e e2       	ldi	r24, 0x2E	; 46
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	47 da       	rcall	.-2930   	; 0x5aa <vListInitialise>
    111c:	87 e3       	ldi	r24, 0x37	; 55
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	44 da       	rcall	.-2936   	; 0x5aa <vListInitialise>
    1122:	83 e1       	ldi	r24, 0x13	; 19
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	41 da       	rcall	.-2942   	; 0x5aa <vListInitialise>
    1128:	8a e0       	ldi	r24, 0x0A	; 10
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	3e da       	rcall	.-2948   	; 0x5aa <vListInitialise>
    112e:	8d ef       	ldi	r24, 0xFD	; 253
    1130:	92 e0       	ldi	r25, 0x02	; 2
    1132:	3b da       	rcall	.-2954   	; 0x5aa <vListInitialise>
    1134:	84 ef       	ldi	r24, 0xF4	; 244
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	38 da       	rcall	.-2960   	; 0x5aa <vListInitialise>
    113a:	8a ee       	ldi	r24, 0xEA	; 234
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	35 da       	rcall	.-2966   	; 0x5aa <vListInitialise>
    1140:	83 e1       	ldi	r24, 0x13	; 19
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <pxDelayedTaskList+0x1>
    1148:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <pxDelayedTaskList>
    114c:	8a e0       	ldi	r24, 0x0A	; 10
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <pxOverflowDelayedTaskList+0x1>
    1154:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <pxOverflowDelayedTaskList>
    1158:	10 c0       	rjmp	.+32     	; 0x117a <xTaskCreate+0x19a>
    115a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <xSchedulerRunning>
    115e:	81 11       	cpse	r24, r1
    1160:	0c c0       	rjmp	.+24     	; 0x117a <xTaskCreate+0x19a>
    1162:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    1166:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    116a:	96 89       	ldd	r25, Z+22	; 0x16
    116c:	8e 89       	ldd	r24, Y+22	; 0x16
    116e:	89 17       	cp	r24, r25
    1170:	20 f0       	brcs	.+8      	; 0x117a <xTaskCreate+0x19a>
    1172:	d0 93 41 03 	sts	0x0341, r29	; 0x800341 <pxCurrentTCB+0x1>
    1176:	c0 93 40 03 	sts	0x0340, r28	; 0x800340 <pxCurrentTCB>
    117a:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <uxTaskNumber>
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <uxTaskNumber>
    1184:	89 a3       	std	Y+33, r24	; 0x21
    1186:	8e 89       	ldd	r24, Y+22	; 0x16
    1188:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <uxTopReadyPriority>
    118c:	98 17       	cp	r25, r24
    118e:	10 f4       	brcc	.+4      	; 0x1194 <xTaskCreate+0x1b4>
    1190:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <uxTopReadyPriority>
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9c 01       	movw	r18, r24
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	22 0f       	add	r18, r18
    11a2:	33 1f       	adc	r19, r19
    11a4:	82 0f       	add	r24, r18
    11a6:	93 1f       	adc	r25, r19
    11a8:	b6 01       	movw	r22, r12
    11aa:	84 5e       	subi	r24, 0xE4	; 228
    11ac:	9c 4f       	sbci	r25, 0xFC	; 252
    11ae:	0f da       	rcall	.-3042   	; 0x5ce <vListInsertEnd>
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <xSchedulerRunning>
    11b8:	88 23       	and	r24, r24
    11ba:	59 f0       	breq	.+22     	; 0x11d2 <xTaskCreate+0x1f2>
    11bc:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    11c0:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    11c4:	96 89       	ldd	r25, Z+22	; 0x16
    11c6:	8e 89       	ldd	r24, Y+22	; 0x16
    11c8:	98 17       	cp	r25, r24
    11ca:	28 f4       	brcc	.+10     	; 0x11d6 <xTaskCreate+0x1f6>
    11cc:	27 db       	rcall	.-2482   	; 0x81c <vPortYield>
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <xTaskCreate+0x1fc>
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <xTaskCreate+0x1fc>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <xTaskCreate+0x1fc>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	bf 90       	pop	r11
    11ec:	af 90       	pop	r10
    11ee:	9f 90       	pop	r9
    11f0:	8f 90       	pop	r8
    11f2:	7f 90       	pop	r7
    11f4:	6f 90       	pop	r6
    11f6:	5f 90       	pop	r5
    11f8:	4f 90       	pop	r4
    11fa:	08 95       	ret

000011fc <vTaskStartScheduler>:
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	0f 2e       	mov	r0, r31
    1204:	fd ed       	ldi	r31, 0xDD	; 221
    1206:	ef 2e       	mov	r14, r31
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	ff 2e       	mov	r15, r31
    120c:	f0 2d       	mov	r31, r0
    120e:	00 e0       	ldi	r16, 0x00	; 0
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 ec       	ldi	r20, 0xC0	; 192
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	60 e5       	ldi	r22, 0x50	; 80
    121a:	72 e0       	ldi	r23, 0x02	; 2
    121c:	8e e4       	ldi	r24, 0x4E	; 78
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	df de       	rcall	.-578    	; 0xfe0 <xTaskCreate>
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	c1 f4       	brne	.+48     	; 0x1256 <vTaskStartScheduler+0x5a>
    1226:	40 d3       	rcall	.+1664   	; 0x18a8 <xTimerCreateTimerTask>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	a9 f4       	brne	.+42     	; 0x1256 <vTaskStartScheduler+0x5a>
    122c:	f8 94       	cli
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <xNextTaskUnblockTime+0x1>
    1236:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <xNextTaskUnblockTime>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <xSchedulerRunning>
    1240:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <xTickCount+0x1>
    1244:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <xTickCount>
    1248:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    124c:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    1250:	85 a1       	ldd	r24, Z+37	; 0x25
    1252:	7d d9       	rcall	.-3334   	; 0x54e <task_switch_in>
    1254:	a7 da       	rcall	.-2738   	; 0x7a4 <xPortStartScheduler>
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	08 95       	ret

0000125e <vTaskSuspendAll>:
    125e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
    1268:	08 95       	ret

0000126a <xTaskGetTickCount>:
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	0f 92       	push	r0
    1270:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <xTickCount>
    1274:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <xTickCount+0x1>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	08 95       	ret

0000127e <xTaskIncrementTick>:
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    1292:	81 11       	cpse	r24, r1
    1294:	95 c0       	rjmp	.+298    	; 0x13c0 <xTaskIncrementTick+0x142>
    1296:	e0 90 e7 02 	lds	r14, 0x02E7	; 0x8002e7 <xTickCount>
    129a:	f0 90 e8 02 	lds	r15, 0x02E8	; 0x8002e8 <xTickCount+0x1>
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	e8 1a       	sub	r14, r24
    12a2:	f8 0a       	sbc	r15, r24
    12a4:	f0 92 e8 02 	sts	0x02E8, r15	; 0x8002e8 <xTickCount+0x1>
    12a8:	e0 92 e7 02 	sts	0x02E7, r14	; 0x8002e7 <xTickCount>
    12ac:	e1 14       	cp	r14, r1
    12ae:	f1 04       	cpc	r15, r1
    12b0:	b1 f4       	brne	.+44     	; 0x12de <xTaskIncrementTick+0x60>
    12b2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <pxDelayedTaskList>
    12b6:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <pxDelayedTaskList+0x1>
    12ba:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <pxOverflowDelayedTaskList>
    12be:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <pxOverflowDelayedTaskList+0x1>
    12c2:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <pxDelayedTaskList+0x1>
    12c6:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <pxDelayedTaskList>
    12ca:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <pxOverflowDelayedTaskList+0x1>
    12ce:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <pxOverflowDelayedTaskList>
    12d2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <xNumOfOverflows>
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <xNumOfOverflows>
    12dc:	0e de       	rcall	.-996    	; 0xefa <prvResetNextTaskUnblockTime>
    12de:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <xNextTaskUnblockTime>
    12e2:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <xNextTaskUnblockTime+0x1>
    12e6:	e8 16       	cp	r14, r24
    12e8:	f9 06       	cpc	r15, r25
    12ea:	10 f4       	brcc	.+4      	; 0x12f0 <xTaskIncrementTick+0x72>
    12ec:	d1 2c       	mov	r13, r1
    12ee:	50 c0       	rjmp	.+160    	; 0x1390 <xTaskIncrementTick+0x112>
    12f0:	d1 2c       	mov	r13, r1
    12f2:	cc 24       	eor	r12, r12
    12f4:	c3 94       	inc	r12
    12f6:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <pxDelayedTaskList>
    12fa:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <pxDelayedTaskList+0x1>
    12fe:	80 81       	ld	r24, Z
    1300:	81 11       	cpse	r24, r1
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <xTaskIncrementTick+0x94>
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	9f ef       	ldi	r25, 0xFF	; 255
    1308:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <xNextTaskUnblockTime+0x1>
    130c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <xNextTaskUnblockTime>
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <xTaskIncrementTick+0x112>
    1312:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <pxDelayedTaskList>
    1316:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <pxDelayedTaskList+0x1>
    131a:	05 80       	ldd	r0, Z+5	; 0x05
    131c:	f6 81       	ldd	r31, Z+6	; 0x06
    131e:	e0 2d       	mov	r30, r0
    1320:	c6 81       	ldd	r28, Z+6	; 0x06
    1322:	d7 81       	ldd	r29, Z+7	; 0x07
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	e8 16       	cp	r14, r24
    132a:	f9 06       	cpc	r15, r25
    132c:	28 f4       	brcc	.+10     	; 0x1338 <xTaskIncrementTick+0xba>
    132e:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <xNextTaskUnblockTime+0x1>
    1332:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <xNextTaskUnblockTime>
    1336:	2c c0       	rjmp	.+88     	; 0x1390 <xTaskIncrementTick+0x112>
    1338:	8e 01       	movw	r16, r28
    133a:	0e 5f       	subi	r16, 0xFE	; 254
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	c8 01       	movw	r24, r16
    1340:	98 d9       	rcall	.-3280   	; 0x672 <uxListRemove>
    1342:	8c 89       	ldd	r24, Y+20	; 0x14
    1344:	9d 89       	ldd	r25, Y+21	; 0x15
    1346:	89 2b       	or	r24, r25
    1348:	19 f0       	breq	.+6      	; 0x1350 <xTaskIncrementTick+0xd2>
    134a:	ce 01       	movw	r24, r28
    134c:	0c 96       	adiw	r24, 0x0c	; 12
    134e:	91 d9       	rcall	.-3294   	; 0x672 <uxListRemove>
    1350:	8e 89       	ldd	r24, Y+22	; 0x16
    1352:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <uxTopReadyPriority>
    1356:	98 17       	cp	r25, r24
    1358:	10 f4       	brcc	.+4      	; 0x135e <xTaskIncrementTick+0xe0>
    135a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <uxTopReadyPriority>
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 01       	movw	r18, r24
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	b8 01       	movw	r22, r16
    1374:	84 5e       	subi	r24, 0xE4	; 228
    1376:	9c 4f       	sbci	r25, 0xFC	; 252
    1378:	2a d9       	rcall	.-3500   	; 0x5ce <vListInsertEnd>
    137a:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    137e:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    1382:	9e 89       	ldd	r25, Y+22	; 0x16
    1384:	86 89       	ldd	r24, Z+22	; 0x16
    1386:	98 17       	cp	r25, r24
    1388:	08 f4       	brcc	.+2      	; 0x138c <xTaskIncrementTick+0x10e>
    138a:	b5 cf       	rjmp	.-150    	; 0x12f6 <xTaskIncrementTick+0x78>
    138c:	dc 2c       	mov	r13, r12
    138e:	b3 cf       	rjmp	.-154    	; 0x12f6 <xTaskIncrementTick+0x78>
    1390:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    1394:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    1398:	86 89       	ldd	r24, Z+22	; 0x16
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	8e 0f       	add	r24, r30
    13ac:	9f 1f       	adc	r25, r31
    13ae:	fc 01       	movw	r30, r24
    13b0:	e4 5e       	subi	r30, 0xE4	; 228
    13b2:	fc 4f       	sbci	r31, 0xFC	; 252
    13b4:	80 81       	ld	r24, Z
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	48 f0       	brcs	.+18     	; 0x13cc <xTaskIncrementTick+0x14e>
    13ba:	dd 24       	eor	r13, r13
    13bc:	d3 94       	inc	r13
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <xTaskIncrementTick+0x14e>
    13c0:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <uxPendedTicks>
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <uxPendedTicks>
    13ca:	d1 2c       	mov	r13, r1
    13cc:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <xYieldPending>
    13d0:	88 23       	and	r24, r24
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <xTaskIncrementTick+0x15a>
    13d4:	dd 24       	eor	r13, r13
    13d6:	d3 94       	inc	r13
    13d8:	8d 2d       	mov	r24, r13
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	08 95       	ret

000013ec <xTaskResumeAll>:
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	0f 92       	push	r0
    1400:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    1404:	81 50       	subi	r24, 0x01	; 1
    1406:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
    140a:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    140e:	81 11       	cpse	r24, r1
    1410:	59 c0       	rjmp	.+178    	; 0x14c4 <xTaskResumeAll+0xd8>
    1412:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <uxCurrentNumberOfTasks>
    1416:	81 11       	cpse	r24, r1
    1418:	30 c0       	rjmp	.+96     	; 0x147a <xTaskResumeAll+0x8e>
    141a:	57 c0       	rjmp	.+174    	; 0x14ca <xTaskResumeAll+0xde>
    141c:	d7 01       	movw	r26, r14
    141e:	15 96       	adiw	r26, 0x05	; 5
    1420:	ed 91       	ld	r30, X+
    1422:	fc 91       	ld	r31, X
    1424:	16 97       	sbiw	r26, 0x06	; 6
    1426:	c6 81       	ldd	r28, Z+6	; 0x06
    1428:	d7 81       	ldd	r29, Z+7	; 0x07
    142a:	ce 01       	movw	r24, r28
    142c:	0c 96       	adiw	r24, 0x0c	; 12
    142e:	21 d9       	rcall	.-3518   	; 0x672 <uxListRemove>
    1430:	8e 01       	movw	r16, r28
    1432:	0e 5f       	subi	r16, 0xFE	; 254
    1434:	1f 4f       	sbci	r17, 0xFF	; 255
    1436:	c8 01       	movw	r24, r16
    1438:	1c d9       	rcall	.-3528   	; 0x672 <uxListRemove>
    143a:	8e 89       	ldd	r24, Y+22	; 0x16
    143c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <uxTopReadyPriority>
    1440:	98 17       	cp	r25, r24
    1442:	10 f4       	brcc	.+4      	; 0x1448 <xTaskResumeAll+0x5c>
    1444:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <uxTopReadyPriority>
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c 01       	movw	r18, r24
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	82 0f       	add	r24, r18
    145a:	93 1f       	adc	r25, r19
    145c:	b8 01       	movw	r22, r16
    145e:	84 5e       	subi	r24, 0xE4	; 228
    1460:	9c 4f       	sbci	r25, 0xFC	; 252
    1462:	b5 d8       	rcall	.-3734   	; 0x5ce <vListInsertEnd>
    1464:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    1468:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    146c:	9e 89       	ldd	r25, Y+22	; 0x16
    146e:	86 89       	ldd	r24, Z+22	; 0x16
    1470:	98 17       	cp	r25, r24
    1472:	68 f0       	brcs	.+26     	; 0x148e <xTaskResumeAll+0xa2>
    1474:	d0 92 e3 02 	sts	0x02E3, r13	; 0x8002e3 <xYieldPending>
    1478:	0a c0       	rjmp	.+20     	; 0x148e <xTaskResumeAll+0xa2>
    147a:	c0 e0       	ldi	r28, 0x00	; 0
    147c:	d0 e0       	ldi	r29, 0x00	; 0
    147e:	0f 2e       	mov	r0, r31
    1480:	fd ef       	ldi	r31, 0xFD	; 253
    1482:	ef 2e       	mov	r14, r31
    1484:	f2 e0       	ldi	r31, 0x02	; 2
    1486:	ff 2e       	mov	r15, r31
    1488:	f0 2d       	mov	r31, r0
    148a:	dd 24       	eor	r13, r13
    148c:	d3 94       	inc	r13
    148e:	f7 01       	movw	r30, r14
    1490:	80 81       	ld	r24, Z
    1492:	81 11       	cpse	r24, r1
    1494:	c3 cf       	rjmp	.-122    	; 0x141c <xTaskResumeAll+0x30>
    1496:	cd 2b       	or	r28, r29
    1498:	09 f0       	breq	.+2      	; 0x149c <xTaskResumeAll+0xb0>
    149a:	2f dd       	rcall	.-1442   	; 0xefa <prvResetNextTaskUnblockTime>
    149c:	c0 91 e4 02 	lds	r28, 0x02E4	; 0x8002e4 <uxPendedTicks>
    14a0:	cc 23       	and	r28, r28
    14a2:	49 f0       	breq	.+18     	; 0x14b6 <xTaskResumeAll+0xca>
    14a4:	d1 e0       	ldi	r29, 0x01	; 1
    14a6:	eb de       	rcall	.-554    	; 0x127e <xTaskIncrementTick>
    14a8:	81 11       	cpse	r24, r1
    14aa:	d0 93 e3 02 	sts	0x02E3, r29	; 0x8002e3 <xYieldPending>
    14ae:	c1 50       	subi	r28, 0x01	; 1
    14b0:	d1 f7       	brne	.-12     	; 0x14a6 <xTaskResumeAll+0xba>
    14b2:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <uxPendedTicks>
    14b6:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <xYieldPending>
    14ba:	88 23       	and	r24, r24
    14bc:	29 f0       	breq	.+10     	; 0x14c8 <xTaskResumeAll+0xdc>
    14be:	ae d9       	rcall	.-3236   	; 0x81c <vPortYield>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <xTaskResumeAll+0xde>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <xTaskResumeAll+0xde>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	08 95       	ret

000014de <vTaskSwitchContext>:
    14de:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    14e2:	88 23       	and	r24, r24
    14e4:	21 f0       	breq	.+8      	; 0x14ee <vTaskSwitchContext+0x10>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <xYieldPending>
    14ec:	08 95       	ret
    14ee:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <xYieldPending>
    14f2:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    14f6:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    14fa:	85 a1       	ldd	r24, Z+37	; 0x25
    14fc:	32 d8       	rcall	.-3996   	; 0x562 <task_switch_out>
    14fe:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <pxCurrentTCB>
    1502:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    1506:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    150a:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    150e:	2d 91       	ld	r18, X+
    1510:	3c 91       	ld	r19, X
    1512:	87 89       	ldd	r24, Z+23	; 0x17
    1514:	90 8d       	ldd	r25, Z+24	; 0x18
    1516:	82 17       	cp	r24, r18
    1518:	93 07       	cpc	r25, r19
    151a:	58 f0       	brcs	.+22     	; 0x1532 <vTaskSwitchContext+0x54>
    151c:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <pxCurrentTCB>
    1520:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    1524:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <pxCurrentTCB>
    1528:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    152c:	67 5e       	subi	r22, 0xE7	; 231
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	9b d2       	rcall	.+1334   	; 0x1a68 <vApplicationStackOverflowHook>
    1532:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <uxTopReadyPriority>
    1536:	82 2f       	mov	r24, r18
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	fc 01       	movw	r30, r24
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	e8 0f       	add	r30, r24
    154a:	f9 1f       	adc	r31, r25
    154c:	e4 5e       	subi	r30, 0xE4	; 228
    154e:	fc 4f       	sbci	r31, 0xFC	; 252
    1550:	30 81       	ld	r19, Z
    1552:	31 11       	cpse	r19, r1
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <vTaskSwitchContext+0x9a>
    1556:	21 50       	subi	r18, 0x01	; 1
    1558:	82 2f       	mov	r24, r18
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	e8 0f       	add	r30, r24
    156c:	f9 1f       	adc	r31, r25
    156e:	e4 5e       	subi	r30, 0xE4	; 228
    1570:	fc 4f       	sbci	r31, 0xFC	; 252
    1572:	30 81       	ld	r19, Z
    1574:	33 23       	and	r19, r19
    1576:	79 f3       	breq	.-34     	; 0x1556 <vTaskSwitchContext+0x78>
    1578:	ac 01       	movw	r20, r24
    157a:	44 0f       	add	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	44 0f       	add	r20, r20
    1584:	55 1f       	adc	r21, r21
    1586:	48 0f       	add	r20, r24
    1588:	59 1f       	adc	r21, r25
    158a:	da 01       	movw	r26, r20
    158c:	a4 5e       	subi	r26, 0xE4	; 228
    158e:	bc 4f       	sbci	r27, 0xFC	; 252
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	ed 91       	ld	r30, X+
    1594:	fc 91       	ld	r31, X
    1596:	12 97       	sbiw	r26, 0x02	; 2
    1598:	02 80       	ldd	r0, Z+2	; 0x02
    159a:	f3 81       	ldd	r31, Z+3	; 0x03
    159c:	e0 2d       	mov	r30, r0
    159e:	12 96       	adiw	r26, 0x02	; 2
    15a0:	fc 93       	st	X, r31
    15a2:	ee 93       	st	-X, r30
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	41 5e       	subi	r20, 0xE1	; 225
    15a8:	5c 4f       	sbci	r21, 0xFC	; 252
    15aa:	e4 17       	cp	r30, r20
    15ac:	f5 07       	cpc	r31, r21
    15ae:	29 f4       	brne	.+10     	; 0x15ba <vTaskSwitchContext+0xdc>
    15b0:	42 81       	ldd	r20, Z+2	; 0x02
    15b2:	53 81       	ldd	r21, Z+3	; 0x03
    15b4:	fd 01       	movw	r30, r26
    15b6:	52 83       	std	Z+2, r21	; 0x02
    15b8:	41 83       	std	Z+1, r20	; 0x01
    15ba:	fc 01       	movw	r30, r24
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	8e 0f       	add	r24, r30
    15ca:	9f 1f       	adc	r25, r31
    15cc:	fc 01       	movw	r30, r24
    15ce:	e4 5e       	subi	r30, 0xE4	; 228
    15d0:	fc 4f       	sbci	r31, 0xFC	; 252
    15d2:	01 80       	ldd	r0, Z+1	; 0x01
    15d4:	f2 81       	ldd	r31, Z+2	; 0x02
    15d6:	e0 2d       	mov	r30, r0
    15d8:	86 81       	ldd	r24, Z+6	; 0x06
    15da:	97 81       	ldd	r25, Z+7	; 0x07
    15dc:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pxCurrentTCB+0x1>
    15e0:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pxCurrentTCB>
    15e4:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <uxTopReadyPriority>
    15e8:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    15ec:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    15f0:	85 a1       	ldd	r24, Z+37	; 0x25
    15f2:	0c 94 a7 02 	jmp	0x54e	; 0x54e <task_switch_in>
    15f6:	08 95       	ret

000015f8 <vTaskPlaceOnEventList>:
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	eb 01       	movw	r28, r22
    15fe:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <pxCurrentTCB>
    1602:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    1606:	64 5f       	subi	r22, 0xF4	; 244
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	02 d8       	rcall	.-4092   	; 0x610 <vListInsert>
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	ce 01       	movw	r24, r28
    1610:	93 dc       	rcall	.-1754   	; 0xf38 <prvAddCurrentTaskToDelayedList>
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <vTaskPlaceOnEventListRestricted>:
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	8b 01       	movw	r16, r22
    1620:	c4 2f       	mov	r28, r20
    1622:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <pxCurrentTCB>
    1626:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    162a:	64 5f       	subi	r22, 0xF4	; 244
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsertEnd>
    1632:	cc 23       	and	r28, r28
    1634:	11 f0       	breq	.+4      	; 0x163a <vTaskPlaceOnEventListRestricted+0x22>
    1636:	0f ef       	ldi	r16, 0xFF	; 255
    1638:	1f ef       	ldi	r17, 0xFF	; 255
    163a:	6c 2f       	mov	r22, r28
    163c:	c8 01       	movw	r24, r16
    163e:	7c dc       	rcall	.-1800   	; 0xf38 <prvAddCurrentTaskToDelayedList>
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <xTaskRemoveFromEventList>:
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	dc 01       	movw	r26, r24
    1652:	15 96       	adiw	r26, 0x05	; 5
    1654:	ed 91       	ld	r30, X+
    1656:	fc 91       	ld	r31, X
    1658:	16 97       	sbiw	r26, 0x06	; 6
    165a:	c6 81       	ldd	r28, Z+6	; 0x06
    165c:	d7 81       	ldd	r29, Z+7	; 0x07
    165e:	8e 01       	movw	r16, r28
    1660:	04 5f       	subi	r16, 0xF4	; 244
    1662:	1f 4f       	sbci	r17, 0xFF	; 255
    1664:	c8 01       	movw	r24, r16
    1666:	05 d8       	rcall	.-4086   	; 0x672 <uxListRemove>
    1668:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    166c:	81 11       	cpse	r24, r1
    166e:	1c c0       	rjmp	.+56     	; 0x16a8 <xTaskRemoveFromEventList+0x60>
    1670:	0a 50       	subi	r16, 0x0A	; 10
    1672:	11 09       	sbc	r17, r1
    1674:	c8 01       	movw	r24, r16
    1676:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
    167a:	8e 89       	ldd	r24, Y+22	; 0x16
    167c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <uxTopReadyPriority>
    1680:	98 17       	cp	r25, r24
    1682:	10 f4       	brcc	.+4      	; 0x1688 <xTaskRemoveFromEventList+0x40>
    1684:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <uxTopReadyPriority>
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 01       	movw	r18, r24
    168c:	22 0f       	add	r18, r18
    168e:	33 1f       	adc	r19, r19
    1690:	22 0f       	add	r18, r18
    1692:	33 1f       	adc	r19, r19
    1694:	22 0f       	add	r18, r18
    1696:	33 1f       	adc	r19, r19
    1698:	82 0f       	add	r24, r18
    169a:	93 1f       	adc	r25, r19
    169c:	b8 01       	movw	r22, r16
    169e:	84 5e       	subi	r24, 0xE4	; 228
    16a0:	9c 4f       	sbci	r25, 0xFC	; 252
    16a2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsertEnd>
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <xTaskRemoveFromEventList+0x6a>
    16a8:	b8 01       	movw	r22, r16
    16aa:	8d ef       	ldi	r24, 0xFD	; 253
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsertEnd>
    16b2:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <pxCurrentTCB>
    16b6:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <pxCurrentTCB+0x1>
    16ba:	9e 89       	ldd	r25, Y+22	; 0x16
    16bc:	86 89       	ldd	r24, Z+22	; 0x16
    16be:	89 17       	cp	r24, r25
    16c0:	20 f4       	brcc	.+8      	; 0x16ca <xTaskRemoveFromEventList+0x82>
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <xYieldPending>
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <xTaskRemoveFromEventList+0x84>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <vTaskInternalSetTimeOutState>:
    16d6:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <xNumOfOverflows>
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
    16de:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <xTickCount>
    16e2:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <xTickCount+0x1>
    16e6:	32 83       	std	Z+2, r19	; 0x02
    16e8:	21 83       	std	Z+1, r18	; 0x01
    16ea:	08 95       	ret

000016ec <xTaskCheckForTimeOut>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	0f 92       	push	r0
    16f6:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <xTickCount>
    16fa:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <xTickCount+0x1>
    16fe:	db 01       	movw	r26, r22
    1700:	4d 91       	ld	r20, X+
    1702:	5c 91       	ld	r21, X
    1704:	4f 3f       	cpi	r20, 0xFF	; 255
    1706:	bf ef       	ldi	r27, 0xFF	; 255
    1708:	5b 07       	cpc	r21, r27
    170a:	e9 f0       	breq	.+58     	; 0x1746 <xTaskCheckForTimeOut+0x5a>
    170c:	ec 01       	movw	r28, r24
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <xNumOfOverflows>
    1716:	b8 81       	ld	r27, Y
    1718:	ba 17       	cp	r27, r26
    171a:	19 f0       	breq	.+6      	; 0x1722 <xTaskCheckForTimeOut+0x36>
    171c:	2e 17       	cp	r18, r30
    171e:	3f 07       	cpc	r19, r31
    1720:	a0 f4       	brcc	.+40     	; 0x174a <xTaskCheckForTimeOut+0x5e>
    1722:	2e 1b       	sub	r18, r30
    1724:	3f 0b       	sbc	r19, r31
    1726:	24 17       	cp	r18, r20
    1728:	35 07       	cpc	r19, r21
    172a:	40 f4       	brcc	.+16     	; 0x173c <xTaskCheckForTimeOut+0x50>
    172c:	fb 01       	movw	r30, r22
    172e:	42 1b       	sub	r20, r18
    1730:	53 0b       	sbc	r21, r19
    1732:	51 83       	std	Z+1, r21	; 0x01
    1734:	40 83       	st	Z, r20
    1736:	cf df       	rcall	.-98     	; 0x16d6 <vTaskInternalSetTimeOutState>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 c0       	rjmp	.+16     	; 0x174c <xTaskCheckForTimeOut+0x60>
    173c:	fb 01       	movw	r30, r22
    173e:	11 82       	std	Z+1, r1	; 0x01
    1740:	10 82       	st	Z, r1
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	03 c0       	rjmp	.+6      	; 0x174c <xTaskCheckForTimeOut+0x60>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	01 c0       	rjmp	.+2      	; 0x174c <xTaskCheckForTimeOut+0x60>
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <vTaskMissedYield>:
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <xYieldPending>
    175c:	08 95       	ret

0000175e <xTaskGetSchedulerState>:
    175e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <xSchedulerRunning>
    1762:	88 23       	and	r24, r24
    1764:	31 f0       	breq	.+12     	; 0x1772 <xTaskGetSchedulerState+0x14>
    1766:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
    176a:	88 23       	and	r24, r24
    176c:	21 f0       	breq	.+8      	; 0x1776 <xTaskGetSchedulerState+0x18>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	08 95       	ret
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	08 95       	ret
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	08 95       	ret

0000177a <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1784:	89 2b       	or	r24, r25
    1786:	79 f1       	breq	.+94     	; 0x17e6 <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1788:	84 a1       	ldd	r24, Z+36	; 0x24
    178a:	81 50       	subi	r24, 0x01	; 1
    178c:	84 a3       	std	Z+36, r24	; 0x24

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    178e:	26 89       	ldd	r18, Z+22	; 0x16
    1790:	93 a1       	ldd	r25, Z+35	; 0x23
    1792:	29 17       	cp	r18, r25
    1794:	51 f1       	breq	.+84     	; 0x17ea <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1796:	81 11       	cpse	r24, r1
    1798:	2a c0       	rjmp	.+84     	; 0x17ee <xTaskPriorityDisinherit+0x74>
    179a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    179c:	8f 01       	movw	r16, r30
    179e:	0e 5f       	subi	r16, 0xFE	; 254
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	c8 01       	movw	r24, r16
    17a4:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    17a8:	8b a1       	ldd	r24, Y+35	; 0x23
    17aa:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17ac:	24 e0       	ldi	r18, 0x04	; 4
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	28 1b       	sub	r18, r24
    17b2:	31 09       	sbc	r19, r1
    17b4:	3d 87       	std	Y+13, r19	; 0x0d
    17b6:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    17b8:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <uxTopReadyPriority>
    17bc:	98 17       	cp	r25, r24
    17be:	10 f4       	brcc	.+4      	; 0x17c4 <xTaskPriorityDisinherit+0x4a>
    17c0:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <uxTopReadyPriority>
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9c 01       	movw	r18, r24
    17c8:	22 0f       	add	r18, r18
    17ca:	33 1f       	adc	r19, r19
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	22 0f       	add	r18, r18
    17d2:	33 1f       	adc	r19, r19
    17d4:	82 0f       	add	r24, r18
    17d6:	93 1f       	adc	r25, r19
    17d8:	b8 01       	movw	r22, r16
    17da:	84 5e       	subi	r24, 0xE4	; 228
    17dc:	9c 4f       	sbci	r25, 0xFC	; 252
    17de:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <xTaskPriorityDisinherit+0x76>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <xTaskPriorityDisinherit+0x76>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <prvInsertTimerInActiveList>:
    17fa:	fc 01       	movw	r30, r24
    17fc:	73 83       	std	Z+3, r23	; 0x03
    17fe:	62 83       	std	Z+2, r22	; 0x02
    1800:	91 87       	std	Z+9, r25	; 0x09
    1802:	80 87       	std	Z+8, r24	; 0x08
    1804:	46 17       	cp	r20, r22
    1806:	57 07       	cpc	r21, r23
    1808:	90 f0       	brcs	.+36     	; 0x182e <prvInsertTimerInActiveList+0x34>
    180a:	42 1b       	sub	r20, r18
    180c:	53 0b       	sbc	r21, r19
    180e:	84 85       	ldd	r24, Z+12	; 0x0c
    1810:	95 85       	ldd	r25, Z+13	; 0x0d
    1812:	48 17       	cp	r20, r24
    1814:	59 07       	cpc	r21, r25
    1816:	e0 f4       	brcc	.+56     	; 0x1850 <prvInsertTimerInActiveList+0x56>
    1818:	bf 01       	movw	r22, r30
    181a:	6e 5f       	subi	r22, 0xFE	; 254
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <pxOverflowTimerList>
    1822:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <pxOverflowTimerList+0x1>
    1826:	0e 94 08 03 	call	0x610	; 0x610 <vListInsert>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	08 95       	ret
    182e:	42 17       	cp	r20, r18
    1830:	53 07       	cpc	r21, r19
    1832:	18 f4       	brcc	.+6      	; 0x183a <prvInsertTimerInActiveList+0x40>
    1834:	62 17       	cp	r22, r18
    1836:	73 07       	cpc	r23, r19
    1838:	68 f4       	brcc	.+26     	; 0x1854 <prvInsertTimerInActiveList+0x5a>
    183a:	bf 01       	movw	r22, r30
    183c:	6e 5f       	subi	r22, 0xFE	; 254
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <pxCurrentTimerList>
    1844:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <pxCurrentTimerList+0x1>
    1848:	0e 94 08 03 	call	0x610	; 0x610 <vListInsert>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	08 95       	ret
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	08 95       	ret
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	08 95       	ret

00001858 <prvCheckForValidListAndQueue>:
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	0f 92       	push	r0
    185e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xTimerQueue>
    1862:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xTimerQueue+0x1>
    1866:	89 2b       	or	r24, r25
    1868:	e1 f4       	brne	.+56     	; 0x18a2 <prvCheckForValidListAndQueue+0x4a>
    186a:	85 e5       	ldi	r24, 0x55	; 85
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <vListInitialise>
    1872:	8c e4       	ldi	r24, 0x4C	; 76
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	0e 94 d5 02 	call	0x5aa	; 0x5aa <vListInitialise>
    187a:	85 e5       	ldi	r24, 0x55	; 85
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <pxCurrentTimerList+0x1>
    1882:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <pxCurrentTimerList>
    1886:	8c e4       	ldi	r24, 0x4C	; 76
    1888:	93 e0       	ldi	r25, 0x03	; 3
    188a:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <pxOverflowTimerList+0x1>
    188e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pxOverflowTimerList>
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	65 e0       	ldi	r22, 0x05	; 5
    1896:	8a e0       	ldi	r24, 0x0A	; 10
    1898:	94 d9       	rcall	.-3288   	; 0xbc2 <xQueueGenericCreate>
    189a:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <xTimerQueue+0x1>
    189e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <xTimerQueue>
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	08 95       	ret

000018a8 <xTimerCreateTimerTask>:
    18a8:	ef 92       	push	r14
    18aa:	ff 92       	push	r15
    18ac:	0f 93       	push	r16
    18ae:	d4 df       	rcall	.-88     	; 0x1858 <prvCheckForValidListAndQueue>
    18b0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xTimerQueue>
    18b4:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xTimerQueue+0x1>
    18b8:	89 2b       	or	r24, r25
    18ba:	89 f0       	breq	.+34     	; 0x18de <xTimerCreateTimerTask+0x36>
    18bc:	0f 2e       	mov	r0, r31
    18be:	f4 e4       	ldi	r31, 0x44	; 68
    18c0:	ef 2e       	mov	r14, r31
    18c2:	f3 e0       	ldi	r31, 0x03	; 3
    18c4:	ff 2e       	mov	r15, r31
    18c6:	f0 2d       	mov	r31, r0
    18c8:	03 e0       	ldi	r16, 0x03	; 3
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	45 e5       	ldi	r20, 0x55	; 85
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	65 e5       	ldi	r22, 0x55	; 85
    18d4:	72 e0       	ldi	r23, 0x02	; 2
    18d6:	84 e8       	ldi	r24, 0x84	; 132
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	82 db       	rcall	.-2300   	; 0xfe0 <xTaskCreate>
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <xTimerCreateTimerTask+0x38>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	08 95       	ret

000018e8 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <xTimerGenericCommand+0xa>
    18f2:	1f 92       	push	r1
    18f4:	1f 92       	push	r1
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    18fa:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <xTimerQueue>
    18fe:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <xTimerQueue+0x1>
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	51 f1       	breq	.+84     	; 0x195a <xTimerGenericCommand+0x72>
    1906:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    1908:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    190a:	5b 83       	std	Y+3, r21	; 0x03
    190c:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    190e:	9d 83       	std	Y+5, r25	; 0x05
    1910:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1912:	66 30       	cpi	r22, 0x06	; 6
    1914:	d4 f4       	brge	.+52     	; 0x194a <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1916:	23 df       	rcall	.-442    	; 0x175e <xTaskGetSchedulerState>
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	59 f4       	brne	.+22     	; 0x1932 <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	a8 01       	movw	r20, r16
    1920:	be 01       	movw	r22, r28
    1922:	6f 5f       	subi	r22, 0xFF	; 255
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xTimerQueue>
    192a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xTimerQueue+0x1>
    192e:	77 d9       	rcall	.-3346   	; 0xc1e <xQueueGenericSend>
    1930:	15 c0       	rjmp	.+42     	; 0x195c <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	be 01       	movw	r22, r28
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xTimerQueue>
    1942:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xTimerQueue+0x1>
    1946:	6b d9       	rcall	.-3370   	; 0xc1e <xQueueGenericSend>
    1948:	09 c0       	rjmp	.+18     	; 0x195c <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	ad 01       	movw	r20, r26
    194e:	be 01       	movw	r22, r28
    1950:	6f 5f       	subi	r22, 0xFF	; 255
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	cf 01       	movw	r24, r30
    1956:	f5 d9       	rcall	.-3094   	; 0xd42 <xQueueGenericSendFromISR>
    1958:	01 c0       	rjmp	.+2      	; 0x195c <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    195a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    1986:	71 dc       	rcall	.-1822   	; 0x126a <xTaskGetTickCount>
    1988:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    198a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <xLastTime.2432>
    198e:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <xLastTime.2432+0x1>
    1992:	e8 16       	cp	r14, r24
    1994:	f9 06       	cpc	r15, r25
    1996:	08 f0       	brcs	.+2      	; 0x199a <prvSampleTimeNow+0x2a>
    1998:	47 c0       	rjmp	.+142    	; 0x1a28 <prvSampleTimeNow+0xb8>
    199a:	2f c0       	rjmp	.+94     	; 0x19fa <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    199c:	05 80       	ldd	r0, Z+5	; 0x05
    199e:	f6 81       	ldd	r31, Z+6	; 0x06
    19a0:	e0 2d       	mov	r30, r0
    19a2:	a0 80       	ld	r10, Z
    19a4:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    19a6:	c6 81       	ldd	r28, Z+6	; 0x06
    19a8:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    19aa:	8e 01       	movw	r16, r28
    19ac:	0e 5f       	subi	r16, 0xFE	; 254
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	c8 01       	movw	r24, r16
    19b2:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    19b6:	e8 89       	ldd	r30, Y+16	; 0x10
    19b8:	f9 89       	ldd	r31, Y+17	; 0x11
    19ba:	ce 01       	movw	r24, r28
    19bc:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	82 ff       	sbrs	r24, 2
    19c2:	1b c0       	rjmp	.+54     	; 0x19fa <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    19c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    19c8:	8a 0d       	add	r24, r10
    19ca:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    19cc:	a8 16       	cp	r10, r24
    19ce:	b9 06       	cpc	r11, r25
    19d0:	60 f4       	brcc	.+24     	; 0x19ea <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    19d2:	9b 83       	std	Y+3, r25	; 0x03
    19d4:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    19d6:	d9 87       	std	Y+9, r29	; 0x09
    19d8:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    19da:	b8 01       	movw	r22, r16
    19dc:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <pxCurrentTimerList>
    19e0:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <pxCurrentTimerList+0x1>
    19e4:	0e 94 08 03 	call	0x610	; 0x610 <vListInsert>
    19e8:	08 c0       	rjmp	.+16     	; 0x19fa <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    19ea:	00 e0       	ldi	r16, 0x00	; 0
    19ec:	10 e0       	ldi	r17, 0x00	; 0
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	a5 01       	movw	r20, r10
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	ce 01       	movw	r24, r28
    19f8:	77 df       	rcall	.-274    	; 0x18e8 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    19fa:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <pxCurrentTimerList>
    19fe:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <pxCurrentTimerList+0x1>
    1a02:	80 81       	ld	r24, Z
    1a04:	81 11       	cpse	r24, r1
    1a06:	ca cf       	rjmp	.-108    	; 0x199c <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    1a08:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <pxOverflowTimerList>
    1a0c:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <pxOverflowTimerList+0x1>
    1a10:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <pxCurrentTimerList+0x1>
    1a14:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    1a18:	f0 93 49 03 	sts	0x0349, r31	; 0x800349 <pxOverflowTimerList+0x1>
    1a1c:	e0 93 48 03 	sts	0x0348, r30	; 0x800348 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	f6 01       	movw	r30, r12
    1a24:	80 83       	st	Z, r24
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    1a28:	f6 01       	movw	r30, r12
    1a2a:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1a2c:	f0 92 43 03 	sts	0x0343, r15	; 0x800343 <xLastTime.2432+0x1>
    1a30:	e0 92 42 03 	sts	0x0342, r14	; 0x800342 <xLastTime.2432>

    return xTimeNow;
}
    1a34:	c7 01       	movw	r24, r14
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	bf 90       	pop	r11
    1a48:	af 90       	pop	r10
    1a4a:	08 95       	ret

00001a4c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    1a4c:	08 95       	ret

00001a4e <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1a4e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1a50:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a52:	2f ef       	ldi	r18, 0xFF	; 255
    1a54:	80 e7       	ldi	r24, 0x70	; 112
    1a56:	92 e0       	ldi	r25, 0x02	; 2
    1a58:	21 50       	subi	r18, 0x01	; 1
    1a5a:	80 40       	sbci	r24, 0x00	; 0
    1a5c:	90 40       	sbci	r25, 0x00	; 0
    1a5e:	e1 f7       	brne	.-8      	; 0x1a58 <vApplicationMallocFailedHook+0xa>
    1a60:	00 c0       	rjmp	.+0      	; 0x1a62 <vApplicationMallocFailedHook+0x14>
    1a62:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    1a64:	1f 9a       	sbi	0x03, 7	; 3
    1a66:	f5 cf       	rjmp	.-22     	; 0x1a52 <vApplicationMallocFailedHook+0x4>

00001a68 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1a68:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1a6a:	2f 9a       	sbi	0x05, 7	; 5
    1a6c:	2f ef       	ldi	r18, 0xFF	; 255
    1a6e:	87 ea       	ldi	r24, 0xA7	; 167
    1a70:	91 e6       	ldi	r25, 0x61	; 97
    1a72:	21 50       	subi	r18, 0x01	; 1
    1a74:	80 40       	sbci	r24, 0x00	; 0
    1a76:	90 40       	sbci	r25, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <vApplicationStackOverflowHook+0xa>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <vApplicationStackOverflowHook+0x14>
    1a7c:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1a7e:	1f 9a       	sbi	0x03, 7	; 3
    1a80:	f5 cf       	rjmp	.-22     	; 0x1a6c <vApplicationStackOverflowHook+0x4>

00001a82 <my_co2_call_back>:


/*A callback function to use the output of the CO2 sensor*/
void my_co2_call_back(uint16_t ppm)
{
	printf("CO2 is %d \n ",(int)ppm);
    1a82:	9f 93       	push	r25
    1a84:	8f 93       	push	r24
    1a86:	8d e5       	ldi	r24, 0x5D	; 93
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
    1a8e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <printf>
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	08 95       	ret

00001a9c <get_CO2_task>:
{
	// Remove compiler warnings.
	(void)pvParameters;
	while(1)
	{
		rc = mh_z19_take_meassuring();
    1a9c:	48 d5       	rcall	.+2704   	; 0x252e <mh_z19_take_meassuring>
    1a9e:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <rc>
		if (rc != MHZ19_OK )
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	fb cf       	rjmp	.-10     	; 0x1a9c <get_CO2_task>
		{
			// Something went wrong
		}
	else{
		mh_z19_get_co2_ppm(&ppm);
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	70 d5       	rcall	.+2784   	; 0x258c <mh_z19_get_co2_ppm>
    1aac:	f7 cf       	rjmp	.-18     	; 0x1a9c <get_CO2_task>

00001aae <get_T_and_H_task>:
				// Investigate the return code further
			}
			_delay_ms(2);
			temperature= hih8120GetTemperature();
			humidity = hih8120GetHumidity();
			printf("temp is %4.2fC  and humidity is %2.2f%% \n",temperature,humidity);
    1aae:	ca e6       	ldi	r28, 0x6A	; 106
    1ab0:	d2 e0       	ldi	r29, 0x02	; 2
void get_T_and_H_task(void*pvParameters)
{
	// Remove compiler warnings.
	(void)pvParameters;
	while(1)
	{	if(HIH8120_OK!=hih8120Wakeup())
    1ab2:	67 d4       	rcall	.+2254   	; 0x2382 <hih8120Wakeup>
    1ab4:	2f e7       	ldi	r18, 0x7F	; 127
    1ab6:	8f ea       	ldi	r24, 0xAF	; 175
    1ab8:	92 e0       	ldi	r25, 0x02	; 2
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	80 40       	sbci	r24, 0x00	; 0
    1abe:	90 40       	sbci	r25, 0x00	; 0
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <get_T_and_H_task+0xc>
    1ac2:	00 c0       	rjmp	.+0      	; 0x1ac4 <get_T_and_H_task+0x16>
		{
	//some errors check 
		}	
			_delay_ms(55);
			if ( HIH8120_OK !=  hih8120Meassure() )
    1ac4:	00 00       	nop
    1ac6:	71 d4       	rcall	.+2274   	; 0x23aa <hih8120Meassure>
    1ac8:	8f e3       	ldi	r24, 0x3F	; 63
    1aca:	9f e1       	ldi	r25, 0x1F	; 31
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <get_T_and_H_task+0x1e>
    1ad0:	00 c0       	rjmp	.+0      	; 0x1ad2 <get_T_and_H_task+0x24>
			{
				// Something went wrong
				// Investigate the return code further
			}
			_delay_ms(2);
			temperature= hih8120GetTemperature();
    1ad2:	00 00       	nop
    1ad4:	8c d4       	rcall	.+2328   	; 0x23ee <hih8120GetTemperature>
    1ad6:	60 93 8a 03 	sts	0x038A, r22	; 0x80038a <temperature>
    1ada:	70 93 8b 03 	sts	0x038B, r23	; 0x80038b <temperature+0x1>
    1ade:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <temperature+0x2>
    1ae2:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <temperature+0x3>
			humidity = hih8120GetHumidity();
    1ae6:	71 d4       	rcall	.+2274   	; 0x23ca <hih8120GetHumidity>
    1ae8:	26 2f       	mov	r18, r22
    1aea:	37 2f       	mov	r19, r23
    1aec:	46 2f       	mov	r20, r22
    1aee:	57 2f       	mov	r21, r23
    1af0:	68 2f       	mov	r22, r24
    1af2:	79 2f       	mov	r23, r25
    1af4:	40 93 8e 03 	sts	0x038E, r20	; 0x80038e <humidity>
    1af8:	50 93 8f 03 	sts	0x038F, r21	; 0x80038f <humidity+0x1>
    1afc:	60 93 90 03 	sts	0x0390, r22	; 0x800390 <humidity+0x2>
    1b00:	70 93 91 03 	sts	0x0391, r23	; 0x800391 <humidity+0x3>
			printf("temp is %4.2fC  and humidity is %2.2f%% \n",temperature,humidity);
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	3f 93       	push	r19
    1b0a:	2f 93       	push	r18
    1b0c:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <temperature+0x3>
    1b10:	8f 93       	push	r24
    1b12:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <temperature+0x2>
    1b16:	8f 93       	push	r24
    1b18:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <temperature+0x1>
    1b1c:	8f 93       	push	r24
    1b1e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <temperature>
    1b22:	8f 93       	push	r24
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <printf>
    1b2c:	8d b7       	in	r24, 0x3d	; 61
    1b2e:	9e b7       	in	r25, 0x3e	; 62
    1b30:	0a 96       	adiw	r24, 0x0a	; 10
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	9e bf       	out	0x3e, r25	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	8d bf       	out	0x3d, r24	; 61
    1b3c:	ba cf       	rjmp	.-140    	; 0x1ab2 <get_T_and_H_task+0x4>

00001b3e <init_T_H_sens>:
	printf("CO2 is %d \n ",(int)ppm);
}

/*initialize temperature and humidity driver*/
void init_T_H_sens (){
	if ( HIH8120_OK == hih8120Create() )
    1b3e:	0a d4       	rcall	.+2068   	; 0x2354 <hih8120Create>
    1b40:	81 11       	cpse	r24, r1
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <init_T_H_sens+0xe>
	{
		// Driver created OK
		// Always check what hih8120Create() returns
		printf("Driver created OK\n");
    1b44:	84 e9       	ldi	r24, 0x94	; 148
    1b46:	92 e0       	ldi	r25, 0x02	; 2
    1b48:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <puts>
    1b4c:	08 95       	ret

00001b4e <init_CO2_sens>:
	}
}

/*initialize CO2 driver*/
void init_CO2_sens(){
		mh_z19_create(ser_USART3, my_co2_call_back);
    1b4e:	61 e4       	ldi	r22, 0x41	; 65
    1b50:	7d e0       	ldi	r23, 0x0D	; 13
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	be c4       	rjmp	.+2428   	; 0x24d2 <mh_z19_create>
    1b56:	08 95       	ret

00001b58 <main>:
}
/************************************************************************/
/* Start of main                                                        */
/************************************************************************/
int main(void)
{	xTaskCreate(get_CO2_task, "Measure CO2 ", configMINIMAL_STACK_SIZE, NULL, task1_TASK_PRIORITY, &x1Handle);
    1b58:	0f 2e       	mov	r0, r31
    1b5a:	f0 e6       	ldi	r31, 0x60	; 96
    1b5c:	ef 2e       	mov	r14, r31
    1b5e:	f3 e0       	ldi	r31, 0x03	; 3
    1b60:	ff 2e       	mov	r15, r31
    1b62:	f0 2d       	mov	r31, r0
    1b64:	05 e0       	ldi	r16, 0x05	; 5
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 ec       	ldi	r20, 0xC0	; 192
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	66 ea       	ldi	r22, 0xA6	; 166
    1b70:	72 e0       	ldi	r23, 0x02	; 2
    1b72:	8e e4       	ldi	r24, 0x4E	; 78
    1b74:	9d e0       	ldi	r25, 0x0D	; 13
    1b76:	34 da       	rcall	.-2968   	; 0xfe0 <xTaskCreate>
	xTaskCreate(get_T_and_H_task, "Measure Temp and Humidity", configMINIMAL_STACK_SIZE, NULL, task2_TASK_PRIORITY, &x2Handle);
    1b78:	0f 2e       	mov	r0, r31
    1b7a:	fe e5       	ldi	r31, 0x5E	; 94
    1b7c:	ef 2e       	mov	r14, r31
    1b7e:	f3 e0       	ldi	r31, 0x03	; 3
    1b80:	ff 2e       	mov	r15, r31
    1b82:	f0 2d       	mov	r31, r0
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 ec       	ldi	r20, 0xC0	; 192
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	63 eb       	ldi	r22, 0xB3	; 179
    1b8e:	72 e0       	ldi	r23, 0x02	; 2
    1b90:	87 e5       	ldi	r24, 0x57	; 87
    1b92:	9d e0       	ldi	r25, 0x0D	; 13
    1b94:	25 da       	rcall	.-2998   	; 0xfe0 <xTaskCreate>

	stdioCreate(0);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <stdioCreate>
	sei();
	
	init_CO2_sens();
    1b9c:	78 94       	sei
	init_T_H_sens();
    1b9e:	d7 df       	rcall	.-82     	; 0x1b4e <init_CO2_sens>
    1ba0:	ce df       	rcall	.-100    	; 0x1b3e <init_T_H_sens>
	puts("Program Stared");
    1ba2:	8d ec       	ldi	r24, 0xCD	; 205
    1ba4:	92 e0       	ldi	r25, 0x02	; 2
    1ba6:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <puts>
	vTaskStartScheduler();
    1baa:	28 db       	rcall	.-2480   	; 0x11fc <vTaskStartScheduler>
    1bac:	ff cf       	rjmp	.-2      	; 0x1bac <main+0x54>

00001bae <vfprintf>:
    1bae:	2f 92       	push	r2
    1bb0:	3f 92       	push	r3
    1bb2:	4f 92       	push	r4
    1bb4:	5f 92       	push	r5
    1bb6:	6f 92       	push	r6
    1bb8:	7f 92       	push	r7
    1bba:	8f 92       	push	r8
    1bbc:	9f 92       	push	r9
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	60 97       	sbiw	r28, 0x10	; 16
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	7c 01       	movw	r14, r24
    1be4:	1b 01       	movw	r2, r22
    1be6:	6a 01       	movw	r12, r20
    1be8:	fc 01       	movw	r30, r24
    1bea:	17 82       	std	Z+7, r1	; 0x07
    1bec:	16 82       	std	Z+6, r1	; 0x06
    1bee:	83 81       	ldd	r24, Z+3	; 0x03
    1bf0:	81 ff       	sbrs	r24, 1
    1bf2:	44 c3       	rjmp	.+1672   	; 0x227c <__stack+0x7d>
    1bf4:	9e 01       	movw	r18, r28
    1bf6:	2f 5f       	subi	r18, 0xFF	; 255
    1bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfa:	39 01       	movw	r6, r18
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	f1 01       	movw	r30, r2
    1c02:	93 fd       	sbrc	r25, 3
    1c04:	85 91       	lpm	r24, Z+
    1c06:	93 ff       	sbrs	r25, 3
    1c08:	81 91       	ld	r24, Z+
    1c0a:	1f 01       	movw	r2, r30
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfprintf+0x64>
    1c10:	31 c3       	rjmp	.+1634   	; 0x2274 <__stack+0x75>
    1c12:	85 32       	cpi	r24, 0x25	; 37
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <vfprintf+0x76>
    1c16:	93 fd       	sbrc	r25, 3
    1c18:	85 91       	lpm	r24, Z+
    1c1a:	93 ff       	sbrs	r25, 3
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	1f 01       	movw	r2, r30
    1c20:	85 32       	cpi	r24, 0x25	; 37
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <vfprintf+0x84>
    1c24:	b7 01       	movw	r22, r14
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1c2c:	56 01       	movw	r10, r12
    1c2e:	65 01       	movw	r12, r10
    1c30:	e5 cf       	rjmp	.-54     	; 0x1bfc <vfprintf+0x4e>
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	51 2c       	mov	r5, r1
    1c36:	91 2c       	mov	r9, r1
    1c38:	ff e1       	ldi	r31, 0x1F	; 31
    1c3a:	f9 15       	cp	r31, r9
    1c3c:	d8 f0       	brcs	.+54     	; 0x1c74 <vfprintf+0xc6>
    1c3e:	8b 32       	cpi	r24, 0x2B	; 43
    1c40:	79 f0       	breq	.+30     	; 0x1c60 <vfprintf+0xb2>
    1c42:	38 f4       	brcc	.+14     	; 0x1c52 <vfprintf+0xa4>
    1c44:	80 32       	cpi	r24, 0x20	; 32
    1c46:	79 f0       	breq	.+30     	; 0x1c66 <vfprintf+0xb8>
    1c48:	83 32       	cpi	r24, 0x23	; 35
    1c4a:	a1 f4       	brne	.+40     	; 0x1c74 <vfprintf+0xc6>
    1c4c:	f9 2d       	mov	r31, r9
    1c4e:	f0 61       	ori	r31, 0x10	; 16
    1c50:	2e c0       	rjmp	.+92     	; 0x1cae <vfprintf+0x100>
    1c52:	8d 32       	cpi	r24, 0x2D	; 45
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <vfprintf+0xc0>
    1c56:	80 33       	cpi	r24, 0x30	; 48
    1c58:	69 f4       	brne	.+26     	; 0x1c74 <vfprintf+0xc6>
    1c5a:	29 2d       	mov	r18, r9
    1c5c:	21 60       	ori	r18, 0x01	; 1
    1c5e:	2d c0       	rjmp	.+90     	; 0x1cba <vfprintf+0x10c>
    1c60:	39 2d       	mov	r19, r9
    1c62:	32 60       	ori	r19, 0x02	; 2
    1c64:	93 2e       	mov	r9, r19
    1c66:	89 2d       	mov	r24, r9
    1c68:	84 60       	ori	r24, 0x04	; 4
    1c6a:	98 2e       	mov	r9, r24
    1c6c:	2a c0       	rjmp	.+84     	; 0x1cc2 <vfprintf+0x114>
    1c6e:	e9 2d       	mov	r30, r9
    1c70:	e8 60       	ori	r30, 0x08	; 8
    1c72:	15 c0       	rjmp	.+42     	; 0x1c9e <vfprintf+0xf0>
    1c74:	97 fc       	sbrc	r9, 7
    1c76:	2d c0       	rjmp	.+90     	; 0x1cd2 <vfprintf+0x124>
    1c78:	20 ed       	ldi	r18, 0xD0	; 208
    1c7a:	28 0f       	add	r18, r24
    1c7c:	2a 30       	cpi	r18, 0x0A	; 10
    1c7e:	88 f4       	brcc	.+34     	; 0x1ca2 <vfprintf+0xf4>
    1c80:	96 fe       	sbrs	r9, 6
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <vfprintf+0xe2>
    1c84:	3a e0       	ldi	r19, 0x0A	; 10
    1c86:	13 9f       	mul	r17, r19
    1c88:	20 0d       	add	r18, r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	12 2f       	mov	r17, r18
    1c8e:	19 c0       	rjmp	.+50     	; 0x1cc2 <vfprintf+0x114>
    1c90:	8a e0       	ldi	r24, 0x0A	; 10
    1c92:	58 9e       	mul	r5, r24
    1c94:	20 0d       	add	r18, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	52 2e       	mov	r5, r18
    1c9a:	e9 2d       	mov	r30, r9
    1c9c:	e0 62       	ori	r30, 0x20	; 32
    1c9e:	9e 2e       	mov	r9, r30
    1ca0:	10 c0       	rjmp	.+32     	; 0x1cc2 <vfprintf+0x114>
    1ca2:	8e 32       	cpi	r24, 0x2E	; 46
    1ca4:	31 f4       	brne	.+12     	; 0x1cb2 <vfprintf+0x104>
    1ca6:	96 fc       	sbrc	r9, 6
    1ca8:	e5 c2       	rjmp	.+1482   	; 0x2274 <__stack+0x75>
    1caa:	f9 2d       	mov	r31, r9
    1cac:	f0 64       	ori	r31, 0x40	; 64
    1cae:	9f 2e       	mov	r9, r31
    1cb0:	08 c0       	rjmp	.+16     	; 0x1cc2 <vfprintf+0x114>
    1cb2:	8c 36       	cpi	r24, 0x6C	; 108
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <vfprintf+0x110>
    1cb6:	29 2d       	mov	r18, r9
    1cb8:	20 68       	ori	r18, 0x80	; 128
    1cba:	92 2e       	mov	r9, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <vfprintf+0x114>
    1cbe:	88 36       	cpi	r24, 0x68	; 104
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <vfprintf+0x124>
    1cc2:	f1 01       	movw	r30, r2
    1cc4:	93 fd       	sbrc	r25, 3
    1cc6:	85 91       	lpm	r24, Z+
    1cc8:	93 ff       	sbrs	r25, 3
    1cca:	81 91       	ld	r24, Z+
    1ccc:	1f 01       	movw	r2, r30
    1cce:	81 11       	cpse	r24, r1
    1cd0:	b3 cf       	rjmp	.-154    	; 0x1c38 <vfprintf+0x8a>
    1cd2:	9b eb       	ldi	r25, 0xBB	; 187
    1cd4:	98 0f       	add	r25, r24
    1cd6:	93 30       	cpi	r25, 0x03	; 3
    1cd8:	20 f4       	brcc	.+8      	; 0x1ce2 <vfprintf+0x134>
    1cda:	99 2d       	mov	r25, r9
    1cdc:	90 61       	ori	r25, 0x10	; 16
    1cde:	80 5e       	subi	r24, 0xE0	; 224
    1ce0:	07 c0       	rjmp	.+14     	; 0x1cf0 <vfprintf+0x142>
    1ce2:	9b e9       	ldi	r25, 0x9B	; 155
    1ce4:	98 0f       	add	r25, r24
    1ce6:	93 30       	cpi	r25, 0x03	; 3
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <vfprintf+0x13e>
    1cea:	66 c1       	rjmp	.+716    	; 0x1fb8 <vfprintf+0x40a>
    1cec:	99 2d       	mov	r25, r9
    1cee:	9f 7e       	andi	r25, 0xEF	; 239
    1cf0:	96 ff       	sbrs	r25, 6
    1cf2:	16 e0       	ldi	r17, 0x06	; 6
    1cf4:	9f 73       	andi	r25, 0x3F	; 63
    1cf6:	99 2e       	mov	r9, r25
    1cf8:	85 36       	cpi	r24, 0x65	; 101
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <vfprintf+0x154>
    1cfc:	90 64       	ori	r25, 0x40	; 64
    1cfe:	99 2e       	mov	r9, r25
    1d00:	08 c0       	rjmp	.+16     	; 0x1d12 <vfprintf+0x164>
    1d02:	86 36       	cpi	r24, 0x66	; 102
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <vfprintf+0x160>
    1d06:	39 2f       	mov	r19, r25
    1d08:	30 68       	ori	r19, 0x80	; 128
    1d0a:	93 2e       	mov	r9, r19
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x164>
    1d0e:	11 11       	cpse	r17, r1
    1d10:	11 50       	subi	r17, 0x01	; 1
    1d12:	97 fe       	sbrs	r9, 7
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <vfprintf+0x176>
    1d16:	1c 33       	cpi	r17, 0x3C	; 60
    1d18:	50 f4       	brcc	.+20     	; 0x1d2e <vfprintf+0x180>
    1d1a:	44 24       	eor	r4, r4
    1d1c:	43 94       	inc	r4
    1d1e:	41 0e       	add	r4, r17
    1d20:	27 e0       	ldi	r18, 0x07	; 7
    1d22:	0b c0       	rjmp	.+22     	; 0x1d3a <vfprintf+0x18c>
    1d24:	18 30       	cpi	r17, 0x08	; 8
    1d26:	38 f0       	brcs	.+14     	; 0x1d36 <vfprintf+0x188>
    1d28:	27 e0       	ldi	r18, 0x07	; 7
    1d2a:	17 e0       	ldi	r17, 0x07	; 7
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <vfprintf+0x18a>
    1d2e:	27 e0       	ldi	r18, 0x07	; 7
    1d30:	9c e3       	ldi	r25, 0x3C	; 60
    1d32:	49 2e       	mov	r4, r25
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <vfprintf+0x18c>
    1d36:	21 2f       	mov	r18, r17
    1d38:	41 2c       	mov	r4, r1
    1d3a:	56 01       	movw	r10, r12
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	a8 0e       	add	r10, r24
    1d40:	b1 1c       	adc	r11, r1
    1d42:	f6 01       	movw	r30, r12
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	04 2d       	mov	r16, r4
    1d4e:	a3 01       	movw	r20, r6
    1d50:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__ftoa_engine>
    1d54:	6c 01       	movw	r12, r24
    1d56:	f9 81       	ldd	r31, Y+1	; 0x01
    1d58:	fc 87       	std	Y+12, r31	; 0x0c
    1d5a:	f0 ff       	sbrs	r31, 0
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <vfprintf+0x1b4>
    1d5e:	f3 ff       	sbrs	r31, 3
    1d60:	06 c0       	rjmp	.+12     	; 0x1d6e <vfprintf+0x1c0>
    1d62:	91 fc       	sbrc	r9, 1
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <vfprintf+0x1c4>
    1d66:	92 fe       	sbrs	r9, 2
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <vfprintf+0x1c8>
    1d6a:	00 e2       	ldi	r16, 0x20	; 32
    1d6c:	05 c0       	rjmp	.+10     	; 0x1d78 <vfprintf+0x1ca>
    1d6e:	0d e2       	ldi	r16, 0x2D	; 45
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <vfprintf+0x1ca>
    1d72:	0b e2       	ldi	r16, 0x2B	; 43
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <vfprintf+0x1ca>
    1d76:	00 e0       	ldi	r16, 0x00	; 0
    1d78:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7a:	8c 70       	andi	r24, 0x0C	; 12
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <vfprintf+0x1d6>
    1d7e:	01 11       	cpse	r16, r1
    1d80:	5a c2       	rjmp	.+1204   	; 0x2236 <__stack+0x37>
    1d82:	9b c2       	rjmp	.+1334   	; 0x22ba <__stack+0xbb>
    1d84:	97 fe       	sbrs	r9, 7
    1d86:	10 c0       	rjmp	.+32     	; 0x1da8 <vfprintf+0x1fa>
    1d88:	4c 0c       	add	r4, r12
    1d8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d8c:	f4 ff       	sbrs	r31, 4
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <vfprintf+0x1ea>
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	81 33       	cpi	r24, 0x31	; 49
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <vfprintf+0x1ea>
    1d96:	4a 94       	dec	r4
    1d98:	14 14       	cp	r1, r4
    1d9a:	74 f5       	brge	.+92     	; 0x1df8 <vfprintf+0x24a>
    1d9c:	28 e0       	ldi	r18, 0x08	; 8
    1d9e:	24 15       	cp	r18, r4
    1da0:	78 f5       	brcc	.+94     	; 0x1e00 <vfprintf+0x252>
    1da2:	88 e0       	ldi	r24, 0x08	; 8
    1da4:	48 2e       	mov	r4, r24
    1da6:	2c c0       	rjmp	.+88     	; 0x1e00 <vfprintf+0x252>
    1da8:	96 fc       	sbrc	r9, 6
    1daa:	2a c0       	rjmp	.+84     	; 0x1e00 <vfprintf+0x252>
    1dac:	81 2f       	mov	r24, r17
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	8c 15       	cp	r24, r12
    1db2:	9d 05       	cpc	r25, r13
    1db4:	9c f0       	brlt	.+38     	; 0x1ddc <vfprintf+0x22e>
    1db6:	3c ef       	ldi	r19, 0xFC	; 252
    1db8:	c3 16       	cp	r12, r19
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	d3 06       	cpc	r13, r19
    1dbe:	74 f0       	brlt	.+28     	; 0x1ddc <vfprintf+0x22e>
    1dc0:	89 2d       	mov	r24, r9
    1dc2:	80 68       	ori	r24, 0x80	; 128
    1dc4:	98 2e       	mov	r9, r24
    1dc6:	0a c0       	rjmp	.+20     	; 0x1ddc <vfprintf+0x22e>
    1dc8:	e2 e0       	ldi	r30, 0x02	; 2
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	ec 0f       	add	r30, r28
    1dce:	fd 1f       	adc	r31, r29
    1dd0:	e1 0f       	add	r30, r17
    1dd2:	f1 1d       	adc	r31, r1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 33       	cpi	r24, 0x30	; 48
    1dd8:	19 f4       	brne	.+6      	; 0x1de0 <vfprintf+0x232>
    1dda:	11 50       	subi	r17, 0x01	; 1
    1ddc:	11 11       	cpse	r17, r1
    1dde:	f4 cf       	rjmp	.-24     	; 0x1dc8 <vfprintf+0x21a>
    1de0:	97 fe       	sbrs	r9, 7
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <vfprintf+0x252>
    1de4:	44 24       	eor	r4, r4
    1de6:	43 94       	inc	r4
    1de8:	41 0e       	add	r4, r17
    1dea:	81 2f       	mov	r24, r17
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	c8 16       	cp	r12, r24
    1df0:	d9 06       	cpc	r13, r25
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <vfprintf+0x250>
    1df4:	1c 19       	sub	r17, r12
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <vfprintf+0x252>
    1df8:	44 24       	eor	r4, r4
    1dfa:	43 94       	inc	r4
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <vfprintf+0x252>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	97 fe       	sbrs	r9, 7
    1e02:	06 c0       	rjmp	.+12     	; 0x1e10 <vfprintf+0x262>
    1e04:	1c 14       	cp	r1, r12
    1e06:	1d 04       	cpc	r1, r13
    1e08:	34 f4       	brge	.+12     	; 0x1e16 <vfprintf+0x268>
    1e0a:	c6 01       	movw	r24, r12
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	05 c0       	rjmp	.+10     	; 0x1e1a <vfprintf+0x26c>
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <vfprintf+0x26c>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	01 11       	cpse	r16, r1
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	11 23       	and	r17, r17
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <vfprintf+0x280>
    1e22:	21 2f       	mov	r18, r17
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	2f 5f       	subi	r18, 0xFF	; 255
    1e28:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2a:	82 0f       	add	r24, r18
    1e2c:	93 1f       	adc	r25, r19
    1e2e:	25 2d       	mov	r18, r5
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	82 17       	cp	r24, r18
    1e34:	93 07       	cpc	r25, r19
    1e36:	14 f4       	brge	.+4      	; 0x1e3c <vfprintf+0x28e>
    1e38:	58 1a       	sub	r5, r24
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <vfprintf+0x290>
    1e3c:	51 2c       	mov	r5, r1
    1e3e:	89 2d       	mov	r24, r9
    1e40:	89 70       	andi	r24, 0x09	; 9
    1e42:	49 f4       	brne	.+18     	; 0x1e56 <vfprintf+0x2a8>
    1e44:	55 20       	and	r5, r5
    1e46:	39 f0       	breq	.+14     	; 0x1e56 <vfprintf+0x2a8>
    1e48:	b7 01       	movw	r22, r14
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1e52:	5a 94       	dec	r5
    1e54:	f7 cf       	rjmp	.-18     	; 0x1e44 <vfprintf+0x296>
    1e56:	00 23       	and	r16, r16
    1e58:	29 f0       	breq	.+10     	; 0x1e64 <vfprintf+0x2b6>
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	80 2f       	mov	r24, r16
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1e64:	93 fc       	sbrc	r9, 3
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <vfprintf+0x2cc>
    1e68:	55 20       	and	r5, r5
    1e6a:	39 f0       	breq	.+14     	; 0x1e7a <vfprintf+0x2cc>
    1e6c:	b7 01       	movw	r22, r14
    1e6e:	80 e3       	ldi	r24, 0x30	; 48
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1e76:	5a 94       	dec	r5
    1e78:	f7 cf       	rjmp	.-18     	; 0x1e68 <vfprintf+0x2ba>
    1e7a:	97 fe       	sbrs	r9, 7
    1e7c:	4c c0       	rjmp	.+152    	; 0x1f16 <vfprintf+0x368>
    1e7e:	46 01       	movw	r8, r12
    1e80:	d7 fe       	sbrs	r13, 7
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x2da>
    1e84:	81 2c       	mov	r8, r1
    1e86:	91 2c       	mov	r9, r1
    1e88:	c6 01       	movw	r24, r12
    1e8a:	88 19       	sub	r24, r8
    1e8c:	99 09       	sbc	r25, r9
    1e8e:	f3 01       	movw	r30, r6
    1e90:	e8 0f       	add	r30, r24
    1e92:	f9 1f       	adc	r31, r25
    1e94:	fe 87       	std	Y+14, r31	; 0x0e
    1e96:	ed 87       	std	Y+13, r30	; 0x0d
    1e98:	96 01       	movw	r18, r12
    1e9a:	24 19       	sub	r18, r4
    1e9c:	31 09       	sbc	r19, r1
    1e9e:	38 8b       	std	Y+16, r19	; 0x10
    1ea0:	2f 87       	std	Y+15, r18	; 0x0f
    1ea2:	01 2f       	mov	r16, r17
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
    1ea6:	11 95       	neg	r17
    1ea8:	01 95       	neg	r16
    1eaa:	11 09       	sbc	r17, r1
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	83 16       	cp	r8, r19
    1eb0:	93 06       	cpc	r9, r19
    1eb2:	29 f4       	brne	.+10     	; 0x1ebe <vfprintf+0x310>
    1eb4:	b7 01       	movw	r22, r14
    1eb6:	8e e2       	ldi	r24, 0x2E	; 46
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1ebe:	c8 14       	cp	r12, r8
    1ec0:	d9 04       	cpc	r13, r9
    1ec2:	4c f0       	brlt	.+18     	; 0x1ed6 <vfprintf+0x328>
    1ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec6:	98 89       	ldd	r25, Y+16	; 0x10
    1ec8:	88 15       	cp	r24, r8
    1eca:	99 05       	cpc	r25, r9
    1ecc:	24 f4       	brge	.+8      	; 0x1ed6 <vfprintf+0x328>
    1ece:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ed0:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ed2:	81 81       	ldd	r24, Z+1	; 0x01
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <vfprintf+0x32a>
    1ed6:	80 e3       	ldi	r24, 0x30	; 48
    1ed8:	f1 e0       	ldi	r31, 0x01	; 1
    1eda:	8f 1a       	sub	r8, r31
    1edc:	91 08       	sbc	r9, r1
    1ede:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ee0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ee2:	2f 5f       	subi	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	3e 87       	std	Y+14, r19	; 0x0e
    1ee8:	2d 87       	std	Y+13, r18	; 0x0d
    1eea:	80 16       	cp	r8, r16
    1eec:	91 06       	cpc	r9, r17
    1eee:	2c f0       	brlt	.+10     	; 0x1efa <vfprintf+0x34c>
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1ef8:	d9 cf       	rjmp	.-78     	; 0x1eac <vfprintf+0x2fe>
    1efa:	c8 14       	cp	r12, r8
    1efc:	d9 04       	cpc	r13, r9
    1efe:	41 f4       	brne	.+16     	; 0x1f10 <vfprintf+0x362>
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	96 33       	cpi	r25, 0x36	; 54
    1f04:	20 f4       	brcc	.+8      	; 0x1f0e <vfprintf+0x360>
    1f06:	95 33       	cpi	r25, 0x35	; 53
    1f08:	19 f4       	brne	.+6      	; 0x1f10 <vfprintf+0x362>
    1f0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f0c:	34 ff       	sbrs	r19, 4
    1f0e:	81 e3       	ldi	r24, 0x31	; 49
    1f10:	b7 01       	movw	r22, r14
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	4e c0       	rjmp	.+156    	; 0x1fb2 <vfprintf+0x404>
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	81 33       	cpi	r24, 0x31	; 49
    1f1a:	19 f0       	breq	.+6      	; 0x1f22 <vfprintf+0x374>
    1f1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1e:	9f 7e       	andi	r25, 0xEF	; 239
    1f20:	9c 87       	std	Y+12, r25	; 0x0c
    1f22:	b7 01       	movw	r22, r14
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1f2a:	11 11       	cpse	r17, r1
    1f2c:	05 c0       	rjmp	.+10     	; 0x1f38 <vfprintf+0x38a>
    1f2e:	94 fc       	sbrc	r9, 4
    1f30:	18 c0       	rjmp	.+48     	; 0x1f62 <vfprintf+0x3b4>
    1f32:	85 e6       	ldi	r24, 0x65	; 101
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	17 c0       	rjmp	.+46     	; 0x1f66 <vfprintf+0x3b8>
    1f38:	b7 01       	movw	r22, r14
    1f3a:	8e e2       	ldi	r24, 0x2E	; 46
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1f42:	1e 5f       	subi	r17, 0xFE	; 254
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	01 e0       	ldi	r16, 0x01	; 1
    1f48:	08 0f       	add	r16, r24
    1f4a:	f3 01       	movw	r30, r6
    1f4c:	e8 0f       	add	r30, r24
    1f4e:	f1 1d       	adc	r31, r1
    1f50:	80 81       	ld	r24, Z
    1f52:	b7 01       	movw	r22, r14
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1f5a:	80 2f       	mov	r24, r16
    1f5c:	01 13       	cpse	r16, r17
    1f5e:	f3 cf       	rjmp	.-26     	; 0x1f46 <vfprintf+0x398>
    1f60:	e6 cf       	rjmp	.-52     	; 0x1f2e <vfprintf+0x380>
    1f62:	85 e4       	ldi	r24, 0x45	; 69
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	b7 01       	movw	r22, r14
    1f68:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1f6c:	d7 fc       	sbrc	r13, 7
    1f6e:	06 c0       	rjmp	.+12     	; 0x1f7c <vfprintf+0x3ce>
    1f70:	c1 14       	cp	r12, r1
    1f72:	d1 04       	cpc	r13, r1
    1f74:	41 f4       	brne	.+16     	; 0x1f86 <vfprintf+0x3d8>
    1f76:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f78:	e4 ff       	sbrs	r30, 4
    1f7a:	05 c0       	rjmp	.+10     	; 0x1f86 <vfprintf+0x3d8>
    1f7c:	d1 94       	neg	r13
    1f7e:	c1 94       	neg	r12
    1f80:	d1 08       	sbc	r13, r1
    1f82:	8d e2       	ldi	r24, 0x2D	; 45
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <vfprintf+0x3da>
    1f86:	8b e2       	ldi	r24, 0x2B	; 43
    1f88:	b7 01       	movw	r22, r14
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1f90:	80 e3       	ldi	r24, 0x30	; 48
    1f92:	2a e0       	ldi	r18, 0x0A	; 10
    1f94:	c2 16       	cp	r12, r18
    1f96:	d1 04       	cpc	r13, r1
    1f98:	2c f0       	brlt	.+10     	; 0x1fa4 <vfprintf+0x3f6>
    1f9a:	8f 5f       	subi	r24, 0xFF	; 255
    1f9c:	fa e0       	ldi	r31, 0x0A	; 10
    1f9e:	cf 1a       	sub	r12, r31
    1fa0:	d1 08       	sbc	r13, r1
    1fa2:	f7 cf       	rjmp	.-18     	; 0x1f92 <vfprintf+0x3e4>
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1fac:	b7 01       	movw	r22, r14
    1fae:	c6 01       	movw	r24, r12
    1fb0:	c0 96       	adiw	r24, 0x30	; 48
    1fb2:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    1fb6:	54 c1       	rjmp	.+680    	; 0x2260 <__stack+0x61>
    1fb8:	83 36       	cpi	r24, 0x63	; 99
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <vfprintf+0x41a>
    1fbc:	83 37       	cpi	r24, 0x73	; 115
    1fbe:	79 f0       	breq	.+30     	; 0x1fde <vfprintf+0x430>
    1fc0:	83 35       	cpi	r24, 0x53	; 83
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <vfprintf+0x418>
    1fc4:	56 c0       	rjmp	.+172    	; 0x2072 <vfprintf+0x4c4>
    1fc6:	20 c0       	rjmp	.+64     	; 0x2008 <vfprintf+0x45a>
    1fc8:	56 01       	movw	r10, r12
    1fca:	32 e0       	ldi	r19, 0x02	; 2
    1fcc:	a3 0e       	add	r10, r19
    1fce:	b1 1c       	adc	r11, r1
    1fd0:	f6 01       	movw	r30, r12
    1fd2:	80 81       	ld	r24, Z
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	01 e0       	ldi	r16, 0x01	; 1
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	63 01       	movw	r12, r6
    1fdc:	12 c0       	rjmp	.+36     	; 0x2002 <vfprintf+0x454>
    1fde:	56 01       	movw	r10, r12
    1fe0:	f2 e0       	ldi	r31, 0x02	; 2
    1fe2:	af 0e       	add	r10, r31
    1fe4:	b1 1c       	adc	r11, r1
    1fe6:	f6 01       	movw	r30, r12
    1fe8:	c0 80       	ld	r12, Z
    1fea:	d1 80       	ldd	r13, Z+1	; 0x01
    1fec:	96 fe       	sbrs	r9, 6
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <vfprintf+0x448>
    1ff0:	61 2f       	mov	r22, r17
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0x44c>
    1ff6:	6f ef       	ldi	r22, 0xFF	; 255
    1ff8:	7f ef       	ldi	r23, 0xFF	; 255
    1ffa:	c6 01       	movw	r24, r12
    1ffc:	0e 94 9c 1c 	call	0x3938	; 0x3938 <strnlen>
    2000:	8c 01       	movw	r16, r24
    2002:	f9 2d       	mov	r31, r9
    2004:	ff 77       	andi	r31, 0x7F	; 127
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <vfprintf+0x482>
    2008:	56 01       	movw	r10, r12
    200a:	22 e0       	ldi	r18, 0x02	; 2
    200c:	a2 0e       	add	r10, r18
    200e:	b1 1c       	adc	r11, r1
    2010:	f6 01       	movw	r30, r12
    2012:	c0 80       	ld	r12, Z
    2014:	d1 80       	ldd	r13, Z+1	; 0x01
    2016:	96 fe       	sbrs	r9, 6
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <vfprintf+0x472>
    201a:	61 2f       	mov	r22, r17
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <vfprintf+0x476>
    2020:	6f ef       	ldi	r22, 0xFF	; 255
    2022:	7f ef       	ldi	r23, 0xFF	; 255
    2024:	c6 01       	movw	r24, r12
    2026:	0e 94 81 1c 	call	0x3902	; 0x3902 <strnlen_P>
    202a:	8c 01       	movw	r16, r24
    202c:	f9 2d       	mov	r31, r9
    202e:	f0 68       	ori	r31, 0x80	; 128
    2030:	9f 2e       	mov	r9, r31
    2032:	f3 fd       	sbrc	r31, 3
    2034:	1a c0       	rjmp	.+52     	; 0x206a <vfprintf+0x4bc>
    2036:	85 2d       	mov	r24, r5
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	08 17       	cp	r16, r24
    203c:	19 07       	cpc	r17, r25
    203e:	a8 f4       	brcc	.+42     	; 0x206a <vfprintf+0x4bc>
    2040:	b7 01       	movw	r22, r14
    2042:	80 e2       	ldi	r24, 0x20	; 32
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    204a:	5a 94       	dec	r5
    204c:	f4 cf       	rjmp	.-24     	; 0x2036 <vfprintf+0x488>
    204e:	f6 01       	movw	r30, r12
    2050:	97 fc       	sbrc	r9, 7
    2052:	85 91       	lpm	r24, Z+
    2054:	97 fe       	sbrs	r9, 7
    2056:	81 91       	ld	r24, Z+
    2058:	6f 01       	movw	r12, r30
    205a:	b7 01       	movw	r22, r14
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    2062:	51 10       	cpse	r5, r1
    2064:	5a 94       	dec	r5
    2066:	01 50       	subi	r16, 0x01	; 1
    2068:	11 09       	sbc	r17, r1
    206a:	01 15       	cp	r16, r1
    206c:	11 05       	cpc	r17, r1
    206e:	79 f7       	brne	.-34     	; 0x204e <vfprintf+0x4a0>
    2070:	f7 c0       	rjmp	.+494    	; 0x2260 <__stack+0x61>
    2072:	84 36       	cpi	r24, 0x64	; 100
    2074:	11 f0       	breq	.+4      	; 0x207a <vfprintf+0x4cc>
    2076:	89 36       	cpi	r24, 0x69	; 105
    2078:	61 f5       	brne	.+88     	; 0x20d2 <vfprintf+0x524>
    207a:	56 01       	movw	r10, r12
    207c:	97 fe       	sbrs	r9, 7
    207e:	09 c0       	rjmp	.+18     	; 0x2092 <vfprintf+0x4e4>
    2080:	24 e0       	ldi	r18, 0x04	; 4
    2082:	a2 0e       	add	r10, r18
    2084:	b1 1c       	adc	r11, r1
    2086:	f6 01       	movw	r30, r12
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	0a c0       	rjmp	.+20     	; 0x20a6 <vfprintf+0x4f8>
    2092:	f2 e0       	ldi	r31, 0x02	; 2
    2094:	af 0e       	add	r10, r31
    2096:	b1 1c       	adc	r11, r1
    2098:	f6 01       	movw	r30, r12
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	07 2e       	mov	r0, r23
    20a0:	00 0c       	add	r0, r0
    20a2:	88 0b       	sbc	r24, r24
    20a4:	99 0b       	sbc	r25, r25
    20a6:	f9 2d       	mov	r31, r9
    20a8:	ff 76       	andi	r31, 0x6F	; 111
    20aa:	9f 2e       	mov	r9, r31
    20ac:	97 ff       	sbrs	r25, 7
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <vfprintf+0x514>
    20b0:	90 95       	com	r25
    20b2:	80 95       	com	r24
    20b4:	70 95       	com	r23
    20b6:	61 95       	neg	r22
    20b8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ba:	8f 4f       	sbci	r24, 0xFF	; 255
    20bc:	9f 4f       	sbci	r25, 0xFF	; 255
    20be:	f0 68       	ori	r31, 0x80	; 128
    20c0:	9f 2e       	mov	r9, r31
    20c2:	2a e0       	ldi	r18, 0x0A	; 10
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	a3 01       	movw	r20, r6
    20c8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__ultoa_invert>
    20cc:	c8 2e       	mov	r12, r24
    20ce:	c6 18       	sub	r12, r6
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <vfprintf+0x5a2>
    20d2:	09 2d       	mov	r16, r9
    20d4:	85 37       	cpi	r24, 0x75	; 117
    20d6:	21 f4       	brne	.+8      	; 0x20e0 <vfprintf+0x532>
    20d8:	0f 7e       	andi	r16, 0xEF	; 239
    20da:	2a e0       	ldi	r18, 0x0A	; 10
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	1d c0       	rjmp	.+58     	; 0x211a <vfprintf+0x56c>
    20e0:	09 7f       	andi	r16, 0xF9	; 249
    20e2:	8f 36       	cpi	r24, 0x6F	; 111
    20e4:	91 f0       	breq	.+36     	; 0x210a <vfprintf+0x55c>
    20e6:	18 f4       	brcc	.+6      	; 0x20ee <vfprintf+0x540>
    20e8:	88 35       	cpi	r24, 0x58	; 88
    20ea:	59 f0       	breq	.+22     	; 0x2102 <vfprintf+0x554>
    20ec:	c3 c0       	rjmp	.+390    	; 0x2274 <__stack+0x75>
    20ee:	80 37       	cpi	r24, 0x70	; 112
    20f0:	19 f0       	breq	.+6      	; 0x20f8 <vfprintf+0x54a>
    20f2:	88 37       	cpi	r24, 0x78	; 120
    20f4:	11 f0       	breq	.+4      	; 0x20fa <vfprintf+0x54c>
    20f6:	be c0       	rjmp	.+380    	; 0x2274 <__stack+0x75>
    20f8:	00 61       	ori	r16, 0x10	; 16
    20fa:	04 ff       	sbrs	r16, 4
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <vfprintf+0x562>
    20fe:	04 60       	ori	r16, 0x04	; 4
    2100:	07 c0       	rjmp	.+14     	; 0x2110 <vfprintf+0x562>
    2102:	94 fe       	sbrs	r9, 4
    2104:	08 c0       	rjmp	.+16     	; 0x2116 <vfprintf+0x568>
    2106:	06 60       	ori	r16, 0x06	; 6
    2108:	06 c0       	rjmp	.+12     	; 0x2116 <vfprintf+0x568>
    210a:	28 e0       	ldi	r18, 0x08	; 8
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	05 c0       	rjmp	.+10     	; 0x211a <vfprintf+0x56c>
    2110:	20 e1       	ldi	r18, 0x10	; 16
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <vfprintf+0x56c>
    2116:	20 e1       	ldi	r18, 0x10	; 16
    2118:	32 e0       	ldi	r19, 0x02	; 2
    211a:	56 01       	movw	r10, r12
    211c:	07 ff       	sbrs	r16, 7
    211e:	09 c0       	rjmp	.+18     	; 0x2132 <vfprintf+0x584>
    2120:	84 e0       	ldi	r24, 0x04	; 4
    2122:	a8 0e       	add	r10, r24
    2124:	b1 1c       	adc	r11, r1
    2126:	f6 01       	movw	r30, r12
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	08 c0       	rjmp	.+16     	; 0x2142 <vfprintf+0x594>
    2132:	f2 e0       	ldi	r31, 0x02	; 2
    2134:	af 0e       	add	r10, r31
    2136:	b1 1c       	adc	r11, r1
    2138:	f6 01       	movw	r30, r12
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a3 01       	movw	r20, r6
    2144:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__ultoa_invert>
    2148:	c8 2e       	mov	r12, r24
    214a:	c6 18       	sub	r12, r6
    214c:	0f 77       	andi	r16, 0x7F	; 127
    214e:	90 2e       	mov	r9, r16
    2150:	96 fe       	sbrs	r9, 6
    2152:	0b c0       	rjmp	.+22     	; 0x216a <vfprintf+0x5bc>
    2154:	09 2d       	mov	r16, r9
    2156:	0e 7f       	andi	r16, 0xFE	; 254
    2158:	c1 16       	cp	r12, r17
    215a:	50 f4       	brcc	.+20     	; 0x2170 <vfprintf+0x5c2>
    215c:	94 fe       	sbrs	r9, 4
    215e:	0a c0       	rjmp	.+20     	; 0x2174 <vfprintf+0x5c6>
    2160:	92 fc       	sbrc	r9, 2
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <vfprintf+0x5c6>
    2164:	09 2d       	mov	r16, r9
    2166:	0e 7e       	andi	r16, 0xEE	; 238
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <vfprintf+0x5c6>
    216a:	dc 2c       	mov	r13, r12
    216c:	09 2d       	mov	r16, r9
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <vfprintf+0x5c8>
    2170:	dc 2c       	mov	r13, r12
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <vfprintf+0x5c8>
    2174:	d1 2e       	mov	r13, r17
    2176:	04 ff       	sbrs	r16, 4
    2178:	0d c0       	rjmp	.+26     	; 0x2194 <vfprintf+0x5e6>
    217a:	fe 01       	movw	r30, r28
    217c:	ec 0d       	add	r30, r12
    217e:	f1 1d       	adc	r31, r1
    2180:	80 81       	ld	r24, Z
    2182:	80 33       	cpi	r24, 0x30	; 48
    2184:	11 f4       	brne	.+4      	; 0x218a <vfprintf+0x5dc>
    2186:	09 7e       	andi	r16, 0xE9	; 233
    2188:	09 c0       	rjmp	.+18     	; 0x219c <vfprintf+0x5ee>
    218a:	02 ff       	sbrs	r16, 2
    218c:	06 c0       	rjmp	.+12     	; 0x219a <vfprintf+0x5ec>
    218e:	d3 94       	inc	r13
    2190:	d3 94       	inc	r13
    2192:	04 c0       	rjmp	.+8      	; 0x219c <vfprintf+0x5ee>
    2194:	80 2f       	mov	r24, r16
    2196:	86 78       	andi	r24, 0x86	; 134
    2198:	09 f0       	breq	.+2      	; 0x219c <vfprintf+0x5ee>
    219a:	d3 94       	inc	r13
    219c:	03 fd       	sbrc	r16, 3
    219e:	11 c0       	rjmp	.+34     	; 0x21c2 <vfprintf+0x614>
    21a0:	00 ff       	sbrs	r16, 0
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <vfprintf+0x602>
    21a4:	1c 2d       	mov	r17, r12
    21a6:	d5 14       	cp	r13, r5
    21a8:	80 f4       	brcc	.+32     	; 0x21ca <vfprintf+0x61c>
    21aa:	15 0d       	add	r17, r5
    21ac:	1d 19       	sub	r17, r13
    21ae:	0d c0       	rjmp	.+26     	; 0x21ca <vfprintf+0x61c>
    21b0:	d5 14       	cp	r13, r5
    21b2:	58 f4       	brcc	.+22     	; 0x21ca <vfprintf+0x61c>
    21b4:	b7 01       	movw	r22, r14
    21b6:	80 e2       	ldi	r24, 0x20	; 32
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    21be:	d3 94       	inc	r13
    21c0:	f7 cf       	rjmp	.-18     	; 0x21b0 <vfprintf+0x602>
    21c2:	d5 14       	cp	r13, r5
    21c4:	10 f4       	brcc	.+4      	; 0x21ca <vfprintf+0x61c>
    21c6:	5d 18       	sub	r5, r13
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <vfprintf+0x61e>
    21ca:	51 2c       	mov	r5, r1
    21cc:	04 ff       	sbrs	r16, 4
    21ce:	10 c0       	rjmp	.+32     	; 0x21f0 <vfprintf+0x642>
    21d0:	b7 01       	movw	r22, r14
    21d2:	80 e3       	ldi	r24, 0x30	; 48
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    21da:	02 ff       	sbrs	r16, 2
    21dc:	17 c0       	rjmp	.+46     	; 0x220c <__stack+0xd>
    21de:	01 fd       	sbrc	r16, 1
    21e0:	03 c0       	rjmp	.+6      	; 0x21e8 <vfprintf+0x63a>
    21e2:	88 e7       	ldi	r24, 0x78	; 120
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <vfprintf+0x63e>
    21e8:	88 e5       	ldi	r24, 0x58	; 88
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	b7 01       	movw	r22, r14
    21ee:	0c c0       	rjmp	.+24     	; 0x2208 <__stack+0x9>
    21f0:	80 2f       	mov	r24, r16
    21f2:	86 78       	andi	r24, 0x86	; 134
    21f4:	59 f0       	breq	.+22     	; 0x220c <__stack+0xd>
    21f6:	01 ff       	sbrs	r16, 1
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <vfprintf+0x650>
    21fa:	8b e2       	ldi	r24, 0x2B	; 43
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <__stack+0x1>
    21fe:	80 e2       	ldi	r24, 0x20	; 32
    2200:	07 fd       	sbrc	r16, 7
    2202:	8d e2       	ldi	r24, 0x2D	; 45
    2204:	b7 01       	movw	r22, r14
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    220c:	c1 16       	cp	r12, r17
    220e:	38 f4       	brcc	.+14     	; 0x221e <__stack+0x1f>
    2210:	b7 01       	movw	r22, r14
    2212:	80 e3       	ldi	r24, 0x30	; 48
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    221a:	11 50       	subi	r17, 0x01	; 1
    221c:	f7 cf       	rjmp	.-18     	; 0x220c <__stack+0xd>
    221e:	ca 94       	dec	r12
    2220:	f3 01       	movw	r30, r6
    2222:	ec 0d       	add	r30, r12
    2224:	f1 1d       	adc	r31, r1
    2226:	80 81       	ld	r24, Z
    2228:	b7 01       	movw	r22, r14
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    2230:	c1 10       	cpse	r12, r1
    2232:	f5 cf       	rjmp	.-22     	; 0x221e <__stack+0x1f>
    2234:	15 c0       	rjmp	.+42     	; 0x2260 <__stack+0x61>
    2236:	f4 e0       	ldi	r31, 0x04	; 4
    2238:	f5 15       	cp	r31, r5
    223a:	60 f5       	brcc	.+88     	; 0x2294 <__stack+0x95>
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	58 1a       	sub	r5, r24
    2240:	93 fe       	sbrs	r9, 3
    2242:	1f c0       	rjmp	.+62     	; 0x2282 <__stack+0x83>
    2244:	01 11       	cpse	r16, r1
    2246:	27 c0       	rjmp	.+78     	; 0x2296 <__stack+0x97>
    2248:	2c 85       	ldd	r18, Y+12	; 0x0c
    224a:	23 ff       	sbrs	r18, 3
    224c:	2a c0       	rjmp	.+84     	; 0x22a2 <__stack+0xa3>
    224e:	0a e9       	ldi	r16, 0x9A	; 154
    2250:	11 e0       	ldi	r17, 0x01	; 1
    2252:	39 2d       	mov	r19, r9
    2254:	30 71       	andi	r19, 0x10	; 16
    2256:	93 2e       	mov	r9, r19
    2258:	f8 01       	movw	r30, r16
    225a:	84 91       	lpm	r24, Z
    225c:	81 11       	cpse	r24, r1
    225e:	24 c0       	rjmp	.+72     	; 0x22a8 <__stack+0xa9>
    2260:	55 20       	and	r5, r5
    2262:	09 f4       	brne	.+2      	; 0x2266 <__stack+0x67>
    2264:	e4 cc       	rjmp	.-1592   	; 0x1c2e <vfprintf+0x80>
    2266:	b7 01       	movw	r22, r14
    2268:	80 e2       	ldi	r24, 0x20	; 32
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    2270:	5a 94       	dec	r5
    2272:	f6 cf       	rjmp	.-20     	; 0x2260 <__stack+0x61>
    2274:	f7 01       	movw	r30, r14
    2276:	86 81       	ldd	r24, Z+6	; 0x06
    2278:	97 81       	ldd	r25, Z+7	; 0x07
    227a:	26 c0       	rjmp	.+76     	; 0x22c8 <__stack+0xc9>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	9f ef       	ldi	r25, 0xFF	; 255
    2280:	23 c0       	rjmp	.+70     	; 0x22c8 <__stack+0xc9>
    2282:	b7 01       	movw	r22, r14
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    228c:	5a 94       	dec	r5
    228e:	51 10       	cpse	r5, r1
    2290:	f8 cf       	rjmp	.-16     	; 0x2282 <__stack+0x83>
    2292:	d8 cf       	rjmp	.-80     	; 0x2244 <__stack+0x45>
    2294:	51 2c       	mov	r5, r1
    2296:	b7 01       	movw	r22, r14
    2298:	80 2f       	mov	r24, r16
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    22a0:	d3 cf       	rjmp	.-90     	; 0x2248 <__stack+0x49>
    22a2:	0e e9       	ldi	r16, 0x9E	; 158
    22a4:	11 e0       	ldi	r17, 0x01	; 1
    22a6:	d5 cf       	rjmp	.-86     	; 0x2252 <__stack+0x53>
    22a8:	91 10       	cpse	r9, r1
    22aa:	80 52       	subi	r24, 0x20	; 32
    22ac:	b7 01       	movw	r22, r14
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 a7 1c 	call	0x394e	; 0x394e <fputc>
    22b4:	0f 5f       	subi	r16, 0xFF	; 255
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	cf cf       	rjmp	.-98     	; 0x2258 <__stack+0x59>
    22ba:	23 e0       	ldi	r18, 0x03	; 3
    22bc:	25 15       	cp	r18, r5
    22be:	10 f4       	brcc	.+4      	; 0x22c4 <__stack+0xc5>
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	bd cf       	rjmp	.-134    	; 0x223e <__stack+0x3f>
    22c4:	51 2c       	mov	r5, r1
    22c6:	c0 cf       	rjmp	.-128    	; 0x2248 <__stack+0x49>
    22c8:	60 96       	adiw	r28, 0x10	; 16
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	df 90       	pop	r13
    22e2:	cf 90       	pop	r12
    22e4:	bf 90       	pop	r11
    22e6:	af 90       	pop	r10
    22e8:	9f 90       	pop	r9
    22ea:	8f 90       	pop	r8
    22ec:	7f 90       	pop	r7
    22ee:	6f 90       	pop	r6
    22f0:	5f 90       	pop	r5
    22f2:	4f 90       	pop	r4
    22f4:	3f 90       	pop	r3
    22f6:	2f 90       	pop	r2
    22f8:	08 95       	ret

000022fa <_hihTwiCallback>:
    22fa:	65 30       	cpi	r22, 0x05	; 5
    22fc:	f1 f4       	brne	.+60     	; 0x233a <_hihTwiCallback+0x40>
    22fe:	fa 01       	movw	r30, r20
    2300:	80 81       	ld	r24, Z
    2302:	8f 73       	andi	r24, 0x3F	; 63
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	98 2f       	mov	r25, r24
    2308:	88 27       	eor	r24, r24
    230a:	21 81       	ldd	r18, Z+1	; 0x01
    230c:	82 2b       	or	r24, r18
    230e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    2312:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	f0 e4       	ldi	r31, 0x40	; 64
    231a:	8f 9f       	mul	r24, r31
    231c:	c0 01       	movw	r24, r0
    231e:	11 24       	eor	r1, r1
    2320:	fa 01       	movw	r30, r20
    2322:	23 81       	ldd	r18, Z+3	; 0x03
    2324:	26 95       	lsr	r18
    2326:	26 95       	lsr	r18
    2328:	82 2b       	or	r24, r18
    232a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    232e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_measuringIsReady>
    2338:	08 95       	ret
    233a:	64 30       	cpi	r22, 0x04	; 4
    233c:	51 f0       	breq	.+20     	; 0x2352 <_hihTwiCallback+0x58>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e4       	ldi	r25, 0x40	; 64
    2342:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    2346:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    234a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    234e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    2352:	08 95       	ret

00002354 <hih8120Create>:
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	0d e7       	ldi	r16, 0x7D	; 125
    235a:	11 e1       	ldi	r17, 0x11	; 17
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	34 e2       	ldi	r19, 0x24	; 36
    2360:	44 ef       	ldi	r20, 0xF4	; 244
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	87 e2       	ldi	r24, 0x27	; 39
    2368:	f9 d4       	rcall	.+2546   	; 0x2d5c <twiCreate>
    236a:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <_hih8120Handler+0x1>
    236e:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <_hih8120Handler>
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	89 2b       	or	r24, r25
    2376:	09 f0       	breq	.+2      	; 0x237a <hih8120Create+0x26>
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	82 2f       	mov	r24, r18
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <hih8120Wakeup>:
    2382:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_hih8120Handler>
    2386:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <_hih8120Handler+0x1>
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	51 f0       	breq	.+20     	; 0x23a2 <hih8120Wakeup+0x20>
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	34 d5       	rcall	.+2664   	; 0x2dfe <twiTransmit>
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	31 f4       	brne	.+12     	; 0x23a6 <hih8120Wakeup+0x24>
    239a:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <_measuringIsReady>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	08 95       	ret
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	08 95       	ret
    23a6:	83 e0       	ldi	r24, 0x03	; 3
    23a8:	08 95       	ret

000023aa <hih8120Meassure>:
    23aa:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_hih8120Handler>
    23ae:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <_hih8120Handler+0x1>
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	31 f0       	breq	.+12     	; 0x23c2 <hih8120Meassure+0x18>
    23b6:	64 e0       	ldi	r22, 0x04	; 4
    23b8:	6d d5       	rcall	.+2778   	; 0x2e94 <twiReceive>
    23ba:	85 30       	cpi	r24, 0x05	; 5
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <hih8120Meassure+0x1c>
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	08 95       	ret
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	08 95       	ret
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	08 95       	ret

000023ca <hih8120GetHumidity>:
    23ca:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    23ce:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	63 d7       	rcall	.+3782   	; 0x329e <__floatunsisf>
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	48 ec       	ldi	r20, 0xC8	; 200
    23de:	52 e4       	ldi	r21, 0x42	; 66
    23e0:	ec d7       	rcall	.+4056   	; 0x33ba <__mulsf3>
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	38 ef       	ldi	r19, 0xF8	; 248
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	56 e4       	ldi	r21, 0x46	; 70
    23ea:	c5 c6       	rjmp	.+3466   	; 0x3176 <__divsf3>
    23ec:	08 95       	ret

000023ee <hih8120GetTemperature>:
    23ee:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    23f2:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	51 d7       	rcall	.+3746   	; 0x329e <__floatunsisf>
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	45 e2       	ldi	r20, 0x25	; 37
    2402:	53 e4       	ldi	r21, 0x43	; 67
    2404:	da d7       	rcall	.+4020   	; 0x33ba <__mulsf3>
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	38 ef       	ldi	r19, 0xF8	; 248
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	56 e4       	ldi	r21, 0x46	; 70
    240e:	b3 d6       	rcall	.+3430   	; 0x3176 <__divsf3>
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	52 e4       	ldi	r21, 0x42	; 66
    2418:	49 c6       	rjmp	.+3218   	; 0x30ac <__subsf3>
    241a:	08 95       	ret

0000241c <_serial_call_back>:
    241c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <crc_sum.1941>
    2420:	86 0f       	add	r24, r22
    2422:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <crc_sum.1941>
    2426:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <_mh_state>
    242a:	91 30       	cpi	r25, 0x01	; 1
    242c:	79 f0       	breq	.+30     	; 0x244c <_serial_call_back+0x30>
    242e:	28 f0       	brcs	.+10     	; 0x243a <_serial_call_back+0x1e>
    2430:	92 30       	cpi	r25, 0x02	; 2
    2432:	a9 f0       	breq	.+42     	; 0x245e <_serial_call_back+0x42>
    2434:	93 30       	cpi	r25, 0x03	; 3
    2436:	19 f1       	breq	.+70     	; 0x247e <_serial_call_back+0x62>
    2438:	08 95       	ret
    243a:	6f 3f       	cpi	r22, 0xFF	; 255
    243c:	09 f0       	breq	.+2      	; 0x2440 <_serial_call_back+0x24>
    243e:	48 c0       	rjmp	.+144    	; 0x24d0 <_serial_call_back+0xb4>
    2440:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <crc_sum.1941>
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <_mh_state>
    244a:	08 95       	ret
    244c:	66 38       	cpi	r22, 0x86	; 134
    244e:	09 f0       	breq	.+2      	; 0x2452 <_serial_call_back+0x36>
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <_serial_call_back+0xb4>
    2452:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <inDex.1939>
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <_mh_state>
    245c:	08 95       	ret
    245e:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <inDex.1939>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	8e 0f       	add	r24, r30
    2466:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <inDex.1939>
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	eb 59       	subi	r30, 0x9B	; 155
    246e:	fc 4f       	sbci	r31, 0xFC	; 252
    2470:	60 83       	st	Z, r22
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	69 f5       	brne	.+90     	; 0x24d0 <_serial_call_back+0xb4>
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <_mh_state>
    247c:	08 95       	ret
    247e:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <inDex.1939>
    2482:	21 e0       	ldi	r18, 0x01	; 1
    2484:	29 0f       	add	r18, r25
    2486:	20 93 67 03 	sts	0x0367, r18	; 0x800367 <inDex.1939>
    248a:	96 30       	cpi	r25, 0x06	; 6
    248c:	09 f5       	brne	.+66     	; 0x24d0 <_serial_call_back+0xb4>
    248e:	81 11       	cpse	r24, r1
    2490:	0e c0       	rjmp	.+28     	; 0x24ae <_serial_call_back+0x92>
    2492:	e5 e6       	ldi	r30, 0x65	; 101
    2494:	f3 e0       	ldi	r31, 0x03	; 3
    2496:	80 81       	ld	r24, Z
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	98 2f       	mov	r25, r24
    249c:	88 27       	eor	r24, r24
    249e:	21 81       	ldd	r18, Z+1	; 0x01
    24a0:	82 0f       	add	r24, r18
    24a2:	91 1d       	adc	r25, r1
    24a4:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <_ppm+0x1>
    24a8:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <_ppm>
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <_serial_call_back+0x9a>
    24ae:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ppm+0x1>
    24b2:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ppm>
    24b6:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <_mh_state>
    24ba:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <_app_call_back>
    24be:	f0 91 6a 03 	lds	r31, 0x036A	; 0x80036a <_app_call_back+0x1>
    24c2:	30 97       	sbiw	r30, 0x00	; 0
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <_serial_call_back+0xb4>
    24c6:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ppm>
    24ca:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <_ppm+0x1>
    24ce:	19 95       	eicall
    24d0:	08 95       	ret

000024d2 <mh_z19_create>:
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	cf 92       	push	r12
    24da:	ef 92       	push	r14
    24dc:	0f 93       	push	r16
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	eb 01       	movw	r28, r22
    24e4:	0f 2e       	mov	r0, r31
    24e6:	fe e0       	ldi	r31, 0x0E	; 14
    24e8:	8f 2e       	mov	r8, r31
    24ea:	f2 e1       	ldi	r31, 0x12	; 18
    24ec:	9f 2e       	mov	r9, r31
    24ee:	f0 2d       	mov	r31, r0
    24f0:	68 94       	set
    24f2:	aa 24       	eor	r10, r10
    24f4:	a4 f8       	bld	r10, 4
    24f6:	68 94       	set
    24f8:	cc 24       	eor	r12, r12
    24fa:	c4 f8       	bld	r12, 4
    24fc:	e1 2c       	mov	r14, r1
    24fe:	00 e0       	ldi	r16, 0x00	; 0
    2500:	23 e0       	ldi	r18, 0x03	; 3
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	55 e2       	ldi	r21, 0x25	; 37
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	51 d0       	rcall	.+162    	; 0x25ae <serial_new_instance>
    250c:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <_serial+0x1>
    2510:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_serial>
    2514:	d0 93 6a 03 	sts	0x036A, r29	; 0x80036a <_app_call_back+0x1>
    2518:	c0 93 69 03 	sts	0x0369, r28	; 0x800369 <_app_call_back>
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	0f 91       	pop	r16
    2522:	ef 90       	pop	r14
    2524:	cf 90       	pop	r12
    2526:	af 90       	pop	r10
    2528:	9f 90       	pop	r9
    252a:	8f 90       	pop	r8
    252c:	08 95       	ret

0000252e <mh_z19_take_meassuring>:
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	29 97       	sbiw	r28, 0x09	; 9
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	89 e0       	ldi	r24, 0x09	; 9
    2544:	e3 e2       	ldi	r30, 0x23	; 35
    2546:	f2 e0       	ldi	r31, 0x02	; 2
    2548:	9e 01       	movw	r18, r28
    254a:	2f 5f       	subi	r18, 0xFF	; 255
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	d9 01       	movw	r26, r18
    2550:	01 90       	ld	r0, Z+
    2552:	0d 92       	st	X+, r0
    2554:	8a 95       	dec	r24
    2556:	e1 f7       	brne	.-8      	; 0x2550 <mh_z19_take_meassuring+0x22>
    2558:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ppm+0x1>
    255c:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ppm>
    2560:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_serial>
    2564:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <_serial+0x1>
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	31 f0       	breq	.+12     	; 0x2578 <mh_z19_take_meassuring+0x4a>
    256c:	42 2f       	mov	r20, r18
    256e:	53 2f       	mov	r21, r19
    2570:	69 e0       	ldi	r22, 0x09	; 9
    2572:	d8 d0       	rcall	.+432    	; 0x2724 <serial_send_bytes>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	01 c0       	rjmp	.+2      	; 0x257a <mh_z19_take_meassuring+0x4c>
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	29 96       	adiw	r28, 0x09	; 9
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <mh_z19_get_co2_ppm>:
    258c:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <_ppm>
    2590:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <_ppm+0x1>
    2594:	21 15       	cp	r18, r1
    2596:	31 05       	cpc	r19, r1
    2598:	29 f4       	brne	.+10     	; 0x25a4 <mh_z19_get_co2_ppm+0x18>
    259a:	fc 01       	movw	r30, r24
    259c:	11 82       	std	Z+1, r1	; 0x01
    259e:	10 82       	st	Z, r1
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	08 95       	ret
    25a4:	fc 01       	movw	r30, r24
    25a6:	31 83       	std	Z+1, r19	; 0x01
    25a8:	20 83       	st	Z, r18
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	08 95       	ret

000025ae <serial_new_instance>:
    25ae:	2f 92       	push	r2
    25b0:	3f 92       	push	r3
    25b2:	4f 92       	push	r4
    25b4:	5f 92       	push	r5
    25b6:	6f 92       	push	r6
    25b8:	7f 92       	push	r7
    25ba:	8f 92       	push	r8
    25bc:	9f 92       	push	r9
    25be:	af 92       	push	r10
    25c0:	cf 92       	push	r12
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	f8 2e       	mov	r15, r24
    25d4:	2a 01       	movw	r4, r20
    25d6:	3b 01       	movw	r6, r22
    25d8:	88 e0       	ldi	r24, 0x08	; 8
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	95 d7       	rcall	.+3882   	; 0x3508 <malloc>
    25de:	8c 01       	movw	r16, r24
    25e0:	8f 2d       	mov	r24, r15
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	fc 01       	movw	r30, r24
    25ea:	e0 59       	subi	r30, 0x90	; 144
    25ec:	fc 4f       	sbci	r31, 0xFC	; 252
    25ee:	11 83       	std	Z+1, r17	; 0x01
    25f0:	00 83       	st	Z, r16
    25f2:	fc 01       	movw	r30, r24
    25f4:	e4 5f       	subi	r30, 0xF4	; 244
    25f6:	fd 4f       	sbci	r31, 0xFD	; 253
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	d8 01       	movw	r26, r16
    25fe:	8d 93       	st	X+, r24
    2600:	9c 93       	st	X, r25
    2602:	6c 2d       	mov	r22, r12
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	84 e0       	ldi	r24, 0x04	; 4
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	64 d7       	rcall	.+3784   	; 0x34d4 <calloc>
    260c:	1c 01       	movw	r2, r24
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	86 e0       	ldi	r24, 0x06	; 6
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	5e d7       	rcall	.+3772   	; 0x34d4 <calloc>
    2618:	7c 01       	movw	r14, r24
    261a:	4c 2d       	mov	r20, r12
    261c:	b1 01       	movw	r22, r2
    261e:	2a d5       	rcall	.+2644   	; 0x3074 <fifo_init>
    2620:	f8 01       	movw	r30, r16
    2622:	f5 82       	std	Z+5, r15	; 0x05
    2624:	e4 82       	std	Z+4, r14	; 0x04
    2626:	6a 2d       	mov	r22, r10
    2628:	70 e0       	ldi	r23, 0x00	; 0
    262a:	84 e0       	ldi	r24, 0x04	; 4
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	52 d7       	rcall	.+3748   	; 0x34d4 <calloc>
    2630:	1c 01       	movw	r2, r24
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	86 e0       	ldi	r24, 0x06	; 6
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	4c d7       	rcall	.+3736   	; 0x34d4 <calloc>
    263c:	7c 01       	movw	r14, r24
    263e:	4a 2d       	mov	r20, r10
    2640:	b1 01       	movw	r22, r2
    2642:	18 d5       	rcall	.+2608   	; 0x3074 <fifo_init>
    2644:	d8 01       	movw	r26, r16
    2646:	13 96       	adiw	r26, 0x03	; 3
    2648:	fc 92       	st	X, r15
    264a:	ee 92       	st	-X, r14
    264c:	12 97       	sbiw	r26, 0x02	; 2
    264e:	17 96       	adiw	r26, 0x07	; 7
    2650:	9c 92       	st	X, r9
    2652:	8e 92       	st	-X, r8
    2654:	16 97       	sbiw	r26, 0x06	; 6
    2656:	ff b6       	in	r15, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	ed 91       	ld	r30, X+
    265c:	fc 91       	ld	r31, X
    265e:	11 97       	sbiw	r26, 0x01	; 1
    2660:	36 97       	sbiw	r30, 0x06	; 6
    2662:	80 81       	ld	r24, Z
    2664:	82 60       	ori	r24, 0x02	; 2
    2666:	80 83       	st	Z, r24
    2668:	8d 90       	ld	r8, X+
    266a:	9c 90       	ld	r9, X
    266c:	c3 01       	movw	r24, r6
    266e:	b2 01       	movw	r22, r4
    2670:	16 d6       	rcall	.+3116   	; 0x329e <__floatunsisf>
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	9f d6       	rcall	.+3390   	; 0x33ba <__mulsf3>
    267c:	9b 01       	movw	r18, r22
    267e:	ac 01       	movw	r20, r24
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	74 e2       	ldi	r23, 0x24	; 36
    2684:	84 e7       	ldi	r24, 0x74	; 116
    2686:	9b e4       	ldi	r25, 0x4B	; 75
    2688:	76 d5       	rcall	.+2796   	; 0x3176 <__divsf3>
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0c d5       	rcall	.+2584   	; 0x30ac <__subsf3>
    2694:	d8 d5       	rcall	.+2992   	; 0x3246 <__fixunssfsi>
    2696:	f4 01       	movw	r30, r8
    2698:	32 97       	sbiw	r30, 0x02	; 2
    269a:	60 83       	st	Z, r22
    269c:	d8 01       	movw	r26, r16
    269e:	ed 91       	ld	r30, X+
    26a0:	fc 91       	ld	r31, X
    26a2:	11 97       	sbiw	r26, 0x01	; 1
    26a4:	35 97       	sbiw	r30, 0x05	; 5
    26a6:	88 e9       	ldi	r24, 0x98	; 152
    26a8:	80 83       	st	Z, r24
    26aa:	ed 91       	ld	r30, X+
    26ac:	fc 91       	ld	r31, X
    26ae:	34 97       	sbiw	r30, 0x04	; 4
    26b0:	86 e0       	ldi	r24, 0x06	; 6
    26b2:	80 83       	st	Z, r24
    26b4:	ff be       	out	0x3f, r15	; 63
    26b6:	c8 01       	movw	r24, r16
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	cf 90       	pop	r12
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	8f 90       	pop	r8
    26cc:	7f 90       	pop	r7
    26ce:	6f 90       	pop	r6
    26d0:	5f 90       	pop	r5
    26d2:	4f 90       	pop	r4
    26d4:	3f 90       	pop	r3
    26d6:	2f 90       	pop	r2
    26d8:	08 95       	ret

000026da <serial_send_byte>:
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	ec 01       	movw	r28, r24
    26e0:	ea 81       	ldd	r30, Y+2	; 0x02
    26e2:	fb 81       	ldd	r31, Y+3	; 0x03
    26e4:	93 81       	ldd	r25, Z+3	; 0x03
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	25 81       	ldd	r18, Z+5	; 0x05
    26ea:	98 1b       	sub	r25, r24
    26ec:	92 23       	and	r25, r18
    26ee:	84 81       	ldd	r24, Z+4	; 0x04
    26f0:	98 17       	cp	r25, r24
    26f2:	a1 f0       	breq	.+40     	; 0x271c <serial_send_byte+0x42>
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	26 95       	lsr	r18
    26f8:	29 23       	and	r18, r25
    26fa:	a0 81       	ld	r26, Z
    26fc:	b1 81       	ldd	r27, Z+1	; 0x01
    26fe:	a2 0f       	add	r26, r18
    2700:	b1 1d       	adc	r27, r1
    2702:	6c 93       	st	X, r22
    2704:	9f 5f       	subi	r25, 0xFF	; 255
    2706:	25 81       	ldd	r18, Z+5	; 0x05
    2708:	92 23       	and	r25, r18
    270a:	93 83       	std	Z+3, r25	; 0x03
    270c:	e8 81       	ld	r30, Y
    270e:	f9 81       	ldd	r31, Y+1	; 0x01
    2710:	35 97       	sbiw	r30, 0x05	; 5
    2712:	80 81       	ld	r24, Z
    2714:	80 62       	ori	r24, 0x20	; 32
    2716:	80 83       	st	Z, r24
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	01 c0       	rjmp	.+2      	; 0x271e <serial_send_byte+0x44>
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <serial_send_bytes>:
    2724:	ef 92       	push	r14
    2726:	ff 92       	push	r15
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	7c 01       	movw	r14, r24
    2732:	dc 01       	movw	r26, r24
    2734:	12 96       	adiw	r26, 0x02	; 2
    2736:	ed 91       	ld	r30, X+
    2738:	fc 91       	ld	r31, X
    273a:	13 97       	sbiw	r26, 0x03	; 3
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	98 1b       	sub	r25, r24
    2742:	85 81       	ldd	r24, Z+5	; 0x05
    2744:	98 23       	and	r25, r24
    2746:	84 81       	ldd	r24, Z+4	; 0x04
    2748:	89 1b       	sub	r24, r25
    274a:	86 17       	cp	r24, r22
    274c:	98 f1       	brcs	.+102    	; 0x27b4 <serial_send_bytes+0x90>
    274e:	66 23       	and	r22, r22
    2750:	41 f1       	breq	.+80     	; 0x27a2 <serial_send_bytes+0x7e>
    2752:	84 2f       	mov	r24, r20
    2754:	95 2f       	mov	r25, r21
    2756:	dc 01       	movw	r26, r24
    2758:	61 50       	subi	r22, 0x01	; 1
    275a:	46 2f       	mov	r20, r22
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	4f 5f       	subi	r20, 0xFF	; 255
    2760:	5f 4f       	sbci	r21, 0xFF	; 255
    2762:	48 0f       	add	r20, r24
    2764:	59 1f       	adc	r21, r25
    2766:	e7 01       	movw	r28, r14
    2768:	ea 81       	ldd	r30, Y+2	; 0x02
    276a:	fb 81       	ldd	r31, Y+3	; 0x03
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	25 81       	ldd	r18, Z+5	; 0x05
    2772:	98 1b       	sub	r25, r24
    2774:	92 23       	and	r25, r18
    2776:	84 81       	ldd	r24, Z+4	; 0x04
    2778:	98 17       	cp	r25, r24
    277a:	79 f0       	breq	.+30     	; 0x279a <serial_send_bytes+0x76>
    277c:	8c 91       	ld	r24, X
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	26 95       	lsr	r18
    2782:	29 23       	and	r18, r25
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	8b 01       	movw	r16, r22
    278a:	02 0f       	add	r16, r18
    278c:	11 1d       	adc	r17, r1
    278e:	e8 01       	movw	r28, r16
    2790:	88 83       	st	Y, r24
    2792:	9f 5f       	subi	r25, 0xFF	; 255
    2794:	85 81       	ldd	r24, Z+5	; 0x05
    2796:	98 23       	and	r25, r24
    2798:	93 83       	std	Z+3, r25	; 0x03
    279a:	11 96       	adiw	r26, 0x01	; 1
    279c:	a4 17       	cp	r26, r20
    279e:	b5 07       	cpc	r27, r21
    27a0:	11 f7       	brne	.-60     	; 0x2766 <serial_send_bytes+0x42>
    27a2:	d7 01       	movw	r26, r14
    27a4:	ed 91       	ld	r30, X+
    27a6:	fc 91       	ld	r31, X
    27a8:	35 97       	sbiw	r30, 0x05	; 5
    27aa:	80 81       	ld	r24, Z
    27ac:	80 62       	ori	r24, 0x20	; 32
    27ae:	80 83       	st	Z, r24
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <serial_send_bytes+0x92>
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	08 95       	ret

000027c4 <serial_get_byte>:
    27c4:	dc 01       	movw	r26, r24
    27c6:	14 96       	adiw	r26, 0x04	; 4
    27c8:	ed 91       	ld	r30, X+
    27ca:	fc 91       	ld	r31, X
    27cc:	15 97       	sbiw	r26, 0x05	; 5
    27ce:	93 81       	ldd	r25, Z+3	; 0x03
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	98 17       	cp	r25, r24
    27d4:	89 f0       	breq	.+34     	; 0x27f8 <serial_get_byte+0x34>
    27d6:	92 81       	ldd	r25, Z+2	; 0x02
    27d8:	85 81       	ldd	r24, Z+5	; 0x05
    27da:	86 95       	lsr	r24
    27dc:	89 23       	and	r24, r25
    27de:	a0 81       	ld	r26, Z
    27e0:	b1 81       	ldd	r27, Z+1	; 0x01
    27e2:	a8 0f       	add	r26, r24
    27e4:	b1 1d       	adc	r27, r1
    27e6:	8c 91       	ld	r24, X
    27e8:	db 01       	movw	r26, r22
    27ea:	8c 93       	st	X, r24
    27ec:	9f 5f       	subi	r25, 0xFF	; 255
    27ee:	85 81       	ldd	r24, Z+5	; 0x05
    27f0:	98 23       	and	r25, r24
    27f2:	92 83       	std	Z+2, r25	; 0x02
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	08 95       	ret
    27f8:	83 e0       	ldi	r24, 0x03	; 3
    27fa:	08 95       	ret

000027fc <__vector_25>:
    27fc:	1f 92       	push	r1
    27fe:	0f 92       	push	r0
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	0f 92       	push	r0
    2804:	11 24       	eor	r1, r1
    2806:	0b b6       	in	r0, 0x3b	; 59
    2808:	0f 92       	push	r0
    280a:	2f 93       	push	r18
    280c:	3f 93       	push	r19
    280e:	4f 93       	push	r20
    2810:	5f 93       	push	r21
    2812:	6f 93       	push	r22
    2814:	7f 93       	push	r23
    2816:	8f 93       	push	r24
    2818:	9f 93       	push	r25
    281a:	af 93       	push	r26
    281c:	bf 93       	push	r27
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	ef 93       	push	r30
    2824:	ff 93       	push	r31
    2826:	a0 91 70 03 	lds	r26, 0x0370	; 0x800370 <_ser_handle>
    282a:	b0 91 71 03 	lds	r27, 0x0371	; 0x800371 <_ser_handle+0x1>
    282e:	10 97       	sbiw	r26, 0x00	; 0
    2830:	11 f1       	breq	.+68     	; 0x2876 <__vector_25+0x7a>
    2832:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2836:	14 96       	adiw	r26, 0x04	; 4
    2838:	ed 91       	ld	r30, X+
    283a:	fc 91       	ld	r31, X
    283c:	15 97       	sbiw	r26, 0x05	; 5
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	25 81       	ldd	r18, Z+5	; 0x05
    2844:	98 1b       	sub	r25, r24
    2846:	92 23       	and	r25, r18
    2848:	84 81       	ldd	r24, Z+4	; 0x04
    284a:	98 17       	cp	r25, r24
    284c:	61 f0       	breq	.+24     	; 0x2866 <__vector_25+0x6a>
    284e:	83 81       	ldd	r24, Z+3	; 0x03
    2850:	26 95       	lsr	r18
    2852:	28 23       	and	r18, r24
    2854:	c0 81       	ld	r28, Z
    2856:	d1 81       	ldd	r29, Z+1	; 0x01
    2858:	c2 0f       	add	r28, r18
    285a:	d1 1d       	adc	r29, r1
    285c:	68 83       	st	Y, r22
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	95 81       	ldd	r25, Z+5	; 0x05
    2862:	89 23       	and	r24, r25
    2864:	83 83       	std	Z+3, r24	; 0x03
    2866:	16 96       	adiw	r26, 0x06	; 6
    2868:	ed 91       	ld	r30, X+
    286a:	fc 91       	ld	r31, X
    286c:	17 97       	sbiw	r26, 0x07	; 7
    286e:	30 97       	sbiw	r30, 0x00	; 0
    2870:	11 f0       	breq	.+4      	; 0x2876 <__vector_25+0x7a>
    2872:	cd 01       	movw	r24, r26
    2874:	19 95       	eicall
    2876:	ff 91       	pop	r31
    2878:	ef 91       	pop	r30
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	bf 91       	pop	r27
    2880:	af 91       	pop	r26
    2882:	9f 91       	pop	r25
    2884:	8f 91       	pop	r24
    2886:	7f 91       	pop	r23
    2888:	6f 91       	pop	r22
    288a:	5f 91       	pop	r21
    288c:	4f 91       	pop	r20
    288e:	3f 91       	pop	r19
    2890:	2f 91       	pop	r18
    2892:	0f 90       	pop	r0
    2894:	0b be       	out	0x3b, r0	; 59
    2896:	0f 90       	pop	r0
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	0f 90       	pop	r0
    289c:	1f 90       	pop	r1
    289e:	18 95       	reti

000028a0 <__vector_26>:
    28a0:	1f 92       	push	r1
    28a2:	0f 92       	push	r0
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	0f 92       	push	r0
    28a8:	11 24       	eor	r1, r1
    28aa:	0b b6       	in	r0, 0x3b	; 59
    28ac:	0f 92       	push	r0
    28ae:	2f 93       	push	r18
    28b0:	8f 93       	push	r24
    28b2:	9f 93       	push	r25
    28b4:	af 93       	push	r26
    28b6:	bf 93       	push	r27
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	e0 91 70 03 	lds	r30, 0x0370	; 0x800370 <_ser_handle>
    28c0:	f0 91 71 03 	lds	r31, 0x0371	; 0x800371 <_ser_handle+0x1>
    28c4:	30 97       	sbiw	r30, 0x00	; 0
    28c6:	b9 f0       	breq	.+46     	; 0x28f6 <__vector_26+0x56>
    28c8:	02 80       	ldd	r0, Z+2	; 0x02
    28ca:	f3 81       	ldd	r31, Z+3	; 0x03
    28cc:	e0 2d       	mov	r30, r0
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	98 17       	cp	r25, r24
    28d4:	b1 f0       	breq	.+44     	; 0x2902 <__vector_26+0x62>
    28d6:	92 81       	ldd	r25, Z+2	; 0x02
    28d8:	85 81       	ldd	r24, Z+5	; 0x05
    28da:	28 2f       	mov	r18, r24
    28dc:	26 95       	lsr	r18
    28de:	29 23       	and	r18, r25
    28e0:	a0 81       	ld	r26, Z
    28e2:	b1 81       	ldd	r27, Z+1	; 0x01
    28e4:	a2 0f       	add	r26, r18
    28e6:	b1 1d       	adc	r27, r1
    28e8:	2c 91       	ld	r18, X
    28ea:	9f 5f       	subi	r25, 0xFF	; 255
    28ec:	89 23       	and	r24, r25
    28ee:	82 83       	std	Z+2, r24	; 0x02
    28f0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    28f4:	0b c0       	rjmp	.+22     	; 0x290c <__vector_26+0x6c>
    28f6:	e1 ec       	ldi	r30, 0xC1	; 193
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	8f 7d       	andi	r24, 0xDF	; 223
    28fe:	80 83       	st	Z, r24
    2900:	05 c0       	rjmp	.+10     	; 0x290c <__vector_26+0x6c>
    2902:	e1 ec       	ldi	r30, 0xC1	; 193
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	8f 7d       	andi	r24, 0xDF	; 223
    290a:	80 83       	st	Z, r24
    290c:	ff 91       	pop	r31
    290e:	ef 91       	pop	r30
    2910:	bf 91       	pop	r27
    2912:	af 91       	pop	r26
    2914:	9f 91       	pop	r25
    2916:	8f 91       	pop	r24
    2918:	2f 91       	pop	r18
    291a:	0f 90       	pop	r0
    291c:	0b be       	out	0x3b, r0	; 59
    291e:	0f 90       	pop	r0
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	0f 90       	pop	r0
    2924:	1f 90       	pop	r1
    2926:	18 95       	reti

00002928 <__vector_36>:
    2928:	1f 92       	push	r1
    292a:	0f 92       	push	r0
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	0f 92       	push	r0
    2930:	11 24       	eor	r1, r1
    2932:	0b b6       	in	r0, 0x3b	; 59
    2934:	0f 92       	push	r0
    2936:	2f 93       	push	r18
    2938:	3f 93       	push	r19
    293a:	4f 93       	push	r20
    293c:	5f 93       	push	r21
    293e:	6f 93       	push	r22
    2940:	7f 93       	push	r23
    2942:	8f 93       	push	r24
    2944:	9f 93       	push	r25
    2946:	af 93       	push	r26
    2948:	bf 93       	push	r27
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	ef 93       	push	r30
    2950:	ff 93       	push	r31
    2952:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <_ser_handle+0x2>
    2956:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <_ser_handle+0x3>
    295a:	10 97       	sbiw	r26, 0x00	; 0
    295c:	11 f1       	breq	.+68     	; 0x29a2 <__vector_36+0x7a>
    295e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2962:	14 96       	adiw	r26, 0x04	; 4
    2964:	ed 91       	ld	r30, X+
    2966:	fc 91       	ld	r31, X
    2968:	15 97       	sbiw	r26, 0x05	; 5
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	82 81       	ldd	r24, Z+2	; 0x02
    296e:	25 81       	ldd	r18, Z+5	; 0x05
    2970:	98 1b       	sub	r25, r24
    2972:	92 23       	and	r25, r18
    2974:	84 81       	ldd	r24, Z+4	; 0x04
    2976:	98 17       	cp	r25, r24
    2978:	61 f0       	breq	.+24     	; 0x2992 <__vector_36+0x6a>
    297a:	83 81       	ldd	r24, Z+3	; 0x03
    297c:	26 95       	lsr	r18
    297e:	28 23       	and	r18, r24
    2980:	c0 81       	ld	r28, Z
    2982:	d1 81       	ldd	r29, Z+1	; 0x01
    2984:	c2 0f       	add	r28, r18
    2986:	d1 1d       	adc	r29, r1
    2988:	68 83       	st	Y, r22
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	95 81       	ldd	r25, Z+5	; 0x05
    298e:	89 23       	and	r24, r25
    2990:	83 83       	std	Z+3, r24	; 0x03
    2992:	16 96       	adiw	r26, 0x06	; 6
    2994:	ed 91       	ld	r30, X+
    2996:	fc 91       	ld	r31, X
    2998:	17 97       	sbiw	r26, 0x07	; 7
    299a:	30 97       	sbiw	r30, 0x00	; 0
    299c:	11 f0       	breq	.+4      	; 0x29a2 <__vector_36+0x7a>
    299e:	cd 01       	movw	r24, r26
    29a0:	19 95       	eicall
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	bf 91       	pop	r27
    29ac:	af 91       	pop	r26
    29ae:	9f 91       	pop	r25
    29b0:	8f 91       	pop	r24
    29b2:	7f 91       	pop	r23
    29b4:	6f 91       	pop	r22
    29b6:	5f 91       	pop	r21
    29b8:	4f 91       	pop	r20
    29ba:	3f 91       	pop	r19
    29bc:	2f 91       	pop	r18
    29be:	0f 90       	pop	r0
    29c0:	0b be       	out	0x3b, r0	; 59
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <__vector_37>:
    29cc:	1f 92       	push	r1
    29ce:	0f 92       	push	r0
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	0f 92       	push	r0
    29d4:	11 24       	eor	r1, r1
    29d6:	0b b6       	in	r0, 0x3b	; 59
    29d8:	0f 92       	push	r0
    29da:	2f 93       	push	r18
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
    29e8:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <_ser_handle+0x2>
    29ec:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <_ser_handle+0x3>
    29f0:	30 97       	sbiw	r30, 0x00	; 0
    29f2:	b9 f0       	breq	.+46     	; 0x2a22 <__vector_37+0x56>
    29f4:	02 80       	ldd	r0, Z+2	; 0x02
    29f6:	f3 81       	ldd	r31, Z+3	; 0x03
    29f8:	e0 2d       	mov	r30, r0
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	98 17       	cp	r25, r24
    2a00:	b1 f0       	breq	.+44     	; 0x2a2e <__vector_37+0x62>
    2a02:	92 81       	ldd	r25, Z+2	; 0x02
    2a04:	85 81       	ldd	r24, Z+5	; 0x05
    2a06:	28 2f       	mov	r18, r24
    2a08:	26 95       	lsr	r18
    2a0a:	29 23       	and	r18, r25
    2a0c:	a0 81       	ld	r26, Z
    2a0e:	b1 81       	ldd	r27, Z+1	; 0x01
    2a10:	a2 0f       	add	r26, r18
    2a12:	b1 1d       	adc	r27, r1
    2a14:	2c 91       	ld	r18, X
    2a16:	9f 5f       	subi	r25, 0xFF	; 255
    2a18:	89 23       	and	r24, r25
    2a1a:	82 83       	std	Z+2, r24	; 0x02
    2a1c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2a20:	0b c0       	rjmp	.+22     	; 0x2a38 <__vector_37+0x6c>
    2a22:	e9 ec       	ldi	r30, 0xC9	; 201
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	8f 7d       	andi	r24, 0xDF	; 223
    2a2a:	80 83       	st	Z, r24
    2a2c:	05 c0       	rjmp	.+10     	; 0x2a38 <__vector_37+0x6c>
    2a2e:	e9 ec       	ldi	r30, 0xC9	; 201
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 7d       	andi	r24, 0xDF	; 223
    2a36:	80 83       	st	Z, r24
    2a38:	ff 91       	pop	r31
    2a3a:	ef 91       	pop	r30
    2a3c:	bf 91       	pop	r27
    2a3e:	af 91       	pop	r26
    2a40:	9f 91       	pop	r25
    2a42:	8f 91       	pop	r24
    2a44:	2f 91       	pop	r18
    2a46:	0f 90       	pop	r0
    2a48:	0b be       	out	0x3b, r0	; 59
    2a4a:	0f 90       	pop	r0
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	0f 90       	pop	r0
    2a50:	1f 90       	pop	r1
    2a52:	18 95       	reti

00002a54 <__vector_51>:
    2a54:	1f 92       	push	r1
    2a56:	0f 92       	push	r0
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	0f 92       	push	r0
    2a5c:	11 24       	eor	r1, r1
    2a5e:	0b b6       	in	r0, 0x3b	; 59
    2a60:	0f 92       	push	r0
    2a62:	2f 93       	push	r18
    2a64:	3f 93       	push	r19
    2a66:	4f 93       	push	r20
    2a68:	5f 93       	push	r21
    2a6a:	6f 93       	push	r22
    2a6c:	7f 93       	push	r23
    2a6e:	8f 93       	push	r24
    2a70:	9f 93       	push	r25
    2a72:	af 93       	push	r26
    2a74:	bf 93       	push	r27
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	ef 93       	push	r30
    2a7c:	ff 93       	push	r31
    2a7e:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <_ser_handle+0x4>
    2a82:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <_ser_handle+0x5>
    2a86:	10 97       	sbiw	r26, 0x00	; 0
    2a88:	11 f1       	breq	.+68     	; 0x2ace <__vector_51+0x7a>
    2a8a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2a8e:	14 96       	adiw	r26, 0x04	; 4
    2a90:	ed 91       	ld	r30, X+
    2a92:	fc 91       	ld	r31, X
    2a94:	15 97       	sbiw	r26, 0x05	; 5
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	25 81       	ldd	r18, Z+5	; 0x05
    2a9c:	98 1b       	sub	r25, r24
    2a9e:	92 23       	and	r25, r18
    2aa0:	84 81       	ldd	r24, Z+4	; 0x04
    2aa2:	98 17       	cp	r25, r24
    2aa4:	61 f0       	breq	.+24     	; 0x2abe <__vector_51+0x6a>
    2aa6:	83 81       	ldd	r24, Z+3	; 0x03
    2aa8:	26 95       	lsr	r18
    2aaa:	28 23       	and	r18, r24
    2aac:	c0 81       	ld	r28, Z
    2aae:	d1 81       	ldd	r29, Z+1	; 0x01
    2ab0:	c2 0f       	add	r28, r18
    2ab2:	d1 1d       	adc	r29, r1
    2ab4:	68 83       	st	Y, r22
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	95 81       	ldd	r25, Z+5	; 0x05
    2aba:	89 23       	and	r24, r25
    2abc:	83 83       	std	Z+3, r24	; 0x03
    2abe:	16 96       	adiw	r26, 0x06	; 6
    2ac0:	ed 91       	ld	r30, X+
    2ac2:	fc 91       	ld	r31, X
    2ac4:	17 97       	sbiw	r26, 0x07	; 7
    2ac6:	30 97       	sbiw	r30, 0x00	; 0
    2ac8:	11 f0       	breq	.+4      	; 0x2ace <__vector_51+0x7a>
    2aca:	cd 01       	movw	r24, r26
    2acc:	19 95       	eicall
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	bf 91       	pop	r27
    2ad8:	af 91       	pop	r26
    2ada:	9f 91       	pop	r25
    2adc:	8f 91       	pop	r24
    2ade:	7f 91       	pop	r23
    2ae0:	6f 91       	pop	r22
    2ae2:	5f 91       	pop	r21
    2ae4:	4f 91       	pop	r20
    2ae6:	3f 91       	pop	r19
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0b be       	out	0x3b, r0	; 59
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	0f 90       	pop	r0
    2af4:	1f 90       	pop	r1
    2af6:	18 95       	reti

00002af8 <__vector_52>:
    2af8:	1f 92       	push	r1
    2afa:	0f 92       	push	r0
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	0f 92       	push	r0
    2b00:	11 24       	eor	r1, r1
    2b02:	0b b6       	in	r0, 0x3b	; 59
    2b04:	0f 92       	push	r0
    2b06:	2f 93       	push	r18
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    2b14:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <_ser_handle+0x4>
    2b18:	f0 91 75 03 	lds	r31, 0x0375	; 0x800375 <_ser_handle+0x5>
    2b1c:	30 97       	sbiw	r30, 0x00	; 0
    2b1e:	b9 f0       	breq	.+46     	; 0x2b4e <__vector_52+0x56>
    2b20:	02 80       	ldd	r0, Z+2	; 0x02
    2b22:	f3 81       	ldd	r31, Z+3	; 0x03
    2b24:	e0 2d       	mov	r30, r0
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	98 17       	cp	r25, r24
    2b2c:	b1 f0       	breq	.+44     	; 0x2b5a <__vector_52+0x62>
    2b2e:	92 81       	ldd	r25, Z+2	; 0x02
    2b30:	85 81       	ldd	r24, Z+5	; 0x05
    2b32:	28 2f       	mov	r18, r24
    2b34:	26 95       	lsr	r18
    2b36:	29 23       	and	r18, r25
    2b38:	a0 81       	ld	r26, Z
    2b3a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b3c:	a2 0f       	add	r26, r18
    2b3e:	b1 1d       	adc	r27, r1
    2b40:	2c 91       	ld	r18, X
    2b42:	9f 5f       	subi	r25, 0xFF	; 255
    2b44:	89 23       	and	r24, r25
    2b46:	82 83       	std	Z+2, r24	; 0x02
    2b48:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2b4c:	0b c0       	rjmp	.+22     	; 0x2b64 <__vector_52+0x6c>
    2b4e:	e1 ed       	ldi	r30, 0xD1	; 209
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 7d       	andi	r24, 0xDF	; 223
    2b56:	80 83       	st	Z, r24
    2b58:	05 c0       	rjmp	.+10     	; 0x2b64 <__vector_52+0x6c>
    2b5a:	e1 ed       	ldi	r30, 0xD1	; 209
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8f 7d       	andi	r24, 0xDF	; 223
    2b62:	80 83       	st	Z, r24
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	2f 91       	pop	r18
    2b72:	0f 90       	pop	r0
    2b74:	0b be       	out	0x3b, r0	; 59
    2b76:	0f 90       	pop	r0
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	0f 90       	pop	r0
    2b7c:	1f 90       	pop	r1
    2b7e:	18 95       	reti

00002b80 <__vector_54>:
    2b80:	1f 92       	push	r1
    2b82:	0f 92       	push	r0
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	0f 92       	push	r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	0b b6       	in	r0, 0x3b	; 59
    2b8c:	0f 92       	push	r0
    2b8e:	2f 93       	push	r18
    2b90:	3f 93       	push	r19
    2b92:	4f 93       	push	r20
    2b94:	5f 93       	push	r21
    2b96:	6f 93       	push	r22
    2b98:	7f 93       	push	r23
    2b9a:	8f 93       	push	r24
    2b9c:	9f 93       	push	r25
    2b9e:	af 93       	push	r26
    2ba0:	bf 93       	push	r27
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ef 93       	push	r30
    2ba8:	ff 93       	push	r31
    2baa:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <_ser_handle+0x6>
    2bae:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <_ser_handle+0x7>
    2bb2:	10 97       	sbiw	r26, 0x00	; 0
    2bb4:	11 f1       	breq	.+68     	; 0x2bfa <__vector_54+0x7a>
    2bb6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2bba:	14 96       	adiw	r26, 0x04	; 4
    2bbc:	ed 91       	ld	r30, X+
    2bbe:	fc 91       	ld	r31, X
    2bc0:	15 97       	sbiw	r26, 0x05	; 5
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	25 81       	ldd	r18, Z+5	; 0x05
    2bc8:	98 1b       	sub	r25, r24
    2bca:	92 23       	and	r25, r18
    2bcc:	84 81       	ldd	r24, Z+4	; 0x04
    2bce:	98 17       	cp	r25, r24
    2bd0:	61 f0       	breq	.+24     	; 0x2bea <__vector_54+0x6a>
    2bd2:	83 81       	ldd	r24, Z+3	; 0x03
    2bd4:	26 95       	lsr	r18
    2bd6:	28 23       	and	r18, r24
    2bd8:	c0 81       	ld	r28, Z
    2bda:	d1 81       	ldd	r29, Z+1	; 0x01
    2bdc:	c2 0f       	add	r28, r18
    2bde:	d1 1d       	adc	r29, r1
    2be0:	68 83       	st	Y, r22
    2be2:	8f 5f       	subi	r24, 0xFF	; 255
    2be4:	95 81       	ldd	r25, Z+5	; 0x05
    2be6:	89 23       	and	r24, r25
    2be8:	83 83       	std	Z+3, r24	; 0x03
    2bea:	16 96       	adiw	r26, 0x06	; 6
    2bec:	ed 91       	ld	r30, X+
    2bee:	fc 91       	ld	r31, X
    2bf0:	17 97       	sbiw	r26, 0x07	; 7
    2bf2:	30 97       	sbiw	r30, 0x00	; 0
    2bf4:	11 f0       	breq	.+4      	; 0x2bfa <__vector_54+0x7a>
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	19 95       	eicall
    2bfa:	ff 91       	pop	r31
    2bfc:	ef 91       	pop	r30
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	bf 91       	pop	r27
    2c04:	af 91       	pop	r26
    2c06:	9f 91       	pop	r25
    2c08:	8f 91       	pop	r24
    2c0a:	7f 91       	pop	r23
    2c0c:	6f 91       	pop	r22
    2c0e:	5f 91       	pop	r21
    2c10:	4f 91       	pop	r20
    2c12:	3f 91       	pop	r19
    2c14:	2f 91       	pop	r18
    2c16:	0f 90       	pop	r0
    2c18:	0b be       	out	0x3b, r0	; 59
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	0f 90       	pop	r0
    2c20:	1f 90       	pop	r1
    2c22:	18 95       	reti

00002c24 <__vector_55>:
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	0b b6       	in	r0, 0x3b	; 59
    2c30:	0f 92       	push	r0
    2c32:	2f 93       	push	r18
    2c34:	8f 93       	push	r24
    2c36:	9f 93       	push	r25
    2c38:	af 93       	push	r26
    2c3a:	bf 93       	push	r27
    2c3c:	ef 93       	push	r30
    2c3e:	ff 93       	push	r31
    2c40:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <_ser_handle+0x6>
    2c44:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <_ser_handle+0x7>
    2c48:	30 97       	sbiw	r30, 0x00	; 0
    2c4a:	b9 f0       	breq	.+46     	; 0x2c7a <__vector_55+0x56>
    2c4c:	02 80       	ldd	r0, Z+2	; 0x02
    2c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2c50:	e0 2d       	mov	r30, r0
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	98 17       	cp	r25, r24
    2c58:	b1 f0       	breq	.+44     	; 0x2c86 <__vector_55+0x62>
    2c5a:	92 81       	ldd	r25, Z+2	; 0x02
    2c5c:	85 81       	ldd	r24, Z+5	; 0x05
    2c5e:	28 2f       	mov	r18, r24
    2c60:	26 95       	lsr	r18
    2c62:	29 23       	and	r18, r25
    2c64:	a0 81       	ld	r26, Z
    2c66:	b1 81       	ldd	r27, Z+1	; 0x01
    2c68:	a2 0f       	add	r26, r18
    2c6a:	b1 1d       	adc	r27, r1
    2c6c:	2c 91       	ld	r18, X
    2c6e:	9f 5f       	subi	r25, 0xFF	; 255
    2c70:	89 23       	and	r24, r25
    2c72:	82 83       	std	Z+2, r24	; 0x02
    2c74:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2c78:	0b c0       	rjmp	.+22     	; 0x2c90 <__vector_55+0x6c>
    2c7a:	e1 e3       	ldi	r30, 0x31	; 49
    2c7c:	f1 e0       	ldi	r31, 0x01	; 1
    2c7e:	80 81       	ld	r24, Z
    2c80:	8f 7d       	andi	r24, 0xDF	; 223
    2c82:	80 83       	st	Z, r24
    2c84:	05 c0       	rjmp	.+10     	; 0x2c90 <__vector_55+0x6c>
    2c86:	e1 e3       	ldi	r30, 0x31	; 49
    2c88:	f1 e0       	ldi	r31, 0x01	; 1
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8f 7d       	andi	r24, 0xDF	; 223
    2c8e:	80 83       	st	Z, r24
    2c90:	ff 91       	pop	r31
    2c92:	ef 91       	pop	r30
    2c94:	bf 91       	pop	r27
    2c96:	af 91       	pop	r26
    2c98:	9f 91       	pop	r25
    2c9a:	8f 91       	pop	r24
    2c9c:	2f 91       	pop	r18
    2c9e:	0f 90       	pop	r0
    2ca0:	0b be       	out	0x3b, r0	; 59
    2ca2:	0f 90       	pop	r0
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	0f 90       	pop	r0
    2ca8:	1f 90       	pop	r1
    2caa:	18 95       	reti

00002cac <usart_getchar>:
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	1f 92       	push	r1
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	be 01       	movw	r22, r28
    2cb8:	6f 5f       	subi	r22, 0xFF	; 255
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <_com_serial_instance>
    2cc0:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <_com_serial_instance+0x1>
    2cc4:	7f dd       	rcall	.-1282   	; 0x27c4 <serial_get_byte>
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	f6 cf       	rjmp	.-20     	; 0x2cb6 <usart_getchar+0xa>
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0f 90       	pop	r0
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <usart_putchar>:
    2cd6:	68 2f       	mov	r22, r24
    2cd8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <_com_serial_instance>
    2cdc:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <_com_serial_instance+0x1>
    2ce0:	fc dc       	rcall	.-1544   	; 0x26da <serial_send_byte>
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	08 95       	ret

00002ce8 <stdioCreate>:
    2ce8:	8f 92       	push	r8
    2cea:	9f 92       	push	r9
    2cec:	af 92       	push	r10
    2cee:	cf 92       	push	r12
    2cf0:	ef 92       	push	r14
    2cf2:	0f 93       	push	r16
    2cf4:	81 2c       	mov	r8, r1
    2cf6:	91 2c       	mov	r9, r1
    2cf8:	68 94       	set
    2cfa:	aa 24       	eor	r10, r10
    2cfc:	a7 f8       	bld	r10, 7
    2cfe:	68 94       	set
    2d00:	cc 24       	eor	r12, r12
    2d02:	c7 f8       	bld	r12, 7
    2d04:	e1 2c       	mov	r14, r1
    2d06:	00 e0       	ldi	r16, 0x00	; 0
    2d08:	23 e0       	ldi	r18, 0x03	; 3
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	51 ee       	ldi	r21, 0xE1	; 225
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	4d dc       	rcall	.-1894   	; 0x25ae <serial_new_instance>
    2d14:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <_com_serial_instance+0x1>
    2d18:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <_com_serial_instance>
    2d1c:	e6 e9       	ldi	r30, 0x96	; 150
    2d1e:	f3 e0       	ldi	r31, 0x03	; 3
    2d20:	84 e1       	ldi	r24, 0x14	; 20
    2d22:	92 e0       	ldi	r25, 0x02	; 2
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
    2d28:	93 83       	std	Z+3, r25	; 0x03
    2d2a:	82 83       	std	Z+2, r24	; 0x02
    2d2c:	0f 91       	pop	r16
    2d2e:	ef 90       	pop	r14
    2d30:	cf 90       	pop	r12
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	08 95       	ret

00002d3a <_initTwiInterface>:
    2d3a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_twiIsInitiated>
    2d3e:	81 11       	cpse	r24, r1
    2d40:	0c c0       	rjmp	.+24     	; 0x2d5a <_initTwiInterface+0x20>
    2d42:	8c e0       	ldi	r24, 0x0C	; 12
    2d44:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2d4e:	84 e0       	ldi	r24, 0x04	; 4
    2d50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <_twiIsInitiated>
    2d5a:	08 95       	ret

00002d5c <twiCreate>:
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	a8 2e       	mov	r10, r24
    2d72:	b6 2e       	mov	r11, r22
    2d74:	69 01       	movw	r12, r18
    2d76:	7a 01       	movw	r14, r20
    2d78:	84 e0       	ldi	r24, 0x04	; 4
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	c5 d3       	rcall	.+1930   	; 0x3508 <malloc>
    2d7e:	ec 01       	movw	r28, r24
    2d80:	89 2b       	or	r24, r25
    2d82:	61 f1       	breq	.+88     	; 0x2ddc <twiCreate+0x80>
    2d84:	a8 82       	st	Y, r10
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	b8 12       	cpse	r11, r24
    2d8a:	12 c0       	rjmp	.+36     	; 0x2db0 <twiCreate+0x54>
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	b6 01       	movw	r22, r12
    2d90:	20 ea       	ldi	r18, 0xA0	; 160
    2d92:	36 e8       	ldi	r19, 0x86	; 134
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	73 d3       	rcall	.+1766   	; 0x3480 <__udivmodsi4>
    2d9a:	da 01       	movw	r26, r20
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	40 97       	sbiw	r24, 0x10	; 16
    2da0:	a1 09       	sbc	r26, r1
    2da2:	b1 09       	sbc	r27, r1
    2da4:	b6 95       	lsr	r27
    2da6:	a7 95       	ror	r26
    2da8:	97 95       	ror	r25
    2daa:	87 95       	ror	r24
    2dac:	89 83       	std	Y+1, r24	; 0x01
    2dae:	11 c0       	rjmp	.+34     	; 0x2dd2 <twiCreate+0x76>
    2db0:	c7 01       	movw	r24, r14
    2db2:	b6 01       	movw	r22, r12
    2db4:	20 e8       	ldi	r18, 0x80	; 128
    2db6:	3a e1       	ldi	r19, 0x1A	; 26
    2db8:	46 e0       	ldi	r20, 0x06	; 6
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	61 d3       	rcall	.+1730   	; 0x3480 <__udivmodsi4>
    2dbe:	da 01       	movw	r26, r20
    2dc0:	c9 01       	movw	r24, r18
    2dc2:	40 97       	sbiw	r24, 0x10	; 16
    2dc4:	a1 09       	sbc	r26, r1
    2dc6:	b1 09       	sbc	r27, r1
    2dc8:	b6 95       	lsr	r27
    2dca:	a7 95       	ror	r26
    2dcc:	97 95       	ror	r25
    2dce:	87 95       	ror	r24
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	1b 83       	std	Y+3, r17	; 0x03
    2dd4:	0a 83       	std	Y+2, r16	; 0x02
    2dd6:	8c 2f       	mov	r24, r28
    2dd8:	9d 2f       	mov	r25, r29
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <twiCreate+0x84>
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	df 91       	pop	r29
    2de2:	cf 91       	pop	r28
    2de4:	1f 91       	pop	r17
    2de6:	0f 91       	pop	r16
    2de8:	ff 90       	pop	r15
    2dea:	ef 90       	pop	r14
    2dec:	df 90       	pop	r13
    2dee:	cf 90       	pop	r12
    2df0:	bf 90       	pop	r11
    2df2:	af 90       	pop	r10
    2df4:	08 95       	ret

00002df6 <twiIsBusy>:
    2df6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2dfa:	81 70       	andi	r24, 0x01	; 1
    2dfc:	08 95       	ret

00002dfe <twiTransmit>:
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	c9 f1       	breq	.+114    	; 0x2e7e <twiTransmit+0x80>
    2e0c:	4a 30       	cpi	r20, 0x0A	; 10
    2e0e:	c8 f5       	brcc	.+114    	; 0x2e82 <twiTransmit+0x84>
    2e10:	f4 2e       	mov	r15, r20
    2e12:	8b 01       	movw	r16, r22
    2e14:	ec 01       	movw	r28, r24
    2e16:	ef df       	rcall	.-34     	; 0x2df6 <twiIsBusy>
    2e18:	81 11       	cpse	r24, r1
    2e1a:	35 c0       	rjmp	.+106    	; 0x2e86 <twiTransmit+0x88>
    2e1c:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_twiCurrentHandler>
    2e20:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_twiCurrentHandler+0x1>
    2e24:	c8 17       	cp	r28, r24
    2e26:	d9 07       	cpc	r29, r25
    2e28:	41 f0       	breq	.+16     	; 0x2e3a <twiTransmit+0x3c>
    2e2a:	87 df       	rcall	.-242    	; 0x2d3a <_initTwiInterface>
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2e32:	d0 93 7c 03 	sts	0x037C, r29	; 0x80037c <_twiCurrentHandler+0x1>
    2e36:	c0 93 7b 03 	sts	0x037B, r28	; 0x80037b <_twiCurrentHandler>
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	8f 0d       	add	r24, r15
    2e3e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_twiMessageLen>
    2e42:	88 81       	ld	r24, Y
    2e44:	88 0f       	add	r24, r24
    2e46:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <_twiMessageBuffer>
    2e4a:	ff 20       	and	r15, r15
    2e4c:	81 f0       	breq	.+32     	; 0x2e6e <twiTransmit+0x70>
    2e4e:	f8 01       	movw	r30, r16
    2e50:	af e7       	ldi	r26, 0x7F	; 127
    2e52:	b3 e0       	ldi	r27, 0x03	; 3
    2e54:	4f ef       	ldi	r20, 0xFF	; 255
    2e56:	4f 0d       	add	r20, r15
    2e58:	64 2f       	mov	r22, r20
    2e5a:	70 e0       	ldi	r23, 0x00	; 0
    2e5c:	6f 5f       	subi	r22, 0xFF	; 255
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	60 0f       	add	r22, r16
    2e62:	71 1f       	adc	r23, r17
    2e64:	81 91       	ld	r24, Z+
    2e66:	8d 93       	st	X+, r24
    2e68:	e6 17       	cp	r30, r22
    2e6a:	f7 07       	cpc	r31, r23
    2e6c:	d9 f7       	brne	.-10     	; 0x2e64 <twiTransmit+0x66>
    2e6e:	88 ef       	ldi	r24, 0xF8	; 248
    2e70:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    2e74:	85 ea       	ldi	r24, 0xA5	; 165
    2e76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <twiTransmit+0x8a>
    2e7e:	86 e0       	ldi	r24, 0x06	; 6
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <twiTransmit+0x8a>
    2e82:	87 e0       	ldi	r24, 0x07	; 7
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <twiTransmit+0x8a>
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	08 95       	ret

00002e94 <twiReceive>:
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	29 f1       	breq	.+74     	; 0x2ee8 <twiReceive+0x54>
    2e9e:	6b 30       	cpi	r22, 0x0B	; 11
    2ea0:	28 f5       	brcc	.+74     	; 0x2eec <twiReceive+0x58>
    2ea2:	16 2f       	mov	r17, r22
    2ea4:	ec 01       	movw	r28, r24
    2ea6:	a7 df       	rcall	.-178    	; 0x2df6 <twiIsBusy>
    2ea8:	81 11       	cpse	r24, r1
    2eaa:	22 c0       	rjmp	.+68     	; 0x2ef0 <twiReceive+0x5c>
    2eac:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_twiCurrentHandler>
    2eb0:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_twiCurrentHandler+0x1>
    2eb4:	c8 17       	cp	r28, r24
    2eb6:	d9 07       	cpc	r29, r25
    2eb8:	41 f0       	breq	.+16     	; 0x2eca <twiReceive+0x36>
    2eba:	3f df       	rcall	.-386    	; 0x2d3a <_initTwiInterface>
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2ec2:	d0 93 7c 03 	sts	0x037C, r29	; 0x80037c <_twiCurrentHandler+0x1>
    2ec6:	c0 93 7b 03 	sts	0x037B, r28	; 0x80037b <_twiCurrentHandler>
    2eca:	10 93 7d 03 	sts	0x037D, r17	; 0x80037d <_twiMessageLen>
    2ece:	88 81       	ld	r24, Y
    2ed0:	88 0f       	add	r24, r24
    2ed2:	81 60       	ori	r24, 0x01	; 1
    2ed4:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <_twiMessageBuffer>
    2ed8:	88 ef       	ldi	r24, 0xF8	; 248
    2eda:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    2ede:	85 ea       	ldi	r24, 0xA5	; 165
    2ee0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	05 c0       	rjmp	.+10     	; 0x2ef2 <twiReceive+0x5e>
    2ee8:	86 e0       	ldi	r24, 0x06	; 6
    2eea:	03 c0       	rjmp	.+6      	; 0x2ef2 <twiReceive+0x5e>
    2eec:	87 e0       	ldi	r24, 0x07	; 7
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <twiReceive+0x5e>
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	08 95       	ret

00002efa <__vector_39>:
    2efa:	1f 92       	push	r1
    2efc:	0f 92       	push	r0
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	0f 92       	push	r0
    2f02:	11 24       	eor	r1, r1
    2f04:	0b b6       	in	r0, 0x3b	; 59
    2f06:	0f 92       	push	r0
    2f08:	2f 93       	push	r18
    2f0a:	3f 93       	push	r19
    2f0c:	4f 93       	push	r20
    2f0e:	5f 93       	push	r21
    2f10:	6f 93       	push	r22
    2f12:	7f 93       	push	r23
    2f14:	8f 93       	push	r24
    2f16:	9f 93       	push	r25
    2f18:	af 93       	push	r26
    2f1a:	bf 93       	push	r27
    2f1c:	ef 93       	push	r30
    2f1e:	ff 93       	push	r31
    2f20:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2f24:	8e 2f       	mov	r24, r30
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	fc 01       	movw	r30, r24
    2f2a:	38 97       	sbiw	r30, 0x08	; 8
    2f2c:	e1 35       	cpi	r30, 0x51	; 81
    2f2e:	f1 05       	cpc	r31, r1
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <__vector_39+0x3a>
    2f32:	75 c0       	rjmp	.+234    	; 0x301e <__vector_39+0x124>
    2f34:	88 27       	eor	r24, r24
    2f36:	e4 58       	subi	r30, 0x84	; 132
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3c:	c3 c2       	rjmp	.+1414   	; 0x34c4 <__tablejump2__>
    2f3e:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_index.1885>
    2f42:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <_index.1885>
    2f46:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_twiMessageLen>
    2f4a:	e8 17       	cp	r30, r24
    2f4c:	70 f4       	brcc	.+28     	; 0x2f6a <__vector_39+0x70>
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	8e 0f       	add	r24, r30
    2f52:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_index.1885>
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	e2 58       	subi	r30, 0x82	; 130
    2f5a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f5c:	80 81       	ld	r24, Z
    2f5e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2f62:	85 e8       	ldi	r24, 0x85	; 133
    2f64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2f68:	72 c0       	rjmp	.+228    	; 0x304e <__vector_39+0x154>
    2f6a:	84 e9       	ldi	r24, 0x94	; 148
    2f6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2f70:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_twiCurrentHandler>
    2f74:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_twiCurrentHandler+0x1>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	12 96       	adiw	r26, 0x02	; 2
    2f7c:	ed 91       	ld	r30, X+
    2f7e:	fc 91       	ld	r31, X
    2f80:	13 97       	sbiw	r26, 0x03	; 3
    2f82:	30 97       	sbiw	r30, 0x00	; 0
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_39+0x8e>
    2f86:	63 c0       	rjmp	.+198    	; 0x304e <__vector_39+0x154>
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	64 e0       	ldi	r22, 0x04	; 4
    2f90:	19 95       	eicall
    2f92:	5d c0       	rjmp	.+186    	; 0x304e <__vector_39+0x154>
    2f94:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <_index.1885>
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	8e 0f       	add	r24, r30
    2f9c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_index.1885>
    2fa0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	e2 58       	subi	r30, 0x82	; 130
    2fa8:	fc 4f       	sbci	r31, 0xFC	; 252
    2faa:	80 83       	st	Z, r24
    2fac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2fb0:	80 34       	cpi	r24, 0x40	; 64
    2fb2:	11 f4       	brne	.+4      	; 0x2fb8 <__vector_39+0xbe>
    2fb4:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_index.1885>
    2fb8:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <_index.1885>
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_twiMessageLen>
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	28 17       	cp	r18, r24
    2fc8:	39 07       	cpc	r19, r25
    2fca:	24 f4       	brge	.+8      	; 0x2fd4 <__vector_39+0xda>
    2fcc:	85 ec       	ldi	r24, 0xC5	; 197
    2fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fd2:	3d c0       	rjmp	.+122    	; 0x304e <__vector_39+0x154>
    2fd4:	85 e8       	ldi	r24, 0x85	; 133
    2fd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2fda:	39 c0       	rjmp	.+114    	; 0x304e <__vector_39+0x154>
    2fdc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2fe0:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <_index.1885>
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	e2 58       	subi	r30, 0x82	; 130
    2fe8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fea:	80 83       	st	Z, r24
    2fec:	84 e9       	ldi	r24, 0x94	; 148
    2fee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ff2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_twiCurrentHandler>
    2ff6:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_twiCurrentHandler+0x1>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	12 96       	adiw	r26, 0x02	; 2
    2ffe:	ed 91       	ld	r30, X+
    3000:	fc 91       	ld	r31, X
    3002:	13 97       	sbiw	r26, 0x03	; 3
    3004:	30 97       	sbiw	r30, 0x00	; 0
    3006:	19 f1       	breq	.+70     	; 0x304e <__vector_39+0x154>
    3008:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <_twiMessageLen>
    300c:	4e e7       	ldi	r20, 0x7E	; 126
    300e:	53 e0       	ldi	r21, 0x03	; 3
    3010:	65 e0       	ldi	r22, 0x05	; 5
    3012:	19 95       	eicall
    3014:	1c c0       	rjmp	.+56     	; 0x304e <__vector_39+0x154>
    3016:	85 ea       	ldi	r24, 0xA5	; 165
    3018:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    301c:	18 c0       	rjmp	.+48     	; 0x304e <__vector_39+0x154>
    301e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3022:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    3026:	84 e0       	ldi	r24, 0x04	; 4
    3028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    302c:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_twiCurrentHandler>
    3030:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_twiCurrentHandler+0x1>
    3034:	dc 01       	movw	r26, r24
    3036:	12 96       	adiw	r26, 0x02	; 2
    3038:	ed 91       	ld	r30, X+
    303a:	fc 91       	ld	r31, X
    303c:	13 97       	sbiw	r26, 0x03	; 3
    303e:	30 97       	sbiw	r30, 0x00	; 0
    3040:	31 f0       	breq	.+12     	; 0x304e <__vector_39+0x154>
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    304c:	19 95       	eicall
    304e:	ff 91       	pop	r31
    3050:	ef 91       	pop	r30
    3052:	bf 91       	pop	r27
    3054:	af 91       	pop	r26
    3056:	9f 91       	pop	r25
    3058:	8f 91       	pop	r24
    305a:	7f 91       	pop	r23
    305c:	6f 91       	pop	r22
    305e:	5f 91       	pop	r21
    3060:	4f 91       	pop	r20
    3062:	3f 91       	pop	r19
    3064:	2f 91       	pop	r18
    3066:	0f 90       	pop	r0
    3068:	0b be       	out	0x3b, r0	; 59
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0
    3070:	1f 90       	pop	r1
    3072:	18 95       	reti

00003074 <fifo_init>:
    3074:	fc 01       	movw	r30, r24
    3076:	41 11       	cpse	r20, r1
    3078:	01 c0       	rjmp	.+2      	; 0x307c <fifo_init+0x8>
    307a:	67 d3       	rcall	.+1742   	; 0x374a <abort>
    307c:	84 2f       	mov	r24, r20
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9c 01       	movw	r18, r24
    3082:	21 50       	subi	r18, 0x01	; 1
    3084:	31 09       	sbc	r19, r1
    3086:	82 23       	and	r24, r18
    3088:	93 23       	and	r25, r19
    308a:	89 2b       	or	r24, r25
    308c:	09 f0       	breq	.+2      	; 0x3090 <fifo_init+0x1c>
    308e:	5d d3       	rcall	.+1722   	; 0x374a <abort>
    3090:	41 38       	cpi	r20, 0x81	; 129
    3092:	08 f0       	brcs	.+2      	; 0x3096 <fifo_init+0x22>
    3094:	5a d3       	rcall	.+1716   	; 0x374a <abort>
    3096:	12 82       	std	Z+2, r1	; 0x02
    3098:	13 82       	std	Z+3, r1	; 0x03
    309a:	44 83       	std	Z+4, r20	; 0x04
    309c:	44 0f       	add	r20, r20
    309e:	41 50       	subi	r20, 0x01	; 1
    30a0:	45 83       	std	Z+5, r20	; 0x05
    30a2:	71 83       	std	Z+1, r23	; 0x01
    30a4:	60 83       	st	Z, r22
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	08 95       	ret

000030ac <__subsf3>:
    30ac:	50 58       	subi	r21, 0x80	; 128

000030ae <__addsf3>:
    30ae:	bb 27       	eor	r27, r27
    30b0:	aa 27       	eor	r26, r26
    30b2:	0e d0       	rcall	.+28     	; 0x30d0 <__addsf3x>
    30b4:	48 c1       	rjmp	.+656    	; 0x3346 <__fp_round>
    30b6:	39 d1       	rcall	.+626    	; 0x332a <__fp_pscA>
    30b8:	30 f0       	brcs	.+12     	; 0x30c6 <__addsf3+0x18>
    30ba:	3e d1       	rcall	.+636    	; 0x3338 <__fp_pscB>
    30bc:	20 f0       	brcs	.+8      	; 0x30c6 <__addsf3+0x18>
    30be:	31 f4       	brne	.+12     	; 0x30cc <__addsf3+0x1e>
    30c0:	9f 3f       	cpi	r25, 0xFF	; 255
    30c2:	11 f4       	brne	.+4      	; 0x30c8 <__addsf3+0x1a>
    30c4:	1e f4       	brtc	.+6      	; 0x30cc <__addsf3+0x1e>
    30c6:	2e c1       	rjmp	.+604    	; 0x3324 <__fp_nan>
    30c8:	0e f4       	brtc	.+2      	; 0x30cc <__addsf3+0x1e>
    30ca:	e0 95       	com	r30
    30cc:	e7 fb       	bst	r30, 7
    30ce:	24 c1       	rjmp	.+584    	; 0x3318 <__fp_inf>

000030d0 <__addsf3x>:
    30d0:	e9 2f       	mov	r30, r25
    30d2:	4a d1       	rcall	.+660    	; 0x3368 <__fp_split3>
    30d4:	80 f3       	brcs	.-32     	; 0x30b6 <__addsf3+0x8>
    30d6:	ba 17       	cp	r27, r26
    30d8:	62 07       	cpc	r22, r18
    30da:	73 07       	cpc	r23, r19
    30dc:	84 07       	cpc	r24, r20
    30de:	95 07       	cpc	r25, r21
    30e0:	18 f0       	brcs	.+6      	; 0x30e8 <__addsf3x+0x18>
    30e2:	71 f4       	brne	.+28     	; 0x3100 <__addsf3x+0x30>
    30e4:	9e f5       	brtc	.+102    	; 0x314c <__addsf3x+0x7c>
    30e6:	62 c1       	rjmp	.+708    	; 0x33ac <__fp_zero>
    30e8:	0e f4       	brtc	.+2      	; 0x30ec <__addsf3x+0x1c>
    30ea:	e0 95       	com	r30
    30ec:	0b 2e       	mov	r0, r27
    30ee:	ba 2f       	mov	r27, r26
    30f0:	a0 2d       	mov	r26, r0
    30f2:	0b 01       	movw	r0, r22
    30f4:	b9 01       	movw	r22, r18
    30f6:	90 01       	movw	r18, r0
    30f8:	0c 01       	movw	r0, r24
    30fa:	ca 01       	movw	r24, r20
    30fc:	a0 01       	movw	r20, r0
    30fe:	11 24       	eor	r1, r1
    3100:	ff 27       	eor	r31, r31
    3102:	59 1b       	sub	r21, r25
    3104:	99 f0       	breq	.+38     	; 0x312c <__addsf3x+0x5c>
    3106:	59 3f       	cpi	r21, 0xF9	; 249
    3108:	50 f4       	brcc	.+20     	; 0x311e <__addsf3x+0x4e>
    310a:	50 3e       	cpi	r21, 0xE0	; 224
    310c:	68 f1       	brcs	.+90     	; 0x3168 <__addsf3x+0x98>
    310e:	1a 16       	cp	r1, r26
    3110:	f0 40       	sbci	r31, 0x00	; 0
    3112:	a2 2f       	mov	r26, r18
    3114:	23 2f       	mov	r18, r19
    3116:	34 2f       	mov	r19, r20
    3118:	44 27       	eor	r20, r20
    311a:	58 5f       	subi	r21, 0xF8	; 248
    311c:	f3 cf       	rjmp	.-26     	; 0x3104 <__addsf3x+0x34>
    311e:	46 95       	lsr	r20
    3120:	37 95       	ror	r19
    3122:	27 95       	ror	r18
    3124:	a7 95       	ror	r26
    3126:	f0 40       	sbci	r31, 0x00	; 0
    3128:	53 95       	inc	r21
    312a:	c9 f7       	brne	.-14     	; 0x311e <__addsf3x+0x4e>
    312c:	7e f4       	brtc	.+30     	; 0x314c <__addsf3x+0x7c>
    312e:	1f 16       	cp	r1, r31
    3130:	ba 0b       	sbc	r27, r26
    3132:	62 0b       	sbc	r22, r18
    3134:	73 0b       	sbc	r23, r19
    3136:	84 0b       	sbc	r24, r20
    3138:	ba f0       	brmi	.+46     	; 0x3168 <__addsf3x+0x98>
    313a:	91 50       	subi	r25, 0x01	; 1
    313c:	a1 f0       	breq	.+40     	; 0x3166 <__addsf3x+0x96>
    313e:	ff 0f       	add	r31, r31
    3140:	bb 1f       	adc	r27, r27
    3142:	66 1f       	adc	r22, r22
    3144:	77 1f       	adc	r23, r23
    3146:	88 1f       	adc	r24, r24
    3148:	c2 f7       	brpl	.-16     	; 0x313a <__addsf3x+0x6a>
    314a:	0e c0       	rjmp	.+28     	; 0x3168 <__addsf3x+0x98>
    314c:	ba 0f       	add	r27, r26
    314e:	62 1f       	adc	r22, r18
    3150:	73 1f       	adc	r23, r19
    3152:	84 1f       	adc	r24, r20
    3154:	48 f4       	brcc	.+18     	; 0x3168 <__addsf3x+0x98>
    3156:	87 95       	ror	r24
    3158:	77 95       	ror	r23
    315a:	67 95       	ror	r22
    315c:	b7 95       	ror	r27
    315e:	f7 95       	ror	r31
    3160:	9e 3f       	cpi	r25, 0xFE	; 254
    3162:	08 f0       	brcs	.+2      	; 0x3166 <__addsf3x+0x96>
    3164:	b3 cf       	rjmp	.-154    	; 0x30cc <__addsf3+0x1e>
    3166:	93 95       	inc	r25
    3168:	88 0f       	add	r24, r24
    316a:	08 f0       	brcs	.+2      	; 0x316e <__addsf3x+0x9e>
    316c:	99 27       	eor	r25, r25
    316e:	ee 0f       	add	r30, r30
    3170:	97 95       	ror	r25
    3172:	87 95       	ror	r24
    3174:	08 95       	ret

00003176 <__divsf3>:
    3176:	0c d0       	rcall	.+24     	; 0x3190 <__divsf3x>
    3178:	e6 c0       	rjmp	.+460    	; 0x3346 <__fp_round>
    317a:	de d0       	rcall	.+444    	; 0x3338 <__fp_pscB>
    317c:	40 f0       	brcs	.+16     	; 0x318e <__divsf3+0x18>
    317e:	d5 d0       	rcall	.+426    	; 0x332a <__fp_pscA>
    3180:	30 f0       	brcs	.+12     	; 0x318e <__divsf3+0x18>
    3182:	21 f4       	brne	.+8      	; 0x318c <__divsf3+0x16>
    3184:	5f 3f       	cpi	r21, 0xFF	; 255
    3186:	19 f0       	breq	.+6      	; 0x318e <__divsf3+0x18>
    3188:	c7 c0       	rjmp	.+398    	; 0x3318 <__fp_inf>
    318a:	51 11       	cpse	r21, r1
    318c:	10 c1       	rjmp	.+544    	; 0x33ae <__fp_szero>
    318e:	ca c0       	rjmp	.+404    	; 0x3324 <__fp_nan>

00003190 <__divsf3x>:
    3190:	eb d0       	rcall	.+470    	; 0x3368 <__fp_split3>
    3192:	98 f3       	brcs	.-26     	; 0x317a <__divsf3+0x4>

00003194 <__divsf3_pse>:
    3194:	99 23       	and	r25, r25
    3196:	c9 f3       	breq	.-14     	; 0x318a <__divsf3+0x14>
    3198:	55 23       	and	r21, r21
    319a:	b1 f3       	breq	.-20     	; 0x3188 <__divsf3+0x12>
    319c:	95 1b       	sub	r25, r21
    319e:	55 0b       	sbc	r21, r21
    31a0:	bb 27       	eor	r27, r27
    31a2:	aa 27       	eor	r26, r26
    31a4:	62 17       	cp	r22, r18
    31a6:	73 07       	cpc	r23, r19
    31a8:	84 07       	cpc	r24, r20
    31aa:	38 f0       	brcs	.+14     	; 0x31ba <__divsf3_pse+0x26>
    31ac:	9f 5f       	subi	r25, 0xFF	; 255
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	22 0f       	add	r18, r18
    31b2:	33 1f       	adc	r19, r19
    31b4:	44 1f       	adc	r20, r20
    31b6:	aa 1f       	adc	r26, r26
    31b8:	a9 f3       	breq	.-22     	; 0x31a4 <__divsf3_pse+0x10>
    31ba:	33 d0       	rcall	.+102    	; 0x3222 <__divsf3_pse+0x8e>
    31bc:	0e 2e       	mov	r0, r30
    31be:	3a f0       	brmi	.+14     	; 0x31ce <__divsf3_pse+0x3a>
    31c0:	e0 e8       	ldi	r30, 0x80	; 128
    31c2:	30 d0       	rcall	.+96     	; 0x3224 <__divsf3_pse+0x90>
    31c4:	91 50       	subi	r25, 0x01	; 1
    31c6:	50 40       	sbci	r21, 0x00	; 0
    31c8:	e6 95       	lsr	r30
    31ca:	00 1c       	adc	r0, r0
    31cc:	ca f7       	brpl	.-14     	; 0x31c0 <__divsf3_pse+0x2c>
    31ce:	29 d0       	rcall	.+82     	; 0x3222 <__divsf3_pse+0x8e>
    31d0:	fe 2f       	mov	r31, r30
    31d2:	27 d0       	rcall	.+78     	; 0x3222 <__divsf3_pse+0x8e>
    31d4:	66 0f       	add	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	88 1f       	adc	r24, r24
    31da:	bb 1f       	adc	r27, r27
    31dc:	26 17       	cp	r18, r22
    31de:	37 07       	cpc	r19, r23
    31e0:	48 07       	cpc	r20, r24
    31e2:	ab 07       	cpc	r26, r27
    31e4:	b0 e8       	ldi	r27, 0x80	; 128
    31e6:	09 f0       	breq	.+2      	; 0x31ea <__divsf3_pse+0x56>
    31e8:	bb 0b       	sbc	r27, r27
    31ea:	80 2d       	mov	r24, r0
    31ec:	bf 01       	movw	r22, r30
    31ee:	ff 27       	eor	r31, r31
    31f0:	93 58       	subi	r25, 0x83	; 131
    31f2:	5f 4f       	sbci	r21, 0xFF	; 255
    31f4:	2a f0       	brmi	.+10     	; 0x3200 <__divsf3_pse+0x6c>
    31f6:	9e 3f       	cpi	r25, 0xFE	; 254
    31f8:	51 05       	cpc	r21, r1
    31fa:	68 f0       	brcs	.+26     	; 0x3216 <__divsf3_pse+0x82>
    31fc:	8d c0       	rjmp	.+282    	; 0x3318 <__fp_inf>
    31fe:	d7 c0       	rjmp	.+430    	; 0x33ae <__fp_szero>
    3200:	5f 3f       	cpi	r21, 0xFF	; 255
    3202:	ec f3       	brlt	.-6      	; 0x31fe <__divsf3_pse+0x6a>
    3204:	98 3e       	cpi	r25, 0xE8	; 232
    3206:	dc f3       	brlt	.-10     	; 0x31fe <__divsf3_pse+0x6a>
    3208:	86 95       	lsr	r24
    320a:	77 95       	ror	r23
    320c:	67 95       	ror	r22
    320e:	b7 95       	ror	r27
    3210:	f7 95       	ror	r31
    3212:	9f 5f       	subi	r25, 0xFF	; 255
    3214:	c9 f7       	brne	.-14     	; 0x3208 <__divsf3_pse+0x74>
    3216:	88 0f       	add	r24, r24
    3218:	91 1d       	adc	r25, r1
    321a:	96 95       	lsr	r25
    321c:	87 95       	ror	r24
    321e:	97 f9       	bld	r25, 7
    3220:	08 95       	ret
    3222:	e1 e0       	ldi	r30, 0x01	; 1
    3224:	66 0f       	add	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	bb 1f       	adc	r27, r27
    322c:	62 17       	cp	r22, r18
    322e:	73 07       	cpc	r23, r19
    3230:	84 07       	cpc	r24, r20
    3232:	ba 07       	cpc	r27, r26
    3234:	20 f0       	brcs	.+8      	; 0x323e <__divsf3_pse+0xaa>
    3236:	62 1b       	sub	r22, r18
    3238:	73 0b       	sbc	r23, r19
    323a:	84 0b       	sbc	r24, r20
    323c:	ba 0b       	sbc	r27, r26
    323e:	ee 1f       	adc	r30, r30
    3240:	88 f7       	brcc	.-30     	; 0x3224 <__divsf3_pse+0x90>
    3242:	e0 95       	com	r30
    3244:	08 95       	ret

00003246 <__fixunssfsi>:
    3246:	98 d0       	rcall	.+304    	; 0x3378 <__fp_splitA>
    3248:	88 f0       	brcs	.+34     	; 0x326c <__fixunssfsi+0x26>
    324a:	9f 57       	subi	r25, 0x7F	; 127
    324c:	90 f0       	brcs	.+36     	; 0x3272 <__fixunssfsi+0x2c>
    324e:	b9 2f       	mov	r27, r25
    3250:	99 27       	eor	r25, r25
    3252:	b7 51       	subi	r27, 0x17	; 23
    3254:	a0 f0       	brcs	.+40     	; 0x327e <__fixunssfsi+0x38>
    3256:	d1 f0       	breq	.+52     	; 0x328c <__fixunssfsi+0x46>
    3258:	66 0f       	add	r22, r22
    325a:	77 1f       	adc	r23, r23
    325c:	88 1f       	adc	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	1a f0       	brmi	.+6      	; 0x3268 <__fixunssfsi+0x22>
    3262:	ba 95       	dec	r27
    3264:	c9 f7       	brne	.-14     	; 0x3258 <__fixunssfsi+0x12>
    3266:	12 c0       	rjmp	.+36     	; 0x328c <__fixunssfsi+0x46>
    3268:	b1 30       	cpi	r27, 0x01	; 1
    326a:	81 f0       	breq	.+32     	; 0x328c <__fixunssfsi+0x46>
    326c:	9f d0       	rcall	.+318    	; 0x33ac <__fp_zero>
    326e:	b1 e0       	ldi	r27, 0x01	; 1
    3270:	08 95       	ret
    3272:	9c c0       	rjmp	.+312    	; 0x33ac <__fp_zero>
    3274:	67 2f       	mov	r22, r23
    3276:	78 2f       	mov	r23, r24
    3278:	88 27       	eor	r24, r24
    327a:	b8 5f       	subi	r27, 0xF8	; 248
    327c:	39 f0       	breq	.+14     	; 0x328c <__fixunssfsi+0x46>
    327e:	b9 3f       	cpi	r27, 0xF9	; 249
    3280:	cc f3       	brlt	.-14     	; 0x3274 <__fixunssfsi+0x2e>
    3282:	86 95       	lsr	r24
    3284:	77 95       	ror	r23
    3286:	67 95       	ror	r22
    3288:	b3 95       	inc	r27
    328a:	d9 f7       	brne	.-10     	; 0x3282 <__fixunssfsi+0x3c>
    328c:	3e f4       	brtc	.+14     	; 0x329c <__fixunssfsi+0x56>
    328e:	90 95       	com	r25
    3290:	80 95       	com	r24
    3292:	70 95       	com	r23
    3294:	61 95       	neg	r22
    3296:	7f 4f       	sbci	r23, 0xFF	; 255
    3298:	8f 4f       	sbci	r24, 0xFF	; 255
    329a:	9f 4f       	sbci	r25, 0xFF	; 255
    329c:	08 95       	ret

0000329e <__floatunsisf>:
    329e:	e8 94       	clt
    32a0:	09 c0       	rjmp	.+18     	; 0x32b4 <__floatsisf+0x12>

000032a2 <__floatsisf>:
    32a2:	97 fb       	bst	r25, 7
    32a4:	3e f4       	brtc	.+14     	; 0x32b4 <__floatsisf+0x12>
    32a6:	90 95       	com	r25
    32a8:	80 95       	com	r24
    32aa:	70 95       	com	r23
    32ac:	61 95       	neg	r22
    32ae:	7f 4f       	sbci	r23, 0xFF	; 255
    32b0:	8f 4f       	sbci	r24, 0xFF	; 255
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	99 23       	and	r25, r25
    32b6:	a9 f0       	breq	.+42     	; 0x32e2 <__floatsisf+0x40>
    32b8:	f9 2f       	mov	r31, r25
    32ba:	96 e9       	ldi	r25, 0x96	; 150
    32bc:	bb 27       	eor	r27, r27
    32be:	93 95       	inc	r25
    32c0:	f6 95       	lsr	r31
    32c2:	87 95       	ror	r24
    32c4:	77 95       	ror	r23
    32c6:	67 95       	ror	r22
    32c8:	b7 95       	ror	r27
    32ca:	f1 11       	cpse	r31, r1
    32cc:	f8 cf       	rjmp	.-16     	; 0x32be <__floatsisf+0x1c>
    32ce:	fa f4       	brpl	.+62     	; 0x330e <__floatsisf+0x6c>
    32d0:	bb 0f       	add	r27, r27
    32d2:	11 f4       	brne	.+4      	; 0x32d8 <__floatsisf+0x36>
    32d4:	60 ff       	sbrs	r22, 0
    32d6:	1b c0       	rjmp	.+54     	; 0x330e <__floatsisf+0x6c>
    32d8:	6f 5f       	subi	r22, 0xFF	; 255
    32da:	7f 4f       	sbci	r23, 0xFF	; 255
    32dc:	8f 4f       	sbci	r24, 0xFF	; 255
    32de:	9f 4f       	sbci	r25, 0xFF	; 255
    32e0:	16 c0       	rjmp	.+44     	; 0x330e <__floatsisf+0x6c>
    32e2:	88 23       	and	r24, r24
    32e4:	11 f0       	breq	.+4      	; 0x32ea <__floatsisf+0x48>
    32e6:	96 e9       	ldi	r25, 0x96	; 150
    32e8:	11 c0       	rjmp	.+34     	; 0x330c <__floatsisf+0x6a>
    32ea:	77 23       	and	r23, r23
    32ec:	21 f0       	breq	.+8      	; 0x32f6 <__floatsisf+0x54>
    32ee:	9e e8       	ldi	r25, 0x8E	; 142
    32f0:	87 2f       	mov	r24, r23
    32f2:	76 2f       	mov	r23, r22
    32f4:	05 c0       	rjmp	.+10     	; 0x3300 <__floatsisf+0x5e>
    32f6:	66 23       	and	r22, r22
    32f8:	71 f0       	breq	.+28     	; 0x3316 <__floatsisf+0x74>
    32fa:	96 e8       	ldi	r25, 0x86	; 134
    32fc:	86 2f       	mov	r24, r22
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	2a f0       	brmi	.+10     	; 0x330e <__floatsisf+0x6c>
    3304:	9a 95       	dec	r25
    3306:	66 0f       	add	r22, r22
    3308:	77 1f       	adc	r23, r23
    330a:	88 1f       	adc	r24, r24
    330c:	da f7       	brpl	.-10     	; 0x3304 <__floatsisf+0x62>
    330e:	88 0f       	add	r24, r24
    3310:	96 95       	lsr	r25
    3312:	87 95       	ror	r24
    3314:	97 f9       	bld	r25, 7
    3316:	08 95       	ret

00003318 <__fp_inf>:
    3318:	97 f9       	bld	r25, 7
    331a:	9f 67       	ori	r25, 0x7F	; 127
    331c:	80 e8       	ldi	r24, 0x80	; 128
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	08 95       	ret

00003324 <__fp_nan>:
    3324:	9f ef       	ldi	r25, 0xFF	; 255
    3326:	80 ec       	ldi	r24, 0xC0	; 192
    3328:	08 95       	ret

0000332a <__fp_pscA>:
    332a:	00 24       	eor	r0, r0
    332c:	0a 94       	dec	r0
    332e:	16 16       	cp	r1, r22
    3330:	17 06       	cpc	r1, r23
    3332:	18 06       	cpc	r1, r24
    3334:	09 06       	cpc	r0, r25
    3336:	08 95       	ret

00003338 <__fp_pscB>:
    3338:	00 24       	eor	r0, r0
    333a:	0a 94       	dec	r0
    333c:	12 16       	cp	r1, r18
    333e:	13 06       	cpc	r1, r19
    3340:	14 06       	cpc	r1, r20
    3342:	05 06       	cpc	r0, r21
    3344:	08 95       	ret

00003346 <__fp_round>:
    3346:	09 2e       	mov	r0, r25
    3348:	03 94       	inc	r0
    334a:	00 0c       	add	r0, r0
    334c:	11 f4       	brne	.+4      	; 0x3352 <__fp_round+0xc>
    334e:	88 23       	and	r24, r24
    3350:	52 f0       	brmi	.+20     	; 0x3366 <__fp_round+0x20>
    3352:	bb 0f       	add	r27, r27
    3354:	40 f4       	brcc	.+16     	; 0x3366 <__fp_round+0x20>
    3356:	bf 2b       	or	r27, r31
    3358:	11 f4       	brne	.+4      	; 0x335e <__fp_round+0x18>
    335a:	60 ff       	sbrs	r22, 0
    335c:	04 c0       	rjmp	.+8      	; 0x3366 <__fp_round+0x20>
    335e:	6f 5f       	subi	r22, 0xFF	; 255
    3360:	7f 4f       	sbci	r23, 0xFF	; 255
    3362:	8f 4f       	sbci	r24, 0xFF	; 255
    3364:	9f 4f       	sbci	r25, 0xFF	; 255
    3366:	08 95       	ret

00003368 <__fp_split3>:
    3368:	57 fd       	sbrc	r21, 7
    336a:	90 58       	subi	r25, 0x80	; 128
    336c:	44 0f       	add	r20, r20
    336e:	55 1f       	adc	r21, r21
    3370:	59 f0       	breq	.+22     	; 0x3388 <__fp_splitA+0x10>
    3372:	5f 3f       	cpi	r21, 0xFF	; 255
    3374:	71 f0       	breq	.+28     	; 0x3392 <__fp_splitA+0x1a>
    3376:	47 95       	ror	r20

00003378 <__fp_splitA>:
    3378:	88 0f       	add	r24, r24
    337a:	97 fb       	bst	r25, 7
    337c:	99 1f       	adc	r25, r25
    337e:	61 f0       	breq	.+24     	; 0x3398 <__fp_splitA+0x20>
    3380:	9f 3f       	cpi	r25, 0xFF	; 255
    3382:	79 f0       	breq	.+30     	; 0x33a2 <__fp_splitA+0x2a>
    3384:	87 95       	ror	r24
    3386:	08 95       	ret
    3388:	12 16       	cp	r1, r18
    338a:	13 06       	cpc	r1, r19
    338c:	14 06       	cpc	r1, r20
    338e:	55 1f       	adc	r21, r21
    3390:	f2 cf       	rjmp	.-28     	; 0x3376 <__fp_split3+0xe>
    3392:	46 95       	lsr	r20
    3394:	f1 df       	rcall	.-30     	; 0x3378 <__fp_splitA>
    3396:	08 c0       	rjmp	.+16     	; 0x33a8 <__fp_splitA+0x30>
    3398:	16 16       	cp	r1, r22
    339a:	17 06       	cpc	r1, r23
    339c:	18 06       	cpc	r1, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	f1 cf       	rjmp	.-30     	; 0x3384 <__fp_splitA+0xc>
    33a2:	86 95       	lsr	r24
    33a4:	71 05       	cpc	r23, r1
    33a6:	61 05       	cpc	r22, r1
    33a8:	08 94       	sec
    33aa:	08 95       	ret

000033ac <__fp_zero>:
    33ac:	e8 94       	clt

000033ae <__fp_szero>:
    33ae:	bb 27       	eor	r27, r27
    33b0:	66 27       	eor	r22, r22
    33b2:	77 27       	eor	r23, r23
    33b4:	cb 01       	movw	r24, r22
    33b6:	97 f9       	bld	r25, 7
    33b8:	08 95       	ret

000033ba <__mulsf3>:
    33ba:	0b d0       	rcall	.+22     	; 0x33d2 <__mulsf3x>
    33bc:	c4 cf       	rjmp	.-120    	; 0x3346 <__fp_round>
    33be:	b5 df       	rcall	.-150    	; 0x332a <__fp_pscA>
    33c0:	28 f0       	brcs	.+10     	; 0x33cc <__mulsf3+0x12>
    33c2:	ba df       	rcall	.-140    	; 0x3338 <__fp_pscB>
    33c4:	18 f0       	brcs	.+6      	; 0x33cc <__mulsf3+0x12>
    33c6:	95 23       	and	r25, r21
    33c8:	09 f0       	breq	.+2      	; 0x33cc <__mulsf3+0x12>
    33ca:	a6 cf       	rjmp	.-180    	; 0x3318 <__fp_inf>
    33cc:	ab cf       	rjmp	.-170    	; 0x3324 <__fp_nan>
    33ce:	11 24       	eor	r1, r1
    33d0:	ee cf       	rjmp	.-36     	; 0x33ae <__fp_szero>

000033d2 <__mulsf3x>:
    33d2:	ca df       	rcall	.-108    	; 0x3368 <__fp_split3>
    33d4:	a0 f3       	brcs	.-24     	; 0x33be <__mulsf3+0x4>

000033d6 <__mulsf3_pse>:
    33d6:	95 9f       	mul	r25, r21
    33d8:	d1 f3       	breq	.-12     	; 0x33ce <__mulsf3+0x14>
    33da:	95 0f       	add	r25, r21
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	55 1f       	adc	r21, r21
    33e0:	62 9f       	mul	r22, r18
    33e2:	f0 01       	movw	r30, r0
    33e4:	72 9f       	mul	r23, r18
    33e6:	bb 27       	eor	r27, r27
    33e8:	f0 0d       	add	r31, r0
    33ea:	b1 1d       	adc	r27, r1
    33ec:	63 9f       	mul	r22, r19
    33ee:	aa 27       	eor	r26, r26
    33f0:	f0 0d       	add	r31, r0
    33f2:	b1 1d       	adc	r27, r1
    33f4:	aa 1f       	adc	r26, r26
    33f6:	64 9f       	mul	r22, r20
    33f8:	66 27       	eor	r22, r22
    33fa:	b0 0d       	add	r27, r0
    33fc:	a1 1d       	adc	r26, r1
    33fe:	66 1f       	adc	r22, r22
    3400:	82 9f       	mul	r24, r18
    3402:	22 27       	eor	r18, r18
    3404:	b0 0d       	add	r27, r0
    3406:	a1 1d       	adc	r26, r1
    3408:	62 1f       	adc	r22, r18
    340a:	73 9f       	mul	r23, r19
    340c:	b0 0d       	add	r27, r0
    340e:	a1 1d       	adc	r26, r1
    3410:	62 1f       	adc	r22, r18
    3412:	83 9f       	mul	r24, r19
    3414:	a0 0d       	add	r26, r0
    3416:	61 1d       	adc	r22, r1
    3418:	22 1f       	adc	r18, r18
    341a:	74 9f       	mul	r23, r20
    341c:	33 27       	eor	r19, r19
    341e:	a0 0d       	add	r26, r0
    3420:	61 1d       	adc	r22, r1
    3422:	23 1f       	adc	r18, r19
    3424:	84 9f       	mul	r24, r20
    3426:	60 0d       	add	r22, r0
    3428:	21 1d       	adc	r18, r1
    342a:	82 2f       	mov	r24, r18
    342c:	76 2f       	mov	r23, r22
    342e:	6a 2f       	mov	r22, r26
    3430:	11 24       	eor	r1, r1
    3432:	9f 57       	subi	r25, 0x7F	; 127
    3434:	50 40       	sbci	r21, 0x00	; 0
    3436:	8a f0       	brmi	.+34     	; 0x345a <__mulsf3_pse+0x84>
    3438:	e1 f0       	breq	.+56     	; 0x3472 <__mulsf3_pse+0x9c>
    343a:	88 23       	and	r24, r24
    343c:	4a f0       	brmi	.+18     	; 0x3450 <__mulsf3_pse+0x7a>
    343e:	ee 0f       	add	r30, r30
    3440:	ff 1f       	adc	r31, r31
    3442:	bb 1f       	adc	r27, r27
    3444:	66 1f       	adc	r22, r22
    3446:	77 1f       	adc	r23, r23
    3448:	88 1f       	adc	r24, r24
    344a:	91 50       	subi	r25, 0x01	; 1
    344c:	50 40       	sbci	r21, 0x00	; 0
    344e:	a9 f7       	brne	.-22     	; 0x343a <__mulsf3_pse+0x64>
    3450:	9e 3f       	cpi	r25, 0xFE	; 254
    3452:	51 05       	cpc	r21, r1
    3454:	70 f0       	brcs	.+28     	; 0x3472 <__mulsf3_pse+0x9c>
    3456:	60 cf       	rjmp	.-320    	; 0x3318 <__fp_inf>
    3458:	aa cf       	rjmp	.-172    	; 0x33ae <__fp_szero>
    345a:	5f 3f       	cpi	r21, 0xFF	; 255
    345c:	ec f3       	brlt	.-6      	; 0x3458 <__mulsf3_pse+0x82>
    345e:	98 3e       	cpi	r25, 0xE8	; 232
    3460:	dc f3       	brlt	.-10     	; 0x3458 <__mulsf3_pse+0x82>
    3462:	86 95       	lsr	r24
    3464:	77 95       	ror	r23
    3466:	67 95       	ror	r22
    3468:	b7 95       	ror	r27
    346a:	f7 95       	ror	r31
    346c:	e7 95       	ror	r30
    346e:	9f 5f       	subi	r25, 0xFF	; 255
    3470:	c1 f7       	brne	.-16     	; 0x3462 <__mulsf3_pse+0x8c>
    3472:	fe 2b       	or	r31, r30
    3474:	88 0f       	add	r24, r24
    3476:	91 1d       	adc	r25, r1
    3478:	96 95       	lsr	r25
    347a:	87 95       	ror	r24
    347c:	97 f9       	bld	r25, 7
    347e:	08 95       	ret

00003480 <__udivmodsi4>:
    3480:	a1 e2       	ldi	r26, 0x21	; 33
    3482:	1a 2e       	mov	r1, r26
    3484:	aa 1b       	sub	r26, r26
    3486:	bb 1b       	sub	r27, r27
    3488:	fd 01       	movw	r30, r26
    348a:	0d c0       	rjmp	.+26     	; 0x34a6 <__udivmodsi4_ep>

0000348c <__udivmodsi4_loop>:
    348c:	aa 1f       	adc	r26, r26
    348e:	bb 1f       	adc	r27, r27
    3490:	ee 1f       	adc	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	a2 17       	cp	r26, r18
    3496:	b3 07       	cpc	r27, r19
    3498:	e4 07       	cpc	r30, r20
    349a:	f5 07       	cpc	r31, r21
    349c:	20 f0       	brcs	.+8      	; 0x34a6 <__udivmodsi4_ep>
    349e:	a2 1b       	sub	r26, r18
    34a0:	b3 0b       	sbc	r27, r19
    34a2:	e4 0b       	sbc	r30, r20
    34a4:	f5 0b       	sbc	r31, r21

000034a6 <__udivmodsi4_ep>:
    34a6:	66 1f       	adc	r22, r22
    34a8:	77 1f       	adc	r23, r23
    34aa:	88 1f       	adc	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	1a 94       	dec	r1
    34b0:	69 f7       	brne	.-38     	; 0x348c <__udivmodsi4_loop>
    34b2:	60 95       	com	r22
    34b4:	70 95       	com	r23
    34b6:	80 95       	com	r24
    34b8:	90 95       	com	r25
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	bd 01       	movw	r22, r26
    34c0:	cf 01       	movw	r24, r30
    34c2:	08 95       	ret

000034c4 <__tablejump2__>:
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	88 1f       	adc	r24, r24
    34ca:	8b bf       	out	0x3b, r24	; 59
    34cc:	07 90       	elpm	r0, Z+
    34ce:	f6 91       	elpm	r31, Z
    34d0:	e0 2d       	mov	r30, r0
    34d2:	19 94       	eijmp

000034d4 <calloc>:
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	86 9f       	mul	r24, r22
    34de:	80 01       	movw	r16, r0
    34e0:	87 9f       	mul	r24, r23
    34e2:	10 0d       	add	r17, r0
    34e4:	96 9f       	mul	r25, r22
    34e6:	10 0d       	add	r17, r0
    34e8:	11 24       	eor	r1, r1
    34ea:	c8 01       	movw	r24, r16
    34ec:	0d d0       	rcall	.+26     	; 0x3508 <malloc>
    34ee:	ec 01       	movw	r28, r24
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	21 f0       	breq	.+8      	; 0x34fc <calloc+0x28>
    34f4:	a8 01       	movw	r20, r16
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	17 d2       	rcall	.+1070   	; 0x392a <memset>
    34fc:	ce 01       	movw	r24, r28
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	08 95       	ret

00003508 <malloc>:
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	82 30       	cpi	r24, 0x02	; 2
    3512:	91 05       	cpc	r25, r1
    3514:	10 f4       	brcc	.+4      	; 0x351a <malloc+0x12>
    3516:	82 e0       	ldi	r24, 0x02	; 2
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <__flp>
    351e:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <__flp+0x1>
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	a0 e0       	ldi	r26, 0x00	; 0
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	30 97       	sbiw	r30, 0x00	; 0
    352c:	19 f1       	breq	.+70     	; 0x3574 <malloc+0x6c>
    352e:	40 81       	ld	r20, Z
    3530:	51 81       	ldd	r21, Z+1	; 0x01
    3532:	02 81       	ldd	r16, Z+2	; 0x02
    3534:	13 81       	ldd	r17, Z+3	; 0x03
    3536:	48 17       	cp	r20, r24
    3538:	59 07       	cpc	r21, r25
    353a:	c8 f0       	brcs	.+50     	; 0x356e <malloc+0x66>
    353c:	84 17       	cp	r24, r20
    353e:	95 07       	cpc	r25, r21
    3540:	69 f4       	brne	.+26     	; 0x355c <malloc+0x54>
    3542:	10 97       	sbiw	r26, 0x00	; 0
    3544:	31 f0       	breq	.+12     	; 0x3552 <malloc+0x4a>
    3546:	12 96       	adiw	r26, 0x02	; 2
    3548:	0c 93       	st	X, r16
    354a:	12 97       	sbiw	r26, 0x02	; 2
    354c:	13 96       	adiw	r26, 0x03	; 3
    354e:	1c 93       	st	X, r17
    3550:	27 c0       	rjmp	.+78     	; 0x35a0 <malloc+0x98>
    3552:	00 93 94 03 	sts	0x0394, r16	; 0x800394 <__flp>
    3556:	10 93 95 03 	sts	0x0395, r17	; 0x800395 <__flp+0x1>
    355a:	22 c0       	rjmp	.+68     	; 0x35a0 <malloc+0x98>
    355c:	21 15       	cp	r18, r1
    355e:	31 05       	cpc	r19, r1
    3560:	19 f0       	breq	.+6      	; 0x3568 <malloc+0x60>
    3562:	42 17       	cp	r20, r18
    3564:	53 07       	cpc	r21, r19
    3566:	18 f4       	brcc	.+6      	; 0x356e <malloc+0x66>
    3568:	9a 01       	movw	r18, r20
    356a:	bd 01       	movw	r22, r26
    356c:	ef 01       	movw	r28, r30
    356e:	df 01       	movw	r26, r30
    3570:	f8 01       	movw	r30, r16
    3572:	db cf       	rjmp	.-74     	; 0x352a <malloc+0x22>
    3574:	21 15       	cp	r18, r1
    3576:	31 05       	cpc	r19, r1
    3578:	f9 f0       	breq	.+62     	; 0x35b8 <malloc+0xb0>
    357a:	28 1b       	sub	r18, r24
    357c:	39 0b       	sbc	r19, r25
    357e:	24 30       	cpi	r18, 0x04	; 4
    3580:	31 05       	cpc	r19, r1
    3582:	80 f4       	brcc	.+32     	; 0x35a4 <malloc+0x9c>
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	9b 81       	ldd	r25, Y+3	; 0x03
    3588:	61 15       	cp	r22, r1
    358a:	71 05       	cpc	r23, r1
    358c:	21 f0       	breq	.+8      	; 0x3596 <malloc+0x8e>
    358e:	fb 01       	movw	r30, r22
    3590:	93 83       	std	Z+3, r25	; 0x03
    3592:	82 83       	std	Z+2, r24	; 0x02
    3594:	04 c0       	rjmp	.+8      	; 0x359e <malloc+0x96>
    3596:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <__flp+0x1>
    359a:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <__flp>
    359e:	fe 01       	movw	r30, r28
    35a0:	32 96       	adiw	r30, 0x02	; 2
    35a2:	44 c0       	rjmp	.+136    	; 0x362c <malloc+0x124>
    35a4:	fe 01       	movw	r30, r28
    35a6:	e2 0f       	add	r30, r18
    35a8:	f3 1f       	adc	r31, r19
    35aa:	81 93       	st	Z+, r24
    35ac:	91 93       	st	Z+, r25
    35ae:	22 50       	subi	r18, 0x02	; 2
    35b0:	31 09       	sbc	r19, r1
    35b2:	39 83       	std	Y+1, r19	; 0x01
    35b4:	28 83       	st	Y, r18
    35b6:	3a c0       	rjmp	.+116    	; 0x362c <malloc+0x124>
    35b8:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__brkval>
    35bc:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__brkval+0x1>
    35c0:	23 2b       	or	r18, r19
    35c2:	41 f4       	brne	.+16     	; 0x35d4 <malloc+0xcc>
    35c4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    35c8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    35cc:	30 93 93 03 	sts	0x0393, r19	; 0x800393 <__brkval+0x1>
    35d0:	20 93 92 03 	sts	0x0392, r18	; 0x800392 <__brkval>
    35d4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    35d8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    35dc:	21 15       	cp	r18, r1
    35de:	31 05       	cpc	r19, r1
    35e0:	41 f4       	brne	.+16     	; 0x35f2 <malloc+0xea>
    35e2:	2d b7       	in	r18, 0x3d	; 61
    35e4:	3e b7       	in	r19, 0x3e	; 62
    35e6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    35ea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    35ee:	24 1b       	sub	r18, r20
    35f0:	35 0b       	sbc	r19, r21
    35f2:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <__brkval>
    35f6:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <__brkval+0x1>
    35fa:	e2 17       	cp	r30, r18
    35fc:	f3 07       	cpc	r31, r19
    35fe:	a0 f4       	brcc	.+40     	; 0x3628 <malloc+0x120>
    3600:	2e 1b       	sub	r18, r30
    3602:	3f 0b       	sbc	r19, r31
    3604:	28 17       	cp	r18, r24
    3606:	39 07       	cpc	r19, r25
    3608:	78 f0       	brcs	.+30     	; 0x3628 <malloc+0x120>
    360a:	ac 01       	movw	r20, r24
    360c:	4e 5f       	subi	r20, 0xFE	; 254
    360e:	5f 4f       	sbci	r21, 0xFF	; 255
    3610:	24 17       	cp	r18, r20
    3612:	35 07       	cpc	r19, r21
    3614:	48 f0       	brcs	.+18     	; 0x3628 <malloc+0x120>
    3616:	4e 0f       	add	r20, r30
    3618:	5f 1f       	adc	r21, r31
    361a:	50 93 93 03 	sts	0x0393, r21	; 0x800393 <__brkval+0x1>
    361e:	40 93 92 03 	sts	0x0392, r20	; 0x800392 <__brkval>
    3622:	81 93       	st	Z+, r24
    3624:	91 93       	st	Z+, r25
    3626:	02 c0       	rjmp	.+4      	; 0x362c <malloc+0x124>
    3628:	e0 e0       	ldi	r30, 0x00	; 0
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	cf 01       	movw	r24, r30
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	08 95       	ret

00003638 <free>:
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	09 f4       	brne	.+2      	; 0x3642 <free+0xa>
    3640:	81 c0       	rjmp	.+258    	; 0x3744 <free+0x10c>
    3642:	fc 01       	movw	r30, r24
    3644:	32 97       	sbiw	r30, 0x02	; 2
    3646:	13 82       	std	Z+3, r1	; 0x03
    3648:	12 82       	std	Z+2, r1	; 0x02
    364a:	a0 91 94 03 	lds	r26, 0x0394	; 0x800394 <__flp>
    364e:	b0 91 95 03 	lds	r27, 0x0395	; 0x800395 <__flp+0x1>
    3652:	10 97       	sbiw	r26, 0x00	; 0
    3654:	81 f4       	brne	.+32     	; 0x3676 <free+0x3e>
    3656:	20 81       	ld	r18, Z
    3658:	31 81       	ldd	r19, Z+1	; 0x01
    365a:	82 0f       	add	r24, r18
    365c:	93 1f       	adc	r25, r19
    365e:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__brkval>
    3662:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__brkval+0x1>
    3666:	28 17       	cp	r18, r24
    3668:	39 07       	cpc	r19, r25
    366a:	51 f5       	brne	.+84     	; 0x36c0 <free+0x88>
    366c:	f0 93 93 03 	sts	0x0393, r31	; 0x800393 <__brkval+0x1>
    3670:	e0 93 92 03 	sts	0x0392, r30	; 0x800392 <__brkval>
    3674:	67 c0       	rjmp	.+206    	; 0x3744 <free+0x10c>
    3676:	ed 01       	movw	r28, r26
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	ce 17       	cp	r28, r30
    367e:	df 07       	cpc	r29, r31
    3680:	40 f4       	brcc	.+16     	; 0x3692 <free+0x5a>
    3682:	4a 81       	ldd	r20, Y+2	; 0x02
    3684:	5b 81       	ldd	r21, Y+3	; 0x03
    3686:	9e 01       	movw	r18, r28
    3688:	41 15       	cp	r20, r1
    368a:	51 05       	cpc	r21, r1
    368c:	f1 f0       	breq	.+60     	; 0x36ca <free+0x92>
    368e:	ea 01       	movw	r28, r20
    3690:	f5 cf       	rjmp	.-22     	; 0x367c <free+0x44>
    3692:	d3 83       	std	Z+3, r29	; 0x03
    3694:	c2 83       	std	Z+2, r28	; 0x02
    3696:	40 81       	ld	r20, Z
    3698:	51 81       	ldd	r21, Z+1	; 0x01
    369a:	84 0f       	add	r24, r20
    369c:	95 1f       	adc	r25, r21
    369e:	c8 17       	cp	r28, r24
    36a0:	d9 07       	cpc	r29, r25
    36a2:	59 f4       	brne	.+22     	; 0x36ba <free+0x82>
    36a4:	88 81       	ld	r24, Y
    36a6:	99 81       	ldd	r25, Y+1	; 0x01
    36a8:	84 0f       	add	r24, r20
    36aa:	95 1f       	adc	r25, r21
    36ac:	02 96       	adiw	r24, 0x02	; 2
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	93 83       	std	Z+3, r25	; 0x03
    36b8:	82 83       	std	Z+2, r24	; 0x02
    36ba:	21 15       	cp	r18, r1
    36bc:	31 05       	cpc	r19, r1
    36be:	29 f4       	brne	.+10     	; 0x36ca <free+0x92>
    36c0:	f0 93 95 03 	sts	0x0395, r31	; 0x800395 <__flp+0x1>
    36c4:	e0 93 94 03 	sts	0x0394, r30	; 0x800394 <__flp>
    36c8:	3d c0       	rjmp	.+122    	; 0x3744 <free+0x10c>
    36ca:	e9 01       	movw	r28, r18
    36cc:	fb 83       	std	Y+3, r31	; 0x03
    36ce:	ea 83       	std	Y+2, r30	; 0x02
    36d0:	49 91       	ld	r20, Y+
    36d2:	59 91       	ld	r21, Y+
    36d4:	c4 0f       	add	r28, r20
    36d6:	d5 1f       	adc	r29, r21
    36d8:	ec 17       	cp	r30, r28
    36da:	fd 07       	cpc	r31, r29
    36dc:	61 f4       	brne	.+24     	; 0x36f6 <free+0xbe>
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	84 0f       	add	r24, r20
    36e4:	95 1f       	adc	r25, r21
    36e6:	02 96       	adiw	r24, 0x02	; 2
    36e8:	e9 01       	movw	r28, r18
    36ea:	99 83       	std	Y+1, r25	; 0x01
    36ec:	88 83       	st	Y, r24
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	9b 83       	std	Y+3, r25	; 0x03
    36f4:	8a 83       	std	Y+2, r24	; 0x02
    36f6:	e0 e0       	ldi	r30, 0x00	; 0
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	12 96       	adiw	r26, 0x02	; 2
    36fc:	8d 91       	ld	r24, X+
    36fe:	9c 91       	ld	r25, X
    3700:	13 97       	sbiw	r26, 0x03	; 3
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	19 f0       	breq	.+6      	; 0x370c <free+0xd4>
    3706:	fd 01       	movw	r30, r26
    3708:	dc 01       	movw	r26, r24
    370a:	f7 cf       	rjmp	.-18     	; 0x36fa <free+0xc2>
    370c:	8d 91       	ld	r24, X+
    370e:	9c 91       	ld	r25, X
    3710:	11 97       	sbiw	r26, 0x01	; 1
    3712:	9d 01       	movw	r18, r26
    3714:	2e 5f       	subi	r18, 0xFE	; 254
    3716:	3f 4f       	sbci	r19, 0xFF	; 255
    3718:	82 0f       	add	r24, r18
    371a:	93 1f       	adc	r25, r19
    371c:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__brkval>
    3720:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__brkval+0x1>
    3724:	28 17       	cp	r18, r24
    3726:	39 07       	cpc	r19, r25
    3728:	69 f4       	brne	.+26     	; 0x3744 <free+0x10c>
    372a:	30 97       	sbiw	r30, 0x00	; 0
    372c:	29 f4       	brne	.+10     	; 0x3738 <free+0x100>
    372e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <__flp+0x1>
    3732:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <__flp>
    3736:	02 c0       	rjmp	.+4      	; 0x373c <free+0x104>
    3738:	13 82       	std	Z+3, r1	; 0x03
    373a:	12 82       	std	Z+2, r1	; 0x02
    373c:	b0 93 93 03 	sts	0x0393, r27	; 0x800393 <__brkval+0x1>
    3740:	a0 93 92 03 	sts	0x0392, r26	; 0x800392 <__brkval>
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	08 95       	ret

0000374a <abort>:
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	f8 94       	cli
    3750:	dc c1       	rjmp	.+952    	; 0x3b0a <_exit>

00003752 <__ftoa_engine>:
    3752:	28 30       	cpi	r18, 0x08	; 8
    3754:	08 f0       	brcs	.+2      	; 0x3758 <__ftoa_engine+0x6>
    3756:	27 e0       	ldi	r18, 0x07	; 7
    3758:	33 27       	eor	r19, r19
    375a:	da 01       	movw	r26, r20
    375c:	99 0f       	add	r25, r25
    375e:	31 1d       	adc	r19, r1
    3760:	87 fd       	sbrc	r24, 7
    3762:	91 60       	ori	r25, 0x01	; 1
    3764:	00 96       	adiw	r24, 0x00	; 0
    3766:	61 05       	cpc	r22, r1
    3768:	71 05       	cpc	r23, r1
    376a:	39 f4       	brne	.+14     	; 0x377a <__ftoa_engine+0x28>
    376c:	32 60       	ori	r19, 0x02	; 2
    376e:	2e 5f       	subi	r18, 0xFE	; 254
    3770:	3d 93       	st	X+, r19
    3772:	30 e3       	ldi	r19, 0x30	; 48
    3774:	2a 95       	dec	r18
    3776:	e1 f7       	brne	.-8      	; 0x3770 <__ftoa_engine+0x1e>
    3778:	08 95       	ret
    377a:	9f 3f       	cpi	r25, 0xFF	; 255
    377c:	30 f0       	brcs	.+12     	; 0x378a <__ftoa_engine+0x38>
    377e:	80 38       	cpi	r24, 0x80	; 128
    3780:	71 05       	cpc	r23, r1
    3782:	61 05       	cpc	r22, r1
    3784:	09 f0       	breq	.+2      	; 0x3788 <__ftoa_engine+0x36>
    3786:	3c 5f       	subi	r19, 0xFC	; 252
    3788:	3c 5f       	subi	r19, 0xFC	; 252
    378a:	3d 93       	st	X+, r19
    378c:	91 30       	cpi	r25, 0x01	; 1
    378e:	08 f0       	brcs	.+2      	; 0x3792 <__ftoa_engine+0x40>
    3790:	80 68       	ori	r24, 0x80	; 128
    3792:	91 1d       	adc	r25, r1
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	1f 93       	push	r17
    379a:	0f 93       	push	r16
    379c:	ff 92       	push	r15
    379e:	ef 92       	push	r14
    37a0:	19 2f       	mov	r17, r25
    37a2:	98 7f       	andi	r25, 0xF8	; 248
    37a4:	96 95       	lsr	r25
    37a6:	e9 2f       	mov	r30, r25
    37a8:	96 95       	lsr	r25
    37aa:	96 95       	lsr	r25
    37ac:	e9 0f       	add	r30, r25
    37ae:	ff 27       	eor	r31, r31
    37b0:	e4 50       	subi	r30, 0x04	; 4
    37b2:	fe 4f       	sbci	r31, 0xFE	; 254
    37b4:	99 27       	eor	r25, r25
    37b6:	33 27       	eor	r19, r19
    37b8:	ee 24       	eor	r14, r14
    37ba:	ff 24       	eor	r15, r15
    37bc:	a7 01       	movw	r20, r14
    37be:	e7 01       	movw	r28, r14
    37c0:	05 90       	lpm	r0, Z+
    37c2:	08 94       	sec
    37c4:	07 94       	ror	r0
    37c6:	28 f4       	brcc	.+10     	; 0x37d2 <__ftoa_engine+0x80>
    37c8:	36 0f       	add	r19, r22
    37ca:	e7 1e       	adc	r14, r23
    37cc:	f8 1e       	adc	r15, r24
    37ce:	49 1f       	adc	r20, r25
    37d0:	51 1d       	adc	r21, r1
    37d2:	66 0f       	add	r22, r22
    37d4:	77 1f       	adc	r23, r23
    37d6:	88 1f       	adc	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	06 94       	lsr	r0
    37dc:	a1 f7       	brne	.-24     	; 0x37c6 <__ftoa_engine+0x74>
    37de:	05 90       	lpm	r0, Z+
    37e0:	07 94       	ror	r0
    37e2:	28 f4       	brcc	.+10     	; 0x37ee <__ftoa_engine+0x9c>
    37e4:	e7 0e       	add	r14, r23
    37e6:	f8 1e       	adc	r15, r24
    37e8:	49 1f       	adc	r20, r25
    37ea:	56 1f       	adc	r21, r22
    37ec:	c1 1d       	adc	r28, r1
    37ee:	77 0f       	add	r23, r23
    37f0:	88 1f       	adc	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	66 1f       	adc	r22, r22
    37f6:	06 94       	lsr	r0
    37f8:	a1 f7       	brne	.-24     	; 0x37e2 <__ftoa_engine+0x90>
    37fa:	05 90       	lpm	r0, Z+
    37fc:	07 94       	ror	r0
    37fe:	28 f4       	brcc	.+10     	; 0x380a <__ftoa_engine+0xb8>
    3800:	f8 0e       	add	r15, r24
    3802:	49 1f       	adc	r20, r25
    3804:	56 1f       	adc	r21, r22
    3806:	c7 1f       	adc	r28, r23
    3808:	d1 1d       	adc	r29, r1
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	66 1f       	adc	r22, r22
    3810:	77 1f       	adc	r23, r23
    3812:	06 94       	lsr	r0
    3814:	a1 f7       	brne	.-24     	; 0x37fe <__ftoa_engine+0xac>
    3816:	05 90       	lpm	r0, Z+
    3818:	07 94       	ror	r0
    381a:	20 f4       	brcc	.+8      	; 0x3824 <__ftoa_engine+0xd2>
    381c:	49 0f       	add	r20, r25
    381e:	56 1f       	adc	r21, r22
    3820:	c7 1f       	adc	r28, r23
    3822:	d8 1f       	adc	r29, r24
    3824:	99 0f       	add	r25, r25
    3826:	66 1f       	adc	r22, r22
    3828:	77 1f       	adc	r23, r23
    382a:	88 1f       	adc	r24, r24
    382c:	06 94       	lsr	r0
    382e:	a9 f7       	brne	.-22     	; 0x381a <__ftoa_engine+0xc8>
    3830:	84 91       	lpm	r24, Z
    3832:	10 95       	com	r17
    3834:	17 70       	andi	r17, 0x07	; 7
    3836:	41 f0       	breq	.+16     	; 0x3848 <__ftoa_engine+0xf6>
    3838:	d6 95       	lsr	r29
    383a:	c7 95       	ror	r28
    383c:	57 95       	ror	r21
    383e:	47 95       	ror	r20
    3840:	f7 94       	ror	r15
    3842:	e7 94       	ror	r14
    3844:	1a 95       	dec	r17
    3846:	c1 f7       	brne	.-16     	; 0x3838 <__ftoa_engine+0xe6>
    3848:	e2 ea       	ldi	r30, 0xA2	; 162
    384a:	f1 e0       	ldi	r31, 0x01	; 1
    384c:	68 94       	set
    384e:	15 90       	lpm	r1, Z+
    3850:	15 91       	lpm	r17, Z+
    3852:	35 91       	lpm	r19, Z+
    3854:	65 91       	lpm	r22, Z+
    3856:	95 91       	lpm	r25, Z+
    3858:	05 90       	lpm	r0, Z+
    385a:	7f e2       	ldi	r23, 0x2F	; 47
    385c:	73 95       	inc	r23
    385e:	e1 18       	sub	r14, r1
    3860:	f1 0a       	sbc	r15, r17
    3862:	43 0b       	sbc	r20, r19
    3864:	56 0b       	sbc	r21, r22
    3866:	c9 0b       	sbc	r28, r25
    3868:	d0 09       	sbc	r29, r0
    386a:	c0 f7       	brcc	.-16     	; 0x385c <__ftoa_engine+0x10a>
    386c:	e1 0c       	add	r14, r1
    386e:	f1 1e       	adc	r15, r17
    3870:	43 1f       	adc	r20, r19
    3872:	56 1f       	adc	r21, r22
    3874:	c9 1f       	adc	r28, r25
    3876:	d0 1d       	adc	r29, r0
    3878:	7e f4       	brtc	.+30     	; 0x3898 <__ftoa_engine+0x146>
    387a:	70 33       	cpi	r23, 0x30	; 48
    387c:	11 f4       	brne	.+4      	; 0x3882 <__ftoa_engine+0x130>
    387e:	8a 95       	dec	r24
    3880:	e6 cf       	rjmp	.-52     	; 0x384e <__ftoa_engine+0xfc>
    3882:	e8 94       	clt
    3884:	01 50       	subi	r16, 0x01	; 1
    3886:	30 f0       	brcs	.+12     	; 0x3894 <__ftoa_engine+0x142>
    3888:	08 0f       	add	r16, r24
    388a:	0a f4       	brpl	.+2      	; 0x388e <__ftoa_engine+0x13c>
    388c:	00 27       	eor	r16, r16
    388e:	02 17       	cp	r16, r18
    3890:	08 f4       	brcc	.+2      	; 0x3894 <__ftoa_engine+0x142>
    3892:	20 2f       	mov	r18, r16
    3894:	23 95       	inc	r18
    3896:	02 2f       	mov	r16, r18
    3898:	7a 33       	cpi	r23, 0x3A	; 58
    389a:	28 f0       	brcs	.+10     	; 0x38a6 <__ftoa_engine+0x154>
    389c:	79 e3       	ldi	r23, 0x39	; 57
    389e:	7d 93       	st	X+, r23
    38a0:	2a 95       	dec	r18
    38a2:	e9 f7       	brne	.-6      	; 0x389e <__ftoa_engine+0x14c>
    38a4:	10 c0       	rjmp	.+32     	; 0x38c6 <__ftoa_engine+0x174>
    38a6:	7d 93       	st	X+, r23
    38a8:	2a 95       	dec	r18
    38aa:	89 f6       	brne	.-94     	; 0x384e <__ftoa_engine+0xfc>
    38ac:	06 94       	lsr	r0
    38ae:	97 95       	ror	r25
    38b0:	67 95       	ror	r22
    38b2:	37 95       	ror	r19
    38b4:	17 95       	ror	r17
    38b6:	17 94       	ror	r1
    38b8:	e1 18       	sub	r14, r1
    38ba:	f1 0a       	sbc	r15, r17
    38bc:	43 0b       	sbc	r20, r19
    38be:	56 0b       	sbc	r21, r22
    38c0:	c9 0b       	sbc	r28, r25
    38c2:	d0 09       	sbc	r29, r0
    38c4:	98 f0       	brcs	.+38     	; 0x38ec <__ftoa_engine+0x19a>
    38c6:	23 95       	inc	r18
    38c8:	7e 91       	ld	r23, -X
    38ca:	73 95       	inc	r23
    38cc:	7a 33       	cpi	r23, 0x3A	; 58
    38ce:	08 f0       	brcs	.+2      	; 0x38d2 <__ftoa_engine+0x180>
    38d0:	70 e3       	ldi	r23, 0x30	; 48
    38d2:	7c 93       	st	X, r23
    38d4:	20 13       	cpse	r18, r16
    38d6:	b8 f7       	brcc	.-18     	; 0x38c6 <__ftoa_engine+0x174>
    38d8:	7e 91       	ld	r23, -X
    38da:	70 61       	ori	r23, 0x10	; 16
    38dc:	7d 93       	st	X+, r23
    38de:	30 f0       	brcs	.+12     	; 0x38ec <__ftoa_engine+0x19a>
    38e0:	83 95       	inc	r24
    38e2:	71 e3       	ldi	r23, 0x31	; 49
    38e4:	7d 93       	st	X+, r23
    38e6:	70 e3       	ldi	r23, 0x30	; 48
    38e8:	2a 95       	dec	r18
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <__ftoa_engine+0x192>
    38ec:	11 24       	eor	r1, r1
    38ee:	ef 90       	pop	r14
    38f0:	ff 90       	pop	r15
    38f2:	0f 91       	pop	r16
    38f4:	1f 91       	pop	r17
    38f6:	cf 91       	pop	r28
    38f8:	df 91       	pop	r29
    38fa:	99 27       	eor	r25, r25
    38fc:	87 fd       	sbrc	r24, 7
    38fe:	90 95       	com	r25
    3900:	08 95       	ret

00003902 <strnlen_P>:
    3902:	fc 01       	movw	r30, r24
    3904:	05 90       	lpm	r0, Z+
    3906:	61 50       	subi	r22, 0x01	; 1
    3908:	70 40       	sbci	r23, 0x00	; 0
    390a:	01 10       	cpse	r0, r1
    390c:	d8 f7       	brcc	.-10     	; 0x3904 <strnlen_P+0x2>
    390e:	80 95       	com	r24
    3910:	90 95       	com	r25
    3912:	8e 0f       	add	r24, r30
    3914:	9f 1f       	adc	r25, r31
    3916:	08 95       	ret

00003918 <memcpy>:
    3918:	fb 01       	movw	r30, r22
    391a:	dc 01       	movw	r26, r24
    391c:	02 c0       	rjmp	.+4      	; 0x3922 <memcpy+0xa>
    391e:	01 90       	ld	r0, Z+
    3920:	0d 92       	st	X+, r0
    3922:	41 50       	subi	r20, 0x01	; 1
    3924:	50 40       	sbci	r21, 0x00	; 0
    3926:	d8 f7       	brcc	.-10     	; 0x391e <memcpy+0x6>
    3928:	08 95       	ret

0000392a <memset>:
    392a:	dc 01       	movw	r26, r24
    392c:	01 c0       	rjmp	.+2      	; 0x3930 <memset+0x6>
    392e:	6d 93       	st	X+, r22
    3930:	41 50       	subi	r20, 0x01	; 1
    3932:	50 40       	sbci	r21, 0x00	; 0
    3934:	e0 f7       	brcc	.-8      	; 0x392e <memset+0x4>
    3936:	08 95       	ret

00003938 <strnlen>:
    3938:	fc 01       	movw	r30, r24
    393a:	61 50       	subi	r22, 0x01	; 1
    393c:	70 40       	sbci	r23, 0x00	; 0
    393e:	01 90       	ld	r0, Z+
    3940:	01 10       	cpse	r0, r1
    3942:	d8 f7       	brcc	.-10     	; 0x393a <strnlen+0x2>
    3944:	80 95       	com	r24
    3946:	90 95       	com	r25
    3948:	8e 0f       	add	r24, r30
    394a:	9f 1f       	adc	r25, r31
    394c:	08 95       	ret

0000394e <fputc>:
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	fb 01       	movw	r30, r22
    3958:	23 81       	ldd	r18, Z+3	; 0x03
    395a:	21 fd       	sbrc	r18, 1
    395c:	03 c0       	rjmp	.+6      	; 0x3964 <fputc+0x16>
    395e:	8f ef       	ldi	r24, 0xFF	; 255
    3960:	9f ef       	ldi	r25, 0xFF	; 255
    3962:	2c c0       	rjmp	.+88     	; 0x39bc <fputc+0x6e>
    3964:	22 ff       	sbrs	r18, 2
    3966:	16 c0       	rjmp	.+44     	; 0x3994 <fputc+0x46>
    3968:	46 81       	ldd	r20, Z+6	; 0x06
    396a:	57 81       	ldd	r21, Z+7	; 0x07
    396c:	24 81       	ldd	r18, Z+4	; 0x04
    396e:	35 81       	ldd	r19, Z+5	; 0x05
    3970:	42 17       	cp	r20, r18
    3972:	53 07       	cpc	r21, r19
    3974:	44 f4       	brge	.+16     	; 0x3986 <fputc+0x38>
    3976:	a0 81       	ld	r26, Z
    3978:	b1 81       	ldd	r27, Z+1	; 0x01
    397a:	9d 01       	movw	r18, r26
    397c:	2f 5f       	subi	r18, 0xFF	; 255
    397e:	3f 4f       	sbci	r19, 0xFF	; 255
    3980:	31 83       	std	Z+1, r19	; 0x01
    3982:	20 83       	st	Z, r18
    3984:	8c 93       	st	X, r24
    3986:	26 81       	ldd	r18, Z+6	; 0x06
    3988:	37 81       	ldd	r19, Z+7	; 0x07
    398a:	2f 5f       	subi	r18, 0xFF	; 255
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	37 83       	std	Z+7, r19	; 0x07
    3990:	26 83       	std	Z+6, r18	; 0x06
    3992:	14 c0       	rjmp	.+40     	; 0x39bc <fputc+0x6e>
    3994:	8b 01       	movw	r16, r22
    3996:	ec 01       	movw	r28, r24
    3998:	fb 01       	movw	r30, r22
    399a:	00 84       	ldd	r0, Z+8	; 0x08
    399c:	f1 85       	ldd	r31, Z+9	; 0x09
    399e:	e0 2d       	mov	r30, r0
    39a0:	19 95       	eicall
    39a2:	89 2b       	or	r24, r25
    39a4:	e1 f6       	brne	.-72     	; 0x395e <fputc+0x10>
    39a6:	d8 01       	movw	r26, r16
    39a8:	16 96       	adiw	r26, 0x06	; 6
    39aa:	8d 91       	ld	r24, X+
    39ac:	9c 91       	ld	r25, X
    39ae:	17 97       	sbiw	r26, 0x07	; 7
    39b0:	01 96       	adiw	r24, 0x01	; 1
    39b2:	17 96       	adiw	r26, 0x07	; 7
    39b4:	9c 93       	st	X, r25
    39b6:	8e 93       	st	-X, r24
    39b8:	16 97       	sbiw	r26, 0x06	; 6
    39ba:	ce 01       	movw	r24, r28
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	1f 91       	pop	r17
    39c2:	0f 91       	pop	r16
    39c4:	08 95       	ret

000039c6 <printf>:
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	ae 01       	movw	r20, r28
    39d0:	4a 5f       	subi	r20, 0xFA	; 250
    39d2:	5f 4f       	sbci	r21, 0xFF	; 255
    39d4:	fa 01       	movw	r30, r20
    39d6:	61 91       	ld	r22, Z+
    39d8:	71 91       	ld	r23, Z+
    39da:	af 01       	movw	r20, r30
    39dc:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__iob+0x2>
    39e0:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__iob+0x3>
    39e4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <vfprintf>
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	08 95       	ret

000039ee <puts>:
    39ee:	0f 93       	push	r16
    39f0:	1f 93       	push	r17
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <__iob+0x2>
    39fa:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <__iob+0x3>
    39fe:	23 81       	ldd	r18, Z+3	; 0x03
    3a00:	21 ff       	sbrs	r18, 1
    3a02:	1b c0       	rjmp	.+54     	; 0x3a3a <puts+0x4c>
    3a04:	8c 01       	movw	r16, r24
    3a06:	d0 e0       	ldi	r29, 0x00	; 0
    3a08:	c0 e0       	ldi	r28, 0x00	; 0
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	81 91       	ld	r24, Z+
    3a0e:	8f 01       	movw	r16, r30
    3a10:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <__iob+0x2>
    3a14:	70 91 99 03 	lds	r23, 0x0399	; 0x800399 <__iob+0x3>
    3a18:	db 01       	movw	r26, r22
    3a1a:	18 96       	adiw	r26, 0x08	; 8
    3a1c:	ed 91       	ld	r30, X+
    3a1e:	fc 91       	ld	r31, X
    3a20:	19 97       	sbiw	r26, 0x09	; 9
    3a22:	88 23       	and	r24, r24
    3a24:	31 f0       	breq	.+12     	; 0x3a32 <puts+0x44>
    3a26:	19 95       	eicall
    3a28:	89 2b       	or	r24, r25
    3a2a:	79 f3       	breq	.-34     	; 0x3a0a <puts+0x1c>
    3a2c:	df ef       	ldi	r29, 0xFF	; 255
    3a2e:	cf ef       	ldi	r28, 0xFF	; 255
    3a30:	ec cf       	rjmp	.-40     	; 0x3a0a <puts+0x1c>
    3a32:	8a e0       	ldi	r24, 0x0A	; 10
    3a34:	19 95       	eicall
    3a36:	89 2b       	or	r24, r25
    3a38:	19 f0       	breq	.+6      	; 0x3a40 <puts+0x52>
    3a3a:	8f ef       	ldi	r24, 0xFF	; 255
    3a3c:	9f ef       	ldi	r25, 0xFF	; 255
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <puts+0x56>
    3a40:	8d 2f       	mov	r24, r29
    3a42:	9c 2f       	mov	r25, r28
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	1f 91       	pop	r17
    3a4a:	0f 91       	pop	r16
    3a4c:	08 95       	ret

00003a4e <__ultoa_invert>:
    3a4e:	fa 01       	movw	r30, r20
    3a50:	aa 27       	eor	r26, r26
    3a52:	28 30       	cpi	r18, 0x08	; 8
    3a54:	51 f1       	breq	.+84     	; 0x3aaa <__ultoa_invert+0x5c>
    3a56:	20 31       	cpi	r18, 0x10	; 16
    3a58:	81 f1       	breq	.+96     	; 0x3aba <__ultoa_invert+0x6c>
    3a5a:	e8 94       	clt
    3a5c:	6f 93       	push	r22
    3a5e:	6e 7f       	andi	r22, 0xFE	; 254
    3a60:	6e 5f       	subi	r22, 0xFE	; 254
    3a62:	7f 4f       	sbci	r23, 0xFF	; 255
    3a64:	8f 4f       	sbci	r24, 0xFF	; 255
    3a66:	9f 4f       	sbci	r25, 0xFF	; 255
    3a68:	af 4f       	sbci	r26, 0xFF	; 255
    3a6a:	b1 e0       	ldi	r27, 0x01	; 1
    3a6c:	3e d0       	rcall	.+124    	; 0x3aea <__ultoa_invert+0x9c>
    3a6e:	b4 e0       	ldi	r27, 0x04	; 4
    3a70:	3c d0       	rcall	.+120    	; 0x3aea <__ultoa_invert+0x9c>
    3a72:	67 0f       	add	r22, r23
    3a74:	78 1f       	adc	r23, r24
    3a76:	89 1f       	adc	r24, r25
    3a78:	9a 1f       	adc	r25, r26
    3a7a:	a1 1d       	adc	r26, r1
    3a7c:	68 0f       	add	r22, r24
    3a7e:	79 1f       	adc	r23, r25
    3a80:	8a 1f       	adc	r24, r26
    3a82:	91 1d       	adc	r25, r1
    3a84:	a1 1d       	adc	r26, r1
    3a86:	6a 0f       	add	r22, r26
    3a88:	71 1d       	adc	r23, r1
    3a8a:	81 1d       	adc	r24, r1
    3a8c:	91 1d       	adc	r25, r1
    3a8e:	a1 1d       	adc	r26, r1
    3a90:	20 d0       	rcall	.+64     	; 0x3ad2 <__ultoa_invert+0x84>
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <__ultoa_invert+0x48>
    3a94:	68 94       	set
    3a96:	3f 91       	pop	r19
    3a98:	2a e0       	ldi	r18, 0x0A	; 10
    3a9a:	26 9f       	mul	r18, r22
    3a9c:	11 24       	eor	r1, r1
    3a9e:	30 19       	sub	r19, r0
    3aa0:	30 5d       	subi	r19, 0xD0	; 208
    3aa2:	31 93       	st	Z+, r19
    3aa4:	de f6       	brtc	.-74     	; 0x3a5c <__ultoa_invert+0xe>
    3aa6:	cf 01       	movw	r24, r30
    3aa8:	08 95       	ret
    3aaa:	46 2f       	mov	r20, r22
    3aac:	47 70       	andi	r20, 0x07	; 7
    3aae:	40 5d       	subi	r20, 0xD0	; 208
    3ab0:	41 93       	st	Z+, r20
    3ab2:	b3 e0       	ldi	r27, 0x03	; 3
    3ab4:	0f d0       	rcall	.+30     	; 0x3ad4 <__ultoa_invert+0x86>
    3ab6:	c9 f7       	brne	.-14     	; 0x3aaa <__ultoa_invert+0x5c>
    3ab8:	f6 cf       	rjmp	.-20     	; 0x3aa6 <__ultoa_invert+0x58>
    3aba:	46 2f       	mov	r20, r22
    3abc:	4f 70       	andi	r20, 0x0F	; 15
    3abe:	40 5d       	subi	r20, 0xD0	; 208
    3ac0:	4a 33       	cpi	r20, 0x3A	; 58
    3ac2:	18 f0       	brcs	.+6      	; 0x3aca <__ultoa_invert+0x7c>
    3ac4:	49 5d       	subi	r20, 0xD9	; 217
    3ac6:	31 fd       	sbrc	r19, 1
    3ac8:	40 52       	subi	r20, 0x20	; 32
    3aca:	41 93       	st	Z+, r20
    3acc:	02 d0       	rcall	.+4      	; 0x3ad2 <__ultoa_invert+0x84>
    3ace:	a9 f7       	brne	.-22     	; 0x3aba <__ultoa_invert+0x6c>
    3ad0:	ea cf       	rjmp	.-44     	; 0x3aa6 <__ultoa_invert+0x58>
    3ad2:	b4 e0       	ldi	r27, 0x04	; 4
    3ad4:	a6 95       	lsr	r26
    3ad6:	97 95       	ror	r25
    3ad8:	87 95       	ror	r24
    3ada:	77 95       	ror	r23
    3adc:	67 95       	ror	r22
    3ade:	ba 95       	dec	r27
    3ae0:	c9 f7       	brne	.-14     	; 0x3ad4 <__ultoa_invert+0x86>
    3ae2:	00 97       	sbiw	r24, 0x00	; 0
    3ae4:	61 05       	cpc	r22, r1
    3ae6:	71 05       	cpc	r23, r1
    3ae8:	08 95       	ret
    3aea:	9b 01       	movw	r18, r22
    3aec:	ac 01       	movw	r20, r24
    3aee:	0a 2e       	mov	r0, r26
    3af0:	06 94       	lsr	r0
    3af2:	57 95       	ror	r21
    3af4:	47 95       	ror	r20
    3af6:	37 95       	ror	r19
    3af8:	27 95       	ror	r18
    3afa:	ba 95       	dec	r27
    3afc:	c9 f7       	brne	.-14     	; 0x3af0 <__ultoa_invert+0xa2>
    3afe:	62 0f       	add	r22, r18
    3b00:	73 1f       	adc	r23, r19
    3b02:	84 1f       	adc	r24, r20
    3b04:	95 1f       	adc	r25, r21
    3b06:	a0 1d       	adc	r26, r0
    3b08:	08 95       	ret

00003b0a <_exit>:
    3b0a:	f8 94       	cli

00003b0c <__stop_program>:
    3b0c:	ff cf       	rjmp	.-2      	; 0x3b0c <__stop_program>
