
IMS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000588  00800200  000059f0  00005a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000059f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026b  00800788  00800788  0000600c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a58  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d8e6  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000398b  00000000  00000000  000143e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006398  00000000  00000000  00017d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020c4  00000000  00000000  0001e10c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e15  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b4b8  00000000  00000000  00023fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a68  00000000  00000000  0002f49d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c2       	rjmp	.+1292   	; 0x50e <__ctors_end>
       2:	00 00       	nop
       4:	a5 c2       	rjmp	.+1354   	; 0x550 <__bad_interrupt>
       6:	00 00       	nop
       8:	a3 c2       	rjmp	.+1350   	; 0x550 <__bad_interrupt>
       a:	00 00       	nop
       c:	a1 c2       	rjmp	.+1346   	; 0x550 <__bad_interrupt>
       e:	00 00       	nop
      10:	9f c2       	rjmp	.+1342   	; 0x550 <__bad_interrupt>
      12:	00 00       	nop
      14:	9d c2       	rjmp	.+1338   	; 0x550 <__bad_interrupt>
      16:	00 00       	nop
      18:	9b c2       	rjmp	.+1334   	; 0x550 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	99 c2       	rjmp	.+1330   	; 0x550 <__bad_interrupt>
      1e:	00 00       	nop
      20:	97 c2       	rjmp	.+1326   	; 0x550 <__bad_interrupt>
      22:	00 00       	nop
      24:	95 c2       	rjmp	.+1322   	; 0x550 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c2       	rjmp	.+1318   	; 0x550 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	91 c2       	rjmp	.+1314   	; 0x550 <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c5       	rjmp	.+2632   	; 0xa7a <__vector_12>
      32:	00 00       	nop
      34:	8d c2       	rjmp	.+1306   	; 0x550 <__bad_interrupt>
      36:	00 00       	nop
      38:	8b c2       	rjmp	.+1302   	; 0x550 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	89 c2       	rjmp	.+1298   	; 0x550 <__bad_interrupt>
      3e:	00 00       	nop
      40:	87 c2       	rjmp	.+1294   	; 0x550 <__bad_interrupt>
      42:	00 00       	nop
      44:	85 c2       	rjmp	.+1290   	; 0x550 <__bad_interrupt>
      46:	00 00       	nop
      48:	83 c2       	rjmp	.+1286   	; 0x550 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	81 c2       	rjmp	.+1282   	; 0x550 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7f c2       	rjmp	.+1278   	; 0x550 <__bad_interrupt>
      52:	00 00       	nop
      54:	7d c2       	rjmp	.+1274   	; 0x550 <__bad_interrupt>
      56:	00 00       	nop
      58:	7b c2       	rjmp	.+1270   	; 0x550 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	79 c2       	rjmp	.+1266   	; 0x550 <__bad_interrupt>
      5e:	00 00       	nop
      60:	77 c2       	rjmp	.+1262   	; 0x550 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__vector_25>
      68:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__vector_26>
      6c:	71 c2       	rjmp	.+1250   	; 0x550 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6f c2       	rjmp	.+1246   	; 0x550 <__bad_interrupt>
      72:	00 00       	nop
      74:	6d c2       	rjmp	.+1242   	; 0x550 <__bad_interrupt>
      76:	00 00       	nop
      78:	6b c2       	rjmp	.+1238   	; 0x550 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	69 c2       	rjmp	.+1234   	; 0x550 <__bad_interrupt>
      7e:	00 00       	nop
      80:	67 c2       	rjmp	.+1230   	; 0x550 <__bad_interrupt>
      82:	00 00       	nop
      84:	65 c2       	rjmp	.+1226   	; 0x550 <__bad_interrupt>
      86:	00 00       	nop
      88:	63 c2       	rjmp	.+1222   	; 0x550 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	61 c2       	rjmp	.+1218   	; 0x550 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__vector_36>
      94:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__vector_37>
      98:	5b c2       	rjmp	.+1206   	; 0x550 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__vector_39>
      a0:	57 c2       	rjmp	.+1198   	; 0x550 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	55 c2       	rjmp	.+1194   	; 0x550 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	53 c2       	rjmp	.+1190   	; 0x550 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	51 c2       	rjmp	.+1186   	; 0x550 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4f c2       	rjmp	.+1182   	; 0x550 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4d c2       	rjmp	.+1178   	; 0x550 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4b c2       	rjmp	.+1174   	; 0x550 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	49 c2       	rjmp	.+1170   	; 0x550 <__bad_interrupt>
      be:	00 00       	nop
      c0:	47 c2       	rjmp	.+1166   	; 0x550 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	45 c2       	rjmp	.+1162   	; 0x550 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	43 c2       	rjmp	.+1158   	; 0x550 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__vector_51>
      d0:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__vector_52>
      d4:	3d c2       	rjmp	.+1146   	; 0x550 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__vector_54>
      dc:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <__vector_55>
      e0:	37 c2       	rjmp	.+1134   	; 0x550 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 02       	muls	r17, r22
      e6:	16 02       	muls	r17, r22
      e8:	16 02       	muls	r17, r22
      ea:	45 02       	muls	r20, r21
      ec:	4d 02       	muls	r20, r29
      ee:	5c 02       	muls	r21, r28
      f0:	16 02       	muls	r17, r22
      f2:	16 02       	muls	r17, r22
      f4:	45 02       	muls	r20, r21
      f6:	4d 02       	muls	r20, r29
      f8:	87 27       	eor	r24, r23
      fa:	f7 27       	eor	r31, r23
      fc:	f7 27       	eor	r31, r23
      fe:	f7 27       	eor	r31, r23
     100:	f7 27       	eor	r31, r23
     102:	f7 27       	eor	r31, r23
     104:	f7 27       	eor	r31, r23
     106:	f7 27       	eor	r31, r23
     108:	87 27       	eor	r24, r23
     10a:	f7 27       	eor	r31, r23
     10c:	f7 27       	eor	r31, r23
     10e:	f7 27       	eor	r31, r23
     110:	f7 27       	eor	r31, r23
     112:	f7 27       	eor	r31, r23
     114:	f7 27       	eor	r31, r23
     116:	f7 27       	eor	r31, r23
     118:	89 27       	eor	r24, r25
     11a:	f7 27       	eor	r31, r23
     11c:	f7 27       	eor	r31, r23
     11e:	f7 27       	eor	r31, r23
     120:	f7 27       	eor	r31, r23
     122:	f7 27       	eor	r31, r23
     124:	f7 27       	eor	r31, r23
     126:	f7 27       	eor	r31, r23
     128:	f7 27       	eor	r31, r23
     12a:	f7 27       	eor	r31, r23
     12c:	f7 27       	eor	r31, r23
     12e:	f7 27       	eor	r31, r23
     130:	f7 27       	eor	r31, r23
     132:	f7 27       	eor	r31, r23
     134:	f7 27       	eor	r31, r23
     136:	f7 27       	eor	r31, r23
     138:	89 27       	eor	r24, r25
     13a:	f7 27       	eor	r31, r23
     13c:	f7 27       	eor	r31, r23
     13e:	f7 27       	eor	r31, r23
     140:	f7 27       	eor	r31, r23
     142:	f7 27       	eor	r31, r23
     144:	f7 27       	eor	r31, r23
     146:	f7 27       	eor	r31, r23
     148:	f7 27       	eor	r31, r23
     14a:	f7 27       	eor	r31, r23
     14c:	f7 27       	eor	r31, r23
     14e:	f7 27       	eor	r31, r23
     150:	f7 27       	eor	r31, r23
     152:	f7 27       	eor	r31, r23
     154:	f7 27       	eor	r31, r23
     156:	f7 27       	eor	r31, r23
     158:	f3 27       	eor	r31, r19
     15a:	f7 27       	eor	r31, r23
     15c:	f7 27       	eor	r31, r23
     15e:	f7 27       	eor	r31, r23
     160:	f7 27       	eor	r31, r23
     162:	f7 27       	eor	r31, r23
     164:	f7 27       	eor	r31, r23
     166:	f7 27       	eor	r31, r23
     168:	be 27       	eor	r27, r30
     16a:	f7 27       	eor	r31, r23
     16c:	f7 27       	eor	r31, r23
     16e:	f7 27       	eor	r31, r23
     170:	f7 27       	eor	r31, r23
     172:	f7 27       	eor	r31, r23
     174:	f7 27       	eor	r31, r23
     176:	f7 27       	eor	r31, r23
     178:	f7 27       	eor	r31, r23
     17a:	f7 27       	eor	r31, r23
     17c:	f7 27       	eor	r31, r23
     17e:	f7 27       	eor	r31, r23
     180:	f7 27       	eor	r31, r23
     182:	f7 27       	eor	r31, r23
     184:	f7 27       	eor	r31, r23
     186:	f7 27       	eor	r31, r23
     188:	b2 27       	eor	r27, r18
     18a:	f7 27       	eor	r31, r23
     18c:	f7 27       	eor	r31, r23
     18e:	f7 27       	eor	r31, r23
     190:	f7 27       	eor	r31, r23
     192:	f7 27       	eor	r31, r23
     194:	f7 27       	eor	r31, r23
     196:	f7 27       	eor	r31, r23
     198:	d6 27       	eor	r29, r22

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	00 ea       	ldi	r16, 0xA0	; 160
     29e:	17 e0       	ldi	r17, 0x07	; 7
     2a0:	0f 2e       	mov	r0, r31
     2a2:	f8 ec       	ldi	r31, 0xC8	; 200
     2a4:	ef 2e       	mov	r14, r31
     2a6:	f7 e0       	ldi	r31, 0x07	; 7
     2a8:	ff 2e       	mov	r15, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxDeletedTasksWaitingCleanUp>
     2b0:	88 23       	and	r24, r24
     2b2:	11 f1       	breq	.+68     	; 0x2f8 <prvIdleTask+0x5c>
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	0f 92       	push	r0
     2ba:	d8 01       	movw	r26, r16
     2bc:	15 96       	adiw	r26, 0x05	; 5
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	16 97       	sbiw	r26, 0x06	; 6
     2c4:	c6 81       	ldd	r28, Z+6	; 0x06
     2c6:	d7 81       	ldd	r29, Z+7	; 0x07
     2c8:	ce 01       	movw	r24, r28
     2ca:	02 96       	adiw	r24, 0x02	; 2
     2cc:	3c d2       	rcall	.+1144   	; 0x746 <uxListRemove>
     2ce:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <uxCurrentNumberOfTasks>
     2d2:	81 50       	subi	r24, 0x01	; 1
     2d4:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <uxCurrentNumberOfTasks>
     2d8:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxDeletedTasksWaitingCleanUp>
     2dc:	81 50       	subi	r24, 0x01	; 1
     2de:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <uxDeletedTasksWaitingCleanUp>
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	8f 89       	ldd	r24, Y+23	; 0x17
     2e8:	98 8d       	ldd	r25, Y+24	; 0x18
     2ea:	ba d1       	rcall	.+884    	; 0x660 <vPortFree>
     2ec:	ce 01       	movw	r24, r28
     2ee:	b8 d1       	rcall	.+880    	; 0x660 <vPortFree>
     2f0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxDeletedTasksWaitingCleanUp>
     2f4:	81 11       	cpse	r24, r1
     2f6:	de cf       	rjmp	.-68     	; 0x2b4 <prvIdleTask+0x18>
     2f8:	f7 01       	movw	r30, r14
     2fa:	80 81       	ld	r24, Z
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	08 f0       	brcs	.+2      	; 0x302 <prvIdleTask+0x66>
     300:	f7 d2       	rcall	.+1518   	; 0x8f0 <vPortYield>
     302:	0e 94 b0 13 	call	0x2760	; 0x2760 <vApplicationIdleHook>
     306:	d2 cf       	rjmp	.-92     	; 0x2ac <prvIdleTask+0x10>

00000308 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <prvTimerTask+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <prvTimerTask+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     31a:	44 24       	eor	r4, r4
     31c:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     31e:	e1 2c       	mov	r14, r1
     320:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     322:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     324:	c8 2e       	mov	r12, r24
     326:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     328:	e0 91 f6 07 	lds	r30, 0x07F6	; 0x8007f6 <pxCurrentTimerList>
     32c:	f0 91 f7 07 	lds	r31, 0x07F7	; 0x8007f7 <pxCurrentTimerList+0x1>
     330:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     332:	88 23       	and	r24, r24
     334:	09 f4       	brne	.+2      	; 0x338 <prvTimerTask+0x30>
     336:	d7 c0       	rjmp	.+430    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     338:	05 80       	ldd	r0, Z+5	; 0x05
     33a:	f6 81       	ldd	r31, Z+6	; 0x06
     33c:	e0 2d       	mov	r30, r0
     33e:	a0 80       	ld	r10, Z
     340:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     342:	0e 94 ab 0c 	call	0x1956	; 0x1956 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     346:	c4 01       	movw	r24, r8
     348:	0e 94 42 13 	call	0x2684	; 0x2684 <prvSampleTimeNow>
     34c:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	81 11       	cpse	r24, r1
     352:	48 c0       	rjmp	.+144    	; 0x3e4 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     354:	0a 15       	cp	r16, r10
     356:	1b 05       	cpc	r17, r11
     358:	b0 f1       	brcs	.+108    	; 0x3c6 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     35a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     35e:	e0 91 f6 07 	lds	r30, 0x07F6	; 0x8007f6 <pxCurrentTimerList>
     362:	f0 91 f7 07 	lds	r31, 0x07F7	; 0x8007f7 <pxCurrentTimerList+0x1>
     366:	05 80       	ldd	r0, Z+5	; 0x05
     368:	f6 81       	ldd	r31, Z+6	; 0x06
     36a:	e0 2d       	mov	r30, r0
     36c:	66 80       	ldd	r6, Z+6	; 0x06
     36e:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     370:	c3 01       	movw	r24, r6
     372:	02 96       	adiw	r24, 0x02	; 2
     374:	e8 d1       	rcall	.+976    	; 0x746 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     376:	d3 01       	movw	r26, r6
     378:	53 96       	adiw	r26, 0x13	; 19
     37a:	8c 91       	ld	r24, X
     37c:	53 97       	sbiw	r26, 0x13	; 19
     37e:	82 ff       	sbrs	r24, 2
     380:	17 c0       	rjmp	.+46     	; 0x3b0 <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     382:	1c 96       	adiw	r26, 0x0c	; 12
     384:	6d 91       	ld	r22, X+
     386:	7c 91       	ld	r23, X
     388:	1d 97       	sbiw	r26, 0x0d	; 13
     38a:	6a 0d       	add	r22, r10
     38c:	7b 1d       	adc	r23, r11
     38e:	95 01       	movw	r18, r10
     390:	a8 01       	movw	r20, r16
     392:	c3 01       	movw	r24, r6
     394:	0e 94 4d 12 	call	0x249a	; 0x249a <prvInsertTimerInActiveList>
     398:	88 23       	and	r24, r24
     39a:	69 f0       	breq	.+26     	; 0x3b6 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     39c:	0e 2d       	mov	r16, r14
     39e:	1f 2d       	mov	r17, r15
     3a0:	2e 2d       	mov	r18, r14
     3a2:	3f 2d       	mov	r19, r15
     3a4:	a5 01       	movw	r20, r10
     3a6:	65 2d       	mov	r22, r5
     3a8:	c3 01       	movw	r24, r6
     3aa:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <xTimerGenericCommand>
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3b0:	8e 7f       	andi	r24, 0xFE	; 254
     3b2:	f3 01       	movw	r30, r6
     3b4:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     3b6:	d3 01       	movw	r26, r6
     3b8:	50 96       	adiw	r26, 0x10	; 16
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	51 97       	sbiw	r26, 0x11	; 17
     3c0:	c3 01       	movw	r24, r6
     3c2:	19 95       	eicall
     3c4:	84 c0       	rjmp	.+264    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     3c6:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     3c8:	b5 01       	movw	r22, r10
     3ca:	60 1b       	sub	r22, r16
     3cc:	71 0b       	sbc	r23, r17
     3ce:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xTimerQueue>
     3d2:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
     3d6:	af d6       	rcall	.+3422   	; 0x1136 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     3d8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xTaskResumeAll>
     3dc:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     3de:	77 c0       	rjmp	.+238    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     3e0:	87 d2       	rcall	.+1294   	; 0x8f0 <vPortYield>
     3e2:	75 c0       	rjmp	.+234    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     3e4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xTaskResumeAll>
     3e8:	72 c0       	rjmp	.+228    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	88 23       	and	r24, r24
     3ee:	0c f4       	brge	.+2      	; 0x3f2 <prvTimerTask+0xea>
     3f0:	6e c0       	rjmp	.+220    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     3f2:	ac 80       	ldd	r10, Y+4	; 0x04
     3f4:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     3f6:	f5 01       	movw	r30, r10
     3f8:	82 85       	ldd	r24, Z+10	; 0x0a
     3fa:	93 85       	ldd	r25, Z+11	; 0x0b
     3fc:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     400:	c5 01       	movw	r24, r10
     402:	02 96       	adiw	r24, 0x02	; 2
     404:	a0 d1       	rcall	.+832    	; 0x746 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     406:	ce 01       	movw	r24, r28
     408:	06 96       	adiw	r24, 0x06	; 6
     40a:	0e 94 42 13 	call	0x2684	; 0x2684 <prvSampleTimeNow>
     40e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     410:	e9 81       	ldd	r30, Y+1	; 0x01
     412:	0e 2e       	mov	r0, r30
     414:	00 0c       	add	r0, r0
     416:	ff 0b       	sbc	r31, r31
     418:	ea 30       	cpi	r30, 0x0A	; 10
     41a:	f1 05       	cpc	r31, r1
     41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	57 c0       	rjmp	.+174    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     420:	88 27       	eor	r24, r24
     422:	ee 58       	subi	r30, 0x8E	; 142
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	8f 4f       	sbci	r24, 0xFF	; 255
     428:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     42c:	d5 01       	movw	r26, r10
     42e:	53 96       	adiw	r26, 0x13	; 19
     430:	8c 91       	ld	r24, X
     432:	53 97       	sbiw	r26, 0x13	; 19
     434:	81 60       	ori	r24, 0x01	; 1
     436:	53 96       	adiw	r26, 0x13	; 19
     438:	8c 93       	st	X, r24
     43a:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     43c:	2a 81       	ldd	r18, Y+2	; 0x02
     43e:	3b 81       	ldd	r19, Y+3	; 0x03
     440:	1c 96       	adiw	r26, 0x0c	; 12
     442:	6d 91       	ld	r22, X+
     444:	7c 91       	ld	r23, X
     446:	1d 97       	sbiw	r26, 0x0d	; 13
     448:	62 0f       	add	r22, r18
     44a:	73 1f       	adc	r23, r19
     44c:	c5 01       	movw	r24, r10
     44e:	0e 94 4d 12 	call	0x249a	; 0x249a <prvInsertTimerInActiveList>
     452:	88 23       	and	r24, r24
     454:	e1 f1       	breq	.+120    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     456:	d5 01       	movw	r26, r10
     458:	50 96       	adiw	r26, 0x10	; 16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	51 97       	sbiw	r26, 0x11	; 17
     460:	c5 01       	movw	r24, r10
     462:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     464:	f5 01       	movw	r30, r10
     466:	83 89       	ldd	r24, Z+19	; 0x13
     468:	82 ff       	sbrs	r24, 2
     46a:	31 c0       	rjmp	.+98     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     46c:	4a 81       	ldd	r20, Y+2	; 0x02
     46e:	5b 81       	ldd	r21, Y+3	; 0x03
     470:	84 85       	ldd	r24, Z+12	; 0x0c
     472:	95 85       	ldd	r25, Z+13	; 0x0d
     474:	48 0f       	add	r20, r24
     476:	59 1f       	adc	r21, r25
     478:	0e 2d       	mov	r16, r14
     47a:	1f 2d       	mov	r17, r15
     47c:	2e 2d       	mov	r18, r14
     47e:	3f 2d       	mov	r19, r15
     480:	65 2d       	mov	r22, r5
     482:	c5 01       	movw	r24, r10
     484:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <xTimerGenericCommand>
     488:	22 c0       	rjmp	.+68     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     48a:	d5 01       	movw	r26, r10
     48c:	53 96       	adiw	r26, 0x13	; 19
     48e:	8c 91       	ld	r24, X
     490:	53 97       	sbiw	r26, 0x13	; 19
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	53 96       	adiw	r26, 0x13	; 19
     496:	8c 93       	st	X, r24
     498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     49a:	f5 01       	movw	r30, r10
     49c:	83 89       	ldd	r24, Z+19	; 0x13
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     4a2:	6a 81       	ldd	r22, Y+2	; 0x02
     4a4:	7b 81       	ldd	r23, Y+3	; 0x03
     4a6:	75 87       	std	Z+13, r23	; 0x0d
     4a8:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     4aa:	64 0f       	add	r22, r20
     4ac:	75 1f       	adc	r23, r21
     4ae:	9a 01       	movw	r18, r20
     4b0:	c5 01       	movw	r24, r10
     4b2:	0e 94 4d 12 	call	0x249a	; 0x249a <prvInsertTimerInActiveList>
     4b6:	0b c0       	rjmp	.+22     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     4b8:	d5 01       	movw	r26, r10
     4ba:	53 96       	adiw	r26, 0x13	; 19
     4bc:	8c 91       	ld	r24, X
     4be:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c2:	c5 01       	movw	r24, r10
     4c4:	cd d0       	rcall	.+410    	; 0x660 <vPortFree>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     4c8:	8e 7f       	andi	r24, 0xFE	; 254
     4ca:	f5 01       	movw	r30, r10
     4cc:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     4ce:	4e 2d       	mov	r20, r14
     4d0:	5f 2d       	mov	r21, r15
     4d2:	6c 2d       	mov	r22, r12
     4d4:	7d 2d       	mov	r23, r13
     4d6:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xTimerQueue>
     4da:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
     4de:	de d4       	rcall	.+2492   	; 0xe9c <xQueueReceive>
     4e0:	81 11       	cpse	r24, r1
     4e2:	83 cf       	rjmp	.-250    	; 0x3ea <prvTimerTask+0xe2>
     4e4:	21 cf       	rjmp	.-446    	; 0x328 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     4e6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     4ea:	c4 01       	movw	r24, r8
     4ec:	0e 94 42 13 	call	0x2684	; 0x2684 <prvSampleTimeNow>
     4f0:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	81 11       	cpse	r24, r1
     4f6:	76 cf       	rjmp	.-276    	; 0x3e4 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     4f8:	e0 91 f4 07 	lds	r30, 0x07F4	; 0x8007f4 <pxOverflowTimerList>
     4fc:	f0 91 f5 07 	lds	r31, 0x07F5	; 0x8007f5 <pxOverflowTimerList+0x1>
     500:	80 81       	ld	r24, Z
     502:	44 2d       	mov	r20, r4
     504:	81 11       	cpse	r24, r1
     506:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     508:	ae 2c       	mov	r10, r14
     50a:	bf 2c       	mov	r11, r15
     50c:	5d cf       	rjmp	.-326    	; 0x3c8 <prvTimerTask+0xc0>

0000050e <__ctors_end>:
     50e:	11 24       	eor	r1, r1
     510:	1f be       	out	0x3f, r1	; 63
     512:	cf ef       	ldi	r28, 0xFF	; 255
     514:	d1 e2       	ldi	r29, 0x21	; 33
     516:	de bf       	out	0x3e, r29	; 62
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	0c bf       	out	0x3c, r16	; 60

0000051e <__do_copy_data>:
     51e:	17 e0       	ldi	r17, 0x07	; 7
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	b2 e0       	ldi	r27, 0x02	; 2
     524:	e0 ef       	ldi	r30, 0xF0	; 240
     526:	f9 e5       	ldi	r31, 0x59	; 89
     528:	00 e0       	ldi	r16, 0x00	; 0
     52a:	0b bf       	out	0x3b, r16	; 59
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__do_copy_data+0x14>
     52e:	07 90       	elpm	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	a8 38       	cpi	r26, 0x88	; 136
     534:	b1 07       	cpc	r27, r17
     536:	d9 f7       	brne	.-10     	; 0x52e <__do_copy_data+0x10>

00000538 <__do_clear_bss>:
     538:	29 e0       	ldi	r18, 0x09	; 9
     53a:	a8 e8       	ldi	r26, 0x88	; 136
     53c:	b7 e0       	ldi	r27, 0x07	; 7
     53e:	01 c0       	rjmp	.+2      	; 0x542 <.do_clear_bss_start>

00000540 <.do_clear_bss_loop>:
     540:	1d 92       	st	X+, r1

00000542 <.do_clear_bss_start>:
     542:	a3 3f       	cpi	r26, 0xF3	; 243
     544:	b2 07       	cpc	r27, r18
     546:	e1 f7       	brne	.-8      	; 0x540 <.do_clear_bss_loop>
     548:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <main>
     54c:	0c 94 f6 2c 	jmp	0x59ec	; 0x59ec <_exit>

00000550 <__bad_interrupt>:
     550:	57 cd       	rjmp	.-1362   	; 0x0 <__vectors>

00000552 <co2_tsk>:
extern SemaphoreHandle_t semphCO2;
extern QueueHandle_t xPayloadQueue;
extern RELOAD_PERIOD;
static uint16_t default_co2 = 0xffff;
mh_z19_return_code_t rc;
void co2_tsk(void *pvParameters) {
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <co2_tsk+0x6>
     558:	1f 92       	push	r1
     55a:	1f 92       	push	r1
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xStatus;
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
     560:	0e 94 b1 0c 	call	0x1962	; 0x1962 <xTaskGetTickCount>
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	89 83       	std	Y+1, r24	; 0x01
	
	sample_t lValueToSend;
	lValueToSend.s_src=CO2;
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	8b 83       	std	Y+3, r24	; 0x03
	lValueToSend.s_value=default_co2;
     56c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <default_co2>
     570:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <default_co2+0x1>
     574:	9d 83       	std	Y+5, r25	; 0x05
     576:	8c 83       	std	Y+4, r24	; 0x04
	
	

	
	while(1) {
		xSemaphoreTake(semphCO2,0);
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <semphCO2>
     580:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <semphCO2+0x1>
     584:	14 d5       	rcall	.+2600   	; 0xfae <xQueueSemaphoreTake>
		{
			rc = mh_z19_take_meassuring();
     586:	0e 94 7d 22 	call	0x44fa	; 0x44fa <mh_z19_take_meassuring>
     58a:	80 93 c8 09 	sts	0x09C8, r24	; 0x8009c8 <rc>
			if (rc != MHZ19_OK )
     58e:	88 23       	and	r24, r24
     590:	29 f0       	breq	.+10     	; 0x59c <co2_tsk+0x4a>
			{
			// something went wrong
			printf("no co2\n");
     592:	80 e5       	ldi	r24, 0x50	; 80
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
     59a:	0c c0       	rjmp	.+24     	; 0x5b4 <co2_tsk+0x62>
			}
			else{
			mh_z19_get_co2_ppm(default_co2);
     59c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <default_co2>
     5a0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <default_co2+0x1>
     5a4:	0e 94 ac 22 	call	0x4558	; 0x4558 <mh_z19_get_co2_ppm>
			lValueToSend.s_value=default_co2;
     5a8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <default_co2>
     5ac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <default_co2+0x1>
     5b0:	9d 83       	std	Y+5, r25	; 0x05
     5b2:	8c 83       	std	Y+4, r24	; 0x04
			}
			xStatus = xQueueSendToBack( xPayloadQueue, &lValueToSend, 0 );
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	be 01       	movw	r22, r28
     5bc:	6d 5f       	subi	r22, 0xFD	; 253
     5be:	7f 4f       	sbci	r23, 0xFF	; 255
     5c0:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <xPayloadQueue>
     5c4:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <xPayloadQueue+0x1>
     5c8:	9c d3       	rcall	.+1848   	; 0xd02 <xQueueGenericSend>
			if( xStatus != pdPASS )
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	61 f0       	breq	.+24     	; 0x5e6 <co2_tsk+0x94>
			{
						
				printf( "Task2 Could not send to the queue.\r\n" );
     5ce:	87 e5       	ldi	r24, 0x57	; 87
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
				vTaskDelayUntil(&xLastExecutionTime,RELOAD_PERIOD);
     5d6:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <RELOAD_PERIOD>
     5da:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <RELOAD_PERIOD+0x1>
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vTaskDelayUntil>
			}

			//lValueToSend.s_value ++;
			vTaskDelayUntil(&xLastExecutionTime,RELOAD_PERIOD);
     5e6:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <RELOAD_PERIOD>
     5ea:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <RELOAD_PERIOD+0x1>
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vTaskDelayUntil>
			
		}

		
	}
     5f6:	c0 cf       	rjmp	.-128    	; 0x578 <co2_tsk+0x26>

000005f8 <my_co2_call_back>:
	vTaskDelete(NULL);
}
void my_co2_call_back(uint16_t ppm)
{
	default_co2=ppm;
     5f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <default_co2>
     5fc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <default_co2+0x1>
	printf("co2 is %d\n",default_co2);
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	8b e7       	ldi	r24, 0x7B	; 123
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>
}
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	08 95       	ret

0000061a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     61a:	e8 e0       	ldi	r30, 0x08	; 8
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	90 81       	ld	r25, Z
     620:	90 7f       	andi	r25, 0xF0	; 240
     622:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     624:	90 81       	ld	r25, Z
     626:	8f 70       	andi	r24, 0x0F	; 15
     628:	98 2b       	or	r25, r24
     62a:	90 83       	st	Z, r25
     62c:	08 95       	ret

0000062e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     62e:	e8 e0       	ldi	r30, 0x08	; 8
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	80 81       	ld	r24, Z
     634:	80 7f       	andi	r24, 0xF0	; 240
     636:	80 83       	st	Z, r24
     638:	08 95       	ret

0000063a <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     640:	0e 94 ab 0c 	call	0x1956	; 0x1956 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     644:	ce 01       	movw	r24, r28
     646:	0e 94 9c 29 	call	0x5338	; 0x5338 <malloc>
     64a:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     64c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     650:	20 97       	sbiw	r28, 0x00	; 0
     652:	11 f4       	brne	.+4      	; 0x658 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     654:	0e 94 b1 13 	call	0x2762	; 0x2762 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     658:	ce 01       	movw	r24, r28
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
    if( pv )
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	41 f0       	breq	.+16     	; 0x678 <vPortFree+0x18>
     668:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     66a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <vTaskSuspendAll>
        {
            free( pv );
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 34 2a 	call	0x5468	; 0x5468 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     674:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xTaskResumeAll>
    }
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     67e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     680:	03 96       	adiw	r24, 0x03	; 3
     682:	92 83       	std	Z+2, r25	; 0x02
     684:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     686:	2f ef       	ldi	r18, 0xFF	; 255
     688:	3f ef       	ldi	r19, 0xFF	; 255
     68a:	34 83       	std	Z+4, r19	; 0x04
     68c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     68e:	96 83       	std	Z+6, r25	; 0x06
     690:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     692:	90 87       	std	Z+8, r25	; 0x08
     694:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     696:	10 82       	st	Z, r1
     698:	08 95       	ret

0000069a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     69a:	fc 01       	movw	r30, r24
     69c:	11 86       	std	Z+9, r1	; 0x09
     69e:	10 86       	std	Z+8, r1	; 0x08
     6a0:	08 95       	ret

000006a2 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	9c 01       	movw	r18, r24
     6a8:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     6aa:	dc 01       	movw	r26, r24
     6ac:	11 96       	adiw	r26, 0x01	; 1
     6ae:	cd 91       	ld	r28, X+
     6b0:	dc 91       	ld	r29, X
     6b2:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     6b4:	d3 83       	std	Z+3, r29	; 0x03
     6b6:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     6b8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ba:	9d 81       	ldd	r25, Y+5	; 0x05
     6bc:	95 83       	std	Z+5, r25	; 0x05
     6be:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	9d 81       	ldd	r25, Y+5	; 0x05
     6c4:	dc 01       	movw	r26, r24
     6c6:	13 96       	adiw	r26, 0x03	; 3
     6c8:	7c 93       	st	X, r23
     6ca:	6e 93       	st	-X, r22
     6cc:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     6ce:	7d 83       	std	Y+5, r23	; 0x05
     6d0:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     6d2:	31 87       	std	Z+9, r19	; 0x09
     6d4:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     6d6:	f9 01       	movw	r30, r18
     6d8:	80 81       	ld	r24, Z
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	80 83       	st	Z, r24
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6ea:	48 81       	ld	r20, Y
     6ec:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6ee:	4f 3f       	cpi	r20, 0xFF	; 255
     6f0:	2f ef       	ldi	r18, 0xFF	; 255
     6f2:	52 07       	cpc	r21, r18
     6f4:	21 f4       	brne	.+8      	; 0x6fe <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6f6:	fc 01       	movw	r30, r24
     6f8:	a7 81       	ldd	r26, Z+7	; 0x07
     6fa:	b0 85       	ldd	r27, Z+8	; 0x08
     6fc:	0d c0       	rjmp	.+26     	; 0x718 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6fe:	dc 01       	movw	r26, r24
     700:	13 96       	adiw	r26, 0x03	; 3
     702:	01 c0       	rjmp	.+2      	; 0x706 <vListInsert+0x22>
     704:	df 01       	movw	r26, r30
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	ed 91       	ld	r30, X+
     70a:	fc 91       	ld	r31, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	20 81       	ld	r18, Z
     710:	31 81       	ldd	r19, Z+1	; 0x01
     712:	42 17       	cp	r20, r18
     714:	53 07       	cpc	r21, r19
     716:	b0 f7       	brcc	.-20     	; 0x704 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     718:	12 96       	adiw	r26, 0x02	; 2
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	13 97       	sbiw	r26, 0x03	; 3
     720:	fb 83       	std	Y+3, r31	; 0x03
     722:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     724:	d5 83       	std	Z+5, r29	; 0x05
     726:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     728:	bd 83       	std	Y+5, r27	; 0x05
     72a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     72c:	13 96       	adiw	r26, 0x03	; 3
     72e:	dc 93       	st	X, r29
     730:	ce 93       	st	-X, r28
     732:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     734:	99 87       	std	Y+9, r25	; 0x09
     736:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     738:	fc 01       	movw	r30, r24
     73a:	20 81       	ld	r18, Z
     73c:	2f 5f       	subi	r18, 0xFF	; 255
     73e:	20 83       	st	Z, r18
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     74c:	a0 85       	ldd	r26, Z+8	; 0x08
     74e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     750:	c2 81       	ldd	r28, Z+2	; 0x02
     752:	d3 81       	ldd	r29, Z+3	; 0x03
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	95 81       	ldd	r25, Z+5	; 0x05
     758:	9d 83       	std	Y+5, r25	; 0x05
     75a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     75c:	c4 81       	ldd	r28, Z+4	; 0x04
     75e:	d5 81       	ldd	r29, Z+5	; 0x05
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	93 81       	ldd	r25, Z+3	; 0x03
     764:	9b 83       	std	Y+3, r25	; 0x03
     766:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     768:	11 96       	adiw	r26, 0x01	; 1
     76a:	8d 91       	ld	r24, X+
     76c:	9c 91       	ld	r25, X
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	e8 17       	cp	r30, r24
     772:	f9 07       	cpc	r31, r25
     774:	31 f4       	brne	.+12     	; 0x782 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     776:	84 81       	ldd	r24, Z+4	; 0x04
     778:	95 81       	ldd	r25, Z+5	; 0x05
     77a:	12 96       	adiw	r26, 0x02	; 2
     77c:	9c 93       	st	X, r25
     77e:	8e 93       	st	-X, r24
     780:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     782:	11 86       	std	Z+9, r1	; 0x09
     784:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     786:	8c 91       	ld	r24, X
     788:	81 50       	subi	r24, 0x01	; 1
     78a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     78c:	8c 91       	ld	r24, X
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     794:	31 e1       	ldi	r19, 0x11	; 17
     796:	fc 01       	movw	r30, r24
     798:	30 83       	st	Z, r19
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	22 e2       	ldi	r18, 0x22	; 34
     79e:	20 83       	st	Z, r18
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	a3 e3       	ldi	r26, 0x33	; 51
     7a4:	a0 83       	st	Z, r26
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	60 83       	st	Z, r22
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	70 83       	st	Z, r23
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	10 82       	st	Z, r1
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	10 82       	st	Z, r1
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	60 e8       	ldi	r22, 0x80	; 128
     7ba:	60 83       	st	Z, r22
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	10 82       	st	Z, r1
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	10 82       	st	Z, r1
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	10 82       	st	Z, r1
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	62 e0       	ldi	r22, 0x02	; 2
     7cc:	60 83       	st	Z, r22
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	60 83       	st	Z, r22
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	64 e0       	ldi	r22, 0x04	; 4
     7d8:	60 83       	st	Z, r22
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	65 e0       	ldi	r22, 0x05	; 5
     7de:	60 83       	st	Z, r22
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	66 e0       	ldi	r22, 0x06	; 6
     7e4:	60 83       	st	Z, r22
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	67 e0       	ldi	r22, 0x07	; 7
     7ea:	60 83       	st	Z, r22
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	68 e0       	ldi	r22, 0x08	; 8
     7f0:	60 83       	st	Z, r22
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	69 e0       	ldi	r22, 0x09	; 9
     7f6:	60 83       	st	Z, r22
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	60 e1       	ldi	r22, 0x10	; 16
     7fc:	60 83       	st	Z, r22
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	30 83       	st	Z, r19
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	32 e1       	ldi	r19, 0x12	; 18
     806:	30 83       	st	Z, r19
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	33 e1       	ldi	r19, 0x13	; 19
     80c:	30 83       	st	Z, r19
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	34 e1       	ldi	r19, 0x14	; 20
     812:	30 83       	st	Z, r19
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	35 e1       	ldi	r19, 0x15	; 21
     818:	30 83       	st	Z, r19
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	36 e1       	ldi	r19, 0x16	; 22
     81e:	30 83       	st	Z, r19
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	37 e1       	ldi	r19, 0x17	; 23
     824:	30 83       	st	Z, r19
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	38 e1       	ldi	r19, 0x18	; 24
     82a:	30 83       	st	Z, r19
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	39 e1       	ldi	r19, 0x19	; 25
     830:	30 83       	st	Z, r19
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	30 e2       	ldi	r19, 0x20	; 32
     836:	30 83       	st	Z, r19
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	31 e2       	ldi	r19, 0x21	; 33
     83c:	30 83       	st	Z, r19
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	20 83       	st	Z, r18
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	23 e2       	ldi	r18, 0x23	; 35
     846:	20 83       	st	Z, r18
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	40 83       	st	Z, r20
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	50 83       	st	Z, r21
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	26 e2       	ldi	r18, 0x26	; 38
     854:	20 83       	st	Z, r18
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	27 e2       	ldi	r18, 0x27	; 39
     85a:	20 83       	st	Z, r18
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	28 e2       	ldi	r18, 0x28	; 40
     860:	20 83       	st	Z, r18
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	29 e2       	ldi	r18, 0x29	; 41
     866:	20 83       	st	Z, r18
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	20 e3       	ldi	r18, 0x30	; 48
     86c:	20 83       	st	Z, r18
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	21 e3       	ldi	r18, 0x31	; 49
     872:	20 83       	st	Z, r18
     874:	89 97       	sbiw	r24, 0x29	; 41
     876:	08 95       	ret

00000878 <xPortStartScheduler>:
     878:	a8 95       	wdr
     87a:	90 ec       	ldi	r25, 0xC0	; 192
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	a8 95       	wdr
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     888:	0f be       	out	0x3f, r0	; 63
     88a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     88e:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
     892:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
     896:	cd 91       	ld	r28, X+
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	dd 91       	ld	r29, X+
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	bf 91       	pop	r27
     8a8:	af 91       	pop	r26
     8aa:	9f 91       	pop	r25
     8ac:	8f 91       	pop	r24
     8ae:	7f 91       	pop	r23
     8b0:	6f 91       	pop	r22
     8b2:	5f 91       	pop	r21
     8b4:	4f 91       	pop	r20
     8b6:	3f 91       	pop	r19
     8b8:	2f 91       	pop	r18
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	9f 90       	pop	r9
     8cc:	8f 90       	pop	r8
     8ce:	7f 90       	pop	r7
     8d0:	6f 90       	pop	r6
     8d2:	5f 90       	pop	r5
     8d4:	4f 90       	pop	r4
     8d6:	3f 90       	pop	r3
     8d8:	2f 90       	pop	r2
     8da:	1f 90       	pop	r1
     8dc:	0f 90       	pop	r0
     8de:	0c be       	out	0x3c, r0	; 60
     8e0:	0f 90       	pop	r0
     8e2:	0b be       	out	0x3b, r0	; 59
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	08 95       	ret
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	08 95       	ret

000008f0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	0f 92       	push	r0
     8f8:	0b b6       	in	r0, 0x3b	; 59
     8fa:	0f 92       	push	r0
     8fc:	0c b6       	in	r0, 0x3c	; 60
     8fe:	0f 92       	push	r0
     900:	1f 92       	push	r1
     902:	11 24       	eor	r1, r1
     904:	2f 92       	push	r2
     906:	3f 92       	push	r3
     908:	4f 92       	push	r4
     90a:	5f 92       	push	r5
     90c:	6f 92       	push	r6
     90e:	7f 92       	push	r7
     910:	8f 92       	push	r8
     912:	9f 92       	push	r9
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ef 93       	push	r30
     93e:	ff 93       	push	r31
     940:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
     944:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
     948:	0d b6       	in	r0, 0x3d	; 61
     94a:	0d 92       	st	X+, r0
     94c:	0e b6       	in	r0, 0x3e	; 62
     94e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     950:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     954:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
     958:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
     95c:	cd 91       	ld	r28, X+
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	dd 91       	ld	r29, X+
     962:	de bf       	out	0x3e, r29	; 62
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	1f 90       	pop	r1
     9a2:	0f 90       	pop	r0
     9a4:	0c be       	out	0x3c, r0	; 60
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9b0:	08 95       	ret

000009b2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	0f 92       	push	r0
     9ba:	0b b6       	in	r0, 0x3b	; 59
     9bc:	0f 92       	push	r0
     9be:	0c b6       	in	r0, 0x3c	; 60
     9c0:	0f 92       	push	r0
     9c2:	1f 92       	push	r1
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 92       	push	r2
     9c8:	3f 92       	push	r3
     9ca:	4f 92       	push	r4
     9cc:	5f 92       	push	r5
     9ce:	6f 92       	push	r6
     9d0:	7f 92       	push	r7
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31
     a02:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
     a06:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
     a0a:	0d b6       	in	r0, 0x3d	; 61
     a0c:	0d 92       	st	X+, r0
     a0e:	0e b6       	in	r0, 0x3e	; 62
     a10:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     a12:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     a14:	b0 d7       	rcall	.+3936   	; 0x1976 <xTaskIncrementTick>
     a16:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a18:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     a1c:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
     a20:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
     a24:	cd 91       	ld	r28, X+
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	dd 91       	ld	r29, X+
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	1f 90       	pop	r1
     a6a:	0f 90       	pop	r0
     a6c:	0c be       	out	0x3c, r0	; 60
     a6e:	0f 90       	pop	r0
     a70:	0b be       	out	0x3b, r0	; 59
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a78:	08 95       	ret

00000a7a <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     a7a:	9b df       	rcall	.-202    	; 0x9b2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     a7c:	18 95       	reti

00000a7e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	0f 92       	push	r0
     a84:	fc 01       	movw	r30, r24
     a86:	92 8d       	ldd	r25, Z+26	; 0x1a
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	91 11       	cpse	r25, r1
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret

00000a94 <prvCopyDataToQueue>:
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	04 2f       	mov	r16, r20
     aa0:	1a 8d       	ldd	r17, Y+26	; 0x1a
     aa2:	4c 8d       	ldd	r20, Y+28	; 0x1c
     aa4:	41 11       	cpse	r20, r1
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <prvCopyDataToQueue+0x2c>
     aa8:	88 81       	ld	r24, Y
     aaa:	99 81       	ldd	r25, Y+1	; 0x01
     aac:	89 2b       	or	r24, r25
     aae:	09 f0       	breq	.+2      	; 0xab2 <prvCopyDataToQueue+0x1e>
     ab0:	42 c0       	rjmp	.+132    	; 0xb36 <prvCopyDataToQueue+0xa2>
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	9d 81       	ldd	r25, Y+5	; 0x05
     ab6:	0e 94 06 10 	call	0x200c	; 0x200c <xTaskPriorityDisinherit>
     aba:	1d 82       	std	Y+5, r1	; 0x05
     abc:	1c 82       	std	Y+4, r1	; 0x04
     abe:	42 c0       	rjmp	.+132    	; 0xb44 <prvCopyDataToQueue+0xb0>
     ac0:	01 11       	cpse	r16, r1
     ac2:	17 c0       	rjmp	.+46     	; 0xaf2 <prvCopyDataToQueue+0x5e>
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	9b 81       	ldd	r25, Y+3	; 0x03
     aca:	0e 94 a4 2b 	call	0x5748	; 0x5748 <memcpy>
     ace:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	9b 81       	ldd	r25, Y+3	; 0x03
     ad4:	82 0f       	add	r24, r18
     ad6:	91 1d       	adc	r25, r1
     ad8:	9b 83       	std	Y+3, r25	; 0x03
     ada:	8a 83       	std	Y+2, r24	; 0x02
     adc:	2c 81       	ldd	r18, Y+4	; 0x04
     ade:	3d 81       	ldd	r19, Y+5	; 0x05
     ae0:	82 17       	cp	r24, r18
     ae2:	93 07       	cpc	r25, r19
     ae4:	50 f1       	brcs	.+84     	; 0xb3a <prvCopyDataToQueue+0xa6>
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	9b 83       	std	Y+3, r25	; 0x03
     aec:	8a 83       	std	Y+2, r24	; 0x02
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	29 c0       	rjmp	.+82     	; 0xb44 <prvCopyDataToQueue+0xb0>
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	8e 81       	ldd	r24, Y+6	; 0x06
     af6:	9f 81       	ldd	r25, Y+7	; 0x07
     af8:	0e 94 a4 2b 	call	0x5748	; 0x5748 <memcpy>
     afc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	91 95       	neg	r25
     b02:	81 95       	neg	r24
     b04:	91 09       	sbc	r25, r1
     b06:	2e 81       	ldd	r18, Y+6	; 0x06
     b08:	3f 81       	ldd	r19, Y+7	; 0x07
     b0a:	28 0f       	add	r18, r24
     b0c:	39 1f       	adc	r19, r25
     b0e:	3f 83       	std	Y+7, r19	; 0x07
     b10:	2e 83       	std	Y+6, r18	; 0x06
     b12:	48 81       	ld	r20, Y
     b14:	59 81       	ldd	r21, Y+1	; 0x01
     b16:	24 17       	cp	r18, r20
     b18:	35 07       	cpc	r19, r21
     b1a:	30 f4       	brcc	.+12     	; 0xb28 <prvCopyDataToQueue+0x94>
     b1c:	2c 81       	ldd	r18, Y+4	; 0x04
     b1e:	3d 81       	ldd	r19, Y+5	; 0x05
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	9f 83       	std	Y+7, r25	; 0x07
     b26:	8e 83       	std	Y+6, r24	; 0x06
     b28:	02 30       	cpi	r16, 0x02	; 2
     b2a:	49 f4       	brne	.+18     	; 0xb3e <prvCopyDataToQueue+0xaa>
     b2c:	11 23       	and	r17, r17
     b2e:	49 f0       	breq	.+18     	; 0xb42 <prvCopyDataToQueue+0xae>
     b30:	11 50       	subi	r17, 0x01	; 1
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <prvCopyDataToQueue+0xb0>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <prvCopyDataToQueue+0xb0>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <prvCopyDataToQueue+0xb0>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <prvCopyDataToQueue+0xb0>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	1f 5f       	subi	r17, 0xFF	; 255
     b46:	1a 8f       	std	Y+26, r17	; 0x1a
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <prvCopyDataFromQueue>:
     b52:	fc 01       	movw	r30, r24
     b54:	44 8d       	ldd	r20, Z+28	; 0x1c
     b56:	44 23       	and	r20, r20
     b58:	a9 f0       	breq	.+42     	; 0xb84 <prvCopyDataFromQueue+0x32>
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	26 81       	ldd	r18, Z+6	; 0x06
     b5e:	37 81       	ldd	r19, Z+7	; 0x07
     b60:	24 0f       	add	r18, r20
     b62:	35 1f       	adc	r19, r21
     b64:	37 83       	std	Z+7, r19	; 0x07
     b66:	26 83       	std	Z+6, r18	; 0x06
     b68:	84 81       	ldd	r24, Z+4	; 0x04
     b6a:	95 81       	ldd	r25, Z+5	; 0x05
     b6c:	28 17       	cp	r18, r24
     b6e:	39 07       	cpc	r19, r25
     b70:	20 f0       	brcs	.+8      	; 0xb7a <prvCopyDataFromQueue+0x28>
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	97 83       	std	Z+7, r25	; 0x07
     b78:	86 83       	std	Z+6, r24	; 0x06
     b7a:	cb 01       	movw	r24, r22
     b7c:	66 81       	ldd	r22, Z+6	; 0x06
     b7e:	77 81       	ldd	r23, Z+7	; 0x07
     b80:	0c 94 a4 2b 	jmp	0x5748	; 0x5748 <memcpy>
     b84:	08 95       	ret

00000b86 <prvUnlockQueue>:
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	8c 01       	movw	r16, r24
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	0f 92       	push	r0
     b98:	fc 01       	movw	r30, r24
     b9a:	c6 8d       	ldd	r28, Z+30	; 0x1e
     b9c:	1c 16       	cp	r1, r28
     b9e:	ac f4       	brge	.+42     	; 0xbca <prvUnlockQueue+0x44>
     ba0:	81 89       	ldd	r24, Z+17	; 0x11
     ba2:	81 11       	cpse	r24, r1
     ba4:	06 c0       	rjmp	.+12     	; 0xbb2 <prvUnlockQueue+0x2c>
     ba6:	11 c0       	rjmp	.+34     	; 0xbca <prvUnlockQueue+0x44>
     ba8:	f8 01       	movw	r30, r16
     baa:	81 89       	ldd	r24, Z+17	; 0x11
     bac:	81 11       	cpse	r24, r1
     bae:	05 c0       	rjmp	.+10     	; 0xbba <prvUnlockQueue+0x34>
     bb0:	0c c0       	rjmp	.+24     	; 0xbca <prvUnlockQueue+0x44>
     bb2:	78 01       	movw	r14, r16
     bb4:	f1 e1       	ldi	r31, 0x11	; 17
     bb6:	ef 0e       	add	r14, r31
     bb8:	f1 1c       	adc	r15, r1
     bba:	c7 01       	movw	r24, r14
     bbc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
     bc0:	81 11       	cpse	r24, r1
     bc2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <vTaskMissedYield>
     bc6:	c1 50       	subi	r28, 0x01	; 1
     bc8:	79 f7       	brne	.-34     	; 0xba8 <prvUnlockQueue+0x22>
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	f8 01       	movw	r30, r16
     bce:	86 8f       	std	Z+30, r24	; 0x1e
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	0f 92       	push	r0
     bda:	c5 8d       	ldd	r28, Z+29	; 0x1d
     bdc:	1c 16       	cp	r1, r28
     bde:	ac f4       	brge	.+42     	; 0xc0a <prvUnlockQueue+0x84>
     be0:	80 85       	ldd	r24, Z+8	; 0x08
     be2:	81 11       	cpse	r24, r1
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <prvUnlockQueue+0x6c>
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <prvUnlockQueue+0x84>
     be8:	f8 01       	movw	r30, r16
     bea:	80 85       	ldd	r24, Z+8	; 0x08
     bec:	81 11       	cpse	r24, r1
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <prvUnlockQueue+0x74>
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <prvUnlockQueue+0x84>
     bf2:	78 01       	movw	r14, r16
     bf4:	f8 e0       	ldi	r31, 0x08	; 8
     bf6:	ef 0e       	add	r14, r31
     bf8:	f1 1c       	adc	r15, r1
     bfa:	c7 01       	movw	r24, r14
     bfc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
     c00:	81 11       	cpse	r24, r1
     c02:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <vTaskMissedYield>
     c06:	c1 50       	subi	r28, 0x01	; 1
     c08:	79 f7       	brne	.-34     	; 0xbe8 <prvUnlockQueue+0x62>
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	f8 01       	movw	r30, r16
     c0e:	85 8f       	std	Z+29, r24	; 0x1d
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	08 95       	ret

00000c20 <xQueueGenericReset>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ec 01       	movw	r28, r24
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	0f 92       	push	r0
     c2c:	e8 81       	ld	r30, Y
     c2e:	f9 81       	ldd	r31, Y+1	; 0x01
     c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c32:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	82 9f       	mul	r24, r18
     c3a:	a0 01       	movw	r20, r0
     c3c:	83 9f       	mul	r24, r19
     c3e:	50 0d       	add	r21, r0
     c40:	92 9f       	mul	r25, r18
     c42:	50 0d       	add	r21, r0
     c44:	11 24       	eor	r1, r1
     c46:	4e 0f       	add	r20, r30
     c48:	5f 1f       	adc	r21, r31
     c4a:	5d 83       	std	Y+5, r21	; 0x05
     c4c:	4c 83       	std	Y+4, r20	; 0x04
     c4e:	1a 8e       	std	Y+26, r1	; 0x1a
     c50:	fb 83       	std	Y+3, r31	; 0x03
     c52:	ea 83       	std	Y+2, r30	; 0x02
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	82 9f       	mul	r24, r18
     c58:	a0 01       	movw	r20, r0
     c5a:	83 9f       	mul	r24, r19
     c5c:	50 0d       	add	r21, r0
     c5e:	92 9f       	mul	r25, r18
     c60:	50 0d       	add	r21, r0
     c62:	11 24       	eor	r1, r1
     c64:	cf 01       	movw	r24, r30
     c66:	84 0f       	add	r24, r20
     c68:	95 1f       	adc	r25, r21
     c6a:	9f 83       	std	Y+7, r25	; 0x07
     c6c:	8e 83       	std	Y+6, r24	; 0x06
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	8d 8f       	std	Y+29, r24	; 0x1d
     c72:	8e 8f       	std	Y+30, r24	; 0x1e
     c74:	61 11       	cpse	r22, r1
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <xQueueGenericReset+0x6e>
     c78:	88 85       	ldd	r24, Y+8	; 0x08
     c7a:	88 23       	and	r24, r24
     c7c:	71 f0       	breq	.+28     	; 0xc9a <xQueueGenericReset+0x7a>
     c7e:	ce 01       	movw	r24, r28
     c80:	08 96       	adiw	r24, 0x08	; 8
     c82:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
     c86:	88 23       	and	r24, r24
     c88:	41 f0       	breq	.+16     	; 0xc9a <xQueueGenericReset+0x7a>
     c8a:	32 de       	rcall	.-924    	; 0x8f0 <vPortYield>
     c8c:	06 c0       	rjmp	.+12     	; 0xc9a <xQueueGenericReset+0x7a>
     c8e:	ce 01       	movw	r24, r28
     c90:	08 96       	adiw	r24, 0x08	; 8
     c92:	f5 dc       	rcall	.-1558   	; 0x67e <vListInitialise>
     c94:	ce 01       	movw	r24, r28
     c96:	41 96       	adiw	r24, 0x11	; 17
     c98:	f2 dc       	rcall	.-1564   	; 0x67e <vListInitialise>
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <xQueueGenericCreate>:
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	08 2f       	mov	r16, r24
     cb2:	16 2f       	mov	r17, r22
     cb4:	f4 2e       	mov	r15, r20
     cb6:	66 23       	and	r22, r22
     cb8:	b9 f0       	breq	.+46     	; 0xce8 <xQueueGenericCreate+0x42>
     cba:	86 9f       	mul	r24, r22
     cbc:	c0 01       	movw	r24, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	81 96       	adiw	r24, 0x21	; 33
     cc2:	bb dc       	rcall	.-1674   	; 0x63a <pvPortMalloc>
     cc4:	ec 01       	movw	r28, r24
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	41 f4       	brne	.+16     	; 0xcda <xQueueGenericCreate+0x34>
     cca:	14 c0       	rjmp	.+40     	; 0xcf4 <xQueueGenericCreate+0x4e>
     ccc:	0b 8f       	std	Y+27, r16	; 0x1b
     cce:	1c 8f       	std	Y+28, r17	; 0x1c
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	ce 01       	movw	r24, r28
     cd4:	a5 df       	rcall	.-182    	; 0xc20 <xQueueGenericReset>
     cd6:	f8 a2       	std	Y+32, r15	; 0x20
     cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <xQueueGenericCreate+0x4e>
     cda:	81 96       	adiw	r24, 0x21	; 33
     cdc:	99 83       	std	Y+1, r25	; 0x01
     cde:	88 83       	st	Y, r24
     ce0:	f5 cf       	rjmp	.-22     	; 0xccc <xQueueGenericCreate+0x26>
     ce2:	d9 83       	std	Y+1, r29	; 0x01
     ce4:	c8 83       	st	Y, r28
     ce6:	f2 cf       	rjmp	.-28     	; 0xccc <xQueueGenericCreate+0x26>
     ce8:	81 e2       	ldi	r24, 0x21	; 33
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a6 dc       	rcall	.-1716   	; 0x63a <pvPortMalloc>
     cee:	ec 01       	movw	r28, r24
     cf0:	89 2b       	or	r24, r25
     cf2:	b9 f7       	brne	.-18     	; 0xce2 <xQueueGenericCreate+0x3c>
     cf4:	ce 01       	movw	r24, r28
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	08 95       	ret

00000d02 <xQueueGenericSend>:
     d02:	9f 92       	push	r9
     d04:	af 92       	push	r10
     d06:	bf 92       	push	r11
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	00 d0       	rcall	.+0      	; 0xd1a <xQueueGenericSend+0x18>
     d1a:	1f 92       	push	r1
     d1c:	1f 92       	push	r1
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	8c 01       	movw	r16, r24
     d24:	6b 01       	movw	r12, r22
     d26:	5d 83       	std	Y+5, r21	; 0x05
     d28:	4c 83       	std	Y+4, r20	; 0x04
     d2a:	a2 2e       	mov	r10, r18
     d2c:	b1 2c       	mov	r11, r1
     d2e:	99 24       	eor	r9, r9
     d30:	93 94       	inc	r9
     d32:	7c 01       	movw	r14, r24
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	e8 0e       	add	r14, r24
     d38:	f1 1c       	adc	r15, r1
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	0f 92       	push	r0
     d40:	f8 01       	movw	r30, r16
     d42:	92 8d       	ldd	r25, Z+26	; 0x1a
     d44:	83 8d       	ldd	r24, Z+27	; 0x1b
     d46:	98 17       	cp	r25, r24
     d48:	18 f0       	brcs	.+6      	; 0xd50 <xQueueGenericSend+0x4e>
     d4a:	f2 e0       	ldi	r31, 0x02	; 2
     d4c:	af 12       	cpse	r10, r31
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <xQueueGenericSend+0x7a>
     d50:	4a 2d       	mov	r20, r10
     d52:	b6 01       	movw	r22, r12
     d54:	c8 01       	movw	r24, r16
     d56:	9e de       	rcall	.-708    	; 0xa94 <prvCopyDataToQueue>
     d58:	f8 01       	movw	r30, r16
     d5a:	91 89       	ldd	r25, Z+17	; 0x11
     d5c:	99 23       	and	r25, r25
     d5e:	41 f0       	breq	.+16     	; 0xd70 <xQueueGenericSend+0x6e>
     d60:	c8 01       	movw	r24, r16
     d62:	41 96       	adiw	r24, 0x11	; 17
     d64:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
     d68:	88 23       	and	r24, r24
     d6a:	21 f0       	breq	.+8      	; 0xd74 <xQueueGenericSend+0x72>
     d6c:	c1 dd       	rcall	.-1150   	; 0x8f0 <vPortYield>
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <xQueueGenericSend+0x72>
     d70:	81 11       	cpse	r24, r1
     d72:	be dd       	rcall	.-1156   	; 0x8f0 <vPortYield>
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	47 c0       	rjmp	.+142    	; 0xe0a <xQueueGenericSend+0x108>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	89 2b       	or	r24, r25
     d82:	21 f4       	brne	.+8      	; 0xd8c <xQueueGenericSend+0x8a>
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <xQueueGenericSend+0x108>
     d8c:	b1 10       	cpse	r11, r1
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <xQueueGenericSend+0x98>
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <vTaskInternalSetTimeOutState>
     d98:	b9 2c       	mov	r11, r9
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	db d5       	rcall	.+2998   	; 0x1956 <vTaskSuspendAll>
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	0f 92       	push	r0
     da6:	f8 01       	movw	r30, r16
     da8:	85 8d       	ldd	r24, Z+29	; 0x1d
     daa:	8f 3f       	cpi	r24, 0xFF	; 255
     dac:	09 f4       	brne	.+2      	; 0xdb0 <xQueueGenericSend+0xae>
     dae:	15 8e       	std	Z+29, r1	; 0x1d
     db0:	f8 01       	movw	r30, r16
     db2:	86 8d       	ldd	r24, Z+30	; 0x1e
     db4:	8f 3f       	cpi	r24, 0xFF	; 255
     db6:	09 f4       	brne	.+2      	; 0xdba <xQueueGenericSend+0xb8>
     db8:	16 8e       	std	Z+30, r1	; 0x1e
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	be 01       	movw	r22, r28
     dc0:	6c 5f       	subi	r22, 0xFC	; 252
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	ce 01       	movw	r24, r28
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <xTaskCheckForTimeOut>
     dcc:	81 11       	cpse	r24, r1
     dce:	19 c0       	rjmp	.+50     	; 0xe02 <xQueueGenericSend+0x100>
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	0f 92       	push	r0
     dd6:	f8 01       	movw	r30, r16
     dd8:	92 8d       	ldd	r25, Z+26	; 0x1a
     dda:	83 8d       	ldd	r24, Z+27	; 0x1b
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	98 13       	cpse	r25, r24
     de2:	0b c0       	rjmp	.+22     	; 0xdfa <xQueueGenericSend+0xf8>
     de4:	6c 81       	ldd	r22, Y+4	; 0x04
     de6:	7d 81       	ldd	r23, Y+5	; 0x05
     de8:	c7 01       	movw	r24, r14
     dea:	d6 d7       	rcall	.+4012   	; 0x1d98 <vTaskPlaceOnEventList>
     dec:	c8 01       	movw	r24, r16
     dee:	cb de       	rcall	.-618    	; 0xb86 <prvUnlockQueue>
     df0:	7c d6       	rcall	.+3320   	; 0x1aea <xTaskResumeAll>
     df2:	81 11       	cpse	r24, r1
     df4:	a2 cf       	rjmp	.-188    	; 0xd3a <xQueueGenericSend+0x38>
     df6:	7c dd       	rcall	.-1288   	; 0x8f0 <vPortYield>
     df8:	a0 cf       	rjmp	.-192    	; 0xd3a <xQueueGenericSend+0x38>
     dfa:	c8 01       	movw	r24, r16
     dfc:	c4 de       	rcall	.-632    	; 0xb86 <prvUnlockQueue>
     dfe:	75 d6       	rcall	.+3306   	; 0x1aea <xTaskResumeAll>
     e00:	9c cf       	rjmp	.-200    	; 0xd3a <xQueueGenericSend+0x38>
     e02:	c8 01       	movw	r24, r16
     e04:	c0 de       	rcall	.-640    	; 0xb86 <prvUnlockQueue>
     e06:	71 d6       	rcall	.+3298   	; 0x1aea <xTaskResumeAll>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	08 95       	ret

00000e2c <xQueueGenericSendFromISR>:
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	8a 01       	movw	r16, r20
     e3a:	fc 01       	movw	r30, r24
     e3c:	52 8d       	ldd	r21, Z+26	; 0x1a
     e3e:	33 8d       	ldd	r19, Z+27	; 0x1b
     e40:	53 17       	cp	r21, r19
     e42:	10 f0       	brcs	.+4      	; 0xe48 <xQueueGenericSendFromISR+0x1c>
     e44:	22 30       	cpi	r18, 0x02	; 2
     e46:	e1 f4       	brne	.+56     	; 0xe80 <xQueueGenericSendFromISR+0x54>
     e48:	42 2f       	mov	r20, r18
     e4a:	78 01       	movw	r14, r16
     e4c:	ec 01       	movw	r28, r24
     e4e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e50:	21 de       	rcall	.-958    	; 0xa94 <prvCopyDataToQueue>
     e52:	1f 3f       	cpi	r17, 0xFF	; 255
     e54:	79 f4       	brne	.+30     	; 0xe74 <xQueueGenericSendFromISR+0x48>
     e56:	89 89       	ldd	r24, Y+17	; 0x11
     e58:	88 23       	and	r24, r24
     e5a:	a1 f0       	breq	.+40     	; 0xe84 <xQueueGenericSendFromISR+0x58>
     e5c:	ce 01       	movw	r24, r28
     e5e:	41 96       	adiw	r24, 0x11	; 17
     e60:	c4 d7       	rcall	.+3976   	; 0x1dea <xTaskRemoveFromEventList>
     e62:	88 23       	and	r24, r24
     e64:	89 f0       	breq	.+34     	; 0xe88 <xQueueGenericSendFromISR+0x5c>
     e66:	e1 14       	cp	r14, r1
     e68:	f1 04       	cpc	r15, r1
     e6a:	81 f0       	breq	.+32     	; 0xe8c <xQueueGenericSendFromISR+0x60>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	f7 01       	movw	r30, r14
     e70:	80 83       	st	Z, r24
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <xQueueGenericSendFromISR+0x62>
     e74:	ff 24       	eor	r15, r15
     e76:	f3 94       	inc	r15
     e78:	f1 0e       	add	r15, r17
     e7a:	fe 8e       	std	Y+30, r15	; 0x1e
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <xQueueGenericSendFromISR+0x62>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <xQueueGenericSendFromISR+0x62>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <xQueueGenericSendFromISR+0x62>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <xQueueGenericSendFromISR+0x62>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	08 95       	ret

00000e9c <xQueueReceive>:
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <xQueueReceive+0x18>
     eb4:	1f 92       	push	r1
     eb6:	1f 92       	push	r1
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	8c 01       	movw	r16, r24
     ebe:	5b 01       	movw	r10, r22
     ec0:	5d 83       	std	Y+5, r21	; 0x05
     ec2:	4c 83       	std	Y+4, r20	; 0x04
     ec4:	e1 2c       	mov	r14, r1
     ec6:	99 24       	eor	r9, r9
     ec8:	93 94       	inc	r9
     eca:	6c 01       	movw	r12, r24
     ecc:	81 e1       	ldi	r24, 0x11	; 17
     ece:	c8 0e       	add	r12, r24
     ed0:	d1 1c       	adc	r13, r1
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	0f 92       	push	r0
     ed8:	f8 01       	movw	r30, r16
     eda:	f2 8c       	ldd	r15, Z+26	; 0x1a
     edc:	ff 20       	and	r15, r15
     ede:	91 f0       	breq	.+36     	; 0xf04 <xQueueReceive+0x68>
     ee0:	b5 01       	movw	r22, r10
     ee2:	c8 01       	movw	r24, r16
     ee4:	36 de       	rcall	.-916    	; 0xb52 <prvCopyDataFromQueue>
     ee6:	fa 94       	dec	r15
     ee8:	f8 01       	movw	r30, r16
     eea:	f2 8e       	std	Z+26, r15	; 0x1a
     eec:	80 85       	ldd	r24, Z+8	; 0x08
     eee:	88 23       	and	r24, r24
     ef0:	29 f0       	breq	.+10     	; 0xefc <xQueueReceive+0x60>
     ef2:	c8 01       	movw	r24, r16
     ef4:	08 96       	adiw	r24, 0x08	; 8
     ef6:	79 d7       	rcall	.+3826   	; 0x1dea <xTaskRemoveFromEventList>
     ef8:	81 11       	cpse	r24, r1
     efa:	fa dc       	rcall	.-1548   	; 0x8f0 <vPortYield>
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	44 c0       	rjmp	.+136    	; 0xf8c <xQueueReceive+0xf0>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	89 2b       	or	r24, r25
     f0a:	21 f4       	brne	.+8      	; 0xf14 <xQueueReceive+0x78>
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	3c c0       	rjmp	.+120    	; 0xf8c <xQueueReceive+0xf0>
     f14:	e1 10       	cpse	r14, r1
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <xQueueReceive+0x84>
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	ae d7       	rcall	.+3932   	; 0x1e7a <vTaskInternalSetTimeOutState>
     f1e:	e9 2c       	mov	r14, r9
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	18 d5       	rcall	.+2608   	; 0x1956 <vTaskSuspendAll>
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	0f 92       	push	r0
     f2c:	f8 01       	movw	r30, r16
     f2e:	85 8d       	ldd	r24, Z+29	; 0x1d
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	09 f4       	brne	.+2      	; 0xf36 <xQueueReceive+0x9a>
     f34:	15 8e       	std	Z+29, r1	; 0x1d
     f36:	f8 01       	movw	r30, r16
     f38:	86 8d       	ldd	r24, Z+30	; 0x1e
     f3a:	8f 3f       	cpi	r24, 0xFF	; 255
     f3c:	09 f4       	brne	.+2      	; 0xf40 <xQueueReceive+0xa4>
     f3e:	16 8e       	std	Z+30, r1	; 0x1e
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	be 01       	movw	r22, r28
     f46:	6c 5f       	subi	r22, 0xFC	; 252
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	a0 d7       	rcall	.+3904   	; 0x1e90 <xTaskCheckForTimeOut>
     f50:	81 11       	cpse	r24, r1
     f52:	13 c0       	rjmp	.+38     	; 0xf7a <xQueueReceive+0xde>
     f54:	c8 01       	movw	r24, r16
     f56:	93 dd       	rcall	.-1242   	; 0xa7e <prvIsQueueEmpty>
     f58:	88 23       	and	r24, r24
     f5a:	59 f0       	breq	.+22     	; 0xf72 <xQueueReceive+0xd6>
     f5c:	6c 81       	ldd	r22, Y+4	; 0x04
     f5e:	7d 81       	ldd	r23, Y+5	; 0x05
     f60:	c6 01       	movw	r24, r12
     f62:	1a d7       	rcall	.+3636   	; 0x1d98 <vTaskPlaceOnEventList>
     f64:	c8 01       	movw	r24, r16
     f66:	0f de       	rcall	.-994    	; 0xb86 <prvUnlockQueue>
     f68:	c0 d5       	rcall	.+2944   	; 0x1aea <xTaskResumeAll>
     f6a:	81 11       	cpse	r24, r1
     f6c:	b2 cf       	rjmp	.-156    	; 0xed2 <xQueueReceive+0x36>
     f6e:	c0 dc       	rcall	.-1664   	; 0x8f0 <vPortYield>
     f70:	b0 cf       	rjmp	.-160    	; 0xed2 <xQueueReceive+0x36>
     f72:	c8 01       	movw	r24, r16
     f74:	08 de       	rcall	.-1008   	; 0xb86 <prvUnlockQueue>
     f76:	b9 d5       	rcall	.+2930   	; 0x1aea <xTaskResumeAll>
     f78:	ac cf       	rjmp	.-168    	; 0xed2 <xQueueReceive+0x36>
     f7a:	c8 01       	movw	r24, r16
     f7c:	04 de       	rcall	.-1016   	; 0xb86 <prvUnlockQueue>
     f7e:	b5 d5       	rcall	.+2922   	; 0x1aea <xTaskResumeAll>
     f80:	c8 01       	movw	r24, r16
     f82:	7d dd       	rcall	.-1286   	; 0xa7e <prvIsQueueEmpty>
     f84:	88 23       	and	r24, r24
     f86:	09 f4       	brne	.+2      	; 0xf8a <xQueueReceive+0xee>
     f88:	a4 cf       	rjmp	.-184    	; 0xed2 <xQueueReceive+0x36>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	08 95       	ret

00000fae <xQueueSemaphoreTake>:
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <xQueueSemaphoreTake+0x14>
     fc2:	1f 92       	push	r1
     fc4:	1f 92       	push	r1
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	8c 01       	movw	r16, r24
     fcc:	7d 83       	std	Y+5, r23	; 0x05
     fce:	6c 83       	std	Y+4, r22	; 0x04
     fd0:	b1 2c       	mov	r11, r1
     fd2:	d1 2c       	mov	r13, r1
     fd4:	cc 24       	eor	r12, r12
     fd6:	c3 94       	inc	r12
     fd8:	7c 01       	movw	r14, r24
     fda:	81 e1       	ldi	r24, 0x11	; 17
     fdc:	e8 0e       	add	r14, r24
     fde:	f1 1c       	adc	r15, r1
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	0f 92       	push	r0
     fe6:	d8 01       	movw	r26, r16
     fe8:	5a 96       	adiw	r26, 0x1a	; 26
     fea:	8c 91       	ld	r24, X
     fec:	5a 97       	sbiw	r26, 0x1a	; 26
     fee:	88 23       	and	r24, r24
     ff0:	d9 f0       	breq	.+54     	; 0x1028 <xQueueSemaphoreTake+0x7a>
     ff2:	81 50       	subi	r24, 0x01	; 1
     ff4:	5a 96       	adiw	r26, 0x1a	; 26
     ff6:	8c 93       	st	X, r24
     ff8:	5a 97       	sbiw	r26, 0x1a	; 26
     ffa:	8d 91       	ld	r24, X+
     ffc:	9c 91       	ld	r25, X
     ffe:	89 2b       	or	r24, r25
    1000:	29 f4       	brne	.+10     	; 0x100c <xQueueSemaphoreTake+0x5e>
    1002:	0e 94 96 10 	call	0x212c	; 0x212c <pvTaskIncrementMutexHeldCount>
    1006:	f8 01       	movw	r30, r16
    1008:	95 83       	std	Z+5, r25	; 0x05
    100a:	84 83       	std	Z+4, r24	; 0x04
    100c:	d8 01       	movw	r26, r16
    100e:	18 96       	adiw	r26, 0x08	; 8
    1010:	8c 91       	ld	r24, X
    1012:	88 23       	and	r24, r24
    1014:	29 f0       	breq	.+10     	; 0x1020 <xQueueSemaphoreTake+0x72>
    1016:	c8 01       	movw	r24, r16
    1018:	08 96       	adiw	r24, 0x08	; 8
    101a:	e7 d6       	rcall	.+3534   	; 0x1dea <xTaskRemoveFromEventList>
    101c:	81 11       	cpse	r24, r1
    101e:	68 dc       	rcall	.-1840   	; 0x8f0 <vPortYield>
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	70 c0       	rjmp	.+224    	; 0x1108 <xQueueSemaphoreTake+0x15a>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	89 2b       	or	r24, r25
    102e:	21 f4       	brne	.+8      	; 0x1038 <xQueueSemaphoreTake+0x8a>
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	68 c0       	rjmp	.+208    	; 0x1108 <xQueueSemaphoreTake+0x15a>
    1038:	d1 10       	cpse	r13, r1
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <xQueueSemaphoreTake+0x96>
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	1c d7       	rcall	.+3640   	; 0x1e7a <vTaskInternalSetTimeOutState>
    1042:	dc 2c       	mov	r13, r12
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	86 d4       	rcall	.+2316   	; 0x1956 <vTaskSuspendAll>
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	0f 92       	push	r0
    1050:	f8 01       	movw	r30, r16
    1052:	85 8d       	ldd	r24, Z+29	; 0x1d
    1054:	8f 3f       	cpi	r24, 0xFF	; 255
    1056:	09 f4       	brne	.+2      	; 0x105a <xQueueSemaphoreTake+0xac>
    1058:	15 8e       	std	Z+29, r1	; 0x1d
    105a:	d8 01       	movw	r26, r16
    105c:	5e 96       	adiw	r26, 0x1e	; 30
    105e:	8c 91       	ld	r24, X
    1060:	5e 97       	sbiw	r26, 0x1e	; 30
    1062:	8f 3f       	cpi	r24, 0xFF	; 255
    1064:	11 f4       	brne	.+4      	; 0x106a <xQueueSemaphoreTake+0xbc>
    1066:	5e 96       	adiw	r26, 0x1e	; 30
    1068:	1c 92       	st	X, r1
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	be 01       	movw	r22, r28
    1070:	6c 5f       	subi	r22, 0xFC	; 252
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	0b d7       	rcall	.+3606   	; 0x1e90 <xTaskCheckForTimeOut>
    107a:	81 11       	cpse	r24, r1
    107c:	21 c0       	rjmp	.+66     	; 0x10c0 <xQueueSemaphoreTake+0x112>
    107e:	c8 01       	movw	r24, r16
    1080:	fe dc       	rcall	.-1540   	; 0xa7e <prvIsQueueEmpty>
    1082:	88 23       	and	r24, r24
    1084:	c9 f0       	breq	.+50     	; 0x10b8 <xQueueSemaphoreTake+0x10a>
    1086:	f8 01       	movw	r30, r16
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	89 2b       	or	r24, r25
    108e:	49 f4       	brne	.+18     	; 0x10a2 <xQueueSemaphoreTake+0xf4>
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	0f 92       	push	r0
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	95 81       	ldd	r25, Z+5	; 0x05
    109a:	46 d7       	rcall	.+3724   	; 0x1f28 <xTaskPriorityInherit>
    109c:	b8 2e       	mov	r11, r24
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	6c 81       	ldd	r22, Y+4	; 0x04
    10a4:	7d 81       	ldd	r23, Y+5	; 0x05
    10a6:	c7 01       	movw	r24, r14
    10a8:	77 d6       	rcall	.+3310   	; 0x1d98 <vTaskPlaceOnEventList>
    10aa:	c8 01       	movw	r24, r16
    10ac:	6c dd       	rcall	.-1320   	; 0xb86 <prvUnlockQueue>
    10ae:	1d d5       	rcall	.+2618   	; 0x1aea <xTaskResumeAll>
    10b0:	81 11       	cpse	r24, r1
    10b2:	96 cf       	rjmp	.-212    	; 0xfe0 <xQueueSemaphoreTake+0x32>
    10b4:	1d dc       	rcall	.-1990   	; 0x8f0 <vPortYield>
    10b6:	94 cf       	rjmp	.-216    	; 0xfe0 <xQueueSemaphoreTake+0x32>
    10b8:	c8 01       	movw	r24, r16
    10ba:	65 dd       	rcall	.-1334   	; 0xb86 <prvUnlockQueue>
    10bc:	16 d5       	rcall	.+2604   	; 0x1aea <xTaskResumeAll>
    10be:	90 cf       	rjmp	.-224    	; 0xfe0 <xQueueSemaphoreTake+0x32>
    10c0:	c8 01       	movw	r24, r16
    10c2:	61 dd       	rcall	.-1342   	; 0xb86 <prvUnlockQueue>
    10c4:	12 d5       	rcall	.+2596   	; 0x1aea <xTaskResumeAll>
    10c6:	c8 01       	movw	r24, r16
    10c8:	da dc       	rcall	.-1612   	; 0xa7e <prvIsQueueEmpty>
    10ca:	88 23       	and	r24, r24
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <xQueueSemaphoreTake+0x122>
    10ce:	88 cf       	rjmp	.-240    	; 0xfe0 <xQueueSemaphoreTake+0x32>
    10d0:	bb 20       	and	r11, r11
    10d2:	c9 f0       	breq	.+50     	; 0x1106 <xQueueSemaphoreTake+0x158>
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	0f 92       	push	r0
    10da:	f8 01       	movw	r30, r16
    10dc:	81 89       	ldd	r24, Z+17	; 0x11
    10de:	88 23       	and	r24, r24
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <xQueueSemaphoreTake+0x142>
    10e2:	06 88       	ldd	r0, Z+22	; 0x16
    10e4:	f7 89       	ldd	r31, Z+23	; 0x17
    10e6:	e0 2d       	mov	r30, r0
    10e8:	80 81       	ld	r24, Z
    10ea:	64 e0       	ldi	r22, 0x04	; 4
    10ec:	68 1b       	sub	r22, r24
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <xQueueSemaphoreTake+0x144>
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	d8 01       	movw	r26, r16
    10f4:	14 96       	adiw	r26, 0x04	; 4
    10f6:	8d 91       	ld	r24, X+
    10f8:	9c 91       	ld	r25, X
    10fa:	15 97       	sbiw	r26, 0x05	; 5
    10fc:	c7 d7       	rcall	.+3982   	; 0x208c <vTaskPriorityDisinheritAfterTimeout>
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <xQueueSemaphoreTake+0x15a>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	08 95       	ret

00001126 <uxQueueMessagesWaiting>:
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	0f 92       	push	r0
    112c:	fc 01       	movw	r30, r24
    112e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	08 95       	ret

00001136 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	0f 92       	push	r0
    1142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1144:	8f 3f       	cpi	r24, 0xFF	; 255
    1146:	09 f4       	brne	.+2      	; 0x114a <vQueueWaitForMessageRestricted+0x14>
    1148:	1d 8e       	std	Y+29, r1	; 0x1d
    114a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    114c:	8f 3f       	cpi	r24, 0xFF	; 255
    114e:	09 f4       	brne	.+2      	; 0x1152 <vQueueWaitForMessageRestricted+0x1c>
    1150:	1e 8e       	std	Y+30, r1	; 0x1e
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1156:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1158:	81 11       	cpse	r24, r1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    115c:	ce 01       	movw	r24, r28
    115e:	41 96       	adiw	r24, 0x11	; 17
    1160:	2c d6       	rcall	.+3160   	; 0x1dba <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1162:	ce 01       	movw	r24, r28
    1164:	10 dd       	rcall	.-1504   	; 0xb86 <prvUnlockQueue>
    }
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    116c:	fc 01       	movw	r30, r24
    116e:	44 81       	ldd	r20, Z+4	; 0x04
    1170:	55 81       	ldd	r21, Z+5	; 0x05
    1172:	22 81       	ldd	r18, Z+2	; 0x02
    1174:	33 81       	ldd	r19, Z+3	; 0x03
    1176:	24 0f       	add	r18, r20
    1178:	35 1f       	adc	r19, r21
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	b9 01       	movw	r22, r18
    1180:	68 1b       	sub	r22, r24
    1182:	79 0b       	sbc	r23, r25
    1184:	cb 01       	movw	r24, r22
    1186:	64 17       	cp	r22, r20
    1188:	75 07       	cpc	r23, r21
    118a:	10 f0       	brcs	.+4      	; 0x1190 <prvBytesInBuffer+0x24>
    118c:	84 1b       	sub	r24, r20
    118e:	95 0b       	sbc	r25, r21
    1190:	08 95       	ret

00001192 <prvWriteBytesToBuffer>:
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	6c 01       	movw	r12, r24
    11a8:	5b 01       	movw	r10, r22
    11aa:	7a 01       	movw	r14, r20
    11ac:	fc 01       	movw	r30, r24
    11ae:	c2 81       	ldd	r28, Z+2	; 0x02
    11b0:	d3 81       	ldd	r29, Z+3	; 0x03
    11b2:	04 81       	ldd	r16, Z+4	; 0x04
    11b4:	15 81       	ldd	r17, Z+5	; 0x05
    11b6:	0c 1b       	sub	r16, r28
    11b8:	1d 0b       	sbc	r17, r29
    11ba:	40 17       	cp	r20, r16
    11bc:	51 07       	cpc	r21, r17
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <prvWriteBytesToBuffer+0x30>
    11c0:	8a 01       	movw	r16, r20
    11c2:	f6 01       	movw	r30, r12
    11c4:	84 85       	ldd	r24, Z+12	; 0x0c
    11c6:	95 85       	ldd	r25, Z+13	; 0x0d
    11c8:	a8 01       	movw	r20, r16
    11ca:	b5 01       	movw	r22, r10
    11cc:	8c 0f       	add	r24, r28
    11ce:	9d 1f       	adc	r25, r29
    11d0:	0e 94 a4 2b 	call	0x5748	; 0x5748 <memcpy>
    11d4:	0e 15       	cp	r16, r14
    11d6:	1f 05       	cpc	r17, r15
    11d8:	58 f4       	brcc	.+22     	; 0x11f0 <prvWriteBytesToBuffer+0x5e>
    11da:	a7 01       	movw	r20, r14
    11dc:	40 1b       	sub	r20, r16
    11de:	51 0b       	sbc	r21, r17
    11e0:	b5 01       	movw	r22, r10
    11e2:	60 0f       	add	r22, r16
    11e4:	71 1f       	adc	r23, r17
    11e6:	f6 01       	movw	r30, r12
    11e8:	84 85       	ldd	r24, Z+12	; 0x0c
    11ea:	95 85       	ldd	r25, Z+13	; 0x0d
    11ec:	0e 94 a4 2b 	call	0x5748	; 0x5748 <memcpy>
    11f0:	ce 01       	movw	r24, r28
    11f2:	8e 0d       	add	r24, r14
    11f4:	9f 1d       	adc	r25, r15
    11f6:	f6 01       	movw	r30, r12
    11f8:	24 81       	ldd	r18, Z+4	; 0x04
    11fa:	35 81       	ldd	r19, Z+5	; 0x05
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	10 f0       	brcs	.+4      	; 0x1206 <prvWriteBytesToBuffer+0x74>
    1202:	82 1b       	sub	r24, r18
    1204:	93 0b       	sbc	r25, r19
    1206:	f6 01       	movw	r30, r12
    1208:	93 83       	std	Z+3, r25	; 0x03
    120a:	82 83       	std	Z+2, r24	; 0x02
    120c:	c7 01       	movw	r24, r14
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	cf 90       	pop	r12
    121e:	bf 90       	pop	r11
    1220:	af 90       	pop	r10
    1222:	08 95       	ret

00001224 <prvWriteMessageToBuffer>:
    1224:	cf 92       	push	r12
    1226:	df 92       	push	r13
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	1f 92       	push	r1
    1236:	1f 92       	push	r1
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	5a 83       	std	Y+2, r21	; 0x02
    123e:	49 83       	std	Y+1, r20	; 0x01
    1240:	21 15       	cp	r18, r1
    1242:	31 05       	cpc	r19, r1
    1244:	c9 f0       	breq	.+50     	; 0x1278 <prvWriteMessageToBuffer+0x54>
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
    124a:	fc 01       	movw	r30, r24
    124c:	86 85       	ldd	r24, Z+14	; 0x0e
    124e:	80 fd       	sbrc	r24, 0
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <prvWriteMessageToBuffer+0x3e>
    1252:	ca 01       	movw	r24, r20
    1254:	24 17       	cp	r18, r20
    1256:	35 07       	cpc	r19, r21
    1258:	08 f4       	brcc	.+2      	; 0x125c <prvWriteMessageToBuffer+0x38>
    125a:	c9 01       	movw	r24, r18
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <prvWriteMessageToBuffer+0x60>
    1262:	20 17       	cp	r18, r16
    1264:	31 07       	cpc	r19, r17
    1266:	58 f0       	brcs	.+22     	; 0x127e <prvWriteMessageToBuffer+0x5a>
    1268:	42 e0       	ldi	r20, 0x02	; 2
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	be 01       	movw	r22, r28
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	c7 01       	movw	r24, r14
    1274:	8e df       	rcall	.-228    	; 0x1192 <prvWriteBytesToBuffer>
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <prvWriteMessageToBuffer+0x60>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	08 c0       	rjmp	.+16     	; 0x128e <prvWriteMessageToBuffer+0x6a>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	05 c0       	rjmp	.+10     	; 0x128e <prvWriteMessageToBuffer+0x6a>
    1284:	49 81       	ldd	r20, Y+1	; 0x01
    1286:	5a 81       	ldd	r21, Y+2	; 0x02
    1288:	b6 01       	movw	r22, r12
    128a:	c7 01       	movw	r24, r14
    128c:	82 df       	rcall	.-252    	; 0x1192 <prvWriteBytesToBuffer>
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	08 95       	ret

000012a4 <prvReadBytesFromBuffer>:
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	7c 01       	movw	r14, r24
    12ba:	5b 01       	movw	r10, r22
    12bc:	e9 01       	movw	r28, r18
    12be:	42 17       	cp	r20, r18
    12c0:	53 07       	cpc	r21, r19
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <prvReadBytesFromBuffer+0x22>
    12c4:	ea 01       	movw	r28, r20
    12c6:	20 97       	sbiw	r28, 0x00	; 0
    12c8:	79 f1       	breq	.+94     	; 0x1328 <prvReadBytesFromBuffer+0x84>
    12ca:	f7 01       	movw	r30, r14
    12cc:	00 81       	ld	r16, Z
    12ce:	11 81       	ldd	r17, Z+1	; 0x01
    12d0:	c4 80       	ldd	r12, Z+4	; 0x04
    12d2:	d5 80       	ldd	r13, Z+5	; 0x05
    12d4:	c0 1a       	sub	r12, r16
    12d6:	d1 0a       	sbc	r13, r17
    12d8:	cc 15       	cp	r28, r12
    12da:	dd 05       	cpc	r29, r13
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <prvReadBytesFromBuffer+0x3c>
    12de:	6e 01       	movw	r12, r28
    12e0:	f7 01       	movw	r30, r14
    12e2:	64 85       	ldd	r22, Z+12	; 0x0c
    12e4:	75 85       	ldd	r23, Z+13	; 0x0d
    12e6:	60 0f       	add	r22, r16
    12e8:	71 1f       	adc	r23, r17
    12ea:	a6 01       	movw	r20, r12
    12ec:	c5 01       	movw	r24, r10
    12ee:	0e 94 a4 2b 	call	0x5748	; 0x5748 <memcpy>
    12f2:	cc 16       	cp	r12, r28
    12f4:	dd 06       	cpc	r13, r29
    12f6:	58 f4       	brcc	.+22     	; 0x130e <prvReadBytesFromBuffer+0x6a>
    12f8:	ae 01       	movw	r20, r28
    12fa:	4c 19       	sub	r20, r12
    12fc:	5d 09       	sbc	r21, r13
    12fe:	f7 01       	movw	r30, r14
    1300:	64 85       	ldd	r22, Z+12	; 0x0c
    1302:	75 85       	ldd	r23, Z+13	; 0x0d
    1304:	c5 01       	movw	r24, r10
    1306:	8c 0d       	add	r24, r12
    1308:	9d 1d       	adc	r25, r13
    130a:	0e 94 a4 2b 	call	0x5748	; 0x5748 <memcpy>
    130e:	0c 0f       	add	r16, r28
    1310:	1d 1f       	adc	r17, r29
    1312:	f7 01       	movw	r30, r14
    1314:	84 81       	ldd	r24, Z+4	; 0x04
    1316:	95 81       	ldd	r25, Z+5	; 0x05
    1318:	08 17       	cp	r16, r24
    131a:	19 07       	cpc	r17, r25
    131c:	10 f0       	brcs	.+4      	; 0x1322 <prvReadBytesFromBuffer+0x7e>
    131e:	08 1b       	sub	r16, r24
    1320:	19 0b       	sbc	r17, r25
    1322:	f7 01       	movw	r30, r14
    1324:	11 83       	std	Z+1, r17	; 0x01
    1326:	00 83       	st	Z, r16
    1328:	ce 01       	movw	r24, r28
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	08 95       	ret

00001340 <xStreamBufferGenericCreate>:
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	eb 01       	movw	r28, r22
    134c:	11 e0       	ldi	r17, 0x01	; 1
    134e:	41 30       	cpi	r20, 0x01	; 1
    1350:	09 f0       	breq	.+2      	; 0x1354 <xStreamBufferGenericCreate+0x14>
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	20 97       	sbiw	r28, 0x00	; 0
    1356:	11 f4       	brne	.+4      	; 0x135c <xStreamBufferGenericCreate+0x1c>
    1358:	c1 e0       	ldi	r28, 0x01	; 1
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	7c 01       	movw	r14, r24
    135e:	2f ef       	ldi	r18, 0xFF	; 255
    1360:	e2 1a       	sub	r14, r18
    1362:	f2 0a       	sbc	r15, r18
    1364:	41 96       	adiw	r24, 0x11	; 17
    1366:	69 d9       	rcall	.-3374   	; 0x63a <pvPortMalloc>
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	81 f0       	breq	.+32     	; 0x138c <xStreamBufferGenericCreate+0x4c>
    136c:	20 e1       	ldi	r18, 0x10	; 16
    136e:	fc 01       	movw	r30, r24
    1370:	11 92       	st	Z+, r1
    1372:	2a 95       	dec	r18
    1374:	e9 f7       	brne	.-6      	; 0x1370 <xStreamBufferGenericCreate+0x30>
    1376:	9c 01       	movw	r18, r24
    1378:	20 5f       	subi	r18, 0xF0	; 240
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	fc 01       	movw	r30, r24
    137e:	35 87       	std	Z+13, r19	; 0x0d
    1380:	24 87       	std	Z+12, r18	; 0x0c
    1382:	f5 82       	std	Z+5, r15	; 0x05
    1384:	e4 82       	std	Z+4, r14	; 0x04
    1386:	d7 83       	std	Z+7, r29	; 0x07
    1388:	c6 83       	std	Z+6, r28	; 0x06
    138a:	16 87       	std	Z+14, r17	; 0x0e
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	08 95       	ret

00001398 <xStreamBufferReset>:
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	fc 01       	movw	r30, r24
    139e:	27 85       	ldd	r18, Z+15	; 0x0f
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	0f 92       	push	r0
    13a6:	80 85       	ldd	r24, Z+8	; 0x08
    13a8:	91 85       	ldd	r25, Z+9	; 0x09
    13aa:	89 2b       	or	r24, r25
    13ac:	d1 f4       	brne	.+52     	; 0x13e2 <xStreamBufferReset+0x4a>
    13ae:	82 85       	ldd	r24, Z+10	; 0x0a
    13b0:	93 85       	ldd	r25, Z+11	; 0x0b
    13b2:	89 2b       	or	r24, r25
    13b4:	c1 f4       	brne	.+48     	; 0x13e6 <xStreamBufferReset+0x4e>
    13b6:	86 85       	ldd	r24, Z+14	; 0x0e
    13b8:	46 81       	ldd	r20, Z+6	; 0x06
    13ba:	57 81       	ldd	r21, Z+7	; 0x07
    13bc:	64 81       	ldd	r22, Z+4	; 0x04
    13be:	75 81       	ldd	r23, Z+5	; 0x05
    13c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    13c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    13c4:	90 e1       	ldi	r25, 0x10	; 16
    13c6:	ef 01       	movw	r28, r30
    13c8:	19 92       	st	Y+, r1
    13ca:	9a 95       	dec	r25
    13cc:	e9 f7       	brne	.-6      	; 0x13c8 <xStreamBufferReset+0x30>
    13ce:	b5 87       	std	Z+13, r27	; 0x0d
    13d0:	a4 87       	std	Z+12, r26	; 0x0c
    13d2:	75 83       	std	Z+5, r23	; 0x05
    13d4:	64 83       	std	Z+4, r22	; 0x04
    13d6:	57 83       	std	Z+7, r21	; 0x07
    13d8:	46 83       	std	Z+6, r20	; 0x06
    13da:	86 87       	std	Z+14, r24	; 0x0e
    13dc:	27 87       	std	Z+15, r18	; 0x0f
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <xStreamBufferReset+0x50>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <xStreamBufferReset+0x50>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <xStreamBufferSpacesAvailable>:
    13f2:	fc 01       	movw	r30, r24
    13f4:	24 81       	ldd	r18, Z+4	; 0x04
    13f6:	35 81       	ldd	r19, Z+5	; 0x05
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	42 81       	ldd	r20, Z+2	; 0x02
    13fe:	53 81       	ldd	r21, Z+3	; 0x03
    1400:	82 0f       	add	r24, r18
    1402:	93 1f       	adc	r25, r19
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	84 1b       	sub	r24, r20
    1408:	95 0b       	sbc	r25, r21
    140a:	82 17       	cp	r24, r18
    140c:	93 07       	cpc	r25, r19
    140e:	10 f0       	brcs	.+4      	; 0x1414 <xStreamBufferSpacesAvailable+0x22>
    1410:	82 1b       	sub	r24, r18
    1412:	93 0b       	sbc	r25, r19
    1414:	08 95       	ret

00001416 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	ec 01       	movw	r28, r24
    142c:	5b 01       	movw	r10, r22
    142e:	6a 01       	movw	r12, r20
    1430:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1432:	8e 85       	ldd	r24, Y+14	; 0x0e
    1434:	80 ff       	sbrs	r24, 0
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1438:	8a 01       	movw	r16, r20
    143a:	0e 5f       	subi	r16, 0xFE	; 254
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1440:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1442:	ce 01       	movw	r24, r28
    1444:	d6 df       	rcall	.-84     	; 0x13f2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1446:	9c 01       	movw	r18, r24
    1448:	a6 01       	movw	r20, r12
    144a:	b5 01       	movw	r22, r10
    144c:	ce 01       	movw	r24, r28
    144e:	ea de       	rcall	.-556    	; 0x1224 <prvWriteMessageToBuffer>
    1450:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1452:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1454:	b1 f0       	breq	.+44     	; 0x1482 <xStreamBufferSendFromISR+0x6c>
    1456:	ce 01       	movw	r24, r28
    1458:	89 de       	rcall	.-750    	; 0x116c <prvBytesInBuffer>
    145a:	2e 81       	ldd	r18, Y+6	; 0x06
    145c:	3f 81       	ldd	r19, Y+7	; 0x07
    145e:	82 17       	cp	r24, r18
    1460:	93 07       	cpc	r25, r19
    1462:	78 f0       	brcs	.+30     	; 0x1482 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1464:	88 85       	ldd	r24, Y+8	; 0x08
    1466:	99 85       	ldd	r25, Y+9	; 0x09
    1468:	89 2b       	or	r24, r25
    146a:	59 f0       	breq	.+22     	; 0x1482 <xStreamBufferSendFromISR+0x6c>
    146c:	88 85       	ldd	r24, Y+8	; 0x08
    146e:	99 85       	ldd	r25, Y+9	; 0x09
    1470:	00 e0       	ldi	r16, 0x00	; 0
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	ba 01       	movw	r22, r20
    147c:	6a d7       	rcall	.+3796   	; 0x2352 <xTaskGenericNotifyFromISR>
    147e:	19 86       	std	Y+9, r1	; 0x09
    1480:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1482:	c6 01       	movw	r24, r12
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	df 90       	pop	r13
    1492:	cf 90       	pop	r12
    1494:	bf 90       	pop	r11
    1496:	af 90       	pop	r10
    1498:	08 95       	ret

0000149a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    149a:	6f 92       	push	r6
    149c:	7f 92       	push	r7
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	1f 92       	push	r1
    14b8:	1f 92       	push	r1
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	6c 01       	movw	r12, r24
    14c0:	3b 01       	movw	r6, r22
    14c2:	4a 01       	movw	r8, r20
    14c4:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14c6:	fc 01       	movw	r30, r24
    14c8:	86 85       	ldd	r24, Z+14	; 0x0e
    14ca:	80 fd       	sbrc	r24, 0
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    14ce:	a1 2c       	mov	r10, r1
    14d0:	b1 2c       	mov	r11, r1
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14d4:	68 94       	set
    14d6:	aa 24       	eor	r10, r10
    14d8:	a1 f8       	bld	r10, 1
    14da:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    14dc:	e1 14       	cp	r14, r1
    14de:	f1 04       	cpc	r15, r1
    14e0:	29 f1       	breq	.+74     	; 0x152c <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14e8:	c6 01       	movw	r24, r12
    14ea:	40 de       	rcall	.-896    	; 0x116c <prvBytesInBuffer>
    14ec:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    14ee:	a8 16       	cp	r10, r24
    14f0:	b9 06       	cpc	r11, r25
    14f2:	38 f0       	brcs	.+14     	; 0x1502 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    14f8:	bc d7       	rcall	.+3960   	; 0x2472 <xTaskNotifyStateClear>
    14fa:	03 d5       	rcall	.+2566   	; 0x1f02 <xTaskGetCurrentTaskHandle>
    14fc:	f6 01       	movw	r30, r12
    14fe:	91 87       	std	Z+9, r25	; 0x09
    1500:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1506:	a0 16       	cp	r10, r16
    1508:	b1 06       	cpc	r11, r17
    150a:	b0 f0       	brcs	.+44     	; 0x1538 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    150c:	00 e0       	ldi	r16, 0x00	; 0
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	cb 01       	movw	r24, r22
    151c:	19 d6       	rcall	.+3122   	; 0x2150 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    151e:	f6 01       	movw	r30, r12
    1520:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1522:	10 86       	std	Z+8, r1	; 0x08
    1524:	c6 01       	movw	r24, r12
    1526:	22 de       	rcall	.-956    	; 0x116c <prvBytesInBuffer>
    1528:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <xStreamBufferReceive+0x98>
    152c:	c6 01       	movw	r24, r12
    152e:	1e de       	rcall	.-964    	; 0x116c <prvBytesInBuffer>
    1530:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1532:	a0 16       	cp	r10, r16
    1534:	b1 06       	cpc	r11, r17
    1536:	b8 f5       	brcc	.+110    	; 0x15a6 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1538:	a1 14       	cp	r10, r1
    153a:	b1 04       	cpc	r11, r1
    153c:	c1 f0       	breq	.+48     	; 0x156e <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    153e:	f6 01       	movw	r30, r12
    1540:	e0 80       	ld	r14, Z
    1542:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1544:	98 01       	movw	r18, r16
    1546:	a5 01       	movw	r20, r10
    1548:	be 01       	movw	r22, r28
    154a:	6f 5f       	subi	r22, 0xFF	; 255
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	c6 01       	movw	r24, r12
    1550:	a9 de       	rcall	.-686    	; 0x12a4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1556:	0a 19       	sub	r16, r10
    1558:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    155a:	88 16       	cp	r8, r24
    155c:	99 06       	cpc	r9, r25
    155e:	30 f4       	brcc	.+12     	; 0x156c <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1560:	f6 01       	movw	r30, r12
    1562:	f1 82       	std	Z+1, r15	; 0x01
    1564:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1566:	81 2c       	mov	r8, r1
    1568:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    156a:	01 c0       	rjmp	.+2      	; 0x156e <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    156c:	4c 01       	movw	r8, r24
    156e:	98 01       	movw	r18, r16
    1570:	a4 01       	movw	r20, r8
    1572:	b3 01       	movw	r22, r6
    1574:	c6 01       	movw	r24, r12
    1576:	96 de       	rcall	.-724    	; 0x12a4 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1578:	7c 01       	movw	r14, r24
    157a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    157c:	b1 f0       	breq	.+44     	; 0x15aa <xStreamBufferReceive+0x110>
    157e:	eb d1       	rcall	.+982    	; 0x1956 <vTaskSuspendAll>
    1580:	f6 01       	movw	r30, r12
    1582:	82 85       	ldd	r24, Z+10	; 0x0a
    1584:	93 85       	ldd	r25, Z+11	; 0x0b
    1586:	89 2b       	or	r24, r25
    1588:	61 f0       	breq	.+24     	; 0x15a2 <xStreamBufferReceive+0x108>
    158a:	82 85       	ldd	r24, Z+10	; 0x0a
    158c:	93 85       	ldd	r25, Z+11	; 0x0b
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	ba 01       	movw	r22, r20
    159a:	5d d6       	rcall	.+3258   	; 0x2256 <xTaskGenericNotify>
    159c:	f6 01       	movw	r30, r12
    159e:	13 86       	std	Z+11, r1	; 0x0b
    15a0:	12 86       	std	Z+10, r1	; 0x0a
    15a2:	a3 d2       	rcall	.+1350   	; 0x1aea <xTaskResumeAll>
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15a6:	e1 2c       	mov	r14, r1
    15a8:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15aa:	c7 01       	movw	r24, r14
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	08 95       	ret

000015ce <prvResetNextTaskUnblockTime>:
    15ce:	e0 91 b4 07 	lds	r30, 0x07B4	; 0x8007b4 <pxDelayedTaskList>
    15d2:	f0 91 b5 07 	lds	r31, 0x07B5	; 0x8007b5 <pxDelayedTaskList+0x1>
    15d6:	80 81       	ld	r24, Z
    15d8:	81 11       	cpse	r24, r1
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <prvResetNextTaskUnblockTime+0x1c>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xNextTaskUnblockTime+0x1>
    15e4:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xNextTaskUnblockTime>
    15e8:	08 95       	ret
    15ea:	e0 91 b4 07 	lds	r30, 0x07B4	; 0x8007b4 <pxDelayedTaskList>
    15ee:	f0 91 b5 07 	lds	r31, 0x07B5	; 0x8007b5 <pxDelayedTaskList+0x1>
    15f2:	05 80       	ldd	r0, Z+5	; 0x05
    15f4:	f6 81       	ldd	r31, Z+6	; 0x06
    15f6:	e0 2d       	mov	r30, r0
    15f8:	06 80       	ldd	r0, Z+6	; 0x06
    15fa:	f7 81       	ldd	r31, Z+7	; 0x07
    15fc:	e0 2d       	mov	r30, r0
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xNextTaskUnblockTime+0x1>
    1606:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xNextTaskUnblockTime>
    160a:	08 95       	ret

0000160c <prvAddCurrentTaskToDelayedList>:
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	ec 01       	movw	r28, r24
    1618:	f6 2e       	mov	r15, r22
    161a:	00 91 93 07 	lds	r16, 0x0793	; 0x800793 <xTickCount>
    161e:	10 91 94 07 	lds	r17, 0x0794	; 0x800794 <xTickCount+0x1>
    1622:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1626:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    162a:	02 96       	adiw	r24, 0x02	; 2
    162c:	8c d8       	rcall	.-3816   	; 0x746 <uxListRemove>
    162e:	cf 3f       	cpi	r28, 0xFF	; 255
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	d8 07       	cpc	r29, r24
    1634:	61 f4       	brne	.+24     	; 0x164e <prvAddCurrentTaskToDelayedList+0x42>
    1636:	ff 20       	and	r15, r15
    1638:	51 f0       	breq	.+20     	; 0x164e <prvAddCurrentTaskToDelayedList+0x42>
    163a:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <pxCurrentTCB>
    163e:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1642:	6e 5f       	subi	r22, 0xFE	; 254
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	86 e9       	ldi	r24, 0x96	; 150
    1648:	97 e0       	ldi	r25, 0x07	; 7
    164a:	2b d8       	rcall	.-4010   	; 0x6a2 <vListInsertEnd>
    164c:	2d c0       	rjmp	.+90     	; 0x16a8 <prvAddCurrentTaskToDelayedList+0x9c>
    164e:	c0 0f       	add	r28, r16
    1650:	d1 1f       	adc	r29, r17
    1652:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1656:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    165a:	d3 83       	std	Z+3, r29	; 0x03
    165c:	c2 83       	std	Z+2, r28	; 0x02
    165e:	c0 17       	cp	r28, r16
    1660:	d1 07       	cpc	r29, r17
    1662:	60 f4       	brcc	.+24     	; 0x167c <prvAddCurrentTaskToDelayedList+0x70>
    1664:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1668:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    166c:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <pxOverflowDelayedTaskList>
    1670:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <pxOverflowDelayedTaskList+0x1>
    1674:	6e 5f       	subi	r22, 0xFE	; 254
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	35 d8       	rcall	.-3990   	; 0x6e4 <vListInsert>
    167a:	16 c0       	rjmp	.+44     	; 0x16a8 <prvAddCurrentTaskToDelayedList+0x9c>
    167c:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1680:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1684:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxDelayedTaskList>
    1688:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <pxDelayedTaskList+0x1>
    168c:	6e 5f       	subi	r22, 0xFE	; 254
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	29 d8       	rcall	.-4014   	; 0x6e4 <vListInsert>
    1692:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xNextTaskUnblockTime>
    1696:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xNextTaskUnblockTime+0x1>
    169a:	c8 17       	cp	r28, r24
    169c:	d9 07       	cpc	r29, r25
    169e:	20 f4       	brcc	.+8      	; 0x16a8 <prvAddCurrentTaskToDelayedList+0x9c>
    16a0:	d0 93 8c 07 	sts	0x078C, r29	; 0x80078c <xNextTaskUnblockTime+0x1>
    16a4:	c0 93 8b 07 	sts	0x078B, r28	; 0x80078b <xNextTaskUnblockTime>
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	08 95       	ret

000016b4 <xTaskCreate>:
    16b4:	4f 92       	push	r4
    16b6:	5f 92       	push	r5
    16b8:	6f 92       	push	r6
    16ba:	7f 92       	push	r7
    16bc:	8f 92       	push	r8
    16be:	9f 92       	push	r9
    16c0:	af 92       	push	r10
    16c2:	bf 92       	push	r11
    16c4:	cf 92       	push	r12
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	4c 01       	movw	r8, r24
    16d4:	6b 01       	movw	r12, r22
    16d6:	5a 01       	movw	r10, r20
    16d8:	29 01       	movw	r4, r18
    16da:	ca 01       	movw	r24, r20
    16dc:	0e 94 1d 03 	call	0x63a	; 0x63a <pvPortMalloc>
    16e0:	3c 01       	movw	r6, r24
    16e2:	89 2b       	or	r24, r25
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <xTaskCreate+0x34>
    16e6:	f3 c0       	rjmp	.+486    	; 0x18ce <xTaskCreate+0x21a>
    16e8:	8c e2       	ldi	r24, 0x2C	; 44
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 1d 03 	call	0x63a	; 0x63a <pvPortMalloc>
    16f0:	ec 01       	movw	r28, r24
    16f2:	89 2b       	or	r24, r25
    16f4:	99 f0       	breq	.+38     	; 0x171c <xTaskCreate+0x68>
    16f6:	78 8e       	std	Y+24, r7	; 0x18
    16f8:	6f 8a       	std	Y+23, r6	; 0x17
    16fa:	a5 01       	movw	r20, r10
    16fc:	65 ea       	ldi	r22, 0xA5	; 165
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	c3 01       	movw	r24, r6
    1702:	0e 94 ad 2b 	call	0x575a	; 0x575a <memset>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	a8 1a       	sub	r10, r24
    170a:	b1 08       	sbc	r11, r1
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	a8 0e       	add	r10, r24
    1712:	b9 1e       	adc	r11, r25
    1714:	c1 14       	cp	r12, r1
    1716:	d1 04       	cpc	r13, r1
    1718:	29 f4       	brne	.+10     	; 0x1724 <xTaskCreate+0x70>
    171a:	20 c0       	rjmp	.+64     	; 0x175c <xTaskCreate+0xa8>
    171c:	c3 01       	movw	r24, r6
    171e:	0e 94 30 03 	call	0x660	; 0x660 <vPortFree>
    1722:	d5 c0       	rjmp	.+426    	; 0x18ce <xTaskCreate+0x21a>
    1724:	d6 01       	movw	r26, r12
    1726:	8c 91       	ld	r24, X
    1728:	89 8f       	std	Y+25, r24	; 0x19
    172a:	8c 91       	ld	r24, X
    172c:	88 23       	and	r24, r24
    172e:	a1 f0       	breq	.+40     	; 0x1758 <xTaskCreate+0xa4>
    1730:	ae 01       	movw	r20, r28
    1732:	46 5e       	subi	r20, 0xE6	; 230
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	f6 01       	movw	r30, r12
    1738:	31 96       	adiw	r30, 0x01	; 1
    173a:	b8 e0       	ldi	r27, 0x08	; 8
    173c:	cb 0e       	add	r12, r27
    173e:	d1 1c       	adc	r13, r1
    1740:	cf 01       	movw	r24, r30
    1742:	21 91       	ld	r18, Z+
    1744:	da 01       	movw	r26, r20
    1746:	2d 93       	st	X+, r18
    1748:	ad 01       	movw	r20, r26
    174a:	dc 01       	movw	r26, r24
    174c:	8c 91       	ld	r24, X
    174e:	88 23       	and	r24, r24
    1750:	19 f0       	breq	.+6      	; 0x1758 <xTaskCreate+0xa4>
    1752:	ec 15       	cp	r30, r12
    1754:	fd 05       	cpc	r31, r13
    1756:	a1 f7       	brne	.-24     	; 0x1740 <xTaskCreate+0x8c>
    1758:	18 a2       	std	Y+32, r1	; 0x20
    175a:	01 c0       	rjmp	.+2      	; 0x175e <xTaskCreate+0xaa>
    175c:	19 8e       	std	Y+25, r1	; 0x19
    175e:	04 30       	cpi	r16, 0x04	; 4
    1760:	08 f0       	brcs	.+2      	; 0x1764 <xTaskCreate+0xb0>
    1762:	03 e0       	ldi	r16, 0x03	; 3
    1764:	0e 8b       	std	Y+22, r16	; 0x16
    1766:	0b a3       	std	Y+35, r16	; 0x23
    1768:	1c a2       	std	Y+36, r1	; 0x24
    176a:	6e 01       	movw	r12, r28
    176c:	b2 e0       	ldi	r27, 0x02	; 2
    176e:	cb 0e       	add	r12, r27
    1770:	d1 1c       	adc	r13, r1
    1772:	c6 01       	movw	r24, r12
    1774:	0e 94 4d 03 	call	0x69a	; 0x69a <vListInitialiseItem>
    1778:	ce 01       	movw	r24, r28
    177a:	0c 96       	adiw	r24, 0x0c	; 12
    177c:	0e 94 4d 03 	call	0x69a	; 0x69a <vListInitialiseItem>
    1780:	d9 87       	std	Y+9, r29	; 0x09
    1782:	c8 87       	std	Y+8, r28	; 0x08
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	80 1b       	sub	r24, r16
    178a:	91 09       	sbc	r25, r1
    178c:	9d 87       	std	Y+13, r25	; 0x0d
    178e:	8c 87       	std	Y+12, r24	; 0x0c
    1790:	db 8b       	std	Y+19, r29	; 0x13
    1792:	ca 8b       	std	Y+18, r28	; 0x12
    1794:	1e a2       	std	Y+38, r1	; 0x26
    1796:	1d a2       	std	Y+37, r1	; 0x25
    1798:	1f a2       	std	Y+39, r1	; 0x27
    179a:	18 a6       	std	Y+40, r1	; 0x28
    179c:	19 a6       	std	Y+41, r1	; 0x29
    179e:	1a a6       	std	Y+42, r1	; 0x2a
    17a0:	1b a6       	std	Y+43, r1	; 0x2b
    17a2:	a2 01       	movw	r20, r4
    17a4:	b4 01       	movw	r22, r8
    17a6:	c5 01       	movw	r24, r10
    17a8:	0e 94 ca 03 	call	0x794	; 0x794 <pxPortInitialiseStack>
    17ac:	99 83       	std	Y+1, r25	; 0x01
    17ae:	88 83       	st	Y, r24
    17b0:	e1 14       	cp	r14, r1
    17b2:	f1 04       	cpc	r15, r1
    17b4:	19 f0       	breq	.+6      	; 0x17bc <xTaskCreate+0x108>
    17b6:	f7 01       	movw	r30, r14
    17b8:	d1 83       	std	Z+1, r29	; 0x01
    17ba:	c0 83       	st	Z, r28
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	0f 92       	push	r0
    17c2:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <uxCurrentNumberOfTasks>
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <uxCurrentNumberOfTasks>
    17cc:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    17d0:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    17d4:	89 2b       	or	r24, r25
    17d6:	d1 f5       	brne	.+116    	; 0x184c <xTaskCreate+0x198>
    17d8:	d0 93 ed 07 	sts	0x07ED, r29	; 0x8007ed <pxCurrentTCB+0x1>
    17dc:	c0 93 ec 07 	sts	0x07EC, r28	; 0x8007ec <pxCurrentTCB>
    17e0:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <uxCurrentNumberOfTasks>
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	09 f0       	breq	.+2      	; 0x17ea <xTaskCreate+0x136>
    17e8:	41 c0       	rjmp	.+130    	; 0x186c <xTaskCreate+0x1b8>
    17ea:	88 ec       	ldi	r24, 0xC8	; 200
    17ec:	97 e0       	ldi	r25, 0x07	; 7
    17ee:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    17f2:	81 ed       	ldi	r24, 0xD1	; 209
    17f4:	97 e0       	ldi	r25, 0x07	; 7
    17f6:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    17fa:	8a ed       	ldi	r24, 0xDA	; 218
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    1802:	83 ee       	ldi	r24, 0xE3	; 227
    1804:	97 e0       	ldi	r25, 0x07	; 7
    1806:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    180a:	8f eb       	ldi	r24, 0xBF	; 191
    180c:	97 e0       	ldi	r25, 0x07	; 7
    180e:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    1812:	86 eb       	ldi	r24, 0xB6	; 182
    1814:	97 e0       	ldi	r25, 0x07	; 7
    1816:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    181a:	89 ea       	ldi	r24, 0xA9	; 169
    181c:	97 e0       	ldi	r25, 0x07	; 7
    181e:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    1822:	80 ea       	ldi	r24, 0xA0	; 160
    1824:	97 e0       	ldi	r25, 0x07	; 7
    1826:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    182a:	86 e9       	ldi	r24, 0x96	; 150
    182c:	97 e0       	ldi	r25, 0x07	; 7
    182e:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
    1832:	8f eb       	ldi	r24, 0xBF	; 191
    1834:	97 e0       	ldi	r25, 0x07	; 7
    1836:	90 93 b5 07 	sts	0x07B5, r25	; 0x8007b5 <pxDelayedTaskList+0x1>
    183a:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <pxDelayedTaskList>
    183e:	86 eb       	ldi	r24, 0xB6	; 182
    1840:	97 e0       	ldi	r25, 0x07	; 7
    1842:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <pxOverflowDelayedTaskList+0x1>
    1846:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <pxOverflowDelayedTaskList>
    184a:	10 c0       	rjmp	.+32     	; 0x186c <xTaskCreate+0x1b8>
    184c:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xSchedulerRunning>
    1850:	81 11       	cpse	r24, r1
    1852:	0c c0       	rjmp	.+24     	; 0x186c <xTaskCreate+0x1b8>
    1854:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1858:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    185c:	96 89       	ldd	r25, Z+22	; 0x16
    185e:	8e 89       	ldd	r24, Y+22	; 0x16
    1860:	89 17       	cp	r24, r25
    1862:	20 f0       	brcs	.+8      	; 0x186c <xTaskCreate+0x1b8>
    1864:	d0 93 ed 07 	sts	0x07ED, r29	; 0x8007ed <pxCurrentTCB+0x1>
    1868:	c0 93 ec 07 	sts	0x07EC, r28	; 0x8007ec <pxCurrentTCB>
    186c:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTaskNumber>
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTaskNumber>
    1876:	89 a3       	std	Y+33, r24	; 0x21
    1878:	8e 89       	ldd	r24, Y+22	; 0x16
    187a:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    187e:	98 17       	cp	r25, r24
    1880:	10 f4       	brcc	.+4      	; 0x1886 <xTaskCreate+0x1d2>
    1882:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9c 01       	movw	r18, r24
    188a:	22 0f       	add	r18, r18
    188c:	33 1f       	adc	r19, r19
    188e:	22 0f       	add	r18, r18
    1890:	33 1f       	adc	r19, r19
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	82 0f       	add	r24, r18
    1898:	93 1f       	adc	r25, r19
    189a:	b6 01       	movw	r22, r12
    189c:	88 53       	subi	r24, 0x38	; 56
    189e:	98 4f       	sbci	r25, 0xF8	; 248
    18a0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xSchedulerRunning>
    18ac:	88 23       	and	r24, r24
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <xTaskCreate+0x212>
    18b0:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    18b4:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    18b8:	96 89       	ldd	r25, Z+22	; 0x16
    18ba:	8e 89       	ldd	r24, Y+22	; 0x16
    18bc:	98 17       	cp	r25, r24
    18be:	28 f4       	brcc	.+10     	; 0x18ca <xTaskCreate+0x216>
    18c0:	17 d8       	rcall	.-4050   	; 0x8f0 <vPortYield>
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <xTaskCreate+0x21c>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <xTaskCreate+0x21c>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <xTaskCreate+0x21c>
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	bf 90       	pop	r11
    18e0:	af 90       	pop	r10
    18e2:	9f 90       	pop	r9
    18e4:	8f 90       	pop	r8
    18e6:	7f 90       	pop	r7
    18e8:	6f 90       	pop	r6
    18ea:	5f 90       	pop	r5
    18ec:	4f 90       	pop	r4
    18ee:	08 95       	ret

000018f0 <vTaskStartScheduler>:
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	0f 2e       	mov	r0, r31
    18f8:	f9 e8       	ldi	r31, 0x89	; 137
    18fa:	ef 2e       	mov	r14, r31
    18fc:	f7 e0       	ldi	r31, 0x07	; 7
    18fe:	ff 2e       	mov	r15, r31
    1900:	f0 2d       	mov	r31, r0
    1902:	00 e0       	ldi	r16, 0x00	; 0
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 ec       	ldi	r20, 0xC0	; 192
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	66 e8       	ldi	r22, 0x86	; 134
    190e:	72 e0       	ldi	r23, 0x02	; 2
    1910:	8e e4       	ldi	r24, 0x4E	; 78
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	cf de       	rcall	.-610    	; 0x16b4 <xTaskCreate>
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	d1 f4       	brne	.+52     	; 0x194e <vTaskStartScheduler+0x5e>
    191a:	17 d6       	rcall	.+3118   	; 0x254a <xTimerCreateTimerTask>
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	b9 f4       	brne	.+46     	; 0x194e <vTaskStartScheduler+0x5e>
    1920:	f8 94       	cli
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	9f ef       	ldi	r25, 0xFF	; 255
    1926:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xNextTaskUnblockTime+0x1>
    192a:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xNextTaskUnblockTime>
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <xSchedulerRunning>
    1934:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <xTickCount+0x1>
    1938:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <xTickCount>
    193c:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1940:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1944:	85 a1       	ldd	r24, Z+37	; 0x25
    1946:	0e 94 0d 03 	call	0x61a	; 0x61a <task_switch_in>
    194a:	0e 94 3c 04 	call	0x878	; 0x878 <xPortStartScheduler>
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	08 95       	ret

00001956 <vTaskSuspendAll>:
    1956:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    195a:	8f 5f       	subi	r24, 0xFF	; 255
    195c:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <__data_end>
    1960:	08 95       	ret

00001962 <xTaskGetTickCount>:
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	0f 92       	push	r0
    1968:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <xTickCount>
    196c:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xTickCount+0x1>
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	08 95       	ret

00001976 <xTaskIncrementTick>:
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    198a:	81 11       	cpse	r24, r1
    198c:	98 c0       	rjmp	.+304    	; 0x1abe <xTaskIncrementTick+0x148>
    198e:	e0 90 93 07 	lds	r14, 0x0793	; 0x800793 <xTickCount>
    1992:	f0 90 94 07 	lds	r15, 0x0794	; 0x800794 <xTickCount+0x1>
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	e8 1a       	sub	r14, r24
    199a:	f8 0a       	sbc	r15, r24
    199c:	f0 92 94 07 	sts	0x0794, r15	; 0x800794 <xTickCount+0x1>
    19a0:	e0 92 93 07 	sts	0x0793, r14	; 0x800793 <xTickCount>
    19a4:	e1 14       	cp	r14, r1
    19a6:	f1 04       	cpc	r15, r1
    19a8:	b1 f4       	brne	.+44     	; 0x19d6 <xTaskIncrementTick+0x60>
    19aa:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxDelayedTaskList>
    19ae:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <pxDelayedTaskList+0x1>
    19b2:	20 91 b2 07 	lds	r18, 0x07B2	; 0x8007b2 <pxOverflowDelayedTaskList>
    19b6:	30 91 b3 07 	lds	r19, 0x07B3	; 0x8007b3 <pxOverflowDelayedTaskList+0x1>
    19ba:	30 93 b5 07 	sts	0x07B5, r19	; 0x8007b5 <pxDelayedTaskList+0x1>
    19be:	20 93 b4 07 	sts	0x07B4, r18	; 0x8007b4 <pxDelayedTaskList>
    19c2:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <pxOverflowDelayedTaskList+0x1>
    19c6:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <pxOverflowDelayedTaskList>
    19ca:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <xNumOfOverflows>
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <xNumOfOverflows>
    19d4:	fc dd       	rcall	.-1032   	; 0x15ce <prvResetNextTaskUnblockTime>
    19d6:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xNextTaskUnblockTime>
    19da:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xNextTaskUnblockTime+0x1>
    19de:	e8 16       	cp	r14, r24
    19e0:	f9 06       	cpc	r15, r25
    19e2:	10 f4       	brcc	.+4      	; 0x19e8 <xTaskIncrementTick+0x72>
    19e4:	d1 2c       	mov	r13, r1
    19e6:	53 c0       	rjmp	.+166    	; 0x1a8e <xTaskIncrementTick+0x118>
    19e8:	d1 2c       	mov	r13, r1
    19ea:	cc 24       	eor	r12, r12
    19ec:	c3 94       	inc	r12
    19ee:	e0 91 b4 07 	lds	r30, 0x07B4	; 0x8007b4 <pxDelayedTaskList>
    19f2:	f0 91 b5 07 	lds	r31, 0x07B5	; 0x8007b5 <pxDelayedTaskList+0x1>
    19f6:	80 81       	ld	r24, Z
    19f8:	81 11       	cpse	r24, r1
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <xTaskIncrementTick+0x94>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	9f ef       	ldi	r25, 0xFF	; 255
    1a00:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xNextTaskUnblockTime+0x1>
    1a04:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xNextTaskUnblockTime>
    1a08:	42 c0       	rjmp	.+132    	; 0x1a8e <xTaskIncrementTick+0x118>
    1a0a:	e0 91 b4 07 	lds	r30, 0x07B4	; 0x8007b4 <pxDelayedTaskList>
    1a0e:	f0 91 b5 07 	lds	r31, 0x07B5	; 0x8007b5 <pxDelayedTaskList+0x1>
    1a12:	05 80       	ldd	r0, Z+5	; 0x05
    1a14:	f6 81       	ldd	r31, Z+6	; 0x06
    1a16:	e0 2d       	mov	r30, r0
    1a18:	c6 81       	ldd	r28, Z+6	; 0x06
    1a1a:	d7 81       	ldd	r29, Z+7	; 0x07
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	e8 16       	cp	r14, r24
    1a22:	f9 06       	cpc	r15, r25
    1a24:	28 f4       	brcc	.+10     	; 0x1a30 <xTaskIncrementTick+0xba>
    1a26:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xNextTaskUnblockTime+0x1>
    1a2a:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xNextTaskUnblockTime>
    1a2e:	2f c0       	rjmp	.+94     	; 0x1a8e <xTaskIncrementTick+0x118>
    1a30:	8e 01       	movw	r16, r28
    1a32:	0e 5f       	subi	r16, 0xFE	; 254
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	c8 01       	movw	r24, r16
    1a38:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1a3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a3e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a40:	89 2b       	or	r24, r25
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <xTaskIncrementTick+0xd6>
    1a44:	ce 01       	movw	r24, r28
    1a46:	0c 96       	adiw	r24, 0x0c	; 12
    1a48:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1a4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a4e:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    1a52:	98 17       	cp	r25, r24
    1a54:	10 f4       	brcc	.+4      	; 0x1a5a <xTaskIncrementTick+0xe4>
    1a56:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	22 0f       	add	r18, r18
    1a64:	33 1f       	adc	r19, r19
    1a66:	22 0f       	add	r18, r18
    1a68:	33 1f       	adc	r19, r19
    1a6a:	82 0f       	add	r24, r18
    1a6c:	93 1f       	adc	r25, r19
    1a6e:	b8 01       	movw	r22, r16
    1a70:	88 53       	subi	r24, 0x38	; 56
    1a72:	98 4f       	sbci	r25, 0xF8	; 248
    1a74:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    1a78:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1a7c:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1a80:	9e 89       	ldd	r25, Y+22	; 0x16
    1a82:	86 89       	ldd	r24, Z+22	; 0x16
    1a84:	98 17       	cp	r25, r24
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <xTaskIncrementTick+0x114>
    1a88:	b2 cf       	rjmp	.-156    	; 0x19ee <xTaskIncrementTick+0x78>
    1a8a:	dc 2c       	mov	r13, r12
    1a8c:	b0 cf       	rjmp	.-160    	; 0x19ee <xTaskIncrementTick+0x78>
    1a8e:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1a92:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1a96:	86 89       	ldd	r24, Z+22	; 0x16
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	8e 0f       	add	r24, r30
    1aaa:	9f 1f       	adc	r25, r31
    1aac:	fc 01       	movw	r30, r24
    1aae:	e8 53       	subi	r30, 0x38	; 56
    1ab0:	f8 4f       	sbci	r31, 0xF8	; 248
    1ab2:	80 81       	ld	r24, Z
    1ab4:	82 30       	cpi	r24, 0x02	; 2
    1ab6:	48 f0       	brcs	.+18     	; 0x1aca <xTaskIncrementTick+0x154>
    1ab8:	dd 24       	eor	r13, r13
    1aba:	d3 94       	inc	r13
    1abc:	06 c0       	rjmp	.+12     	; 0x1aca <xTaskIncrementTick+0x154>
    1abe:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <uxPendedTicks>
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <uxPendedTicks>
    1ac8:	d1 2c       	mov	r13, r1
    1aca:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <xYieldPending>
    1ace:	88 23       	and	r24, r24
    1ad0:	11 f0       	breq	.+4      	; 0x1ad6 <xTaskIncrementTick+0x160>
    1ad2:	dd 24       	eor	r13, r13
    1ad4:	d3 94       	inc	r13
    1ad6:	8d 2d       	mov	r24, r13
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <xTaskResumeAll>:
    1aea:	df 92       	push	r13
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	0f 92       	push	r0
    1afe:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    1b02:	81 50       	subi	r24, 0x01	; 1
    1b04:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <__data_end>
    1b08:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	5d c0       	rjmp	.+186    	; 0x1bca <xTaskResumeAll+0xe0>
    1b10:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <uxCurrentNumberOfTasks>
    1b14:	81 11       	cpse	r24, r1
    1b16:	33 c0       	rjmp	.+102    	; 0x1b7e <xTaskResumeAll+0x94>
    1b18:	5b c0       	rjmp	.+182    	; 0x1bd0 <xTaskResumeAll+0xe6>
    1b1a:	d7 01       	movw	r26, r14
    1b1c:	15 96       	adiw	r26, 0x05	; 5
    1b1e:	ed 91       	ld	r30, X+
    1b20:	fc 91       	ld	r31, X
    1b22:	16 97       	sbiw	r26, 0x06	; 6
    1b24:	c6 81       	ldd	r28, Z+6	; 0x06
    1b26:	d7 81       	ldd	r29, Z+7	; 0x07
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0c 96       	adiw	r24, 0x0c	; 12
    1b2c:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1b30:	8e 01       	movw	r16, r28
    1b32:	0e 5f       	subi	r16, 0xFE	; 254
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	c8 01       	movw	r24, r16
    1b38:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1b3c:	8e 89       	ldd	r24, Y+22	; 0x16
    1b3e:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    1b42:	98 17       	cp	r25, r24
    1b44:	10 f4       	brcc	.+4      	; 0x1b4a <xTaskResumeAll+0x60>
    1b46:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9c 01       	movw	r18, r24
    1b4e:	22 0f       	add	r18, r18
    1b50:	33 1f       	adc	r19, r19
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	82 0f       	add	r24, r18
    1b5c:	93 1f       	adc	r25, r19
    1b5e:	b8 01       	movw	r22, r16
    1b60:	88 53       	subi	r24, 0x38	; 56
    1b62:	98 4f       	sbci	r25, 0xF8	; 248
    1b64:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    1b68:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1b6c:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1b70:	9e 89       	ldd	r25, Y+22	; 0x16
    1b72:	86 89       	ldd	r24, Z+22	; 0x16
    1b74:	98 17       	cp	r25, r24
    1b76:	68 f0       	brcs	.+26     	; 0x1b92 <xTaskResumeAll+0xa8>
    1b78:	d0 92 8f 07 	sts	0x078F, r13	; 0x80078f <xYieldPending>
    1b7c:	0a c0       	rjmp	.+20     	; 0x1b92 <xTaskResumeAll+0xa8>
    1b7e:	c0 e0       	ldi	r28, 0x00	; 0
    1b80:	d0 e0       	ldi	r29, 0x00	; 0
    1b82:	0f 2e       	mov	r0, r31
    1b84:	f9 ea       	ldi	r31, 0xA9	; 169
    1b86:	ef 2e       	mov	r14, r31
    1b88:	f7 e0       	ldi	r31, 0x07	; 7
    1b8a:	ff 2e       	mov	r15, r31
    1b8c:	f0 2d       	mov	r31, r0
    1b8e:	dd 24       	eor	r13, r13
    1b90:	d3 94       	inc	r13
    1b92:	f7 01       	movw	r30, r14
    1b94:	80 81       	ld	r24, Z
    1b96:	81 11       	cpse	r24, r1
    1b98:	c0 cf       	rjmp	.-128    	; 0x1b1a <xTaskResumeAll+0x30>
    1b9a:	cd 2b       	or	r28, r29
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <xTaskResumeAll+0xb6>
    1b9e:	17 dd       	rcall	.-1490   	; 0x15ce <prvResetNextTaskUnblockTime>
    1ba0:	c0 91 90 07 	lds	r28, 0x0790	; 0x800790 <uxPendedTicks>
    1ba4:	cc 23       	and	r28, r28
    1ba6:	49 f0       	breq	.+18     	; 0x1bba <xTaskResumeAll+0xd0>
    1ba8:	d1 e0       	ldi	r29, 0x01	; 1
    1baa:	e5 de       	rcall	.-566    	; 0x1976 <xTaskIncrementTick>
    1bac:	81 11       	cpse	r24, r1
    1bae:	d0 93 8f 07 	sts	0x078F, r29	; 0x80078f <xYieldPending>
    1bb2:	c1 50       	subi	r28, 0x01	; 1
    1bb4:	d1 f7       	brne	.-12     	; 0x1baa <xTaskResumeAll+0xc0>
    1bb6:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <uxPendedTicks>
    1bba:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <xYieldPending>
    1bbe:	88 23       	and	r24, r24
    1bc0:	31 f0       	breq	.+12     	; 0x1bce <xTaskResumeAll+0xe4>
    1bc2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <xTaskResumeAll+0xe6>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <xTaskResumeAll+0xe6>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	08 95       	ret

00001be4 <vTaskDelayUntil>:
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	8c 01       	movw	r16, r24
    1bee:	eb 01       	movw	r28, r22
    1bf0:	b2 de       	rcall	.-668    	; 0x1956 <vTaskSuspendAll>
    1bf2:	40 91 93 07 	lds	r20, 0x0793	; 0x800793 <xTickCount>
    1bf6:	50 91 94 07 	lds	r21, 0x0794	; 0x800794 <xTickCount+0x1>
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	20 81       	ld	r18, Z
    1bfe:	31 81       	ldd	r19, Z+1	; 0x01
    1c00:	c9 01       	movw	r24, r18
    1c02:	8c 0f       	add	r24, r28
    1c04:	9d 1f       	adc	r25, r29
    1c06:	42 17       	cp	r20, r18
    1c08:	53 07       	cpc	r21, r19
    1c0a:	48 f4       	brcc	.+18     	; 0x1c1e <vTaskDelayUntil+0x3a>
    1c0c:	82 17       	cp	r24, r18
    1c0e:	93 07       	cpc	r25, r19
    1c10:	d8 f4       	brcc	.+54     	; 0x1c48 <vTaskDelayUntil+0x64>
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	48 17       	cp	r20, r24
    1c18:	59 07       	cpc	r21, r25
    1c1a:	60 f4       	brcc	.+24     	; 0x1c34 <vTaskDelayUntil+0x50>
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <vTaskDelayUntil+0x48>
    1c1e:	82 17       	cp	r24, r18
    1c20:	93 07       	cpc	r25, r19
    1c22:	70 f0       	brcs	.+28     	; 0x1c40 <vTaskDelayUntil+0x5c>
    1c24:	48 17       	cp	r20, r24
    1c26:	59 07       	cpc	r21, r25
    1c28:	58 f0       	brcs	.+22     	; 0x1c40 <vTaskDelayUntil+0x5c>
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <vTaskDelayUntil+0x64>
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	84 1b       	sub	r24, r20
    1c30:	95 0b       	sbc	r25, r21
    1c32:	ec dc       	rcall	.-1576   	; 0x160c <prvAddCurrentTaskToDelayedList>
    1c34:	5a df       	rcall	.-332    	; 0x1aea <xTaskResumeAll>
    1c36:	81 11       	cpse	r24, r1
    1c38:	0b c0       	rjmp	.+22     	; 0x1c50 <vTaskDelayUntil+0x6c>
    1c3a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <vTaskDelayUntil+0x6c>
    1c40:	f8 01       	movw	r30, r16
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	f2 cf       	rjmp	.-28     	; 0x1c2c <vTaskDelayUntil+0x48>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
    1c4e:	f2 cf       	rjmp	.-28     	; 0x1c34 <vTaskDelayUntil+0x50>
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	08 95       	ret

00001c5a <vTaskDelay>:
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
    1c60:	89 2b       	or	r24, r25
    1c62:	39 f0       	breq	.+14     	; 0x1c72 <vTaskDelay+0x18>
    1c64:	78 de       	rcall	.-784    	; 0x1956 <vTaskSuspendAll>
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	ce 01       	movw	r24, r28
    1c6a:	d0 dc       	rcall	.-1632   	; 0x160c <prvAddCurrentTaskToDelayedList>
    1c6c:	3e df       	rcall	.-388    	; 0x1aea <xTaskResumeAll>
    1c6e:	81 11       	cpse	r24, r1
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <vTaskDelay+0x1c>
    1c72:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <vTaskSwitchContext>:
    1c7c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    1c80:	88 23       	and	r24, r24
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <vTaskSwitchContext+0x10>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <xYieldPending>
    1c8a:	08 95       	ret
    1c8c:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <xYieldPending>
    1c90:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1c94:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1c98:	85 a1       	ldd	r24, Z+37	; 0x25
    1c9a:	0e 94 17 03 	call	0x62e	; 0x62e <task_switch_out>
    1c9e:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1ca2:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1ca6:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1caa:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1cae:	2d 91       	ld	r18, X+
    1cb0:	3c 91       	ld	r19, X
    1cb2:	87 89       	ldd	r24, Z+23	; 0x17
    1cb4:	90 8d       	ldd	r25, Z+24	; 0x18
    1cb6:	82 17       	cp	r24, r18
    1cb8:	93 07       	cpc	r25, r19
    1cba:	58 f0       	brcs	.+22     	; 0x1cd2 <vTaskSwitchContext+0x56>
    1cbc:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1cc0:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1cc4:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1cc8:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1ccc:	67 5e       	subi	r22, 0xE7	; 231
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	55 d5       	rcall	.+2730   	; 0x277c <vApplicationStackOverflowHook>
    1cd2:	20 91 92 07 	lds	r18, 0x0792	; 0x800792 <uxTopReadyPriority>
    1cd6:	82 2f       	mov	r24, r18
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	fc 01       	movw	r30, r24
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	e8 0f       	add	r30, r24
    1cea:	f9 1f       	adc	r31, r25
    1cec:	e8 53       	subi	r30, 0x38	; 56
    1cee:	f8 4f       	sbci	r31, 0xF8	; 248
    1cf0:	30 81       	ld	r19, Z
    1cf2:	31 11       	cpse	r19, r1
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <vTaskSwitchContext+0x9c>
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	82 2f       	mov	r24, r18
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	e8 0f       	add	r30, r24
    1d0c:	f9 1f       	adc	r31, r25
    1d0e:	e8 53       	subi	r30, 0x38	; 56
    1d10:	f8 4f       	sbci	r31, 0xF8	; 248
    1d12:	30 81       	ld	r19, Z
    1d14:	33 23       	and	r19, r19
    1d16:	79 f3       	breq	.-34     	; 0x1cf6 <vTaskSwitchContext+0x7a>
    1d18:	ac 01       	movw	r20, r24
    1d1a:	44 0f       	add	r20, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	44 0f       	add	r20, r20
    1d20:	55 1f       	adc	r21, r21
    1d22:	44 0f       	add	r20, r20
    1d24:	55 1f       	adc	r21, r21
    1d26:	48 0f       	add	r20, r24
    1d28:	59 1f       	adc	r21, r25
    1d2a:	da 01       	movw	r26, r20
    1d2c:	a8 53       	subi	r26, 0x38	; 56
    1d2e:	b8 4f       	sbci	r27, 0xF8	; 248
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	ed 91       	ld	r30, X+
    1d34:	fc 91       	ld	r31, X
    1d36:	12 97       	sbiw	r26, 0x02	; 2
    1d38:	02 80       	ldd	r0, Z+2	; 0x02
    1d3a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d3c:	e0 2d       	mov	r30, r0
    1d3e:	12 96       	adiw	r26, 0x02	; 2
    1d40:	fc 93       	st	X, r31
    1d42:	ee 93       	st	-X, r30
    1d44:	11 97       	sbiw	r26, 0x01	; 1
    1d46:	45 53       	subi	r20, 0x35	; 53
    1d48:	58 4f       	sbci	r21, 0xF8	; 248
    1d4a:	e4 17       	cp	r30, r20
    1d4c:	f5 07       	cpc	r31, r21
    1d4e:	29 f4       	brne	.+10     	; 0x1d5a <vTaskSwitchContext+0xde>
    1d50:	42 81       	ldd	r20, Z+2	; 0x02
    1d52:	53 81       	ldd	r21, Z+3	; 0x03
    1d54:	fd 01       	movw	r30, r26
    1d56:	52 83       	std	Z+2, r21	; 0x02
    1d58:	41 83       	std	Z+1, r20	; 0x01
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	ee 0f       	add	r30, r30
    1d66:	ff 1f       	adc	r31, r31
    1d68:	8e 0f       	add	r24, r30
    1d6a:	9f 1f       	adc	r25, r31
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e8 53       	subi	r30, 0x38	; 56
    1d70:	f8 4f       	sbci	r31, 0xF8	; 248
    1d72:	01 80       	ldd	r0, Z+1	; 0x01
    1d74:	f2 81       	ldd	r31, Z+2	; 0x02
    1d76:	e0 2d       	mov	r30, r0
    1d78:	86 81       	ldd	r24, Z+6	; 0x06
    1d7a:	97 81       	ldd	r25, Z+7	; 0x07
    1d7c:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <pxCurrentTCB+0x1>
    1d80:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <pxCurrentTCB>
    1d84:	20 93 92 07 	sts	0x0792, r18	; 0x800792 <uxTopReadyPriority>
    1d88:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1d8c:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1d90:	85 a1       	ldd	r24, Z+37	; 0x25
    1d92:	0c 94 0d 03 	jmp	0x61a	; 0x61a <task_switch_in>
    1d96:	08 95       	ret

00001d98 <vTaskPlaceOnEventList>:
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	eb 01       	movw	r28, r22
    1d9e:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1da2:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1da6:	64 5f       	subi	r22, 0xF4	; 244
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	0e 94 72 03 	call	0x6e4	; 0x6e4 <vListInsert>
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	ce 01       	movw	r24, r28
    1db2:	2c dc       	rcall	.-1960   	; 0x160c <prvAddCurrentTaskToDelayedList>
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	08 95       	ret

00001dba <vTaskPlaceOnEventListRestricted>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	8b 01       	movw	r16, r22
    1dc2:	c4 2f       	mov	r28, r20
    1dc4:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1dc8:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1dcc:	64 5f       	subi	r22, 0xF4	; 244
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    1dd4:	cc 23       	and	r28, r28
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <vTaskPlaceOnEventListRestricted+0x22>
    1dd8:	0f ef       	ldi	r16, 0xFF	; 255
    1dda:	1f ef       	ldi	r17, 0xFF	; 255
    1ddc:	6c 2f       	mov	r22, r28
    1dde:	c8 01       	movw	r24, r16
    1de0:	15 dc       	rcall	.-2006   	; 0x160c <prvAddCurrentTaskToDelayedList>
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <xTaskRemoveFromEventList>:
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	dc 01       	movw	r26, r24
    1df4:	15 96       	adiw	r26, 0x05	; 5
    1df6:	ed 91       	ld	r30, X+
    1df8:	fc 91       	ld	r31, X
    1dfa:	16 97       	sbiw	r26, 0x06	; 6
    1dfc:	c6 81       	ldd	r28, Z+6	; 0x06
    1dfe:	d7 81       	ldd	r29, Z+7	; 0x07
    1e00:	8e 01       	movw	r16, r28
    1e02:	04 5f       	subi	r16, 0xF4	; 244
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1e0c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    1e10:	81 11       	cpse	r24, r1
    1e12:	1c c0       	rjmp	.+56     	; 0x1e4c <xTaskRemoveFromEventList+0x62>
    1e14:	0a 50       	subi	r16, 0x0A	; 10
    1e16:	11 09       	sbc	r17, r1
    1e18:	c8 01       	movw	r24, r16
    1e1a:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1e1e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e20:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    1e24:	98 17       	cp	r25, r24
    1e26:	10 f4       	brcc	.+4      	; 0x1e2c <xTaskRemoveFromEventList+0x42>
    1e28:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9c 01       	movw	r18, r24
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	b8 01       	movw	r22, r16
    1e42:	88 53       	subi	r24, 0x38	; 56
    1e44:	98 4f       	sbci	r25, 0xF8	; 248
    1e46:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <xTaskRemoveFromEventList+0x6c>
    1e4c:	b8 01       	movw	r22, r16
    1e4e:	89 ea       	ldi	r24, 0xA9	; 169
    1e50:	97 e0       	ldi	r25, 0x07	; 7
    1e52:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    1e56:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1e5a:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1e5e:	9e 89       	ldd	r25, Y+22	; 0x16
    1e60:	86 89       	ldd	r24, Z+22	; 0x16
    1e62:	89 17       	cp	r24, r25
    1e64:	20 f4       	brcc	.+8      	; 0x1e6e <xTaskRemoveFromEventList+0x84>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <xYieldPending>
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <xTaskRemoveFromEventList+0x86>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <vTaskInternalSetTimeOutState>:
    1e7a:	20 91 8e 07 	lds	r18, 0x078E	; 0x80078e <xNumOfOverflows>
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18
    1e82:	20 91 93 07 	lds	r18, 0x0793	; 0x800793 <xTickCount>
    1e86:	30 91 94 07 	lds	r19, 0x0794	; 0x800794 <xTickCount+0x1>
    1e8a:	32 83       	std	Z+2, r19	; 0x02
    1e8c:	21 83       	std	Z+1, r18	; 0x01
    1e8e:	08 95       	ret

00001e90 <xTaskCheckForTimeOut>:
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	0f 92       	push	r0
    1e9a:	20 91 93 07 	lds	r18, 0x0793	; 0x800793 <xTickCount>
    1e9e:	30 91 94 07 	lds	r19, 0x0794	; 0x800794 <xTickCount+0x1>
    1ea2:	db 01       	movw	r26, r22
    1ea4:	4d 91       	ld	r20, X+
    1ea6:	5c 91       	ld	r21, X
    1ea8:	4f 3f       	cpi	r20, 0xFF	; 255
    1eaa:	bf ef       	ldi	r27, 0xFF	; 255
    1eac:	5b 07       	cpc	r21, r27
    1eae:	e9 f0       	breq	.+58     	; 0x1eea <xTaskCheckForTimeOut+0x5a>
    1eb0:	ec 01       	movw	r28, r24
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	a0 91 8e 07 	lds	r26, 0x078E	; 0x80078e <xNumOfOverflows>
    1eba:	b8 81       	ld	r27, Y
    1ebc:	ba 17       	cp	r27, r26
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <xTaskCheckForTimeOut+0x36>
    1ec0:	2e 17       	cp	r18, r30
    1ec2:	3f 07       	cpc	r19, r31
    1ec4:	a0 f4       	brcc	.+40     	; 0x1eee <xTaskCheckForTimeOut+0x5e>
    1ec6:	2e 1b       	sub	r18, r30
    1ec8:	3f 0b       	sbc	r19, r31
    1eca:	24 17       	cp	r18, r20
    1ecc:	35 07       	cpc	r19, r21
    1ece:	40 f4       	brcc	.+16     	; 0x1ee0 <xTaskCheckForTimeOut+0x50>
    1ed0:	fb 01       	movw	r30, r22
    1ed2:	42 1b       	sub	r20, r18
    1ed4:	53 0b       	sbc	r21, r19
    1ed6:	51 83       	std	Z+1, r21	; 0x01
    1ed8:	40 83       	st	Z, r20
    1eda:	cf df       	rcall	.-98     	; 0x1e7a <vTaskInternalSetTimeOutState>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <xTaskCheckForTimeOut+0x60>
    1ee0:	fb 01       	movw	r30, r22
    1ee2:	11 82       	std	Z+1, r1	; 0x01
    1ee4:	10 82       	st	Z, r1
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <xTaskCheckForTimeOut+0x60>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <xTaskCheckForTimeOut+0x60>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <vTaskMissedYield>:
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <xYieldPending>
    1f00:	08 95       	ret

00001f02 <xTaskGetCurrentTaskHandle>:
    1f02:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1f06:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1f0a:	08 95       	ret

00001f0c <xTaskGetSchedulerState>:
    1f0c:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xSchedulerRunning>
    1f10:	88 23       	and	r24, r24
    1f12:	31 f0       	breq	.+12     	; 0x1f20 <xTaskGetSchedulerState+0x14>
    1f14:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    1f18:	88 23       	and	r24, r24
    1f1a:	21 f0       	breq	.+8      	; 0x1f24 <xTaskGetSchedulerState+0x18>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	08 95       	ret
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	08 95       	ret
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	08 95       	ret

00001f28 <xTaskPriorityInherit>:
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	fc 01       	movw	r30, r24
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <xTaskPriorityInherit+0x10>
    1f36:	64 c0       	rjmp	.+200    	; 0x2000 <xTaskPriorityInherit+0xd8>
    1f38:	26 89       	ldd	r18, Z+22	; 0x16
    1f3a:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1f3e:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1f42:	56 96       	adiw	r26, 0x16	; 22
    1f44:	8c 91       	ld	r24, X
    1f46:	28 17       	cp	r18, r24
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <xTaskPriorityInherit+0x24>
    1f4a:	4e c0       	rjmp	.+156    	; 0x1fe8 <xTaskPriorityInherit+0xc0>
    1f4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1f4e:	95 85       	ldd	r25, Z+13	; 0x0d
    1f50:	99 23       	and	r25, r25
    1f52:	64 f0       	brlt	.+24     	; 0x1f6c <xTaskPriorityInherit+0x44>
    1f54:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1f58:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1f5c:	56 96       	adiw	r26, 0x16	; 22
    1f5e:	3c 91       	ld	r19, X
    1f60:	84 e0       	ldi	r24, 0x04	; 4
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	83 1b       	sub	r24, r19
    1f66:	91 09       	sbc	r25, r1
    1f68:	95 87       	std	Z+13, r25	; 0x0d
    1f6a:	84 87       	std	Z+12, r24	; 0x0c
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	c9 01       	movw	r24, r18
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	28 0f       	add	r18, r24
    1f7e:	39 1f       	adc	r19, r25
    1f80:	28 53       	subi	r18, 0x38	; 56
    1f82:	38 4f       	sbci	r19, 0xF8	; 248
    1f84:	82 85       	ldd	r24, Z+10	; 0x0a
    1f86:	93 85       	ldd	r25, Z+11	; 0x0b
    1f88:	82 17       	cp	r24, r18
    1f8a:	93 07       	cpc	r25, r19
    1f8c:	21 f5       	brne	.+72     	; 0x1fd6 <xTaskPriorityInherit+0xae>
    1f8e:	8f 01       	movw	r16, r30
    1f90:	ef 01       	movw	r28, r30
    1f92:	22 96       	adiw	r28, 0x02	; 2
    1f94:	ce 01       	movw	r24, r28
    1f96:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    1f9a:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1f9e:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1fa2:	86 89       	ldd	r24, Z+22	; 0x16
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	86 8b       	std	Z+22, r24	; 0x16
    1fa8:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    1fac:	98 17       	cp	r25, r24
    1fae:	10 f4       	brcc	.+4      	; 0x1fb4 <xTaskPriorityInherit+0x8c>
    1fb0:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	22 0f       	add	r18, r18
    1fbe:	33 1f       	adc	r19, r19
    1fc0:	22 0f       	add	r18, r18
    1fc2:	33 1f       	adc	r19, r19
    1fc4:	82 0f       	add	r24, r18
    1fc6:	93 1f       	adc	r25, r19
    1fc8:	be 01       	movw	r22, r28
    1fca:	88 53       	subi	r24, 0x38	; 56
    1fcc:	98 4f       	sbci	r25, 0xF8	; 248
    1fce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	16 c0       	rjmp	.+44     	; 0x2002 <xTaskPriorityInherit+0xda>
    1fd6:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1fda:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1fde:	56 96       	adiw	r26, 0x16	; 22
    1fe0:	8c 91       	ld	r24, X
    1fe2:	86 8b       	std	Z+22, r24	; 0x16
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	0d c0       	rjmp	.+26     	; 0x2002 <xTaskPriorityInherit+0xda>
    1fe8:	a0 91 ec 07 	lds	r26, 0x07EC	; 0x8007ec <pxCurrentTCB>
    1fec:	b0 91 ed 07 	lds	r27, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	23 a1       	ldd	r18, Z+35	; 0x23
    1ff4:	56 96       	adiw	r26, 0x16	; 22
    1ff6:	9c 91       	ld	r25, X
    1ff8:	29 17       	cp	r18, r25
    1ffa:	18 f0       	brcs	.+6      	; 0x2002 <xTaskPriorityInherit+0xda>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	01 c0       	rjmp	.+2      	; 0x2002 <xTaskPriorityInherit+0xda>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <xTaskPriorityDisinherit>:
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	fc 01       	movw	r30, r24
    2016:	89 2b       	or	r24, r25
    2018:	79 f1       	breq	.+94     	; 0x2078 <xTaskPriorityDisinherit+0x6c>
    201a:	84 a1       	ldd	r24, Z+36	; 0x24
    201c:	81 50       	subi	r24, 0x01	; 1
    201e:	84 a3       	std	Z+36, r24	; 0x24
    2020:	26 89       	ldd	r18, Z+22	; 0x16
    2022:	93 a1       	ldd	r25, Z+35	; 0x23
    2024:	29 17       	cp	r18, r25
    2026:	51 f1       	breq	.+84     	; 0x207c <xTaskPriorityDisinherit+0x70>
    2028:	81 11       	cpse	r24, r1
    202a:	2a c0       	rjmp	.+84     	; 0x2080 <xTaskPriorityDisinherit+0x74>
    202c:	ef 01       	movw	r28, r30
    202e:	8f 01       	movw	r16, r30
    2030:	0e 5f       	subi	r16, 0xFE	; 254
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	c8 01       	movw	r24, r16
    2036:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    203a:	8b a1       	ldd	r24, Y+35	; 0x23
    203c:	8e 8b       	std	Y+22, r24	; 0x16
    203e:	24 e0       	ldi	r18, 0x04	; 4
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	28 1b       	sub	r18, r24
    2044:	31 09       	sbc	r19, r1
    2046:	3d 87       	std	Y+13, r19	; 0x0d
    2048:	2c 87       	std	Y+12, r18	; 0x0c
    204a:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    204e:	98 17       	cp	r25, r24
    2050:	10 f4       	brcc	.+4      	; 0x2056 <xTaskPriorityDisinherit+0x4a>
    2052:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 01       	movw	r18, r24
    205a:	22 0f       	add	r18, r18
    205c:	33 1f       	adc	r19, r19
    205e:	22 0f       	add	r18, r18
    2060:	33 1f       	adc	r19, r19
    2062:	22 0f       	add	r18, r18
    2064:	33 1f       	adc	r19, r19
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	b8 01       	movw	r22, r16
    206c:	88 53       	subi	r24, 0x38	; 56
    206e:	98 4f       	sbci	r25, 0xF8	; 248
    2070:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	05 c0       	rjmp	.+10     	; 0x2082 <xTaskPriorityDisinherit+0x76>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <xTaskPriorityDisinherit+0x76>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <xTaskPriorityDisinherit+0x76>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	08 95       	ret

0000208c <vTaskPriorityDisinheritAfterTimeout>:
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	fc 01       	movw	r30, r24
    2096:	89 2b       	or	r24, r25
    2098:	09 f4       	brne	.+2      	; 0x209c <vTaskPriorityDisinheritAfterTimeout+0x10>
    209a:	43 c0       	rjmp	.+134    	; 0x2122 <vTaskPriorityDisinheritAfterTimeout+0x96>
    209c:	93 a1       	ldd	r25, Z+35	; 0x23
    209e:	96 17       	cp	r25, r22
    20a0:	08 f4       	brcc	.+2      	; 0x20a4 <vTaskPriorityDisinheritAfterTimeout+0x18>
    20a2:	96 2f       	mov	r25, r22
    20a4:	86 89       	ldd	r24, Z+22	; 0x16
    20a6:	89 17       	cp	r24, r25
    20a8:	e1 f1       	breq	.+120    	; 0x2122 <vTaskPriorityDisinheritAfterTimeout+0x96>
    20aa:	24 a1       	ldd	r18, Z+36	; 0x24
    20ac:	21 30       	cpi	r18, 0x01	; 1
    20ae:	c9 f5       	brne	.+114    	; 0x2122 <vTaskPriorityDisinheritAfterTimeout+0x96>
    20b0:	96 8b       	std	Z+22, r25	; 0x16
    20b2:	24 85       	ldd	r18, Z+12	; 0x0c
    20b4:	35 85       	ldd	r19, Z+13	; 0x0d
    20b6:	33 23       	and	r19, r19
    20b8:	34 f0       	brlt	.+12     	; 0x20c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    20ba:	24 e0       	ldi	r18, 0x04	; 4
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	29 1b       	sub	r18, r25
    20c0:	31 09       	sbc	r19, r1
    20c2:	35 87       	std	Z+13, r19	; 0x0d
    20c4:	24 87       	std	Z+12, r18	; 0x0c
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9c 01       	movw	r18, r24
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	82 0f       	add	r24, r18
    20d8:	93 1f       	adc	r25, r19
    20da:	88 53       	subi	r24, 0x38	; 56
    20dc:	98 4f       	sbci	r25, 0xF8	; 248
    20de:	22 85       	ldd	r18, Z+10	; 0x0a
    20e0:	33 85       	ldd	r19, Z+11	; 0x0b
    20e2:	28 17       	cp	r18, r24
    20e4:	39 07       	cpc	r19, r25
    20e6:	e9 f4       	brne	.+58     	; 0x2122 <vTaskPriorityDisinheritAfterTimeout+0x96>
    20e8:	ef 01       	movw	r28, r30
    20ea:	8f 01       	movw	r16, r30
    20ec:	0e 5f       	subi	r16, 0xFE	; 254
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	c8 01       	movw	r24, r16
    20f2:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    20f6:	8e 89       	ldd	r24, Y+22	; 0x16
    20f8:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    20fc:	98 17       	cp	r25, r24
    20fe:	10 f4       	brcc	.+4      	; 0x2104 <vTaskPriorityDisinheritAfterTimeout+0x78>
    2100:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 01       	movw	r18, r24
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	b8 01       	movw	r22, r16
    211a:	88 53       	subi	r24, 0x38	; 56
    211c:	98 4f       	sbci	r25, 0xF8	; 248
    211e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	08 95       	ret

0000212c <pvTaskIncrementMutexHeldCount>:
    212c:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    2130:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    2134:	89 2b       	or	r24, r25
    2136:	39 f0       	breq	.+14     	; 0x2146 <pvTaskIncrementMutexHeldCount+0x1a>
    2138:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    213c:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    2140:	84 a1       	ldd	r24, Z+36	; 0x24
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	84 a3       	std	Z+36, r24	; 0x24
    2146:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    214a:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    214e:	08 95       	ret

00002150 <xTaskNotifyWait>:
    2150:	4f 92       	push	r4
    2152:	5f 92       	push	r5
    2154:	6f 92       	push	r6
    2156:	7f 92       	push	r7
    2158:	8f 92       	push	r8
    215a:	9f 92       	push	r9
    215c:	af 92       	push	r10
    215e:	bf 92       	push	r11
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	49 01       	movw	r8, r18
    216a:	5a 01       	movw	r10, r20
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	0f 92       	push	r0
    2172:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    2176:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    217a:	23 a5       	ldd	r18, Z+43	; 0x2b
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	21 f1       	breq	.+72     	; 0x21c8 <xTaskNotifyWait+0x78>
    2180:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    2184:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    2188:	47 a0       	ldd	r4, Z+39	; 0x27
    218a:	50 a4       	ldd	r5, Z+40	; 0x28
    218c:	61 a4       	ldd	r6, Z+41	; 0x29
    218e:	72 a4       	ldd	r7, Z+42	; 0x2a
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	80 95       	com	r24
    2196:	90 95       	com	r25
    2198:	a0 95       	com	r26
    219a:	b0 95       	com	r27
    219c:	84 21       	and	r24, r4
    219e:	95 21       	and	r25, r5
    21a0:	a6 21       	and	r26, r6
    21a2:	b7 21       	and	r27, r7
    21a4:	87 a3       	std	Z+39, r24	; 0x27
    21a6:	90 a7       	std	Z+40, r25	; 0x28
    21a8:	a1 a7       	std	Z+41, r26	; 0x29
    21aa:	b2 a7       	std	Z+42, r27	; 0x2a
    21ac:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    21b0:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	83 a7       	std	Z+43, r24	; 0x2b
    21b8:	e1 14       	cp	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	29 f0       	breq	.+10     	; 0x21c8 <xTaskNotifyWait+0x78>
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	c7 01       	movw	r24, r14
    21c2:	24 da       	rcall	.-3000   	; 0x160c <prvAddCurrentTaskToDelayedList>
    21c4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	0f 92       	push	r0
    21d2:	01 15       	cp	r16, r1
    21d4:	11 05       	cpc	r17, r1
    21d6:	69 f0       	breq	.+26     	; 0x21f2 <xTaskNotifyWait+0xa2>
    21d8:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    21dc:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    21e0:	87 a1       	ldd	r24, Z+39	; 0x27
    21e2:	90 a5       	ldd	r25, Z+40	; 0x28
    21e4:	a1 a5       	ldd	r26, Z+41	; 0x29
    21e6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 83       	st	Z, r24
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	a2 83       	std	Z+2, r26	; 0x02
    21f0:	b3 83       	std	Z+3, r27	; 0x03
    21f2:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    21f6:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    21fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	b1 f4       	brne	.+44     	; 0x222c <__stack+0x2d>
    2200:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    2204:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    2208:	87 a1       	ldd	r24, Z+39	; 0x27
    220a:	90 a5       	ldd	r25, Z+40	; 0x28
    220c:	a1 a5       	ldd	r26, Z+41	; 0x29
    220e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2210:	80 94       	com	r8
    2212:	90 94       	com	r9
    2214:	a0 94       	com	r10
    2216:	b0 94       	com	r11
    2218:	88 22       	and	r8, r24
    221a:	99 22       	and	r9, r25
    221c:	aa 22       	and	r10, r26
    221e:	bb 22       	and	r11, r27
    2220:	87 a2       	std	Z+39, r8	; 0x27
    2222:	90 a6       	std	Z+40, r9	; 0x28
    2224:	a1 a6       	std	Z+41, r10	; 0x29
    2226:	b2 a6       	std	Z+42, r11	; 0x2a
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	01 c0       	rjmp	.+2      	; 0x222e <__stack+0x2f>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    2232:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    2236:	13 a6       	std	Z+43, r1	; 0x2b
    2238:	0f 90       	pop	r0
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	bf 90       	pop	r11
    2246:	af 90       	pop	r10
    2248:	9f 90       	pop	r9
    224a:	8f 90       	pop	r8
    224c:	7f 90       	pop	r7
    224e:	6f 90       	pop	r6
    2250:	5f 90       	pop	r5
    2252:	4f 90       	pop	r4
    2254:	08 95       	ret

00002256 <xTaskGenericNotify>:
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	fc 01       	movw	r30, r24
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	0f 92       	push	r0
    2266:	01 15       	cp	r16, r1
    2268:	11 05       	cpc	r17, r1
    226a:	49 f0       	breq	.+18     	; 0x227e <xTaskGenericNotify+0x28>
    226c:	87 a1       	ldd	r24, Z+39	; 0x27
    226e:	90 a5       	ldd	r25, Z+40	; 0x28
    2270:	a1 a5       	ldd	r26, Z+41	; 0x29
    2272:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2274:	e8 01       	movw	r28, r16
    2276:	88 83       	st	Y, r24
    2278:	99 83       	std	Y+1, r25	; 0x01
    227a:	aa 83       	std	Y+2, r26	; 0x02
    227c:	bb 83       	std	Y+3, r27	; 0x03
    227e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	93 a7       	std	Z+43, r25	; 0x2b
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	b1 f0       	breq	.+44     	; 0x22b4 <xTaskGenericNotify+0x5e>
    2288:	18 f4       	brcc	.+6      	; 0x2290 <xTaskGenericNotify+0x3a>
    228a:	21 30       	cpi	r18, 0x01	; 1
    228c:	31 f0       	breq	.+12     	; 0x229a <xTaskGenericNotify+0x44>
    228e:	2a c0       	rjmp	.+84     	; 0x22e4 <xTaskGenericNotify+0x8e>
    2290:	23 30       	cpi	r18, 0x03	; 3
    2292:	e9 f0       	breq	.+58     	; 0x22ce <xTaskGenericNotify+0x78>
    2294:	24 30       	cpi	r18, 0x04	; 4
    2296:	01 f1       	breq	.+64     	; 0x22d8 <xTaskGenericNotify+0x82>
    2298:	25 c0       	rjmp	.+74     	; 0x22e4 <xTaskGenericNotify+0x8e>
    229a:	07 a1       	ldd	r16, Z+39	; 0x27
    229c:	10 a5       	ldd	r17, Z+40	; 0x28
    229e:	21 a5       	ldd	r18, Z+41	; 0x29
    22a0:	32 a5       	ldd	r19, Z+42	; 0x2a
    22a2:	40 2b       	or	r20, r16
    22a4:	51 2b       	or	r21, r17
    22a6:	62 2b       	or	r22, r18
    22a8:	73 2b       	or	r23, r19
    22aa:	47 a3       	std	Z+39, r20	; 0x27
    22ac:	50 a7       	std	Z+40, r21	; 0x28
    22ae:	61 a7       	std	Z+41, r22	; 0x29
    22b0:	72 a7       	std	Z+42, r23	; 0x2a
    22b2:	18 c0       	rjmp	.+48     	; 0x22e4 <xTaskGenericNotify+0x8e>
    22b4:	47 a1       	ldd	r20, Z+39	; 0x27
    22b6:	50 a5       	ldd	r21, Z+40	; 0x28
    22b8:	61 a5       	ldd	r22, Z+41	; 0x29
    22ba:	72 a5       	ldd	r23, Z+42	; 0x2a
    22bc:	4f 5f       	subi	r20, 0xFF	; 255
    22be:	5f 4f       	sbci	r21, 0xFF	; 255
    22c0:	6f 4f       	sbci	r22, 0xFF	; 255
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	47 a3       	std	Z+39, r20	; 0x27
    22c6:	50 a7       	std	Z+40, r21	; 0x28
    22c8:	61 a7       	std	Z+41, r22	; 0x29
    22ca:	72 a7       	std	Z+42, r23	; 0x2a
    22cc:	0b c0       	rjmp	.+22     	; 0x22e4 <xTaskGenericNotify+0x8e>
    22ce:	47 a3       	std	Z+39, r20	; 0x27
    22d0:	50 a7       	std	Z+40, r21	; 0x28
    22d2:	61 a7       	std	Z+41, r22	; 0x29
    22d4:	72 a7       	std	Z+42, r23	; 0x2a
    22d6:	06 c0       	rjmp	.+12     	; 0x22e4 <xTaskGenericNotify+0x8e>
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	79 f1       	breq	.+94     	; 0x233a <xTaskGenericNotify+0xe4>
    22dc:	47 a3       	std	Z+39, r20	; 0x27
    22de:	50 a7       	std	Z+40, r21	; 0x28
    22e0:	61 a7       	std	Z+41, r22	; 0x29
    22e2:	72 a7       	std	Z+42, r23	; 0x2a
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	59 f5       	brne	.+86     	; 0x233e <xTaskGenericNotify+0xe8>
    22e8:	ef 01       	movw	r28, r30
    22ea:	8f 01       	movw	r16, r30
    22ec:	0e 5f       	subi	r16, 0xFE	; 254
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	c8 01       	movw	r24, r16
    22f2:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    22f6:	8e 89       	ldd	r24, Y+22	; 0x16
    22f8:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    22fc:	98 17       	cp	r25, r24
    22fe:	10 f4       	brcc	.+4      	; 0x2304 <xTaskGenericNotify+0xae>
    2300:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 01       	movw	r18, r24
    2308:	22 0f       	add	r18, r18
    230a:	33 1f       	adc	r19, r19
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	82 0f       	add	r24, r18
    2316:	93 1f       	adc	r25, r19
    2318:	b8 01       	movw	r22, r16
    231a:	88 53       	subi	r24, 0x38	; 56
    231c:	98 4f       	sbci	r25, 0xF8	; 248
    231e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    2322:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    2326:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    232a:	9e 89       	ldd	r25, Y+22	; 0x16
    232c:	86 89       	ldd	r24, Z+22	; 0x16
    232e:	89 17       	cp	r24, r25
    2330:	40 f4       	brcc	.+16     	; 0x2342 <xTaskGenericNotify+0xec>
    2332:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <xTaskGenericNotify+0xee>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <xTaskGenericNotify+0xee>
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <xTaskGenericNotify+0xee>
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <xTaskGenericNotifyFromISR>:
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	fc 01       	movw	r30, r24
    2360:	01 15       	cp	r16, r1
    2362:	11 05       	cpc	r17, r1
    2364:	49 f0       	breq	.+18     	; 0x2378 <xTaskGenericNotifyFromISR+0x26>
    2366:	87 a1       	ldd	r24, Z+39	; 0x27
    2368:	90 a5       	ldd	r25, Z+40	; 0x28
    236a:	a1 a5       	ldd	r26, Z+41	; 0x29
    236c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    236e:	e8 01       	movw	r28, r16
    2370:	88 83       	st	Y, r24
    2372:	99 83       	std	Y+1, r25	; 0x01
    2374:	aa 83       	std	Y+2, r26	; 0x02
    2376:	bb 83       	std	Y+3, r27	; 0x03
    2378:	83 a5       	ldd	r24, Z+43	; 0x2b
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	93 a7       	std	Z+43, r25	; 0x2b
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	b1 f0       	breq	.+44     	; 0x23ae <xTaskGenericNotifyFromISR+0x5c>
    2382:	18 f4       	brcc	.+6      	; 0x238a <xTaskGenericNotifyFromISR+0x38>
    2384:	21 30       	cpi	r18, 0x01	; 1
    2386:	31 f0       	breq	.+12     	; 0x2394 <xTaskGenericNotifyFromISR+0x42>
    2388:	2b c0       	rjmp	.+86     	; 0x23e0 <xTaskGenericNotifyFromISR+0x8e>
    238a:	23 30       	cpi	r18, 0x03	; 3
    238c:	e9 f0       	breq	.+58     	; 0x23c8 <xTaskGenericNotifyFromISR+0x76>
    238e:	24 30       	cpi	r18, 0x04	; 4
    2390:	01 f1       	breq	.+64     	; 0x23d2 <xTaskGenericNotifyFromISR+0x80>
    2392:	26 c0       	rjmp	.+76     	; 0x23e0 <xTaskGenericNotifyFromISR+0x8e>
    2394:	07 a1       	ldd	r16, Z+39	; 0x27
    2396:	10 a5       	ldd	r17, Z+40	; 0x28
    2398:	21 a5       	ldd	r18, Z+41	; 0x29
    239a:	32 a5       	ldd	r19, Z+42	; 0x2a
    239c:	40 2b       	or	r20, r16
    239e:	51 2b       	or	r21, r17
    23a0:	62 2b       	or	r22, r18
    23a2:	73 2b       	or	r23, r19
    23a4:	47 a3       	std	Z+39, r20	; 0x27
    23a6:	50 a7       	std	Z+40, r21	; 0x28
    23a8:	61 a7       	std	Z+41, r22	; 0x29
    23aa:	72 a7       	std	Z+42, r23	; 0x2a
    23ac:	19 c0       	rjmp	.+50     	; 0x23e0 <xTaskGenericNotifyFromISR+0x8e>
    23ae:	47 a1       	ldd	r20, Z+39	; 0x27
    23b0:	50 a5       	ldd	r21, Z+40	; 0x28
    23b2:	61 a5       	ldd	r22, Z+41	; 0x29
    23b4:	72 a5       	ldd	r23, Z+42	; 0x2a
    23b6:	4f 5f       	subi	r20, 0xFF	; 255
    23b8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ba:	6f 4f       	sbci	r22, 0xFF	; 255
    23bc:	7f 4f       	sbci	r23, 0xFF	; 255
    23be:	47 a3       	std	Z+39, r20	; 0x27
    23c0:	50 a7       	std	Z+40, r21	; 0x28
    23c2:	61 a7       	std	Z+41, r22	; 0x29
    23c4:	72 a7       	std	Z+42, r23	; 0x2a
    23c6:	0c c0       	rjmp	.+24     	; 0x23e0 <xTaskGenericNotifyFromISR+0x8e>
    23c8:	47 a3       	std	Z+39, r20	; 0x27
    23ca:	50 a7       	std	Z+40, r21	; 0x28
    23cc:	61 a7       	std	Z+41, r22	; 0x29
    23ce:	72 a7       	std	Z+42, r23	; 0x2a
    23d0:	07 c0       	rjmp	.+14     	; 0x23e0 <xTaskGenericNotifyFromISR+0x8e>
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <xTaskGenericNotifyFromISR+0x86>
    23d6:	41 c0       	rjmp	.+130    	; 0x245a <xTaskGenericNotifyFromISR+0x108>
    23d8:	47 a3       	std	Z+39, r20	; 0x27
    23da:	50 a7       	std	Z+40, r21	; 0x28
    23dc:	61 a7       	std	Z+41, r22	; 0x29
    23de:	72 a7       	std	Z+42, r23	; 0x2a
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	e9 f5       	brne	.+122    	; 0x245e <xTaskGenericNotifyFromISR+0x10c>
    23e4:	ef 01       	movw	r28, r30
    23e6:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <__data_end>
    23ea:	81 11       	cpse	r24, r1
    23ec:	1d c0       	rjmp	.+58     	; 0x2428 <xTaskGenericNotifyFromISR+0xd6>
    23ee:	8f 01       	movw	r16, r30
    23f0:	0e 5f       	subi	r16, 0xFE	; 254
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	c8 01       	movw	r24, r16
    23f6:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
    23fa:	8e 89       	ldd	r24, Y+22	; 0x16
    23fc:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <uxTopReadyPriority>
    2400:	98 17       	cp	r25, r24
    2402:	10 f4       	brcc	.+4      	; 0x2408 <xTaskGenericNotifyFromISR+0xb6>
    2404:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTopReadyPriority>
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 01       	movw	r18, r24
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	22 0f       	add	r18, r18
    2416:	33 1f       	adc	r19, r19
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	b8 01       	movw	r22, r16
    241e:	88 53       	subi	r24, 0x38	; 56
    2420:	98 4f       	sbci	r25, 0xF8	; 248
    2422:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <xTaskGenericNotifyFromISR+0xe4>
    2428:	bf 01       	movw	r22, r30
    242a:	64 5f       	subi	r22, 0xF4	; 244
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
    242e:	89 ea       	ldi	r24, 0xA9	; 169
    2430:	97 e0       	ldi	r25, 0x07	; 7
    2432:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vListInsertEnd>
    2436:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <pxCurrentTCB>
    243a:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>
    243e:	9e 89       	ldd	r25, Y+22	; 0x16
    2440:	86 89       	ldd	r24, Z+22	; 0x16
    2442:	89 17       	cp	r24, r25
    2444:	70 f4       	brcc	.+28     	; 0x2462 <xTaskGenericNotifyFromISR+0x110>
    2446:	e1 14       	cp	r14, r1
    2448:	f1 04       	cpc	r15, r1
    244a:	19 f0       	breq	.+6      	; 0x2452 <xTaskGenericNotifyFromISR+0x100>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	f7 01       	movw	r30, r14
    2450:	80 83       	st	Z, r24
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <xYieldPending>
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <xTaskGenericNotifyFromISR+0x112>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	03 c0       	rjmp	.+6      	; 0x2464 <xTaskGenericNotifyFromISR+0x112>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	01 c0       	rjmp	.+2      	; 0x2464 <xTaskGenericNotifyFromISR+0x112>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	08 95       	ret

00002472 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	21 f4       	brne	.+8      	; 0x247e <xTaskNotifyStateClear+0xc>
    2476:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <pxCurrentTCB>
    247a:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2484:	fc 01       	movw	r30, r24
    2486:	23 a5       	ldd	r18, Z+43	; 0x2b
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	19 f4       	brne	.+6      	; 0x2492 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    248c:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2492:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2498:	08 95       	ret

0000249a <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    249a:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    249c:	73 83       	std	Z+3, r23	; 0x03
    249e:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    24a0:	91 87       	std	Z+9, r25	; 0x09
    24a2:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    24a4:	46 17       	cp	r20, r22
    24a6:	57 07       	cpc	r21, r23
    24a8:	90 f0       	brcs	.+36     	; 0x24ce <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24aa:	42 1b       	sub	r20, r18
    24ac:	53 0b       	sbc	r21, r19
    24ae:	84 85       	ldd	r24, Z+12	; 0x0c
    24b0:	95 85       	ldd	r25, Z+13	; 0x0d
    24b2:	48 17       	cp	r20, r24
    24b4:	59 07       	cpc	r21, r25
    24b6:	e0 f4       	brcc	.+56     	; 0x24f0 <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    24b8:	bf 01       	movw	r22, r30
    24ba:	6e 5f       	subi	r22, 0xFE	; 254
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <pxOverflowTimerList>
    24c2:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pxOverflowTimerList+0x1>
    24c6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    24ce:	42 17       	cp	r20, r18
    24d0:	53 07       	cpc	r21, r19
    24d2:	18 f4       	brcc	.+6      	; 0x24da <prvInsertTimerInActiveList+0x40>
    24d4:	62 17       	cp	r22, r18
    24d6:	73 07       	cpc	r23, r19
    24d8:	68 f4       	brcc	.+26     	; 0x24f4 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    24da:	bf 01       	movw	r22, r30
    24dc:	6e 5f       	subi	r22, 0xFE	; 254
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pxCurrentTimerList>
    24e4:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <pxCurrentTimerList+0x1>
    24e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    24f6:	08 95       	ret

000024f8 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    24fe:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xTimerQueue>
    2502:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
    2506:	89 2b       	or	r24, r25
    2508:	e9 f4       	brne	.+58     	; 0x2544 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	98 e0       	ldi	r25, 0x08	; 8
    250e:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    2512:	88 ef       	ldi	r24, 0xF8	; 248
    2514:	97 e0       	ldi	r25, 0x07	; 7
    2516:	0e 94 3f 03 	call	0x67e	; 0x67e <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	98 e0       	ldi	r25, 0x08	; 8
    251e:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <pxCurrentTimerList+0x1>
    2522:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2526:	88 ef       	ldi	r24, 0xF8	; 248
    2528:	97 e0       	ldi	r25, 0x07	; 7
    252a:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <pxOverflowTimerList+0x1>
    252e:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	65 e0       	ldi	r22, 0x05	; 5
    2536:	8a e0       	ldi	r24, 0x0A	; 10
    2538:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueGenericCreate>
    253c:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xTimerQueue+0x1>
    2540:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	08 95       	ret

0000254a <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    2550:	d3 df       	rcall	.-90     	; 0x24f8 <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    2552:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xTimerQueue>
    2556:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
    255a:	89 2b       	or	r24, r25
    255c:	89 f0       	breq	.+34     	; 0x2580 <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    255e:	0f 2e       	mov	r0, r31
    2560:	f0 ef       	ldi	r31, 0xF0	; 240
    2562:	ef 2e       	mov	r14, r31
    2564:	f7 e0       	ldi	r31, 0x07	; 7
    2566:	ff 2e       	mov	r15, r31
    2568:	f0 2d       	mov	r31, r0
    256a:	03 e0       	ldi	r16, 0x03	; 3
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	45 e5       	ldi	r20, 0x55	; 85
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	6b e8       	ldi	r22, 0x8B	; 139
    2576:	72 e0       	ldi	r23, 0x02	; 2
    2578:	84 e8       	ldi	r24, 0x84	; 132
    257a:	91 e0       	ldi	r25, 0x01	; 1
    257c:	9b d8       	rcall	.-3786   	; 0x16b4 <xTaskCreate>
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    2580:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	08 95       	ret

0000258a <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	4c 01       	movw	r8, r24
    25a2:	5b 01       	movw	r10, r22
    25a4:	f4 2e       	mov	r15, r20
    25a6:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    25a8:	84 e1       	ldi	r24, 0x14	; 20
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0e 94 1d 03 	call	0x63a	; 0x63a <pvPortMalloc>
    25b0:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    25b2:	89 2b       	or	r24, r25
    25b4:	99 f0       	breq	.+38     	; 0x25dc <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    25b6:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    25b8:	9f df       	rcall	.-194    	; 0x24f8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    25ba:	99 82       	std	Y+1, r9	; 0x01
    25bc:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    25be:	bd 86       	std	Y+13, r11	; 0x0d
    25c0:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    25c2:	df 86       	std	Y+15, r13	; 0x0f
    25c4:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    25c6:	19 8b       	std	Y+17, r17	; 0x11
    25c8:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    25ca:	ce 01       	movw	r24, r28
    25cc:	02 96       	adiw	r24, 0x02	; 2
    25ce:	0e 94 4d 03 	call	0x69a	; 0x69a <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    25d2:	ff 20       	and	r15, r15
    25d4:	19 f0       	breq	.+6      	; 0x25dc <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	84 60       	ori	r24, 0x04	; 4
    25da:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    25dc:	ce 01       	movw	r24, r28
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	df 90       	pop	r13
    25ea:	cf 90       	pop	r12
    25ec:	bf 90       	pop	r11
    25ee:	af 90       	pop	r10
    25f0:	9f 90       	pop	r9
    25f2:	8f 90       	pop	r8
    25f4:	08 95       	ret

000025f6 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <xTimerGenericCommand+0xa>
    2600:	1f 92       	push	r1
    2602:	1f 92       	push	r1
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2608:	e0 91 f2 07 	lds	r30, 0x07F2	; 0x8007f2 <xTimerQueue>
    260c:	f0 91 f3 07 	lds	r31, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
    2610:	30 97       	sbiw	r30, 0x00	; 0
    2612:	69 f1       	breq	.+90     	; 0x266e <xTimerGenericCommand+0x78>
    2614:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2616:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2618:	5b 83       	std	Y+3, r21	; 0x03
    261a:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    261c:	9d 83       	std	Y+5, r25	; 0x05
    261e:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2620:	66 30       	cpi	r22, 0x06	; 6
    2622:	e4 f4       	brge	.+56     	; 0x265c <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2624:	73 dc       	rcall	.-1818   	; 0x1f0c <xTaskGetSchedulerState>
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	61 f4       	brne	.+24     	; 0x2642 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	a8 01       	movw	r20, r16
    262e:	be 01       	movw	r22, r28
    2630:	6f 5f       	subi	r22, 0xFF	; 255
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xTimerQueue>
    2638:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
    263c:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>
    2640:	17 c0       	rjmp	.+46     	; 0x2670 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	be 01       	movw	r22, r28
    264a:	6f 5f       	subi	r22, 0xFF	; 255
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xTimerQueue>
    2652:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xTimerQueue+0x1>
    2656:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>
    265a:	0a c0       	rjmp	.+20     	; 0x2670 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	ad 01       	movw	r20, r26
    2660:	be 01       	movw	r22, r28
    2662:	6f 5f       	subi	r22, 0xFF	; 255
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	cf 01       	movw	r24, r30
    2668:	0e 94 16 07 	call	0xe2c	; 0xe2c <xQueueGenericSendFromISR>
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    266e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2684:	af 92       	push	r10
    2686:	bf 92       	push	r11
    2688:	cf 92       	push	r12
    268a:	df 92       	push	r13
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    269a:	63 d9       	rcall	.-3386   	; 0x1962 <xTaskGetTickCount>
    269c:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    269e:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <xLastTime.2432>
    26a2:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <xLastTime.2432+0x1>
    26a6:	e8 16       	cp	r14, r24
    26a8:	f9 06       	cpc	r15, r25
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <prvSampleTimeNow+0x2a>
    26ac:	47 c0       	rjmp	.+142    	; 0x273c <prvSampleTimeNow+0xb8>
    26ae:	2f c0       	rjmp	.+94     	; 0x270e <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    26b0:	05 80       	ldd	r0, Z+5	; 0x05
    26b2:	f6 81       	ldd	r31, Z+6	; 0x06
    26b4:	e0 2d       	mov	r30, r0
    26b6:	a0 80       	ld	r10, Z
    26b8:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    26ba:	c6 81       	ldd	r28, Z+6	; 0x06
    26bc:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26be:	8e 01       	movw	r16, r28
    26c0:	0e 5f       	subi	r16, 0xFE	; 254
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	c8 01       	movw	r24, r16
    26c6:	0e 94 a3 03 	call	0x746	; 0x746 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26ca:	e8 89       	ldd	r30, Y+16	; 0x10
    26cc:	f9 89       	ldd	r31, Y+17	; 0x11
    26ce:	ce 01       	movw	r24, r28
    26d0:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    26d2:	8b 89       	ldd	r24, Y+19	; 0x13
    26d4:	82 ff       	sbrs	r24, 2
    26d6:	1b c0       	rjmp	.+54     	; 0x270e <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    26d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    26da:	9d 85       	ldd	r25, Y+13	; 0x0d
    26dc:	8a 0d       	add	r24, r10
    26de:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    26e0:	a8 16       	cp	r10, r24
    26e2:	b9 06       	cpc	r11, r25
    26e4:	60 f4       	brcc	.+24     	; 0x26fe <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    26e6:	9b 83       	std	Y+3, r25	; 0x03
    26e8:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    26ea:	d9 87       	std	Y+9, r29	; 0x09
    26ec:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    26ee:	b8 01       	movw	r22, r16
    26f0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pxCurrentTimerList>
    26f4:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <pxCurrentTimerList+0x1>
    26f8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <vListInsert>
    26fc:	08 c0       	rjmp	.+16     	; 0x270e <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    26fe:	00 e0       	ldi	r16, 0x00	; 0
    2700:	10 e0       	ldi	r17, 0x00	; 0
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	a5 01       	movw	r20, r10
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	ce 01       	movw	r24, r28
    270c:	74 df       	rcall	.-280    	; 0x25f6 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    270e:	e0 91 f6 07 	lds	r30, 0x07F6	; 0x8007f6 <pxCurrentTimerList>
    2712:	f0 91 f7 07 	lds	r31, 0x07F7	; 0x8007f7 <pxCurrentTimerList+0x1>
    2716:	80 81       	ld	r24, Z
    2718:	81 11       	cpse	r24, r1
    271a:	ca cf       	rjmp	.-108    	; 0x26b0 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    271c:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <pxOverflowTimerList>
    2720:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pxOverflowTimerList+0x1>
    2724:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <pxCurrentTimerList+0x1>
    2728:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    272c:	f0 93 f5 07 	sts	0x07F5, r31	; 0x8007f5 <pxOverflowTimerList+0x1>
    2730:	e0 93 f4 07 	sts	0x07F4, r30	; 0x8007f4 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	f6 01       	movw	r30, r12
    2738:	80 83       	st	Z, r24
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    273c:	f6 01       	movw	r30, r12
    273e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2740:	f0 92 ef 07 	sts	0x07EF, r15	; 0x8007ef <xLastTime.2432+0x1>
    2744:	e0 92 ee 07 	sts	0x07EE, r14	; 0x8007ee <xLastTime.2432>

    return xTimeNow;
}
    2748:	c7 01       	movw	r24, r14
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	ff 90       	pop	r15
    2754:	ef 90       	pop	r14
    2756:	df 90       	pop	r13
    2758:	cf 90       	pop	r12
    275a:	bf 90       	pop	r11
    275c:	af 90       	pop	r10
    275e:	08 95       	ret

00002760 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2760:	08 95       	ret

00002762 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2762:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2764:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2766:	2f ef       	ldi	r18, 0xFF	; 255
    2768:	80 e7       	ldi	r24, 0x70	; 112
    276a:	92 e0       	ldi	r25, 0x02	; 2
    276c:	21 50       	subi	r18, 0x01	; 1
    276e:	80 40       	sbci	r24, 0x00	; 0
    2770:	90 40       	sbci	r25, 0x00	; 0
    2772:	e1 f7       	brne	.-8      	; 0x276c <vApplicationMallocFailedHook+0xa>
    2774:	00 c0       	rjmp	.+0      	; 0x2776 <vApplicationMallocFailedHook+0x14>
    2776:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2778:	1f 9a       	sbi	0x03, 7	; 3
    277a:	f5 cf       	rjmp	.-22     	; 0x2766 <vApplicationMallocFailedHook+0x4>

0000277c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    277c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    277e:	2f 9a       	sbi	0x05, 7	; 5
    2780:	2f ef       	ldi	r18, 0xFF	; 255
    2782:	87 ea       	ldi	r24, 0xA7	; 167
    2784:	91 e6       	ldi	r25, 0x61	; 97
    2786:	21 50       	subi	r18, 0x01	; 1
    2788:	80 40       	sbci	r24, 0x00	; 0
    278a:	90 40       	sbci	r25, 0x00	; 0
    278c:	e1 f7       	brne	.-8      	; 0x2786 <vApplicationStackOverflowHook+0xa>
    278e:	00 c0       	rjmp	.+0      	; 0x2790 <vApplicationStackOverflowHook+0x14>
    2790:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2792:	1f 9a       	sbi	0x03, 7	; 3
    2794:	f5 cf       	rjmp	.-22     	; 0x2780 <vApplicationStackOverflowHook+0x4>

00002796 <hum_tsk>:
extern SemaphoreHandle_t semphHum;
extern QueueHandle_t xPayloadQueue;
extern RELOAD_PERIOD;
static uint16_t default_hum = 0xffff;

void hum_tsk(void *pvParameters) {
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	00 d0       	rcall	.+0      	; 0x279c <hum_tsk+0x6>
    279c:	1f 92       	push	r1
    279e:	1f 92       	push	r1
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xStatus;
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
    27a4:	de d8       	rcall	.-3652   	; 0x1962 <xTaskGetTickCount>
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
	
	sample_t lValueToSend;
	lValueToSend.s_src=HUM;
    27aa:	1b 82       	std	Y+3, r1	; 0x03
	lValueToSend.s_value=default_hum;
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	9f ef       	ldi	r25, 0xFF	; 255
    27b0:	9d 83       	std	Y+5, r25	; 0x05
    27b2:	8c 83       	std	Y+4, r24	; 0x04
	
	

	
	while(1) {
		xSemaphoreTake(semphHum,0);
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	80 91 c9 09 	lds	r24, 0x09C9	; 0x8009c9 <semphHum>
    27bc:	90 91 ca 09 	lds	r25, 0x09CA	; 0x8009ca <semphHum+0x1>
    27c0:	0e 94 d7 07 	call	0xfae	; 0xfae <xQueueSemaphoreTake>
		{
		
		if(HIH8120_OK!=hih8120Wakeup())
    27c4:	c6 d7       	rcall	.+3980   	; 0x3752 <hih8120Wakeup>
		{
			//some errors check 
		}	
		vTaskDelay(pdMS_TO_TICKS(50UL));
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	90 e0       	ldi	r25, 0x00	; 0
		//*TODO: change delay to timer/interrupts */
		if ( HIH8120_OK !=  hih8120Meassure() )
    27ca:	47 da       	rcall	.-2930   	; 0x1c5a <vTaskDelay>
		{
		// Something went wrong
		// Investigate the return code further
		// this return code it gives wrong values 
		}
		vTaskDelay(pdMS_TO_TICKS(50UL));
    27cc:	d7 d7       	rcall	.+4014   	; 0x377c <hih8120Meassure>
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	43 da       	rcall	.-2938   	; 0x1c5a <vTaskDelay>
		float humidity = hih8120GetHumidity();
    27d4:	e4 d7       	rcall	.+4040   	; 0x379e <hih8120GetHumidity>
    27d6:	20 e0       	ldi	r18, 0x00	; 0
		lValueToSend.s_value = round(humidity*100); //  humidity round for precision 
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	48 ec       	ldi	r20, 0xC8	; 200
    27dc:	52 e4       	ldi	r21, 0x42	; 66
    27de:	c8 d2       	rcall	.+1424   	; 0x2d70 <__mulsf3>
    27e0:	2a d3       	rcall	.+1620   	; 0x2e36 <round>
    27e2:	71 d2       	rcall	.+1250   	; 0x2cc6 <__fixunssfsi>
    27e4:	7d 83       	std	Y+5, r23	; 0x05
    27e6:	6c 83       	std	Y+4, r22	; 0x04
    27e8:	20 e0       	ldi	r18, 0x00	; 0
		xStatus = xQueueSendToBack( xPayloadQueue, &lValueToSend, 0 );
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	be 01       	movw	r22, r28
    27f0:	6d 5f       	subi	r22, 0xFD	; 253
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <xPayloadQueue>
    27f8:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <xPayloadQueue+0x1>
    27fc:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>
    2800:	81 30       	cpi	r24, 0x01	; 1
			if( xStatus != pdPASS )
    2802:	59 f0       	breq	.+22     	; 0x281a <hum_tsk+0x84>
    2804:	83 e9       	ldi	r24, 0x93	; 147
			{
						
				printf( "Task3 Could not send to the queue.\r\n" );
    2806:	92 e0       	ldi	r25, 0x02	; 2
    2808:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
				vTaskDelayUntil(&xLastExecutionTime,RELOAD_PERIOD);
    280c:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <RELOAD_PERIOD>
    2810:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <RELOAD_PERIOD+0x1>
    2814:	ce 01       	movw	r24, r28
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	e5 d9       	rcall	.-3126   	; 0x1be4 <vTaskDelayUntil>
			}

			vTaskDelayUntil(&xLastExecutionTime,RELOAD_PERIOD);
    281a:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <RELOAD_PERIOD>
    281e:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <RELOAD_PERIOD+0x1>
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	de d9       	rcall	.-3140   	; 0x1be4 <vTaskDelayUntil>
    2828:	c5 cf       	rjmp	.-118    	; 0x27b4 <hum_tsk+0x1e>

0000282a <init_sens>:



void init_sens()
{
	if ( HIH8120_OK == hih8120Create() )
    282a:	7b d7       	rcall	.+3830   	; 0x3722 <hih8120Create>
    282c:	81 11       	cpse	r24, r1
    282e:	05 c0       	rjmp	.+10     	; 0x283a <init_sens+0x10>
	{
		// Driver created OK
		// Always check what hih8120Create() returns
		printf("Driver created OK\n");
    2830:	87 eb       	ldi	r24, 0xB7	; 183
    2832:	92 e0       	ldi	r25, 0x02	; 2
    2834:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <init_sens+0x18>
	}
	else{
		printf("Driver not created BAD\n");
    283a:	89 ec       	ldi	r24, 0xC9	; 201
    283c:	92 e0       	ldi	r25, 0x02	; 2
    283e:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
	}
	mh_z19_create(ser_USART3, my_co2_call_back);
    2842:	6c ef       	ldi	r22, 0xFC	; 252
    2844:	72 e0       	ldi	r23, 0x02	; 2
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	0c 94 4f 22 	jmp	0x449e	; 0x449e <mh_z19_create>
    284c:	08 95       	ret

0000284e <init_lora>:
}


void init_lora()
{
hal_create(LED_TASK_PRIORITY); // Must be called first!! LED_TASK_PRIORITY must be a high priority in your system
    284e:	87 e0       	ldi	r24, 0x07	; 7
    2850:	09 d7       	rcall	.+3602   	; 0x3664 <hal_create>
lora_driver_create(ser_USART1); // The parameter is the USART port the RN2483 module is connected to - in this case USART1	
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <lora_driver_create>
    2858:	08 95       	ret

0000285a <lora_data_manager_tsk>:
const uint8_t LENGHT = 3;
static char _out_buf[100];
static void _lora_setup(void);
static e_LoRa_return_code_t rc;
void lora_data_manager_tsk(void *pvParameters)
{
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	69 97       	sbiw	r28, 0x19	; 25
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
    286e:	79 d8       	rcall	.-3854   	; 0x1962 <xTaskGetTickCount>
	uint16_t values[LENGHT];
	uint8_t counter = 0;
	lora_payload_t test_payload;
	
		// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <lora_driver_reset_rn2483>
	vTaskDelay(2);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	ef d9       	rcall	.-3106   	; 0x1c5a <vTaskDelay>
	lora_driver_reset_rn2483(0);
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
	vTaskDelay(150);
    2882:	86 e9       	ldi	r24, 0x96	; 150
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	e9 d9       	rcall	.-3118   	; 0x1c5a <vTaskDelay>
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    2888:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    2892:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <lora_driver_rn2483_factory_reset>
    2896:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    289a:	9f 93       	push	r25
    289c:	8f 93       	push	r24
    289e:	80 ee       	ldi	r24, 0xE0	; 224
    28a0:	92 e0       	ldi	r25, 0x02	; 2
    28a2:	9f 93       	push	r25
    28a4:	8f 93       	push	r24
    28a6:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    28aa:	0e 94 2e 20 	call	0x405c	; 0x405c <lora_driver_configure_to_eu868>
    28ae:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    28b2:	9f 93       	push	r25
    28b4:	8f 93       	push	r24
    28b6:	83 ef       	ldi	r24, 0xF3	; 243
    28b8:	92 e0       	ldi	r25, 0x02	; 2
    28ba:	9f 93       	push	r25
    28bc:	8f 93       	push	r24
    28be:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    28c2:	8a e0       	ldi	r24, 0x0A	; 10
    28c4:	98 e0       	ldi	r25, 0x08	; 8
    28c6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    28ca:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    28ce:	0a e0       	ldi	r16, 0x0A	; 10
    28d0:	18 e0       	ldi	r17, 0x08	; 8
    28d2:	1f 93       	push	r17
    28d4:	0f 93       	push	r16
    28d6:	9f 93       	push	r25
    28d8:	8f 93       	push	r24
    28da:	8c e0       	ldi	r24, 0x0C	; 12
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	9f 93       	push	r25
    28e0:	8f 93       	push	r24
    28e2:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    28e6:	c8 01       	movw	r24, r16
    28e8:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <lora_driver_set_device_identifier>
    28ec:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    28f0:	9f 93       	push	r25
    28f2:	8f 93       	push	r24
    28f4:	1f 93       	push	r17
    28f6:	0f 93       	push	r16
    28f8:	80 e2       	ldi	r24, 0x20	; 32
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	9f 93       	push	r25
    28fe:	8f 93       	push	r24
    2900:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2904:	a8 01       	movw	r20, r16
    2906:	65 e3       	ldi	r22, 0x35	; 53
    2908:	73 e0       	ldi	r23, 0x03	; 3
    290a:	86 e5       	ldi	r24, 0x56	; 86
    290c:	93 e0       	ldi	r25, 0x03	; 3
    290e:	0e 94 01 21 	call	0x4202	; 0x4202 <lora_driver_set_otaa_identity>
    2912:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    2916:	9f 93       	push	r25
    2918:	8f 93       	push	r24
    291a:	1f 93       	push	r17
    291c:	0f 93       	push	r16
    291e:	85 e3       	ldi	r24, 0x35	; 53
    2920:	93 e0       	ldi	r25, 0x03	; 3
    2922:	9f 93       	push	r25
    2924:	8f 93       	push	r24
    2926:	86 e5       	ldi	r24, 0x56	; 86
    2928:	93 e0       	ldi	r25, 0x03	; 3
    292a:	9f 93       	push	r25
    292c:	8f 93       	push	r24
    292e:	87 e6       	ldi	r24, 0x67	; 103
    2930:	93 e0       	ldi	r25, 0x03	; 3
    2932:	9f 93       	push	r25
    2934:	8f 93       	push	r24
    2936:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    293a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <lora_driver_save_mac>
    293e:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    2942:	9f 93       	push	r25
    2944:	8f 93       	push	r24
    2946:	8d e9       	ldi	r24, 0x9D	; 157
    2948:	93 e0       	ldi	r25, 0x03	; 3
    294a:	9f 93       	push	r25
    294c:	8f 93       	push	r24
    294e:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	0e 94 07 20 	call	0x400e	; 0x400e <lora_driver_set_adaptive_data_rate>
    2962:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    2966:	9f 93       	push	r25
    2968:	8f 93       	push	r24
    296a:	8c ea       	ldi	r24, 0xAC	; 172
    296c:	93 e0       	ldi	r25, 0x03	; 3
    296e:	9f 93       	push	r25
    2970:	8f 93       	push	r24
    2972:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	04 e1       	ldi	r16, 0x14	; 20
    2980:	10 e0       	ldi	r17, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 20;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    2982:	0f 2e       	mov	r0, r31
    2984:	fd ec       	ldi	r31, 0xCD	; 205
    2986:	ef 2e       	mov	r14, r31
    2988:	f3 e0       	ldi	r31, 0x03	; 3
    298a:	ff 2e       	mov	r15, r31
    298c:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 20;
	do {
		rc = lora_driver_join(LoRa_OTAA);
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <lora_driver_join>
    2994:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    2996:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
    299e:	1f 93       	push	r17
    29a0:	0f 93       	push	r16
    29a2:	ff 92       	push	r15
    29a4:	ef 92       	push	r14
    29a6:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>

		if ( rc != LoRa_ACCEPTED)
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	98 e0       	ldi	r25, 0x08	; 8
    29b8:	d9 16       	cp	r13, r25
    29ba:	09 f4       	brne	.+2      	; 0x29be <lora_data_manager_tsk+0x164>
    29bc:	73 c0       	rjmp	.+230    	; 0x2aa4 <lora_data_manager_tsk+0x24a>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(20000UL));
    29c4:	8c e3       	ldi	r24, 0x3C	; 60
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	48 d9       	rcall	.-3440   	; 0x1c5a <vTaskDelay>
    29ca:	01 50       	subi	r16, 0x01	; 1
    29cc:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    29ce:	f9 f6       	brne	.-66     	; 0x298e <lora_data_manager_tsk+0x134>
    29d0:	63 c0       	rjmp	.+198    	; 0x2a98 <lora_data_manager_tsk+0x23e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    29d2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    29d6:	fd cf       	rjmp	.-6      	; 0x29d2 <lora_data_manager_tsk+0x178>


	while(1)
	{
				
		if( uxQueueMessagesWaiting( xPayloadQueue ) != 0 )
    29d8:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <xPayloadQueue>
    29dc:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <xPayloadQueue+0x1>
    29e0:	0e 94 93 08 	call	0x1126	; 0x1126 <uxQueueMessagesWaiting>
    29e4:	88 23       	and	r24, r24
    29e6:	c1 f3       	breq	.-16     	; 0x29d8 <lora_data_manager_tsk+0x17e>
		{
			xStatus = xQueueReceive( xPayloadQueue, &recValue, portMAX_DELAY );
    29e8:	4f ef       	ldi	r20, 0xFF	; 255
    29ea:	5f ef       	ldi	r21, 0xFF	; 255
    29ec:	be 01       	movw	r22, r28
    29ee:	6f 5f       	subi	r22, 0xFF	; 255
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <xPayloadQueue>
    29f6:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <xPayloadQueue+0x1>
    29fa:	0e 94 4e 07 	call	0xe9c	; 0xe9c <xQueueReceive>
    29fe:	08 2f       	mov	r16, r24
			//put the value to the corresponding sensor position
			values[recValue.s_src]=recValue.s_value;
    2a00:	2a 81       	ldd	r18, Y+2	; 0x02
    2a02:	3b 81       	ldd	r19, Y+3	; 0x03
			
			test_payload.bytes[2*recValue.s_src] = values[recValue.s_src] >> 8;
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	e6 e0       	ldi	r30, 0x06	; 6
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	ec 0f       	add	r30, r28
    2a12:	fd 1f       	adc	r31, r29
    2a14:	e8 0f       	add	r30, r24
    2a16:	f9 1f       	adc	r31, r25
    2a18:	30 83       	st	Z, r19
			test_payload.bytes[2*recValue.s_src+1] = values[recValue.s_src] & 0xFF;
    2a1a:	e7 e0       	ldi	r30, 0x07	; 7
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	ec 0f       	add	r30, r28
    2a20:	fd 1f       	adc	r31, r29
    2a22:	e8 0f       	add	r30, r24
    2a24:	f9 1f       	adc	r31, r25
    2a26:	20 83       	st	Z, r18
			counter++;
    2a28:	1f 5f       	subi	r17, 0xFF	; 255
			if(counter==LENGHT){
    2a2a:	13 30       	cpi	r17, 0x03	; 3
    2a2c:	69 f5       	brne	.+90     	; 0x2a88 <lora_data_manager_tsk+0x22e>
				printf("uplink_payload is :%02x%02x %02x%02x %02x%02x \n" ,test_payload.bytes[0],test_payload.bytes[1],
    2a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a30:	1f 92       	push	r1
    2a32:	8f 93       	push	r24
    2a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a36:	1f 92       	push	r1
    2a38:	8f 93       	push	r24
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	1f 92       	push	r1
    2a3e:	8f 93       	push	r24
    2a40:	88 85       	ldd	r24, Y+8	; 0x08
    2a42:	1f 92       	push	r1
    2a44:	8f 93       	push	r24
    2a46:	8f 81       	ldd	r24, Y+7	; 0x07
    2a48:	1f 92       	push	r1
    2a4a:	8f 93       	push	r24
    2a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4e:	1f 92       	push	r1
    2a50:	8f 93       	push	r24
    2a52:	ff 92       	push	r15
    2a54:	ef 92       	push	r14
    2a56:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>
				test_payload.bytes[2],test_payload.bytes[3],test_payload.bytes[4],test_payload.bytes[5]);
				
				led_short_puls(led_ST4);  // OPTIONAL
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <led_short_puls>
				printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &test_payload)));
    2a60:	be 01       	movw	r22, r28
    2a62:	6c 5f       	subi	r22, 0xFC	; 252
    2a64:	7f 4f       	sbci	r23, 0xFF	; 255
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <lora_driver_sent_upload_message>
    2a6c:	0e 94 26 21 	call	0x424c	; 0x424c <lora_driver_map_return_code_to_text>
    2a70:	9f 93       	push	r25
    2a72:	8f 93       	push	r24
    2a74:	df 92       	push	r13
    2a76:	cf 92       	push	r12
    2a78:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
				counter = 0;
    2a86:	10 e0       	ldi	r17, 0x00	; 0
			}
			if( xStatus != pdPASS )
    2a88:	01 30       	cpi	r16, 0x01	; 1
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <lora_data_manager_tsk+0x234>
    2a8c:	a5 cf       	rjmp	.-182    	; 0x29d8 <lora_data_manager_tsk+0x17e>
			{
				printf( "Could not receive.\r\n" );
    2a8e:	82 e3       	ldi	r24, 0x32	; 50
    2a90:	94 e0       	ldi	r25, 0x04	; 4
    2a92:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
    2a96:	a0 cf       	rjmp	.-192    	; 0x29d8 <lora_data_manager_tsk+0x17e>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	f8 d7       	rcall	.+4080   	; 0x3a92 <led_fast_blink>
    2aa2:	97 cf       	rjmp	.-210    	; 0x29d2 <lora_data_manager_tsk+0x178>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <led_led_on>
	vTaskDelay(150);
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
	_lora_setup();


	test_payload.len = 6;
    2aaa:	86 e0       	ldi	r24, 0x06	; 6
    2aac:	8d 83       	std	Y+5, r24	; 0x05
	test_payload.port_no = 2;
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	8c 83       	std	Y+4, r24	; 0x04
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
	sample_t recValue ;
	BaseType_t xStatus;
	uint16_t values[LENGHT];
	uint8_t counter = 0;
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
			
			test_payload.bytes[2*recValue.s_src] = values[recValue.s_src] >> 8;
			test_payload.bytes[2*recValue.s_src+1] = values[recValue.s_src] & 0xFF;
			counter++;
			if(counter==LENGHT){
				printf("uplink_payload is :%02x%02x %02x%02x %02x%02x \n" ,test_payload.bytes[0],test_payload.bytes[1],
    2ab4:	0f 2e       	mov	r0, r31
    2ab6:	fd ee       	ldi	r31, 0xED	; 237
    2ab8:	ef 2e       	mov	r14, r31
    2aba:	f3 e0       	ldi	r31, 0x03	; 3
    2abc:	ff 2e       	mov	r15, r31
    2abe:	f0 2d       	mov	r31, r0
				test_payload.bytes[2],test_payload.bytes[3],test_payload.bytes[4],test_payload.bytes[5]);
				
				led_short_puls(led_ST4);  // OPTIONAL
				printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &test_payload)));
    2ac0:	0f 2e       	mov	r0, r31
    2ac2:	fd e1       	ldi	r31, 0x1D	; 29
    2ac4:	cf 2e       	mov	r12, r31
    2ac6:	f4 e0       	ldi	r31, 0x04	; 4
    2ac8:	df 2e       	mov	r13, r31
    2aca:	f0 2d       	mov	r31, r0
    2acc:	85 cf       	rjmp	.-246    	; 0x29d8 <lora_data_manager_tsk+0x17e>

00002ace <prvAutoReloadTimerCallback>:

static void prvAutoReloadTimerCallback( TimerHandle_t xTimer )
{
TickType_t xTimeNow;
 /* Obtain the current tick count. */
 xTimeNow = xTaskGetTickCount();
    2ace:	0e 94 b1 0c 	call	0x1962	; 0x1962 <xTaskGetTickCount>
 /* Output a string to show the time at which the callback was executed. */
 printf( "Auto-reload timer callback executing:  %d \n", xTimeNow );
    2ad2:	9f 93       	push	r25
    2ad4:	8f 93       	push	r24
    2ad6:	86 e4       	ldi	r24, 0x46	; 70
    2ad8:	94 e0       	ldi	r25, 0x04	; 4
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	0e 94 25 2c 	call	0x584a	; 0x584a <printf>
 //ulCallCount++;
 xSemaphoreGive(semphTemp);
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <semphTemp>
    2af0:	90 91 d2 09 	lds	r25, 0x09D2	; 0x8009d2 <semphTemp+0x1>
    2af4:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>
 xSemaphoreGive(semphCO2);
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <semphCO2>
    2b06:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <semphCO2+0x1>
    2b0a:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>
 xSemaphoreGive(semphHum);
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	80 91 c9 09 	lds	r24, 0x09C9	; 0x8009c9 <semphHum>
    2b1c:	90 91 ca 09 	lds	r25, 0x09CA	; 0x8009ca <semphHum+0x1>
    2b20:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>

}
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	08 95       	ret

00002b2e <main>:
/************************************************************************/
/* Start of main                                                        */
/************************************************************************/
int main(void)
{	
	xPayloadQueue = xQueueCreate( 5, sizeof( sample_t ) );
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	63 e0       	ldi	r22, 0x03	; 3
    2b32:	85 e0       	ldi	r24, 0x05	; 5
    2b34:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueGenericCreate>
    2b38:	90 93 d0 09 	sts	0x09D0, r25	; 0x8009d0 <xPayloadQueue+0x1>
    2b3c:	80 93 cf 09 	sts	0x09CF, r24	; 0x8009cf <xPayloadQueue>
	xTelegramQueue = xQueueCreate(1, sizeof(lora_payload_t));
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	66 e1       	ldi	r22, 0x16	; 22
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueGenericCreate>
    2b4a:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <xTelegramQueue+0x1>
    2b4e:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <xTelegramQueue>
	TimerHandle_t xAutoReloadTimer;
	
	semphTemp = xSemaphoreCreateBinary();
    2b52:	43 e0       	ldi	r20, 0x03	; 3
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueGenericCreate>
    2b5c:	90 93 d2 09 	sts	0x09D2, r25	; 0x8009d2 <semphTemp+0x1>
    2b60:	80 93 d1 09 	sts	0x09D1, r24	; 0x8009d1 <semphTemp>
	semphCO2 = xSemaphoreCreateBinary();
    2b64:	43 e0       	ldi	r20, 0x03	; 3
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueGenericCreate>
    2b6e:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <semphCO2+0x1>
    2b72:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <semphCO2>
	semphHum = xSemaphoreCreateBinary();
    2b76:	43 e0       	ldi	r20, 0x03	; 3
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueGenericCreate>
    2b80:	90 93 ca 09 	sts	0x09CA, r25	; 0x8009ca <semphHum+0x1>
    2b84:	80 93 c9 09 	sts	0x09C9, r24	; 0x8009c9 <semphHum>
	xAutoReloadTimer = xTimerCreate( "AutoReload",RELOAD_PERIOD, pdTRUE,0,prvAutoReloadTimerCallback ); 
    2b88:	07 e6       	ldi	r16, 0x67	; 103
    2b8a:	15 e1       	ldi	r17, 0x15	; 21
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	60 ea       	ldi	r22, 0xA0	; 160
    2b94:	7f e0       	ldi	r23, 0x0F	; 15
    2b96:	82 e7       	ldi	r24, 0x72	; 114
    2b98:	94 e0       	ldi	r25, 0x04	; 4
    2b9a:	f7 dc       	rcall	.-1554   	; 0x258a <xTimerCreate>
    2b9c:	ec 01       	movw	r28, r24
	xTimerStart(xAutoReloadTimer,0);
    2b9e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <xTaskGetTickCount>
    2ba2:	00 e0       	ldi	r16, 0x00	; 0
    2ba4:	10 e0       	ldi	r17, 0x00	; 0
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	ac 01       	movw	r20, r24
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	ce 01       	movw	r24, r28
    2bb0:	22 dd       	rcall	.-1468   	; 0x25f6 <xTimerGenericCommand>
	
	if( xPayloadQueue != NULL ) 
    2bb2:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <xPayloadQueue>
    2bb6:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <xPayloadQueue+0x1>
    2bba:	89 2b       	or	r24, r25
    2bbc:	59 f1       	breq	.+86     	; 0x2c14 <main+0xe6>
	{
			xTaskCreate(temp_tsk,"Task1",configMINIMAL_STACK_SIZE,NULL,3,NULL);
    2bbe:	e1 2c       	mov	r14, r1
    2bc0:	f1 2c       	mov	r15, r1
    2bc2:	03 e0       	ldi	r16, 0x03	; 3
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 ec       	ldi	r20, 0xC0	; 192
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	6d e7       	ldi	r22, 0x7D	; 125
    2bce:	74 e0       	ldi	r23, 0x04	; 4
    2bd0:	83 e1       	ldi	r24, 0x13	; 19
    2bd2:	96 e1       	ldi	r25, 0x16	; 22
    2bd4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
			xTaskCreate(co2_tsk,"Task2",configMINIMAL_STACK_SIZE,NULL,3,NULL);
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 ec       	ldi	r20, 0xC0	; 192
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	63 e8       	ldi	r22, 0x83	; 131
    2be2:	74 e0       	ldi	r23, 0x04	; 4
    2be4:	89 ea       	ldi	r24, 0xA9	; 169
    2be6:	92 e0       	ldi	r25, 0x02	; 2
    2be8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
			xTaskCreate(hum_tsk,"Task3",configMINIMAL_STACK_SIZE,NULL,3,NULL);
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 ec       	ldi	r20, 0xC0	; 192
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	69 e8       	ldi	r22, 0x89	; 137
    2bf6:	74 e0       	ldi	r23, 0x04	; 4
    2bf8:	8b ec       	ldi	r24, 0xCB	; 203
    2bfa:	93 e1       	ldi	r25, 0x13	; 19
    2bfc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
			xTaskCreate(lora_data_manager_tsk,"Receiver",configMINIMAL_STACK_SIZE+200,NULL,3,NULL);
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	48 e8       	ldi	r20, 0x88	; 136
    2c06:	51 e0       	ldi	r21, 0x01	; 1
    2c08:	6f e8       	ldi	r22, 0x8F	; 143
    2c0a:	74 e0       	ldi	r23, 0x04	; 4
    2c0c:	8d e2       	ldi	r24, 0x2D	; 45
    2c0e:	94 e1       	ldi	r25, 0x14	; 20
    2c10:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
			
	}
	stdioCreate(0);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <stdioCreate>
	sei();
	init_lora();
    2c1a:	78 94       	sei
	init_sens();
    2c1c:	18 de       	rcall	.-976    	; 0x284e <init_lora>
    2c1e:	05 de       	rcall	.-1014   	; 0x282a <init_sens>
	vTaskStartScheduler();		
    2c20:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <vTaskStartScheduler>
    2c24:	ff cf       	rjmp	.-2      	; 0x2c24 <main+0xf6>

00002c26 <temp_tsk>:
extern QueueHandle_t xPayloadQueue;
extern RELOAD_PERIOD;
static uint16_t default_temperature = 0xffff;


void temp_tsk(void *pvParameters) {
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <temp_tsk+0x6>
    2c2c:	1f 92       	push	r1
    2c2e:	1f 92       	push	r1
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
	
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
    2c34:	0e 94 b1 0c 	call	0x1962	; 0x1962 <xTaskGetTickCount>
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
	sample_t lValueToSend ;
	BaseType_t xStatus;
	lValueToSend.s_src=TEMP;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	8b 83       	std	Y+3, r24	; 0x03
	lValueToSend.s_value=default_temperature;
    2c40:	8f ef       	ldi	r24, 0xFF	; 255
    2c42:	9f ef       	ldi	r25, 0xFF	; 255
    2c44:	9d 83       	std	Y+5, r25	; 0x05
    2c46:	8c 83       	std	Y+4, r24	; 0x04
	

	while(1) {
		xSemaphoreTake(semphTemp,0);
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <semphTemp>
    2c50:	90 91 d2 09 	lds	r25, 0x09D2	; 0x8009d2 <semphTemp+0x1>
    2c54:	0e 94 d7 07 	call	0xfae	; 0xfae <xQueueSemaphoreTake>
		{
			
			if(HIH8120_OK!=hih8120Wakeup())
    2c58:	7c d5       	rcall	.+2808   	; 0x3752 <hih8120Wakeup>
			{
				//some errors check
			}
			vTaskDelay(pdMS_TO_TICKS(50UL));
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vTaskDelay>
			//*TODO: change delay to timer/interrupts */
			if ( HIH8120_OK !=  hih8120Meassure() )
    2c62:	8c d5       	rcall	.+2840   	; 0x377c <hih8120Meassure>
			{
				// Something went wrong
				// Investigate the return code further
				// this return code it gives wrong values
			}
			vTaskDelay(pdMS_TO_TICKS(50UL));
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vTaskDelay>
			float temp = hih8120GetTemperature();
    2c6c:	ac d5       	rcall	.+2904   	; 0x37c6 <hih8120GetTemperature>
			lValueToSend.s_value = round(temp*100); //  temp round for precision
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	48 ec       	ldi	r20, 0xC8	; 200
    2c74:	52 e4       	ldi	r21, 0x42	; 66
    2c76:	7c d0       	rcall	.+248    	; 0x2d70 <__mulsf3>
    2c78:	de d0       	rcall	.+444    	; 0x2e36 <round>
    2c7a:	25 d0       	rcall	.+74     	; 0x2cc6 <__fixunssfsi>
    2c7c:	7d 83       	std	Y+5, r23	; 0x05
    2c7e:	6c 83       	std	Y+4, r22	; 0x04
			xStatus = xQueueSendToBack( xPayloadQueue, &lValueToSend, 0 );
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	be 01       	movw	r22, r28
    2c88:	6d 5f       	subi	r22, 0xFD	; 253
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <xPayloadQueue>
    2c90:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <xPayloadQueue+0x1>
    2c94:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSend>
			if( xStatus != pdPASS )
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	61 f0       	breq	.+24     	; 0x2cb4 <temp_tsk+0x8e>
			{
				
				printf( "Task3 Could not send to the queue.\r\n" );
    2c9c:	83 e9       	ldi	r24, 0x93	; 147
    2c9e:	92 e0       	ldi	r25, 0x02	; 2
    2ca0:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
				vTaskDelayUntil(&xLastExecutionTime,RELOAD_PERIOD);
    2ca4:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <RELOAD_PERIOD>
    2ca8:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <RELOAD_PERIOD+0x1>
    2cac:	ce 01       	movw	r24, r28
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vTaskDelayUntil>
			}

			vTaskDelayUntil(&xLastExecutionTime,RELOAD_PERIOD);
    2cb4:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <RELOAD_PERIOD>
    2cb8:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <RELOAD_PERIOD+0x1>
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vTaskDelayUntil>
			
		}

		
	}
    2cc4:	c1 cf       	rjmp	.-126    	; 0x2c48 <temp_tsk+0x22>

00002cc6 <__fixunssfsi>:
    2cc6:	33 d0       	rcall	.+102    	; 0x2d2e <__fp_splitA>
    2cc8:	88 f0       	brcs	.+34     	; 0x2cec <__fixunssfsi+0x26>
    2cca:	9f 57       	subi	r25, 0x7F	; 127
    2ccc:	90 f0       	brcs	.+36     	; 0x2cf2 <__fixunssfsi+0x2c>
    2cce:	b9 2f       	mov	r27, r25
    2cd0:	99 27       	eor	r25, r25
    2cd2:	b7 51       	subi	r27, 0x17	; 23
    2cd4:	a0 f0       	brcs	.+40     	; 0x2cfe <__fixunssfsi+0x38>
    2cd6:	d1 f0       	breq	.+52     	; 0x2d0c <__fixunssfsi+0x46>
    2cd8:	66 0f       	add	r22, r22
    2cda:	77 1f       	adc	r23, r23
    2cdc:	88 1f       	adc	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	1a f0       	brmi	.+6      	; 0x2ce8 <__fixunssfsi+0x22>
    2ce2:	ba 95       	dec	r27
    2ce4:	c9 f7       	brne	.-14     	; 0x2cd8 <__fixunssfsi+0x12>
    2ce6:	12 c0       	rjmp	.+36     	; 0x2d0c <__fixunssfsi+0x46>
    2ce8:	b1 30       	cpi	r27, 0x01	; 1
    2cea:	81 f0       	breq	.+32     	; 0x2d0c <__fixunssfsi+0x46>
    2cec:	3a d0       	rcall	.+116    	; 0x2d62 <__fp_zero>
    2cee:	b1 e0       	ldi	r27, 0x01	; 1
    2cf0:	08 95       	ret
    2cf2:	37 c0       	rjmp	.+110    	; 0x2d62 <__fp_zero>
    2cf4:	67 2f       	mov	r22, r23
    2cf6:	78 2f       	mov	r23, r24
    2cf8:	88 27       	eor	r24, r24
    2cfa:	b8 5f       	subi	r27, 0xF8	; 248
    2cfc:	39 f0       	breq	.+14     	; 0x2d0c <__fixunssfsi+0x46>
    2cfe:	b9 3f       	cpi	r27, 0xF9	; 249
    2d00:	cc f3       	brlt	.-14     	; 0x2cf4 <__fixunssfsi+0x2e>
    2d02:	86 95       	lsr	r24
    2d04:	77 95       	ror	r23
    2d06:	67 95       	ror	r22
    2d08:	b3 95       	inc	r27
    2d0a:	d9 f7       	brne	.-10     	; 0x2d02 <__fixunssfsi+0x3c>
    2d0c:	3e f4       	brtc	.+14     	; 0x2d1c <__fixunssfsi+0x56>
    2d0e:	90 95       	com	r25
    2d10:	80 95       	com	r24
    2d12:	70 95       	com	r23
    2d14:	61 95       	neg	r22
    2d16:	7f 4f       	sbci	r23, 0xFF	; 255
    2d18:	8f 4f       	sbci	r24, 0xFF	; 255
    2d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1c:	08 95       	ret

00002d1e <__fp_split3>:
    2d1e:	57 fd       	sbrc	r21, 7
    2d20:	90 58       	subi	r25, 0x80	; 128
    2d22:	44 0f       	add	r20, r20
    2d24:	55 1f       	adc	r21, r21
    2d26:	59 f0       	breq	.+22     	; 0x2d3e <__fp_splitA+0x10>
    2d28:	5f 3f       	cpi	r21, 0xFF	; 255
    2d2a:	71 f0       	breq	.+28     	; 0x2d48 <__fp_splitA+0x1a>
    2d2c:	47 95       	ror	r20

00002d2e <__fp_splitA>:
    2d2e:	88 0f       	add	r24, r24
    2d30:	97 fb       	bst	r25, 7
    2d32:	99 1f       	adc	r25, r25
    2d34:	61 f0       	breq	.+24     	; 0x2d4e <__fp_splitA+0x20>
    2d36:	9f 3f       	cpi	r25, 0xFF	; 255
    2d38:	79 f0       	breq	.+30     	; 0x2d58 <__fp_splitA+0x2a>
    2d3a:	87 95       	ror	r24
    2d3c:	08 95       	ret
    2d3e:	12 16       	cp	r1, r18
    2d40:	13 06       	cpc	r1, r19
    2d42:	14 06       	cpc	r1, r20
    2d44:	55 1f       	adc	r21, r21
    2d46:	f2 cf       	rjmp	.-28     	; 0x2d2c <__fp_split3+0xe>
    2d48:	46 95       	lsr	r20
    2d4a:	f1 df       	rcall	.-30     	; 0x2d2e <__fp_splitA>
    2d4c:	08 c0       	rjmp	.+16     	; 0x2d5e <__fp_splitA+0x30>
    2d4e:	16 16       	cp	r1, r22
    2d50:	17 06       	cpc	r1, r23
    2d52:	18 06       	cpc	r1, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	f1 cf       	rjmp	.-30     	; 0x2d3a <__fp_splitA+0xc>
    2d58:	86 95       	lsr	r24
    2d5a:	71 05       	cpc	r23, r1
    2d5c:	61 05       	cpc	r22, r1
    2d5e:	08 94       	sec
    2d60:	08 95       	ret

00002d62 <__fp_zero>:
    2d62:	e8 94       	clt

00002d64 <__fp_szero>:
    2d64:	bb 27       	eor	r27, r27
    2d66:	66 27       	eor	r22, r22
    2d68:	77 27       	eor	r23, r23
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	97 f9       	bld	r25, 7
    2d6e:	08 95       	ret

00002d70 <__mulsf3>:
    2d70:	0b d0       	rcall	.+22     	; 0x2d88 <__mulsf3x>
    2d72:	c1 c0       	rjmp	.+386    	; 0x2ef6 <__fp_round>
    2d74:	b2 d0       	rcall	.+356    	; 0x2eda <__fp_pscA>
    2d76:	28 f0       	brcs	.+10     	; 0x2d82 <__mulsf3+0x12>
    2d78:	b7 d0       	rcall	.+366    	; 0x2ee8 <__fp_pscB>
    2d7a:	18 f0       	brcs	.+6      	; 0x2d82 <__mulsf3+0x12>
    2d7c:	95 23       	and	r25, r21
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <__mulsf3+0x12>
    2d80:	7a c0       	rjmp	.+244    	; 0x2e76 <__fp_inf>
    2d82:	a8 c0       	rjmp	.+336    	; 0x2ed4 <__fp_nan>
    2d84:	11 24       	eor	r1, r1
    2d86:	ee cf       	rjmp	.-36     	; 0x2d64 <__fp_szero>

00002d88 <__mulsf3x>:
    2d88:	ca df       	rcall	.-108    	; 0x2d1e <__fp_split3>
    2d8a:	a0 f3       	brcs	.-24     	; 0x2d74 <__mulsf3+0x4>

00002d8c <__mulsf3_pse>:
    2d8c:	95 9f       	mul	r25, r21
    2d8e:	d1 f3       	breq	.-12     	; 0x2d84 <__mulsf3+0x14>
    2d90:	95 0f       	add	r25, r21
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	55 1f       	adc	r21, r21
    2d96:	62 9f       	mul	r22, r18
    2d98:	f0 01       	movw	r30, r0
    2d9a:	72 9f       	mul	r23, r18
    2d9c:	bb 27       	eor	r27, r27
    2d9e:	f0 0d       	add	r31, r0
    2da0:	b1 1d       	adc	r27, r1
    2da2:	63 9f       	mul	r22, r19
    2da4:	aa 27       	eor	r26, r26
    2da6:	f0 0d       	add	r31, r0
    2da8:	b1 1d       	adc	r27, r1
    2daa:	aa 1f       	adc	r26, r26
    2dac:	64 9f       	mul	r22, r20
    2dae:	66 27       	eor	r22, r22
    2db0:	b0 0d       	add	r27, r0
    2db2:	a1 1d       	adc	r26, r1
    2db4:	66 1f       	adc	r22, r22
    2db6:	82 9f       	mul	r24, r18
    2db8:	22 27       	eor	r18, r18
    2dba:	b0 0d       	add	r27, r0
    2dbc:	a1 1d       	adc	r26, r1
    2dbe:	62 1f       	adc	r22, r18
    2dc0:	73 9f       	mul	r23, r19
    2dc2:	b0 0d       	add	r27, r0
    2dc4:	a1 1d       	adc	r26, r1
    2dc6:	62 1f       	adc	r22, r18
    2dc8:	83 9f       	mul	r24, r19
    2dca:	a0 0d       	add	r26, r0
    2dcc:	61 1d       	adc	r22, r1
    2dce:	22 1f       	adc	r18, r18
    2dd0:	74 9f       	mul	r23, r20
    2dd2:	33 27       	eor	r19, r19
    2dd4:	a0 0d       	add	r26, r0
    2dd6:	61 1d       	adc	r22, r1
    2dd8:	23 1f       	adc	r18, r19
    2dda:	84 9f       	mul	r24, r20
    2ddc:	60 0d       	add	r22, r0
    2dde:	21 1d       	adc	r18, r1
    2de0:	82 2f       	mov	r24, r18
    2de2:	76 2f       	mov	r23, r22
    2de4:	6a 2f       	mov	r22, r26
    2de6:	11 24       	eor	r1, r1
    2de8:	9f 57       	subi	r25, 0x7F	; 127
    2dea:	50 40       	sbci	r21, 0x00	; 0
    2dec:	8a f0       	brmi	.+34     	; 0x2e10 <__mulsf3_pse+0x84>
    2dee:	e1 f0       	breq	.+56     	; 0x2e28 <__mulsf3_pse+0x9c>
    2df0:	88 23       	and	r24, r24
    2df2:	4a f0       	brmi	.+18     	; 0x2e06 <__mulsf3_pse+0x7a>
    2df4:	ee 0f       	add	r30, r30
    2df6:	ff 1f       	adc	r31, r31
    2df8:	bb 1f       	adc	r27, r27
    2dfa:	66 1f       	adc	r22, r22
    2dfc:	77 1f       	adc	r23, r23
    2dfe:	88 1f       	adc	r24, r24
    2e00:	91 50       	subi	r25, 0x01	; 1
    2e02:	50 40       	sbci	r21, 0x00	; 0
    2e04:	a9 f7       	brne	.-22     	; 0x2df0 <__mulsf3_pse+0x64>
    2e06:	9e 3f       	cpi	r25, 0xFE	; 254
    2e08:	51 05       	cpc	r21, r1
    2e0a:	70 f0       	brcs	.+28     	; 0x2e28 <__mulsf3_pse+0x9c>
    2e0c:	34 c0       	rjmp	.+104    	; 0x2e76 <__fp_inf>
    2e0e:	aa cf       	rjmp	.-172    	; 0x2d64 <__fp_szero>
    2e10:	5f 3f       	cpi	r21, 0xFF	; 255
    2e12:	ec f3       	brlt	.-6      	; 0x2e0e <__mulsf3_pse+0x82>
    2e14:	98 3e       	cpi	r25, 0xE8	; 232
    2e16:	dc f3       	brlt	.-10     	; 0x2e0e <__mulsf3_pse+0x82>
    2e18:	86 95       	lsr	r24
    2e1a:	77 95       	ror	r23
    2e1c:	67 95       	ror	r22
    2e1e:	b7 95       	ror	r27
    2e20:	f7 95       	ror	r31
    2e22:	e7 95       	ror	r30
    2e24:	9f 5f       	subi	r25, 0xFF	; 255
    2e26:	c1 f7       	brne	.-16     	; 0x2e18 <__mulsf3_pse+0x8c>
    2e28:	fe 2b       	or	r31, r30
    2e2a:	88 0f       	add	r24, r24
    2e2c:	91 1d       	adc	r25, r1
    2e2e:	96 95       	lsr	r25
    2e30:	87 95       	ror	r24
    2e32:	97 f9       	bld	r25, 7
    2e34:	08 95       	ret

00002e36 <round>:
    2e36:	7b df       	rcall	.-266    	; 0x2d2e <__fp_splitA>
    2e38:	e0 f0       	brcs	.+56     	; 0x2e72 <round+0x3c>
    2e3a:	9e 37       	cpi	r25, 0x7E	; 126
    2e3c:	d8 f0       	brcs	.+54     	; 0x2e74 <round+0x3e>
    2e3e:	96 39       	cpi	r25, 0x96	; 150
    2e40:	b8 f4       	brcc	.+46     	; 0x2e70 <round+0x3a>
    2e42:	9e 38       	cpi	r25, 0x8E	; 142
    2e44:	48 f4       	brcc	.+18     	; 0x2e58 <round+0x22>
    2e46:	67 2f       	mov	r22, r23
    2e48:	78 2f       	mov	r23, r24
    2e4a:	88 27       	eor	r24, r24
    2e4c:	98 5f       	subi	r25, 0xF8	; 248
    2e4e:	f9 cf       	rjmp	.-14     	; 0x2e42 <round+0xc>
    2e50:	86 95       	lsr	r24
    2e52:	77 95       	ror	r23
    2e54:	67 95       	ror	r22
    2e56:	93 95       	inc	r25
    2e58:	95 39       	cpi	r25, 0x95	; 149
    2e5a:	d0 f3       	brcs	.-12     	; 0x2e50 <round+0x1a>
    2e5c:	b6 2f       	mov	r27, r22
    2e5e:	b1 70       	andi	r27, 0x01	; 1
    2e60:	6b 0f       	add	r22, r27
    2e62:	71 1d       	adc	r23, r1
    2e64:	81 1d       	adc	r24, r1
    2e66:	20 f4       	brcc	.+8      	; 0x2e70 <round+0x3a>
    2e68:	87 95       	ror	r24
    2e6a:	77 95       	ror	r23
    2e6c:	67 95       	ror	r22
    2e6e:	93 95       	inc	r25
    2e70:	08 c0       	rjmp	.+16     	; 0x2e82 <__fp_mintl>
    2e72:	22 c0       	rjmp	.+68     	; 0x2eb8 <__fp_mpack>
    2e74:	77 cf       	rjmp	.-274    	; 0x2d64 <__fp_szero>

00002e76 <__fp_inf>:
    2e76:	97 f9       	bld	r25, 7
    2e78:	9f 67       	ori	r25, 0x7F	; 127
    2e7a:	80 e8       	ldi	r24, 0x80	; 128
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	08 95       	ret

00002e82 <__fp_mintl>:
    2e82:	88 23       	and	r24, r24
    2e84:	71 f4       	brne	.+28     	; 0x2ea2 <__fp_mintl+0x20>
    2e86:	77 23       	and	r23, r23
    2e88:	21 f0       	breq	.+8      	; 0x2e92 <__fp_mintl+0x10>
    2e8a:	98 50       	subi	r25, 0x08	; 8
    2e8c:	87 2b       	or	r24, r23
    2e8e:	76 2f       	mov	r23, r22
    2e90:	07 c0       	rjmp	.+14     	; 0x2ea0 <__fp_mintl+0x1e>
    2e92:	66 23       	and	r22, r22
    2e94:	11 f4       	brne	.+4      	; 0x2e9a <__fp_mintl+0x18>
    2e96:	99 27       	eor	r25, r25
    2e98:	0d c0       	rjmp	.+26     	; 0x2eb4 <__fp_mintl+0x32>
    2e9a:	90 51       	subi	r25, 0x10	; 16
    2e9c:	86 2b       	or	r24, r22
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	2a f0       	brmi	.+10     	; 0x2eae <__fp_mintl+0x2c>
    2ea4:	9a 95       	dec	r25
    2ea6:	66 0f       	add	r22, r22
    2ea8:	77 1f       	adc	r23, r23
    2eaa:	88 1f       	adc	r24, r24
    2eac:	da f7       	brpl	.-10     	; 0x2ea4 <__fp_mintl+0x22>
    2eae:	88 0f       	add	r24, r24
    2eb0:	96 95       	lsr	r25
    2eb2:	87 95       	ror	r24
    2eb4:	97 f9       	bld	r25, 7
    2eb6:	08 95       	ret

00002eb8 <__fp_mpack>:
    2eb8:	9f 3f       	cpi	r25, 0xFF	; 255
    2eba:	31 f0       	breq	.+12     	; 0x2ec8 <__fp_mpack_finite+0xc>

00002ebc <__fp_mpack_finite>:
    2ebc:	91 50       	subi	r25, 0x01	; 1
    2ebe:	20 f4       	brcc	.+8      	; 0x2ec8 <__fp_mpack_finite+0xc>
    2ec0:	87 95       	ror	r24
    2ec2:	77 95       	ror	r23
    2ec4:	67 95       	ror	r22
    2ec6:	b7 95       	ror	r27
    2ec8:	88 0f       	add	r24, r24
    2eca:	91 1d       	adc	r25, r1
    2ecc:	96 95       	lsr	r25
    2ece:	87 95       	ror	r24
    2ed0:	97 f9       	bld	r25, 7
    2ed2:	08 95       	ret

00002ed4 <__fp_nan>:
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	80 ec       	ldi	r24, 0xC0	; 192
    2ed8:	08 95       	ret

00002eda <__fp_pscA>:
    2eda:	00 24       	eor	r0, r0
    2edc:	0a 94       	dec	r0
    2ede:	16 16       	cp	r1, r22
    2ee0:	17 06       	cpc	r1, r23
    2ee2:	18 06       	cpc	r1, r24
    2ee4:	09 06       	cpc	r0, r25
    2ee6:	08 95       	ret

00002ee8 <__fp_pscB>:
    2ee8:	00 24       	eor	r0, r0
    2eea:	0a 94       	dec	r0
    2eec:	12 16       	cp	r1, r18
    2eee:	13 06       	cpc	r1, r19
    2ef0:	14 06       	cpc	r1, r20
    2ef2:	05 06       	cpc	r0, r21
    2ef4:	08 95       	ret

00002ef6 <__fp_round>:
    2ef6:	09 2e       	mov	r0, r25
    2ef8:	03 94       	inc	r0
    2efa:	00 0c       	add	r0, r0
    2efc:	11 f4       	brne	.+4      	; 0x2f02 <__fp_round+0xc>
    2efe:	88 23       	and	r24, r24
    2f00:	52 f0       	brmi	.+20     	; 0x2f16 <__fp_round+0x20>
    2f02:	bb 0f       	add	r27, r27
    2f04:	40 f4       	brcc	.+16     	; 0x2f16 <__fp_round+0x20>
    2f06:	bf 2b       	or	r27, r31
    2f08:	11 f4       	brne	.+4      	; 0x2f0e <__fp_round+0x18>
    2f0a:	60 ff       	sbrs	r22, 0
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <__fp_round+0x20>
    2f0e:	6f 5f       	subi	r22, 0xFF	; 255
    2f10:	7f 4f       	sbci	r23, 0xFF	; 255
    2f12:	8f 4f       	sbci	r24, 0xFF	; 255
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	08 95       	ret

00002f18 <vfprintf>:
    2f18:	2f 92       	push	r2
    2f1a:	3f 92       	push	r3
    2f1c:	4f 92       	push	r4
    2f1e:	5f 92       	push	r5
    2f20:	6f 92       	push	r6
    2f22:	7f 92       	push	r7
    2f24:	8f 92       	push	r8
    2f26:	9f 92       	push	r9
    2f28:	af 92       	push	r10
    2f2a:	bf 92       	push	r11
    2f2c:	cf 92       	push	r12
    2f2e:	df 92       	push	r13
    2f30:	ef 92       	push	r14
    2f32:	ff 92       	push	r15
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	60 97       	sbiw	r28, 0x10	; 16
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	7c 01       	movw	r14, r24
    2f4e:	1b 01       	movw	r2, r22
    2f50:	6a 01       	movw	r12, r20
    2f52:	fc 01       	movw	r30, r24
    2f54:	17 82       	std	Z+7, r1	; 0x07
    2f56:	16 82       	std	Z+6, r1	; 0x06
    2f58:	83 81       	ldd	r24, Z+3	; 0x03
    2f5a:	81 ff       	sbrs	r24, 1
    2f5c:	44 c3       	rjmp	.+1672   	; 0x35e6 <vfprintf+0x6ce>
    2f5e:	9e 01       	movw	r18, r28
    2f60:	2f 5f       	subi	r18, 0xFF	; 255
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	39 01       	movw	r6, r18
    2f66:	f7 01       	movw	r30, r14
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	f1 01       	movw	r30, r2
    2f6c:	93 fd       	sbrc	r25, 3
    2f6e:	85 91       	lpm	r24, Z+
    2f70:	93 ff       	sbrs	r25, 3
    2f72:	81 91       	ld	r24, Z+
    2f74:	1f 01       	movw	r2, r30
    2f76:	88 23       	and	r24, r24
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <vfprintf+0x64>
    2f7a:	31 c3       	rjmp	.+1634   	; 0x35de <vfprintf+0x6c6>
    2f7c:	85 32       	cpi	r24, 0x25	; 37
    2f7e:	39 f4       	brne	.+14     	; 0x2f8e <vfprintf+0x76>
    2f80:	93 fd       	sbrc	r25, 3
    2f82:	85 91       	lpm	r24, Z+
    2f84:	93 ff       	sbrs	r25, 3
    2f86:	81 91       	ld	r24, Z+
    2f88:	1f 01       	movw	r2, r30
    2f8a:	85 32       	cpi	r24, 0x25	; 37
    2f8c:	39 f4       	brne	.+14     	; 0x2f9c <vfprintf+0x84>
    2f8e:	b7 01       	movw	r22, r14
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    2f96:	56 01       	movw	r10, r12
    2f98:	65 01       	movw	r12, r10
    2f9a:	e5 cf       	rjmp	.-54     	; 0x2f66 <vfprintf+0x4e>
    2f9c:	10 e0       	ldi	r17, 0x00	; 0
    2f9e:	51 2c       	mov	r5, r1
    2fa0:	91 2c       	mov	r9, r1
    2fa2:	ff e1       	ldi	r31, 0x1F	; 31
    2fa4:	f9 15       	cp	r31, r9
    2fa6:	d8 f0       	brcs	.+54     	; 0x2fde <vfprintf+0xc6>
    2fa8:	8b 32       	cpi	r24, 0x2B	; 43
    2faa:	79 f0       	breq	.+30     	; 0x2fca <vfprintf+0xb2>
    2fac:	38 f4       	brcc	.+14     	; 0x2fbc <vfprintf+0xa4>
    2fae:	80 32       	cpi	r24, 0x20	; 32
    2fb0:	79 f0       	breq	.+30     	; 0x2fd0 <vfprintf+0xb8>
    2fb2:	83 32       	cpi	r24, 0x23	; 35
    2fb4:	a1 f4       	brne	.+40     	; 0x2fde <vfprintf+0xc6>
    2fb6:	f9 2d       	mov	r31, r9
    2fb8:	f0 61       	ori	r31, 0x10	; 16
    2fba:	2e c0       	rjmp	.+92     	; 0x3018 <vfprintf+0x100>
    2fbc:	8d 32       	cpi	r24, 0x2D	; 45
    2fbe:	61 f0       	breq	.+24     	; 0x2fd8 <vfprintf+0xc0>
    2fc0:	80 33       	cpi	r24, 0x30	; 48
    2fc2:	69 f4       	brne	.+26     	; 0x2fde <vfprintf+0xc6>
    2fc4:	29 2d       	mov	r18, r9
    2fc6:	21 60       	ori	r18, 0x01	; 1
    2fc8:	2d c0       	rjmp	.+90     	; 0x3024 <vfprintf+0x10c>
    2fca:	39 2d       	mov	r19, r9
    2fcc:	32 60       	ori	r19, 0x02	; 2
    2fce:	93 2e       	mov	r9, r19
    2fd0:	89 2d       	mov	r24, r9
    2fd2:	84 60       	ori	r24, 0x04	; 4
    2fd4:	98 2e       	mov	r9, r24
    2fd6:	2a c0       	rjmp	.+84     	; 0x302c <vfprintf+0x114>
    2fd8:	e9 2d       	mov	r30, r9
    2fda:	e8 60       	ori	r30, 0x08	; 8
    2fdc:	15 c0       	rjmp	.+42     	; 0x3008 <vfprintf+0xf0>
    2fde:	97 fc       	sbrc	r9, 7
    2fe0:	2d c0       	rjmp	.+90     	; 0x303c <vfprintf+0x124>
    2fe2:	20 ed       	ldi	r18, 0xD0	; 208
    2fe4:	28 0f       	add	r18, r24
    2fe6:	2a 30       	cpi	r18, 0x0A	; 10
    2fe8:	88 f4       	brcc	.+34     	; 0x300c <vfprintf+0xf4>
    2fea:	96 fe       	sbrs	r9, 6
    2fec:	06 c0       	rjmp	.+12     	; 0x2ffa <vfprintf+0xe2>
    2fee:	3a e0       	ldi	r19, 0x0A	; 10
    2ff0:	13 9f       	mul	r17, r19
    2ff2:	20 0d       	add	r18, r0
    2ff4:	11 24       	eor	r1, r1
    2ff6:	12 2f       	mov	r17, r18
    2ff8:	19 c0       	rjmp	.+50     	; 0x302c <vfprintf+0x114>
    2ffa:	8a e0       	ldi	r24, 0x0A	; 10
    2ffc:	58 9e       	mul	r5, r24
    2ffe:	20 0d       	add	r18, r0
    3000:	11 24       	eor	r1, r1
    3002:	52 2e       	mov	r5, r18
    3004:	e9 2d       	mov	r30, r9
    3006:	e0 62       	ori	r30, 0x20	; 32
    3008:	9e 2e       	mov	r9, r30
    300a:	10 c0       	rjmp	.+32     	; 0x302c <vfprintf+0x114>
    300c:	8e 32       	cpi	r24, 0x2E	; 46
    300e:	31 f4       	brne	.+12     	; 0x301c <vfprintf+0x104>
    3010:	96 fc       	sbrc	r9, 6
    3012:	e5 c2       	rjmp	.+1482   	; 0x35de <vfprintf+0x6c6>
    3014:	f9 2d       	mov	r31, r9
    3016:	f0 64       	ori	r31, 0x40	; 64
    3018:	9f 2e       	mov	r9, r31
    301a:	08 c0       	rjmp	.+16     	; 0x302c <vfprintf+0x114>
    301c:	8c 36       	cpi	r24, 0x6C	; 108
    301e:	21 f4       	brne	.+8      	; 0x3028 <vfprintf+0x110>
    3020:	29 2d       	mov	r18, r9
    3022:	20 68       	ori	r18, 0x80	; 128
    3024:	92 2e       	mov	r9, r18
    3026:	02 c0       	rjmp	.+4      	; 0x302c <vfprintf+0x114>
    3028:	88 36       	cpi	r24, 0x68	; 104
    302a:	41 f4       	brne	.+16     	; 0x303c <vfprintf+0x124>
    302c:	f1 01       	movw	r30, r2
    302e:	93 fd       	sbrc	r25, 3
    3030:	85 91       	lpm	r24, Z+
    3032:	93 ff       	sbrs	r25, 3
    3034:	81 91       	ld	r24, Z+
    3036:	1f 01       	movw	r2, r30
    3038:	81 11       	cpse	r24, r1
    303a:	b3 cf       	rjmp	.-154    	; 0x2fa2 <vfprintf+0x8a>
    303c:	9b eb       	ldi	r25, 0xBB	; 187
    303e:	98 0f       	add	r25, r24
    3040:	93 30       	cpi	r25, 0x03	; 3
    3042:	20 f4       	brcc	.+8      	; 0x304c <vfprintf+0x134>
    3044:	99 2d       	mov	r25, r9
    3046:	90 61       	ori	r25, 0x10	; 16
    3048:	80 5e       	subi	r24, 0xE0	; 224
    304a:	07 c0       	rjmp	.+14     	; 0x305a <vfprintf+0x142>
    304c:	9b e9       	ldi	r25, 0x9B	; 155
    304e:	98 0f       	add	r25, r24
    3050:	93 30       	cpi	r25, 0x03	; 3
    3052:	08 f0       	brcs	.+2      	; 0x3056 <vfprintf+0x13e>
    3054:	66 c1       	rjmp	.+716    	; 0x3322 <vfprintf+0x40a>
    3056:	99 2d       	mov	r25, r9
    3058:	9f 7e       	andi	r25, 0xEF	; 239
    305a:	96 ff       	sbrs	r25, 6
    305c:	16 e0       	ldi	r17, 0x06	; 6
    305e:	9f 73       	andi	r25, 0x3F	; 63
    3060:	99 2e       	mov	r9, r25
    3062:	85 36       	cpi	r24, 0x65	; 101
    3064:	19 f4       	brne	.+6      	; 0x306c <vfprintf+0x154>
    3066:	90 64       	ori	r25, 0x40	; 64
    3068:	99 2e       	mov	r9, r25
    306a:	08 c0       	rjmp	.+16     	; 0x307c <vfprintf+0x164>
    306c:	86 36       	cpi	r24, 0x66	; 102
    306e:	21 f4       	brne	.+8      	; 0x3078 <vfprintf+0x160>
    3070:	39 2f       	mov	r19, r25
    3072:	30 68       	ori	r19, 0x80	; 128
    3074:	93 2e       	mov	r9, r19
    3076:	02 c0       	rjmp	.+4      	; 0x307c <vfprintf+0x164>
    3078:	11 11       	cpse	r17, r1
    307a:	11 50       	subi	r17, 0x01	; 1
    307c:	97 fe       	sbrs	r9, 7
    307e:	07 c0       	rjmp	.+14     	; 0x308e <vfprintf+0x176>
    3080:	1c 33       	cpi	r17, 0x3C	; 60
    3082:	50 f4       	brcc	.+20     	; 0x3098 <vfprintf+0x180>
    3084:	44 24       	eor	r4, r4
    3086:	43 94       	inc	r4
    3088:	41 0e       	add	r4, r17
    308a:	27 e0       	ldi	r18, 0x07	; 7
    308c:	0b c0       	rjmp	.+22     	; 0x30a4 <vfprintf+0x18c>
    308e:	18 30       	cpi	r17, 0x08	; 8
    3090:	38 f0       	brcs	.+14     	; 0x30a0 <vfprintf+0x188>
    3092:	27 e0       	ldi	r18, 0x07	; 7
    3094:	17 e0       	ldi	r17, 0x07	; 7
    3096:	05 c0       	rjmp	.+10     	; 0x30a2 <vfprintf+0x18a>
    3098:	27 e0       	ldi	r18, 0x07	; 7
    309a:	9c e3       	ldi	r25, 0x3C	; 60
    309c:	49 2e       	mov	r4, r25
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <vfprintf+0x18c>
    30a0:	21 2f       	mov	r18, r17
    30a2:	41 2c       	mov	r4, r1
    30a4:	56 01       	movw	r10, r12
    30a6:	84 e0       	ldi	r24, 0x04	; 4
    30a8:	a8 0e       	add	r10, r24
    30aa:	b1 1c       	adc	r11, r1
    30ac:	f6 01       	movw	r30, r12
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	04 2d       	mov	r16, r4
    30b8:	a3 01       	movw	r20, r6
    30ba:	0e 94 c1 2a 	call	0x5582	; 0x5582 <__ftoa_engine>
    30be:	6c 01       	movw	r12, r24
    30c0:	f9 81       	ldd	r31, Y+1	; 0x01
    30c2:	fc 87       	std	Y+12, r31	; 0x0c
    30c4:	f0 ff       	sbrs	r31, 0
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <vfprintf+0x1b4>
    30c8:	f3 ff       	sbrs	r31, 3
    30ca:	06 c0       	rjmp	.+12     	; 0x30d8 <vfprintf+0x1c0>
    30cc:	91 fc       	sbrc	r9, 1
    30ce:	06 c0       	rjmp	.+12     	; 0x30dc <vfprintf+0x1c4>
    30d0:	92 fe       	sbrs	r9, 2
    30d2:	06 c0       	rjmp	.+12     	; 0x30e0 <vfprintf+0x1c8>
    30d4:	00 e2       	ldi	r16, 0x20	; 32
    30d6:	05 c0       	rjmp	.+10     	; 0x30e2 <vfprintf+0x1ca>
    30d8:	0d e2       	ldi	r16, 0x2D	; 45
    30da:	03 c0       	rjmp	.+6      	; 0x30e2 <vfprintf+0x1ca>
    30dc:	0b e2       	ldi	r16, 0x2B	; 43
    30de:	01 c0       	rjmp	.+2      	; 0x30e2 <vfprintf+0x1ca>
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    30e4:	8c 70       	andi	r24, 0x0C	; 12
    30e6:	19 f0       	breq	.+6      	; 0x30ee <vfprintf+0x1d6>
    30e8:	01 11       	cpse	r16, r1
    30ea:	5a c2       	rjmp	.+1204   	; 0x35a0 <vfprintf+0x688>
    30ec:	9b c2       	rjmp	.+1334   	; 0x3624 <vfprintf+0x70c>
    30ee:	97 fe       	sbrs	r9, 7
    30f0:	10 c0       	rjmp	.+32     	; 0x3112 <vfprintf+0x1fa>
    30f2:	4c 0c       	add	r4, r12
    30f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    30f6:	f4 ff       	sbrs	r31, 4
    30f8:	04 c0       	rjmp	.+8      	; 0x3102 <vfprintf+0x1ea>
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	81 33       	cpi	r24, 0x31	; 49
    30fe:	09 f4       	brne	.+2      	; 0x3102 <vfprintf+0x1ea>
    3100:	4a 94       	dec	r4
    3102:	14 14       	cp	r1, r4
    3104:	74 f5       	brge	.+92     	; 0x3162 <vfprintf+0x24a>
    3106:	28 e0       	ldi	r18, 0x08	; 8
    3108:	24 15       	cp	r18, r4
    310a:	78 f5       	brcc	.+94     	; 0x316a <vfprintf+0x252>
    310c:	88 e0       	ldi	r24, 0x08	; 8
    310e:	48 2e       	mov	r4, r24
    3110:	2c c0       	rjmp	.+88     	; 0x316a <vfprintf+0x252>
    3112:	96 fc       	sbrc	r9, 6
    3114:	2a c0       	rjmp	.+84     	; 0x316a <vfprintf+0x252>
    3116:	81 2f       	mov	r24, r17
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	8c 15       	cp	r24, r12
    311c:	9d 05       	cpc	r25, r13
    311e:	9c f0       	brlt	.+38     	; 0x3146 <vfprintf+0x22e>
    3120:	3c ef       	ldi	r19, 0xFC	; 252
    3122:	c3 16       	cp	r12, r19
    3124:	3f ef       	ldi	r19, 0xFF	; 255
    3126:	d3 06       	cpc	r13, r19
    3128:	74 f0       	brlt	.+28     	; 0x3146 <vfprintf+0x22e>
    312a:	89 2d       	mov	r24, r9
    312c:	80 68       	ori	r24, 0x80	; 128
    312e:	98 2e       	mov	r9, r24
    3130:	0a c0       	rjmp	.+20     	; 0x3146 <vfprintf+0x22e>
    3132:	e2 e0       	ldi	r30, 0x02	; 2
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	ec 0f       	add	r30, r28
    3138:	fd 1f       	adc	r31, r29
    313a:	e1 0f       	add	r30, r17
    313c:	f1 1d       	adc	r31, r1
    313e:	80 81       	ld	r24, Z
    3140:	80 33       	cpi	r24, 0x30	; 48
    3142:	19 f4       	brne	.+6      	; 0x314a <vfprintf+0x232>
    3144:	11 50       	subi	r17, 0x01	; 1
    3146:	11 11       	cpse	r17, r1
    3148:	f4 cf       	rjmp	.-24     	; 0x3132 <vfprintf+0x21a>
    314a:	97 fe       	sbrs	r9, 7
    314c:	0e c0       	rjmp	.+28     	; 0x316a <vfprintf+0x252>
    314e:	44 24       	eor	r4, r4
    3150:	43 94       	inc	r4
    3152:	41 0e       	add	r4, r17
    3154:	81 2f       	mov	r24, r17
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	c8 16       	cp	r12, r24
    315a:	d9 06       	cpc	r13, r25
    315c:	2c f4       	brge	.+10     	; 0x3168 <vfprintf+0x250>
    315e:	1c 19       	sub	r17, r12
    3160:	04 c0       	rjmp	.+8      	; 0x316a <vfprintf+0x252>
    3162:	44 24       	eor	r4, r4
    3164:	43 94       	inc	r4
    3166:	01 c0       	rjmp	.+2      	; 0x316a <vfprintf+0x252>
    3168:	10 e0       	ldi	r17, 0x00	; 0
    316a:	97 fe       	sbrs	r9, 7
    316c:	06 c0       	rjmp	.+12     	; 0x317a <vfprintf+0x262>
    316e:	1c 14       	cp	r1, r12
    3170:	1d 04       	cpc	r1, r13
    3172:	34 f4       	brge	.+12     	; 0x3180 <vfprintf+0x268>
    3174:	c6 01       	movw	r24, r12
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <vfprintf+0x26c>
    317a:	85 e0       	ldi	r24, 0x05	; 5
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <vfprintf+0x26c>
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	01 11       	cpse	r16, r1
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	11 23       	and	r17, r17
    318a:	31 f0       	breq	.+12     	; 0x3198 <vfprintf+0x280>
    318c:	21 2f       	mov	r18, r17
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	2f 5f       	subi	r18, 0xFF	; 255
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	82 0f       	add	r24, r18
    3196:	93 1f       	adc	r25, r19
    3198:	25 2d       	mov	r18, r5
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	82 17       	cp	r24, r18
    319e:	93 07       	cpc	r25, r19
    31a0:	14 f4       	brge	.+4      	; 0x31a6 <vfprintf+0x28e>
    31a2:	58 1a       	sub	r5, r24
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <vfprintf+0x290>
    31a6:	51 2c       	mov	r5, r1
    31a8:	89 2d       	mov	r24, r9
    31aa:	89 70       	andi	r24, 0x09	; 9
    31ac:	49 f4       	brne	.+18     	; 0x31c0 <vfprintf+0x2a8>
    31ae:	55 20       	and	r5, r5
    31b0:	39 f0       	breq	.+14     	; 0x31c0 <vfprintf+0x2a8>
    31b2:	b7 01       	movw	r22, r14
    31b4:	80 e2       	ldi	r24, 0x20	; 32
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    31bc:	5a 94       	dec	r5
    31be:	f7 cf       	rjmp	.-18     	; 0x31ae <vfprintf+0x296>
    31c0:	00 23       	and	r16, r16
    31c2:	29 f0       	breq	.+10     	; 0x31ce <vfprintf+0x2b6>
    31c4:	b7 01       	movw	r22, r14
    31c6:	80 2f       	mov	r24, r16
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    31ce:	93 fc       	sbrc	r9, 3
    31d0:	09 c0       	rjmp	.+18     	; 0x31e4 <vfprintf+0x2cc>
    31d2:	55 20       	and	r5, r5
    31d4:	39 f0       	breq	.+14     	; 0x31e4 <vfprintf+0x2cc>
    31d6:	b7 01       	movw	r22, r14
    31d8:	80 e3       	ldi	r24, 0x30	; 48
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    31e0:	5a 94       	dec	r5
    31e2:	f7 cf       	rjmp	.-18     	; 0x31d2 <vfprintf+0x2ba>
    31e4:	97 fe       	sbrs	r9, 7
    31e6:	4c c0       	rjmp	.+152    	; 0x3280 <vfprintf+0x368>
    31e8:	46 01       	movw	r8, r12
    31ea:	d7 fe       	sbrs	r13, 7
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <vfprintf+0x2da>
    31ee:	81 2c       	mov	r8, r1
    31f0:	91 2c       	mov	r9, r1
    31f2:	c6 01       	movw	r24, r12
    31f4:	88 19       	sub	r24, r8
    31f6:	99 09       	sbc	r25, r9
    31f8:	f3 01       	movw	r30, r6
    31fa:	e8 0f       	add	r30, r24
    31fc:	f9 1f       	adc	r31, r25
    31fe:	fe 87       	std	Y+14, r31	; 0x0e
    3200:	ed 87       	std	Y+13, r30	; 0x0d
    3202:	96 01       	movw	r18, r12
    3204:	24 19       	sub	r18, r4
    3206:	31 09       	sbc	r19, r1
    3208:	38 8b       	std	Y+16, r19	; 0x10
    320a:	2f 87       	std	Y+15, r18	; 0x0f
    320c:	01 2f       	mov	r16, r17
    320e:	10 e0       	ldi	r17, 0x00	; 0
    3210:	11 95       	neg	r17
    3212:	01 95       	neg	r16
    3214:	11 09       	sbc	r17, r1
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	83 16       	cp	r8, r19
    321a:	93 06       	cpc	r9, r19
    321c:	29 f4       	brne	.+10     	; 0x3228 <vfprintf+0x310>
    321e:	b7 01       	movw	r22, r14
    3220:	8e e2       	ldi	r24, 0x2E	; 46
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3228:	c8 14       	cp	r12, r8
    322a:	d9 04       	cpc	r13, r9
    322c:	4c f0       	brlt	.+18     	; 0x3240 <vfprintf+0x328>
    322e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3230:	98 89       	ldd	r25, Y+16	; 0x10
    3232:	88 15       	cp	r24, r8
    3234:	99 05       	cpc	r25, r9
    3236:	24 f4       	brge	.+8      	; 0x3240 <vfprintf+0x328>
    3238:	ed 85       	ldd	r30, Y+13	; 0x0d
    323a:	fe 85       	ldd	r31, Y+14	; 0x0e
    323c:	81 81       	ldd	r24, Z+1	; 0x01
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <vfprintf+0x32a>
    3240:	80 e3       	ldi	r24, 0x30	; 48
    3242:	f1 e0       	ldi	r31, 0x01	; 1
    3244:	8f 1a       	sub	r8, r31
    3246:	91 08       	sbc	r9, r1
    3248:	2d 85       	ldd	r18, Y+13	; 0x0d
    324a:	3e 85       	ldd	r19, Y+14	; 0x0e
    324c:	2f 5f       	subi	r18, 0xFF	; 255
    324e:	3f 4f       	sbci	r19, 0xFF	; 255
    3250:	3e 87       	std	Y+14, r19	; 0x0e
    3252:	2d 87       	std	Y+13, r18	; 0x0d
    3254:	80 16       	cp	r8, r16
    3256:	91 06       	cpc	r9, r17
    3258:	2c f0       	brlt	.+10     	; 0x3264 <vfprintf+0x34c>
    325a:	b7 01       	movw	r22, r14
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3262:	d9 cf       	rjmp	.-78     	; 0x3216 <vfprintf+0x2fe>
    3264:	c8 14       	cp	r12, r8
    3266:	d9 04       	cpc	r13, r9
    3268:	41 f4       	brne	.+16     	; 0x327a <vfprintf+0x362>
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	96 33       	cpi	r25, 0x36	; 54
    326e:	20 f4       	brcc	.+8      	; 0x3278 <vfprintf+0x360>
    3270:	95 33       	cpi	r25, 0x35	; 53
    3272:	19 f4       	brne	.+6      	; 0x327a <vfprintf+0x362>
    3274:	3c 85       	ldd	r19, Y+12	; 0x0c
    3276:	34 ff       	sbrs	r19, 4
    3278:	81 e3       	ldi	r24, 0x31	; 49
    327a:	b7 01       	movw	r22, r14
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	4e c0       	rjmp	.+156    	; 0x331c <vfprintf+0x404>
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	81 33       	cpi	r24, 0x31	; 49
    3284:	19 f0       	breq	.+6      	; 0x328c <vfprintf+0x374>
    3286:	9c 85       	ldd	r25, Y+12	; 0x0c
    3288:	9f 7e       	andi	r25, 0xEF	; 239
    328a:	9c 87       	std	Y+12, r25	; 0x0c
    328c:	b7 01       	movw	r22, r14
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3294:	11 11       	cpse	r17, r1
    3296:	05 c0       	rjmp	.+10     	; 0x32a2 <vfprintf+0x38a>
    3298:	94 fc       	sbrc	r9, 4
    329a:	18 c0       	rjmp	.+48     	; 0x32cc <vfprintf+0x3b4>
    329c:	85 e6       	ldi	r24, 0x65	; 101
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	17 c0       	rjmp	.+46     	; 0x32d0 <vfprintf+0x3b8>
    32a2:	b7 01       	movw	r22, r14
    32a4:	8e e2       	ldi	r24, 0x2E	; 46
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    32ac:	1e 5f       	subi	r17, 0xFE	; 254
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	01 e0       	ldi	r16, 0x01	; 1
    32b2:	08 0f       	add	r16, r24
    32b4:	f3 01       	movw	r30, r6
    32b6:	e8 0f       	add	r30, r24
    32b8:	f1 1d       	adc	r31, r1
    32ba:	80 81       	ld	r24, Z
    32bc:	b7 01       	movw	r22, r14
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    32c4:	80 2f       	mov	r24, r16
    32c6:	01 13       	cpse	r16, r17
    32c8:	f3 cf       	rjmp	.-26     	; 0x32b0 <vfprintf+0x398>
    32ca:	e6 cf       	rjmp	.-52     	; 0x3298 <vfprintf+0x380>
    32cc:	85 e4       	ldi	r24, 0x45	; 69
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	b7 01       	movw	r22, r14
    32d2:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    32d6:	d7 fc       	sbrc	r13, 7
    32d8:	06 c0       	rjmp	.+12     	; 0x32e6 <vfprintf+0x3ce>
    32da:	c1 14       	cp	r12, r1
    32dc:	d1 04       	cpc	r13, r1
    32de:	41 f4       	brne	.+16     	; 0x32f0 <vfprintf+0x3d8>
    32e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    32e2:	e4 ff       	sbrs	r30, 4
    32e4:	05 c0       	rjmp	.+10     	; 0x32f0 <vfprintf+0x3d8>
    32e6:	d1 94       	neg	r13
    32e8:	c1 94       	neg	r12
    32ea:	d1 08       	sbc	r13, r1
    32ec:	8d e2       	ldi	r24, 0x2D	; 45
    32ee:	01 c0       	rjmp	.+2      	; 0x32f2 <vfprintf+0x3da>
    32f0:	8b e2       	ldi	r24, 0x2B	; 43
    32f2:	b7 01       	movw	r22, r14
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    32fa:	80 e3       	ldi	r24, 0x30	; 48
    32fc:	2a e0       	ldi	r18, 0x0A	; 10
    32fe:	c2 16       	cp	r12, r18
    3300:	d1 04       	cpc	r13, r1
    3302:	2c f0       	brlt	.+10     	; 0x330e <vfprintf+0x3f6>
    3304:	8f 5f       	subi	r24, 0xFF	; 255
    3306:	fa e0       	ldi	r31, 0x0A	; 10
    3308:	cf 1a       	sub	r12, r31
    330a:	d1 08       	sbc	r13, r1
    330c:	f7 cf       	rjmp	.-18     	; 0x32fc <vfprintf+0x3e4>
    330e:	b7 01       	movw	r22, r14
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3316:	b7 01       	movw	r22, r14
    3318:	c6 01       	movw	r24, r12
    331a:	c0 96       	adiw	r24, 0x30	; 48
    331c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3320:	54 c1       	rjmp	.+680    	; 0x35ca <vfprintf+0x6b2>
    3322:	83 36       	cpi	r24, 0x63	; 99
    3324:	31 f0       	breq	.+12     	; 0x3332 <vfprintf+0x41a>
    3326:	83 37       	cpi	r24, 0x73	; 115
    3328:	79 f0       	breq	.+30     	; 0x3348 <vfprintf+0x430>
    332a:	83 35       	cpi	r24, 0x53	; 83
    332c:	09 f0       	breq	.+2      	; 0x3330 <vfprintf+0x418>
    332e:	56 c0       	rjmp	.+172    	; 0x33dc <vfprintf+0x4c4>
    3330:	20 c0       	rjmp	.+64     	; 0x3372 <vfprintf+0x45a>
    3332:	56 01       	movw	r10, r12
    3334:	32 e0       	ldi	r19, 0x02	; 2
    3336:	a3 0e       	add	r10, r19
    3338:	b1 1c       	adc	r11, r1
    333a:	f6 01       	movw	r30, r12
    333c:	80 81       	ld	r24, Z
    333e:	89 83       	std	Y+1, r24	; 0x01
    3340:	01 e0       	ldi	r16, 0x01	; 1
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	63 01       	movw	r12, r6
    3346:	12 c0       	rjmp	.+36     	; 0x336c <vfprintf+0x454>
    3348:	56 01       	movw	r10, r12
    334a:	f2 e0       	ldi	r31, 0x02	; 2
    334c:	af 0e       	add	r10, r31
    334e:	b1 1c       	adc	r11, r1
    3350:	f6 01       	movw	r30, r12
    3352:	c0 80       	ld	r12, Z
    3354:	d1 80       	ldd	r13, Z+1	; 0x01
    3356:	96 fe       	sbrs	r9, 6
    3358:	03 c0       	rjmp	.+6      	; 0x3360 <vfprintf+0x448>
    335a:	61 2f       	mov	r22, r17
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <vfprintf+0x44c>
    3360:	6f ef       	ldi	r22, 0xFF	; 255
    3362:	7f ef       	ldi	r23, 0xFF	; 255
    3364:	c6 01       	movw	r24, r12
    3366:	0e 94 de 2b 	call	0x57bc	; 0x57bc <strnlen>
    336a:	8c 01       	movw	r16, r24
    336c:	f9 2d       	mov	r31, r9
    336e:	ff 77       	andi	r31, 0x7F	; 127
    3370:	14 c0       	rjmp	.+40     	; 0x339a <vfprintf+0x482>
    3372:	56 01       	movw	r10, r12
    3374:	22 e0       	ldi	r18, 0x02	; 2
    3376:	a2 0e       	add	r10, r18
    3378:	b1 1c       	adc	r11, r1
    337a:	f6 01       	movw	r30, r12
    337c:	c0 80       	ld	r12, Z
    337e:	d1 80       	ldd	r13, Z+1	; 0x01
    3380:	96 fe       	sbrs	r9, 6
    3382:	03 c0       	rjmp	.+6      	; 0x338a <vfprintf+0x472>
    3384:	61 2f       	mov	r22, r17
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	02 c0       	rjmp	.+4      	; 0x338e <vfprintf+0x476>
    338a:	6f ef       	ldi	r22, 0xFF	; 255
    338c:	7f ef       	ldi	r23, 0xFF	; 255
    338e:	c6 01       	movw	r24, r12
    3390:	0e 94 99 2b 	call	0x5732	; 0x5732 <strnlen_P>
    3394:	8c 01       	movw	r16, r24
    3396:	f9 2d       	mov	r31, r9
    3398:	f0 68       	ori	r31, 0x80	; 128
    339a:	9f 2e       	mov	r9, r31
    339c:	f3 fd       	sbrc	r31, 3
    339e:	1a c0       	rjmp	.+52     	; 0x33d4 <vfprintf+0x4bc>
    33a0:	85 2d       	mov	r24, r5
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	08 17       	cp	r16, r24
    33a6:	19 07       	cpc	r17, r25
    33a8:	a8 f4       	brcc	.+42     	; 0x33d4 <vfprintf+0x4bc>
    33aa:	b7 01       	movw	r22, r14
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    33b4:	5a 94       	dec	r5
    33b6:	f4 cf       	rjmp	.-24     	; 0x33a0 <vfprintf+0x488>
    33b8:	f6 01       	movw	r30, r12
    33ba:	97 fc       	sbrc	r9, 7
    33bc:	85 91       	lpm	r24, Z+
    33be:	97 fe       	sbrs	r9, 7
    33c0:	81 91       	ld	r24, Z+
    33c2:	6f 01       	movw	r12, r30
    33c4:	b7 01       	movw	r22, r14
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    33cc:	51 10       	cpse	r5, r1
    33ce:	5a 94       	dec	r5
    33d0:	01 50       	subi	r16, 0x01	; 1
    33d2:	11 09       	sbc	r17, r1
    33d4:	01 15       	cp	r16, r1
    33d6:	11 05       	cpc	r17, r1
    33d8:	79 f7       	brne	.-34     	; 0x33b8 <vfprintf+0x4a0>
    33da:	f7 c0       	rjmp	.+494    	; 0x35ca <vfprintf+0x6b2>
    33dc:	84 36       	cpi	r24, 0x64	; 100
    33de:	11 f0       	breq	.+4      	; 0x33e4 <vfprintf+0x4cc>
    33e0:	89 36       	cpi	r24, 0x69	; 105
    33e2:	61 f5       	brne	.+88     	; 0x343c <vfprintf+0x524>
    33e4:	56 01       	movw	r10, r12
    33e6:	97 fe       	sbrs	r9, 7
    33e8:	09 c0       	rjmp	.+18     	; 0x33fc <vfprintf+0x4e4>
    33ea:	24 e0       	ldi	r18, 0x04	; 4
    33ec:	a2 0e       	add	r10, r18
    33ee:	b1 1c       	adc	r11, r1
    33f0:	f6 01       	movw	r30, r12
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	0a c0       	rjmp	.+20     	; 0x3410 <vfprintf+0x4f8>
    33fc:	f2 e0       	ldi	r31, 0x02	; 2
    33fe:	af 0e       	add	r10, r31
    3400:	b1 1c       	adc	r11, r1
    3402:	f6 01       	movw	r30, r12
    3404:	60 81       	ld	r22, Z
    3406:	71 81       	ldd	r23, Z+1	; 0x01
    3408:	07 2e       	mov	r0, r23
    340a:	00 0c       	add	r0, r0
    340c:	88 0b       	sbc	r24, r24
    340e:	99 0b       	sbc	r25, r25
    3410:	f9 2d       	mov	r31, r9
    3412:	ff 76       	andi	r31, 0x6F	; 111
    3414:	9f 2e       	mov	r9, r31
    3416:	97 ff       	sbrs	r25, 7
    3418:	09 c0       	rjmp	.+18     	; 0x342c <vfprintf+0x514>
    341a:	90 95       	com	r25
    341c:	80 95       	com	r24
    341e:	70 95       	com	r23
    3420:	61 95       	neg	r22
    3422:	7f 4f       	sbci	r23, 0xFF	; 255
    3424:	8f 4f       	sbci	r24, 0xFF	; 255
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
    3428:	f0 68       	ori	r31, 0x80	; 128
    342a:	9f 2e       	mov	r9, r31
    342c:	2a e0       	ldi	r18, 0x0A	; 10
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	a3 01       	movw	r20, r6
    3432:	0e 94 98 2c 	call	0x5930	; 0x5930 <__ultoa_invert>
    3436:	c8 2e       	mov	r12, r24
    3438:	c6 18       	sub	r12, r6
    343a:	3f c0       	rjmp	.+126    	; 0x34ba <vfprintf+0x5a2>
    343c:	09 2d       	mov	r16, r9
    343e:	85 37       	cpi	r24, 0x75	; 117
    3440:	21 f4       	brne	.+8      	; 0x344a <vfprintf+0x532>
    3442:	0f 7e       	andi	r16, 0xEF	; 239
    3444:	2a e0       	ldi	r18, 0x0A	; 10
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	1d c0       	rjmp	.+58     	; 0x3484 <vfprintf+0x56c>
    344a:	09 7f       	andi	r16, 0xF9	; 249
    344c:	8f 36       	cpi	r24, 0x6F	; 111
    344e:	91 f0       	breq	.+36     	; 0x3474 <vfprintf+0x55c>
    3450:	18 f4       	brcc	.+6      	; 0x3458 <vfprintf+0x540>
    3452:	88 35       	cpi	r24, 0x58	; 88
    3454:	59 f0       	breq	.+22     	; 0x346c <vfprintf+0x554>
    3456:	c3 c0       	rjmp	.+390    	; 0x35de <vfprintf+0x6c6>
    3458:	80 37       	cpi	r24, 0x70	; 112
    345a:	19 f0       	breq	.+6      	; 0x3462 <vfprintf+0x54a>
    345c:	88 37       	cpi	r24, 0x78	; 120
    345e:	11 f0       	breq	.+4      	; 0x3464 <vfprintf+0x54c>
    3460:	be c0       	rjmp	.+380    	; 0x35de <vfprintf+0x6c6>
    3462:	00 61       	ori	r16, 0x10	; 16
    3464:	04 ff       	sbrs	r16, 4
    3466:	09 c0       	rjmp	.+18     	; 0x347a <vfprintf+0x562>
    3468:	04 60       	ori	r16, 0x04	; 4
    346a:	07 c0       	rjmp	.+14     	; 0x347a <vfprintf+0x562>
    346c:	94 fe       	sbrs	r9, 4
    346e:	08 c0       	rjmp	.+16     	; 0x3480 <vfprintf+0x568>
    3470:	06 60       	ori	r16, 0x06	; 6
    3472:	06 c0       	rjmp	.+12     	; 0x3480 <vfprintf+0x568>
    3474:	28 e0       	ldi	r18, 0x08	; 8
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	05 c0       	rjmp	.+10     	; 0x3484 <vfprintf+0x56c>
    347a:	20 e1       	ldi	r18, 0x10	; 16
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	02 c0       	rjmp	.+4      	; 0x3484 <vfprintf+0x56c>
    3480:	20 e1       	ldi	r18, 0x10	; 16
    3482:	32 e0       	ldi	r19, 0x02	; 2
    3484:	56 01       	movw	r10, r12
    3486:	07 ff       	sbrs	r16, 7
    3488:	09 c0       	rjmp	.+18     	; 0x349c <vfprintf+0x584>
    348a:	84 e0       	ldi	r24, 0x04	; 4
    348c:	a8 0e       	add	r10, r24
    348e:	b1 1c       	adc	r11, r1
    3490:	f6 01       	movw	r30, r12
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	08 c0       	rjmp	.+16     	; 0x34ac <vfprintf+0x594>
    349c:	f2 e0       	ldi	r31, 0x02	; 2
    349e:	af 0e       	add	r10, r31
    34a0:	b1 1c       	adc	r11, r1
    34a2:	f6 01       	movw	r30, r12
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a3 01       	movw	r20, r6
    34ae:	0e 94 98 2c 	call	0x5930	; 0x5930 <__ultoa_invert>
    34b2:	c8 2e       	mov	r12, r24
    34b4:	c6 18       	sub	r12, r6
    34b6:	0f 77       	andi	r16, 0x7F	; 127
    34b8:	90 2e       	mov	r9, r16
    34ba:	96 fe       	sbrs	r9, 6
    34bc:	0b c0       	rjmp	.+22     	; 0x34d4 <vfprintf+0x5bc>
    34be:	09 2d       	mov	r16, r9
    34c0:	0e 7f       	andi	r16, 0xFE	; 254
    34c2:	c1 16       	cp	r12, r17
    34c4:	50 f4       	brcc	.+20     	; 0x34da <vfprintf+0x5c2>
    34c6:	94 fe       	sbrs	r9, 4
    34c8:	0a c0       	rjmp	.+20     	; 0x34de <vfprintf+0x5c6>
    34ca:	92 fc       	sbrc	r9, 2
    34cc:	08 c0       	rjmp	.+16     	; 0x34de <vfprintf+0x5c6>
    34ce:	09 2d       	mov	r16, r9
    34d0:	0e 7e       	andi	r16, 0xEE	; 238
    34d2:	05 c0       	rjmp	.+10     	; 0x34de <vfprintf+0x5c6>
    34d4:	dc 2c       	mov	r13, r12
    34d6:	09 2d       	mov	r16, r9
    34d8:	03 c0       	rjmp	.+6      	; 0x34e0 <vfprintf+0x5c8>
    34da:	dc 2c       	mov	r13, r12
    34dc:	01 c0       	rjmp	.+2      	; 0x34e0 <vfprintf+0x5c8>
    34de:	d1 2e       	mov	r13, r17
    34e0:	04 ff       	sbrs	r16, 4
    34e2:	0d c0       	rjmp	.+26     	; 0x34fe <vfprintf+0x5e6>
    34e4:	fe 01       	movw	r30, r28
    34e6:	ec 0d       	add	r30, r12
    34e8:	f1 1d       	adc	r31, r1
    34ea:	80 81       	ld	r24, Z
    34ec:	80 33       	cpi	r24, 0x30	; 48
    34ee:	11 f4       	brne	.+4      	; 0x34f4 <vfprintf+0x5dc>
    34f0:	09 7e       	andi	r16, 0xE9	; 233
    34f2:	09 c0       	rjmp	.+18     	; 0x3506 <vfprintf+0x5ee>
    34f4:	02 ff       	sbrs	r16, 2
    34f6:	06 c0       	rjmp	.+12     	; 0x3504 <vfprintf+0x5ec>
    34f8:	d3 94       	inc	r13
    34fa:	d3 94       	inc	r13
    34fc:	04 c0       	rjmp	.+8      	; 0x3506 <vfprintf+0x5ee>
    34fe:	80 2f       	mov	r24, r16
    3500:	86 78       	andi	r24, 0x86	; 134
    3502:	09 f0       	breq	.+2      	; 0x3506 <vfprintf+0x5ee>
    3504:	d3 94       	inc	r13
    3506:	03 fd       	sbrc	r16, 3
    3508:	11 c0       	rjmp	.+34     	; 0x352c <vfprintf+0x614>
    350a:	00 ff       	sbrs	r16, 0
    350c:	06 c0       	rjmp	.+12     	; 0x351a <vfprintf+0x602>
    350e:	1c 2d       	mov	r17, r12
    3510:	d5 14       	cp	r13, r5
    3512:	80 f4       	brcc	.+32     	; 0x3534 <vfprintf+0x61c>
    3514:	15 0d       	add	r17, r5
    3516:	1d 19       	sub	r17, r13
    3518:	0d c0       	rjmp	.+26     	; 0x3534 <vfprintf+0x61c>
    351a:	d5 14       	cp	r13, r5
    351c:	58 f4       	brcc	.+22     	; 0x3534 <vfprintf+0x61c>
    351e:	b7 01       	movw	r22, r14
    3520:	80 e2       	ldi	r24, 0x20	; 32
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3528:	d3 94       	inc	r13
    352a:	f7 cf       	rjmp	.-18     	; 0x351a <vfprintf+0x602>
    352c:	d5 14       	cp	r13, r5
    352e:	10 f4       	brcc	.+4      	; 0x3534 <vfprintf+0x61c>
    3530:	5d 18       	sub	r5, r13
    3532:	01 c0       	rjmp	.+2      	; 0x3536 <vfprintf+0x61e>
    3534:	51 2c       	mov	r5, r1
    3536:	04 ff       	sbrs	r16, 4
    3538:	10 c0       	rjmp	.+32     	; 0x355a <vfprintf+0x642>
    353a:	b7 01       	movw	r22, r14
    353c:	80 e3       	ldi	r24, 0x30	; 48
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3544:	02 ff       	sbrs	r16, 2
    3546:	17 c0       	rjmp	.+46     	; 0x3576 <vfprintf+0x65e>
    3548:	01 fd       	sbrc	r16, 1
    354a:	03 c0       	rjmp	.+6      	; 0x3552 <vfprintf+0x63a>
    354c:	88 e7       	ldi	r24, 0x78	; 120
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <vfprintf+0x63e>
    3552:	88 e5       	ldi	r24, 0x58	; 88
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	b7 01       	movw	r22, r14
    3558:	0c c0       	rjmp	.+24     	; 0x3572 <vfprintf+0x65a>
    355a:	80 2f       	mov	r24, r16
    355c:	86 78       	andi	r24, 0x86	; 134
    355e:	59 f0       	breq	.+22     	; 0x3576 <vfprintf+0x65e>
    3560:	01 ff       	sbrs	r16, 1
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <vfprintf+0x650>
    3564:	8b e2       	ldi	r24, 0x2B	; 43
    3566:	01 c0       	rjmp	.+2      	; 0x356a <vfprintf+0x652>
    3568:	80 e2       	ldi	r24, 0x20	; 32
    356a:	07 fd       	sbrc	r16, 7
    356c:	8d e2       	ldi	r24, 0x2D	; 45
    356e:	b7 01       	movw	r22, r14
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3576:	c1 16       	cp	r12, r17
    3578:	38 f4       	brcc	.+14     	; 0x3588 <vfprintf+0x670>
    357a:	b7 01       	movw	r22, r14
    357c:	80 e3       	ldi	r24, 0x30	; 48
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    3584:	11 50       	subi	r17, 0x01	; 1
    3586:	f7 cf       	rjmp	.-18     	; 0x3576 <vfprintf+0x65e>
    3588:	ca 94       	dec	r12
    358a:	f3 01       	movw	r30, r6
    358c:	ec 0d       	add	r30, r12
    358e:	f1 1d       	adc	r31, r1
    3590:	80 81       	ld	r24, Z
    3592:	b7 01       	movw	r22, r14
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    359a:	c1 10       	cpse	r12, r1
    359c:	f5 cf       	rjmp	.-22     	; 0x3588 <vfprintf+0x670>
    359e:	15 c0       	rjmp	.+42     	; 0x35ca <vfprintf+0x6b2>
    35a0:	f4 e0       	ldi	r31, 0x04	; 4
    35a2:	f5 15       	cp	r31, r5
    35a4:	60 f5       	brcc	.+88     	; 0x35fe <vfprintf+0x6e6>
    35a6:	84 e0       	ldi	r24, 0x04	; 4
    35a8:	58 1a       	sub	r5, r24
    35aa:	93 fe       	sbrs	r9, 3
    35ac:	1f c0       	rjmp	.+62     	; 0x35ec <vfprintf+0x6d4>
    35ae:	01 11       	cpse	r16, r1
    35b0:	27 c0       	rjmp	.+78     	; 0x3600 <vfprintf+0x6e8>
    35b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    35b4:	23 ff       	sbrs	r18, 3
    35b6:	2a c0       	rjmp	.+84     	; 0x360c <vfprintf+0x6f4>
    35b8:	0a e9       	ldi	r16, 0x9A	; 154
    35ba:	11 e0       	ldi	r17, 0x01	; 1
    35bc:	39 2d       	mov	r19, r9
    35be:	30 71       	andi	r19, 0x10	; 16
    35c0:	93 2e       	mov	r9, r19
    35c2:	f8 01       	movw	r30, r16
    35c4:	84 91       	lpm	r24, Z
    35c6:	81 11       	cpse	r24, r1
    35c8:	24 c0       	rjmp	.+72     	; 0x3612 <vfprintf+0x6fa>
    35ca:	55 20       	and	r5, r5
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <vfprintf+0x6b8>
    35ce:	e4 cc       	rjmp	.-1592   	; 0x2f98 <vfprintf+0x80>
    35d0:	b7 01       	movw	r22, r14
    35d2:	80 e2       	ldi	r24, 0x20	; 32
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    35da:	5a 94       	dec	r5
    35dc:	f6 cf       	rjmp	.-20     	; 0x35ca <vfprintf+0x6b2>
    35de:	f7 01       	movw	r30, r14
    35e0:	86 81       	ldd	r24, Z+6	; 0x06
    35e2:	97 81       	ldd	r25, Z+7	; 0x07
    35e4:	26 c0       	rjmp	.+76     	; 0x3632 <vfprintf+0x71a>
    35e6:	8f ef       	ldi	r24, 0xFF	; 255
    35e8:	9f ef       	ldi	r25, 0xFF	; 255
    35ea:	23 c0       	rjmp	.+70     	; 0x3632 <vfprintf+0x71a>
    35ec:	b7 01       	movw	r22, r14
    35ee:	80 e2       	ldi	r24, 0x20	; 32
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    35f6:	5a 94       	dec	r5
    35f8:	51 10       	cpse	r5, r1
    35fa:	f8 cf       	rjmp	.-16     	; 0x35ec <vfprintf+0x6d4>
    35fc:	d8 cf       	rjmp	.-80     	; 0x35ae <vfprintf+0x696>
    35fe:	51 2c       	mov	r5, r1
    3600:	b7 01       	movw	r22, r14
    3602:	80 2f       	mov	r24, r16
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    360a:	d3 cf       	rjmp	.-90     	; 0x35b2 <vfprintf+0x69a>
    360c:	0e e9       	ldi	r16, 0x9E	; 158
    360e:	11 e0       	ldi	r17, 0x01	; 1
    3610:	d5 cf       	rjmp	.-86     	; 0x35bc <vfprintf+0x6a4>
    3612:	91 10       	cpse	r9, r1
    3614:	80 52       	subi	r24, 0x20	; 32
    3616:	b7 01       	movw	r22, r14
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <fputc>
    361e:	0f 5f       	subi	r16, 0xFF	; 255
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	cf cf       	rjmp	.-98     	; 0x35c2 <vfprintf+0x6aa>
    3624:	23 e0       	ldi	r18, 0x03	; 3
    3626:	25 15       	cp	r18, r5
    3628:	10 f4       	brcc	.+4      	; 0x362e <vfprintf+0x716>
    362a:	83 e0       	ldi	r24, 0x03	; 3
    362c:	bd cf       	rjmp	.-134    	; 0x35a8 <vfprintf+0x690>
    362e:	51 2c       	mov	r5, r1
    3630:	c0 cf       	rjmp	.-128    	; 0x35b2 <vfprintf+0x69a>
    3632:	60 96       	adiw	r28, 0x10	; 16
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	ff 90       	pop	r15
    3648:	ef 90       	pop	r14
    364a:	df 90       	pop	r13
    364c:	cf 90       	pop	r12
    364e:	bf 90       	pop	r11
    3650:	af 90       	pop	r10
    3652:	9f 90       	pop	r9
    3654:	8f 90       	pop	r8
    3656:	7f 90       	pop	r7
    3658:	6f 90       	pop	r6
    365a:	5f 90       	pop	r5
    365c:	4f 90       	pop	r4
    365e:	3f 90       	pop	r3
    3660:	2f 90       	pop	r2
    3662:	08 95       	ret

00003664 <hal_create>:
    3664:	e3 ed       	ldi	r30, 0xD3	; 211
    3666:	f9 e0       	ldi	r31, 0x09	; 9
    3668:	27 ea       	ldi	r18, 0xA7	; 167
    366a:	31 e2       	ldi	r19, 0x21	; 33
    366c:	31 83       	std	Z+1, r19	; 0x01
    366e:	20 83       	st	Z, r18
    3670:	2a ea       	ldi	r18, 0xAA	; 170
    3672:	31 e2       	ldi	r19, 0x21	; 33
    3674:	33 83       	std	Z+3, r19	; 0x03
    3676:	22 83       	std	Z+2, r18	; 0x02
    3678:	25 eb       	ldi	r18, 0xB5	; 181
    367a:	31 e2       	ldi	r19, 0x21	; 33
    367c:	35 83       	std	Z+5, r19	; 0x05
    367e:	24 83       	std	Z+4, r18	; 0x04
    3680:	29 eb       	ldi	r18, 0xB9	; 185
    3682:	31 e2       	ldi	r19, 0x21	; 33
    3684:	37 83       	std	Z+7, r19	; 0x07
    3686:	26 83       	std	Z+6, r18	; 0x06
    3688:	2f eb       	ldi	r18, 0xBF	; 191
    368a:	31 e2       	ldi	r19, 0x21	; 33
    368c:	31 87       	std	Z+9, r19	; 0x09
    368e:	20 87       	std	Z+8, r18	; 0x08
    3690:	2b ec       	ldi	r18, 0xCB	; 203
    3692:	31 e2       	ldi	r19, 0x21	; 33
    3694:	33 87       	std	Z+11, r19	; 0x0b
    3696:	22 87       	std	Z+10, r18	; 0x0a
    3698:	20 ed       	ldi	r18, 0xD0	; 208
    369a:	31 e2       	ldi	r19, 0x21	; 33
    369c:	35 87       	std	Z+13, r19	; 0x0d
    369e:	24 87       	std	Z+12, r18	; 0x0c
    36a0:	2c ed       	ldi	r18, 0xDC	; 220
    36a2:	31 e2       	ldi	r19, 0x21	; 33
    36a4:	37 87       	std	Z+15, r19	; 0x0f
    36a6:	26 87       	std	Z+14, r18	; 0x0e
    36a8:	2c eb       	ldi	r18, 0xBC	; 188
    36aa:	31 e2       	ldi	r19, 0x21	; 33
    36ac:	31 8b       	std	Z+17, r19	; 0x11
    36ae:	20 8b       	std	Z+16, r18	; 0x10
    36b0:	21 ee       	ldi	r18, 0xE1	; 225
    36b2:	31 e2       	ldi	r19, 0x21	; 33
    36b4:	33 8b       	std	Z+19, r19	; 0x13
    36b6:	22 8b       	std	Z+18, r18	; 0x12
    36b8:	2e ee       	ldi	r18, 0xEE	; 238
    36ba:	31 e2       	ldi	r19, 0x21	; 33
    36bc:	35 8b       	std	Z+21, r19	; 0x15
    36be:	24 8b       	std	Z+20, r18	; 0x14
    36c0:	68 2f       	mov	r22, r24
    36c2:	cf 01       	movw	r24, r30
    36c4:	3a c1       	rjmp	.+628    	; 0x393a <led_create>
    36c6:	08 95       	ret

000036c8 <_hihTwiCallback>:
    36c8:	65 30       	cpi	r22, 0x05	; 5
    36ca:	f1 f4       	brne	.+60     	; 0x3708 <_hihTwiCallback+0x40>
    36cc:	fa 01       	movw	r30, r20
    36ce:	80 81       	ld	r24, Z
    36d0:	8f 73       	andi	r24, 0x3F	; 63
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	98 2f       	mov	r25, r24
    36d6:	88 27       	eor	r24, r24
    36d8:	21 81       	ldd	r18, Z+1	; 0x01
    36da:	82 2b       	or	r24, r18
    36dc:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    36e0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	f0 e4       	ldi	r31, 0x40	; 64
    36e8:	8f 9f       	mul	r24, r31
    36ea:	c0 01       	movw	r24, r0
    36ec:	11 24       	eor	r1, r1
    36ee:	fa 01       	movw	r30, r20
    36f0:	23 81       	ldd	r18, Z+3	; 0x03
    36f2:	26 95       	lsr	r18
    36f4:	26 95       	lsr	r18
    36f6:	82 2b       	or	r24, r18
    36f8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    36fc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <_measuringIsReady>
    3706:	08 95       	ret
    3708:	64 30       	cpi	r22, 0x04	; 4
    370a:	51 f0       	breq	.+20     	; 0x3720 <_hihTwiCallback+0x58>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e4       	ldi	r25, 0x40	; 64
    3710:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    3714:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    3718:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    371c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    3720:	08 95       	ret

00003722 <hih8120Create>:
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	04 e6       	ldi	r16, 0x64	; 100
    3728:	1b e1       	ldi	r17, 0x1B	; 27
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	34 e2       	ldi	r19, 0x24	; 36
    372e:	44 ef       	ldi	r20, 0xF4	; 244
    3730:	50 e0       	ldi	r21, 0x00	; 0
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	87 e2       	ldi	r24, 0x27	; 39
    3736:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <twiCreate>
    373a:	90 93 70 08 	sts	0x0870, r25	; 0x800870 <_hih8120Handler+0x1>
    373e:	80 93 6f 08 	sts	0x086F, r24	; 0x80086f <_hih8120Handler>
    3742:	21 e0       	ldi	r18, 0x01	; 1
    3744:	89 2b       	or	r24, r25
    3746:	09 f0       	breq	.+2      	; 0x374a <hih8120Create+0x28>
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	82 2f       	mov	r24, r18
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	08 95       	ret

00003752 <hih8120Wakeup>:
    3752:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <_hih8120Handler>
    3756:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <_hih8120Handler+0x1>
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	59 f0       	breq	.+22     	; 0x3774 <hih8120Wakeup+0x22>
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	70 e0       	ldi	r23, 0x00	; 0
    3764:	0e 94 e7 26 	call	0x4dce	; 0x4dce <twiTransmit>
    3768:	84 30       	cpi	r24, 0x04	; 4
    376a:	31 f4       	brne	.+12     	; 0x3778 <hih8120Wakeup+0x26>
    376c:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <_measuringIsReady>
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	08 95       	ret
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	08 95       	ret
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	08 95       	ret

0000377c <hih8120Meassure>:
    377c:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <_hih8120Handler>
    3780:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <_hih8120Handler+0x1>
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	39 f0       	breq	.+14     	; 0x3796 <hih8120Meassure+0x1a>
    3788:	64 e0       	ldi	r22, 0x04	; 4
    378a:	0e 94 32 27 	call	0x4e64	; 0x4e64 <twiReceive>
    378e:	85 30       	cpi	r24, 0x05	; 5
    3790:	21 f0       	breq	.+8      	; 0x379a <hih8120Meassure+0x1e>
    3792:	83 e0       	ldi	r24, 0x03	; 3
    3794:	08 95       	ret
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	08 95       	ret
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	08 95       	ret

0000379e <hih8120GetHumidity>:
    379e:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    37a2:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	0e 94 1b 29 	call	0x5236	; 0x5236 <__floatunsisf>
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	48 ec       	ldi	r20, 0xC8	; 200
    37b4:	52 e4       	ldi	r21, 0x42	; 66
    37b6:	dc da       	rcall	.-2632   	; 0x2d70 <__mulsf3>
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	38 ef       	ldi	r19, 0xF8	; 248
    37bc:	4f e7       	ldi	r20, 0x7F	; 127
    37be:	56 e4       	ldi	r21, 0x46	; 70
    37c0:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__divsf3>
    37c4:	08 95       	ret

000037c6 <hih8120GetTemperature>:
    37c6:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    37ca:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	0e 94 1b 29 	call	0x5236	; 0x5236 <__floatunsisf>
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	45 e2       	ldi	r20, 0x25	; 37
    37dc:	53 e4       	ldi	r21, 0x43	; 67
    37de:	c8 da       	rcall	.-2672   	; 0x2d70 <__mulsf3>
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	38 ef       	ldi	r19, 0xF8	; 248
    37e4:	4f e7       	ldi	r20, 0x7F	; 127
    37e6:	56 e4       	ldi	r21, 0x46	; 70
    37e8:	0e 94 aa 28 	call	0x5154	; 0x5154 <__divsf3>
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e2       	ldi	r20, 0x20	; 32
    37f2:	52 e4       	ldi	r21, 0x42	; 66
    37f4:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__subsf3>
    37f8:	08 95       	ret

000037fa <_turn_off>:
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	fc 01       	movw	r30, r24
    3802:	ee 0f       	add	r30, r30
    3804:	ff 1f       	adc	r31, r31
    3806:	e8 0f       	add	r30, r24
    3808:	f9 1f       	adc	r31, r25
    380a:	ee 0f       	add	r30, r30
    380c:	ff 1f       	adc	r31, r31
    380e:	ef 58       	subi	r30, 0x8F	; 143
    3810:	f7 4f       	sbci	r31, 0xF7	; 247
    3812:	23 81       	ldd	r18, Z+3	; 0x03
    3814:	21 11       	cpse	r18, r1
    3816:	0a c0       	rjmp	.+20     	; 0x382c <_turn_off+0x32>
    3818:	ef 01       	movw	r28, r30
    381a:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <register_access+0x8>
    381e:	f0 91 dc 09 	lds	r31, 0x09DC	; 0x8009dc <register_access+0x9>
    3822:	6a 81       	ldd	r22, Y+2	; 0x02
    3824:	88 81       	ld	r24, Y
    3826:	99 81       	ldd	r25, Y+1	; 0x01
    3828:	19 95       	eicall
    382a:	12 c0       	rjmp	.+36     	; 0x3850 <_turn_off+0x56>
    382c:	dc 01       	movw	r26, r24
    382e:	aa 0f       	add	r26, r26
    3830:	bb 1f       	adc	r27, r27
    3832:	ed 01       	movw	r28, r26
    3834:	c8 0f       	add	r28, r24
    3836:	d9 1f       	adc	r29, r25
    3838:	cc 0f       	add	r28, r28
    383a:	dd 1f       	adc	r29, r29
    383c:	cf 58       	subi	r28, 0x8F	; 143
    383e:	d7 4f       	sbci	r29, 0xF7	; 247
    3840:	e0 91 e5 09 	lds	r30, 0x09E5	; 0x8009e5 <register_access+0x12>
    3844:	f0 91 e6 09 	lds	r31, 0x09E6	; 0x8009e6 <register_access+0x13>
    3848:	6a 81       	ldd	r22, Y+2	; 0x02
    384a:	88 81       	ld	r24, Y
    384c:	99 81       	ldd	r25, Y+1	; 0x01
    384e:	19 95       	eicall
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	08 95       	ret

00003856 <_turn_on>:
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	fc 01       	movw	r30, r24
    385e:	ee 0f       	add	r30, r30
    3860:	ff 1f       	adc	r31, r31
    3862:	e8 0f       	add	r30, r24
    3864:	f9 1f       	adc	r31, r25
    3866:	ee 0f       	add	r30, r30
    3868:	ff 1f       	adc	r31, r31
    386a:	ef 58       	subi	r30, 0x8F	; 143
    386c:	f7 4f       	sbci	r31, 0xF7	; 247
    386e:	23 81       	ldd	r18, Z+3	; 0x03
    3870:	21 11       	cpse	r18, r1
    3872:	0a c0       	rjmp	.+20     	; 0x3888 <_turn_on+0x32>
    3874:	ef 01       	movw	r28, r30
    3876:	e0 91 e5 09 	lds	r30, 0x09E5	; 0x8009e5 <register_access+0x12>
    387a:	f0 91 e6 09 	lds	r31, 0x09E6	; 0x8009e6 <register_access+0x13>
    387e:	6a 81       	ldd	r22, Y+2	; 0x02
    3880:	88 81       	ld	r24, Y
    3882:	99 81       	ldd	r25, Y+1	; 0x01
    3884:	19 95       	eicall
    3886:	12 c0       	rjmp	.+36     	; 0x38ac <_turn_on+0x56>
    3888:	dc 01       	movw	r26, r24
    388a:	aa 0f       	add	r26, r26
    388c:	bb 1f       	adc	r27, r27
    388e:	ed 01       	movw	r28, r26
    3890:	c8 0f       	add	r28, r24
    3892:	d9 1f       	adc	r29, r25
    3894:	cc 0f       	add	r28, r28
    3896:	dd 1f       	adc	r29, r29
    3898:	cf 58       	subi	r28, 0x8F	; 143
    389a:	d7 4f       	sbci	r29, 0xF7	; 247
    389c:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <register_access+0x8>
    38a0:	f0 91 dc 09 	lds	r31, 0x09DC	; 0x8009dc <register_access+0x9>
    38a4:	6a 81       	ldd	r22, Y+2	; 0x02
    38a6:	88 81       	ld	r24, Y
    38a8:	99 81       	ldd	r25, Y+1	; 0x01
    38aa:	19 95       	eicall
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	08 95       	ret

000038b2 <_hal_led_task>:
    38b2:	8a e9       	ldi	r24, 0x9A	; 154
    38b4:	94 e0       	ldi	r25, 0x04	; 4
    38b6:	0e 94 39 2c 	call	0x5872	; 0x5872 <puts>
    38ba:	0f 2e       	mov	r0, r31
    38bc:	f3 ed       	ldi	r31, 0xD3	; 211
    38be:	cf 2e       	mov	r12, r31
    38c0:	f9 e0       	ldi	r31, 0x09	; 9
    38c2:	df 2e       	mov	r13, r31
    38c4:	f0 2d       	mov	r31, r0
    38c6:	04 e0       	ldi	r16, 0x04	; 4
    38c8:	c1 e7       	ldi	r28, 0x71	; 113
    38ca:	d8 e0       	ldi	r29, 0x08	; 8
    38cc:	10 e0       	ldi	r17, 0x00	; 0
    38ce:	8c 81       	ldd	r24, Y+4	; 0x04
    38d0:	81 30       	cpi	r24, 0x01	; 1
    38d2:	69 f0       	breq	.+26     	; 0x38ee <_hal_led_task+0x3c>
    38d4:	e8 f0       	brcs	.+58     	; 0x3910 <_hal_led_task+0x5e>
    38d6:	82 30       	cpi	r24, 0x02	; 2
    38d8:	39 f5       	brne	.+78     	; 0x3928 <_hal_led_task+0x76>
    38da:	d6 01       	movw	r26, r12
    38dc:	1c 96       	adiw	r26, 0x0c	; 12
    38de:	ed 91       	ld	r30, X+
    38e0:	fc 91       	ld	r31, X
    38e2:	1d 97       	sbiw	r26, 0x0d	; 13
    38e4:	6a 81       	ldd	r22, Y+2	; 0x02
    38e6:	88 81       	ld	r24, Y
    38e8:	99 81       	ldd	r25, Y+1	; 0x01
    38ea:	19 95       	eicall
    38ec:	1d c0       	rjmp	.+58     	; 0x3928 <_hal_led_task+0x76>
    38ee:	8d 81       	ldd	r24, Y+5	; 0x05
    38f0:	8f 5f       	subi	r24, 0xFF	; 255
    38f2:	8a 30       	cpi	r24, 0x0A	; 10
    38f4:	10 f4       	brcc	.+4      	; 0x38fa <_hal_led_task+0x48>
    38f6:	8d 83       	std	Y+5, r24	; 0x05
    38f8:	17 c0       	rjmp	.+46     	; 0x3928 <_hal_led_task+0x76>
    38fa:	1d 82       	std	Y+5, r1	; 0x05
    38fc:	d6 01       	movw	r26, r12
    38fe:	1c 96       	adiw	r26, 0x0c	; 12
    3900:	ed 91       	ld	r30, X+
    3902:	fc 91       	ld	r31, X
    3904:	1d 97       	sbiw	r26, 0x0d	; 13
    3906:	6a 81       	ldd	r22, Y+2	; 0x02
    3908:	88 81       	ld	r24, Y
    390a:	99 81       	ldd	r25, Y+1	; 0x01
    390c:	19 95       	eicall
    390e:	0c c0       	rjmp	.+24     	; 0x3928 <_hal_led_task+0x76>
    3910:	8d 81       	ldd	r24, Y+5	; 0x05
    3912:	88 23       	and	r24, r24
    3914:	31 f0       	breq	.+12     	; 0x3922 <_hal_led_task+0x70>
    3916:	81 2f       	mov	r24, r17
    3918:	9e df       	rcall	.-196    	; 0x3856 <_turn_on>
    391a:	8d 81       	ldd	r24, Y+5	; 0x05
    391c:	81 50       	subi	r24, 0x01	; 1
    391e:	8d 83       	std	Y+5, r24	; 0x05
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <_hal_led_task+0x76>
    3922:	0c 83       	std	Y+4, r16	; 0x04
    3924:	81 2f       	mov	r24, r17
    3926:	69 df       	rcall	.-302    	; 0x37fa <_turn_off>
    3928:	1f 5f       	subi	r17, 0xFF	; 255
    392a:	26 96       	adiw	r28, 0x06	; 6
    392c:	14 30       	cpi	r17, 0x04	; 4
    392e:	79 f6       	brne	.-98     	; 0x38ce <_hal_led_task+0x1c>
    3930:	85 e0       	ldi	r24, 0x05	; 5
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vTaskDelay>
    3938:	c7 cf       	rjmp	.-114    	; 0x38c8 <_hal_led_task+0x16>

0000393a <led_create>:
    393a:	cf 92       	push	r12
    393c:	df 92       	push	r13
    393e:	ef 92       	push	r14
    3940:	ff 92       	push	r15
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	06 2f       	mov	r16, r22
    394c:	0f 2e       	mov	r0, r31
    394e:	f3 ed       	ldi	r31, 0xD3	; 211
    3950:	ef 2e       	mov	r14, r31
    3952:	f9 e0       	ldi	r31, 0x09	; 9
    3954:	ff 2e       	mov	r15, r31
    3956:	f0 2d       	mov	r31, r0
    3958:	d7 01       	movw	r26, r14
    395a:	18 96       	adiw	r26, 0x08	; 8
    395c:	ed 91       	ld	r30, X+
    395e:	fc 91       	ld	r31, X
    3960:	19 97       	sbiw	r26, 0x09	; 9
    3962:	66 e0       	ldi	r22, 0x06	; 6
    3964:	87 e2       	ldi	r24, 0x27	; 39
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	19 95       	eicall
    396a:	c1 e7       	ldi	r28, 0x71	; 113
    396c:	d8 e0       	ldi	r29, 0x08	; 8
    396e:	0f 2e       	mov	r0, r31
    3970:	f8 e2       	ldi	r31, 0x28	; 40
    3972:	cf 2e       	mov	r12, r31
    3974:	d1 2c       	mov	r13, r1
    3976:	f0 2d       	mov	r31, r0
    3978:	d9 82       	std	Y+1, r13	; 0x01
    397a:	c8 82       	st	Y, r12
    397c:	86 e0       	ldi	r24, 0x06	; 6
    397e:	8a 83       	std	Y+2, r24	; 0x02
    3980:	1b 82       	std	Y+3, r1	; 0x03
    3982:	14 e0       	ldi	r17, 0x04	; 4
    3984:	1c 83       	std	Y+4, r17	; 0x04
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	38 df       	rcall	.-400    	; 0x37fa <_turn_off>
    398a:	d7 01       	movw	r26, r14
    398c:	18 96       	adiw	r26, 0x08	; 8
    398e:	ed 91       	ld	r30, X+
    3990:	fc 91       	ld	r31, X
    3992:	19 97       	sbiw	r26, 0x09	; 9
    3994:	67 e0       	ldi	r22, 0x07	; 7
    3996:	87 e2       	ldi	r24, 0x27	; 39
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	19 95       	eicall
    399c:	df 82       	std	Y+7, r13	; 0x07
    399e:	ce 82       	std	Y+6, r12	; 0x06
    39a0:	87 e0       	ldi	r24, 0x07	; 7
    39a2:	88 87       	std	Y+8, r24	; 0x08
    39a4:	19 86       	std	Y+9, r1	; 0x09
    39a6:	1a 87       	std	Y+10, r17	; 0x0a
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	27 df       	rcall	.-434    	; 0x37fa <_turn_off>
    39ac:	d7 01       	movw	r26, r14
    39ae:	18 96       	adiw	r26, 0x08	; 8
    39b0:	ed 91       	ld	r30, X+
    39b2:	fc 91       	ld	r31, X
    39b4:	19 97       	sbiw	r26, 0x09	; 9
    39b6:	65 e0       	ldi	r22, 0x05	; 5
    39b8:	83 e3       	ldi	r24, 0x33	; 51
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	19 95       	eicall
    39be:	d7 01       	movw	r26, r14
    39c0:	18 96       	adiw	r26, 0x08	; 8
    39c2:	ed 91       	ld	r30, X+
    39c4:	fc 91       	ld	r31, X
    39c6:	19 97       	sbiw	r26, 0x09	; 9
    39c8:	61 e0       	ldi	r22, 0x01	; 1
    39ca:	84 e3       	ldi	r24, 0x34	; 52
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	19 95       	eicall
    39d0:	84 e3       	ldi	r24, 0x34	; 52
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	9d 87       	std	Y+13, r25	; 0x0d
    39d6:	8c 87       	std	Y+12, r24	; 0x0c
    39d8:	85 e0       	ldi	r24, 0x05	; 5
    39da:	8e 87       	std	Y+14, r24	; 0x0e
    39dc:	1f 86       	std	Y+15, r1	; 0x0f
    39de:	18 8b       	std	Y+16, r17	; 0x10
    39e0:	82 e0       	ldi	r24, 0x02	; 2
    39e2:	0b df       	rcall	.-490    	; 0x37fa <_turn_off>
    39e4:	d7 01       	movw	r26, r14
    39e6:	18 96       	adiw	r26, 0x08	; 8
    39e8:	ed 91       	ld	r30, X+
    39ea:	fc 91       	ld	r31, X
    39ec:	19 97       	sbiw	r26, 0x09	; 9
    39ee:	64 e0       	ldi	r22, 0x04	; 4
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	91 e0       	ldi	r25, 0x01	; 1
    39f4:	19 95       	eicall
    39f6:	d7 01       	movw	r26, r14
    39f8:	18 96       	adiw	r26, 0x08	; 8
    39fa:	ed 91       	ld	r30, X+
    39fc:	fc 91       	ld	r31, X
    39fe:	19 97       	sbiw	r26, 0x09	; 9
    3a00:	61 e0       	ldi	r22, 0x01	; 1
    3a02:	82 e0       	ldi	r24, 0x02	; 2
    3a04:	91 e0       	ldi	r25, 0x01	; 1
    3a06:	19 95       	eicall
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	91 e0       	ldi	r25, 0x01	; 1
    3a0c:	9b 8b       	std	Y+19, r25	; 0x13
    3a0e:	8a 8b       	std	Y+18, r24	; 0x12
    3a10:	1c 8b       	std	Y+20, r17	; 0x14
    3a12:	1d 8a       	std	Y+21, r1	; 0x15
    3a14:	1e 8b       	std	Y+22, r17	; 0x16
    3a16:	83 e0       	ldi	r24, 0x03	; 3
    3a18:	f0 de       	rcall	.-544    	; 0x37fa <_turn_off>
    3a1a:	e1 2c       	mov	r14, r1
    3a1c:	f1 2c       	mov	r15, r1
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 ec       	ldi	r20, 0xC0	; 192
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	61 eb       	ldi	r22, 0xB1	; 177
    3a28:	74 e0       	ldi	r23, 0x04	; 4
    3a2a:	89 e5       	ldi	r24, 0x59	; 89
    3a2c:	9c e1       	ldi	r25, 0x1C	; 28
    3a2e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	ff 90       	pop	r15
    3a3c:	ef 90       	pop	r14
    3a3e:	df 90       	pop	r13
    3a40:	cf 90       	pop	r12
    3a42:	08 95       	ret

00003a44 <led_slow_blink>:
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	c8 2f       	mov	r28, r24
    3a4e:	d0 e0       	ldi	r29, 0x00	; 0
    3a50:	8e 01       	movw	r16, r28
    3a52:	00 0f       	add	r16, r16
    3a54:	11 1f       	adc	r17, r17
    3a56:	d8 01       	movw	r26, r16
    3a58:	ac 0f       	add	r26, r28
    3a5a:	bd 1f       	adc	r27, r29
    3a5c:	aa 0f       	add	r26, r26
    3a5e:	bb 1f       	adc	r27, r27
    3a60:	af 58       	subi	r26, 0x8F	; 143
    3a62:	b7 4f       	sbci	r27, 0xF7	; 247
    3a64:	e0 91 df 09 	lds	r30, 0x09DF	; 0x8009df <register_access+0xc>
    3a68:	f0 91 e0 09 	lds	r31, 0x09E0	; 0x8009e0 <register_access+0xd>
    3a6c:	12 96       	adiw	r26, 0x02	; 2
    3a6e:	6c 91       	ld	r22, X
    3a70:	12 97       	sbiw	r26, 0x02	; 2
    3a72:	8d 91       	ld	r24, X+
    3a74:	9c 91       	ld	r25, X
    3a76:	19 95       	eicall
    3a78:	c0 0f       	add	r28, r16
    3a7a:	d1 1f       	adc	r29, r17
    3a7c:	cc 0f       	add	r28, r28
    3a7e:	dd 1f       	adc	r29, r29
    3a80:	cf 58       	subi	r28, 0x8F	; 143
    3a82:	d7 4f       	sbci	r29, 0xF7	; 247
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	8c 83       	std	Y+4, r24	; 0x04
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	08 95       	ret

00003a92 <led_fast_blink>:
    3a92:	0f 93       	push	r16
    3a94:	1f 93       	push	r17
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	c8 2f       	mov	r28, r24
    3a9c:	d0 e0       	ldi	r29, 0x00	; 0
    3a9e:	8e 01       	movw	r16, r28
    3aa0:	00 0f       	add	r16, r16
    3aa2:	11 1f       	adc	r17, r17
    3aa4:	d8 01       	movw	r26, r16
    3aa6:	ac 0f       	add	r26, r28
    3aa8:	bd 1f       	adc	r27, r29
    3aaa:	aa 0f       	add	r26, r26
    3aac:	bb 1f       	adc	r27, r27
    3aae:	af 58       	subi	r26, 0x8F	; 143
    3ab0:	b7 4f       	sbci	r27, 0xF7	; 247
    3ab2:	e0 91 df 09 	lds	r30, 0x09DF	; 0x8009df <register_access+0xc>
    3ab6:	f0 91 e0 09 	lds	r31, 0x09E0	; 0x8009e0 <register_access+0xd>
    3aba:	12 96       	adiw	r26, 0x02	; 2
    3abc:	6c 91       	ld	r22, X
    3abe:	12 97       	sbiw	r26, 0x02	; 2
    3ac0:	8d 91       	ld	r24, X+
    3ac2:	9c 91       	ld	r25, X
    3ac4:	19 95       	eicall
    3ac6:	c0 0f       	add	r28, r16
    3ac8:	d1 1f       	adc	r29, r17
    3aca:	cc 0f       	add	r28, r28
    3acc:	dd 1f       	adc	r29, r29
    3ace:	cf 58       	subi	r28, 0x8F	; 143
    3ad0:	d7 4f       	sbci	r29, 0xF7	; 247
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	8c 83       	std	Y+4, r24	; 0x04
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	08 95       	ret

00003ae0 <led_led_on>:
    3ae0:	28 2f       	mov	r18, r24
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	f9 01       	movw	r30, r18
    3ae6:	ee 0f       	add	r30, r30
    3ae8:	ff 1f       	adc	r31, r31
    3aea:	e2 0f       	add	r30, r18
    3aec:	f3 1f       	adc	r31, r19
    3aee:	ee 0f       	add	r30, r30
    3af0:	ff 1f       	adc	r31, r31
    3af2:	ef 58       	subi	r30, 0x8F	; 143
    3af4:	f7 4f       	sbci	r31, 0xF7	; 247
    3af6:	93 e0       	ldi	r25, 0x03	; 3
    3af8:	94 83       	std	Z+4, r25	; 0x04
    3afa:	ad ce       	rjmp	.-678    	; 0x3856 <_turn_on>
    3afc:	08 95       	ret

00003afe <led_led_off>:
    3afe:	28 2f       	mov	r18, r24
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	f9 01       	movw	r30, r18
    3b04:	ee 0f       	add	r30, r30
    3b06:	ff 1f       	adc	r31, r31
    3b08:	e2 0f       	add	r30, r18
    3b0a:	f3 1f       	adc	r31, r19
    3b0c:	ee 0f       	add	r30, r30
    3b0e:	ff 1f       	adc	r31, r31
    3b10:	ef 58       	subi	r30, 0x8F	; 143
    3b12:	f7 4f       	sbci	r31, 0xF7	; 247
    3b14:	94 e0       	ldi	r25, 0x04	; 4
    3b16:	94 83       	std	Z+4, r25	; 0x04
    3b18:	70 ce       	rjmp	.-800    	; 0x37fa <_turn_off>
    3b1a:	08 95       	ret

00003b1c <led_long_puls>:
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	fc 01       	movw	r30, r24
    3b20:	ee 0f       	add	r30, r30
    3b22:	ff 1f       	adc	r31, r31
    3b24:	df 01       	movw	r26, r30
    3b26:	a8 0f       	add	r26, r24
    3b28:	b9 1f       	adc	r27, r25
    3b2a:	aa 0f       	add	r26, r26
    3b2c:	bb 1f       	adc	r27, r27
    3b2e:	af 58       	subi	r26, 0x8F	; 143
    3b30:	b7 4f       	sbci	r27, 0xF7	; 247
    3b32:	24 e0       	ldi	r18, 0x04	; 4
    3b34:	15 96       	adiw	r26, 0x05	; 5
    3b36:	2c 93       	st	X, r18
    3b38:	15 97       	sbiw	r26, 0x05	; 5
    3b3a:	fd 01       	movw	r30, r26
    3b3c:	14 82       	std	Z+4, r1	; 0x04
    3b3e:	08 95       	ret

00003b40 <led_short_puls>:
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	fc 01       	movw	r30, r24
    3b44:	ee 0f       	add	r30, r30
    3b46:	ff 1f       	adc	r31, r31
    3b48:	df 01       	movw	r26, r30
    3b4a:	a8 0f       	add	r26, r24
    3b4c:	b9 1f       	adc	r27, r25
    3b4e:	aa 0f       	add	r26, r26
    3b50:	bb 1f       	adc	r27, r27
    3b52:	af 58       	subi	r26, 0x8F	; 143
    3b54:	b7 4f       	sbci	r27, 0xF7	; 247
    3b56:	21 e0       	ldi	r18, 0x01	; 1
    3b58:	15 96       	adiw	r26, 0x05	; 5
    3b5a:	2c 93       	st	X, r18
    3b5c:	15 97       	sbiw	r26, 0x05	; 5
    3b5e:	fd 01       	movw	r30, r26
    3b60:	14 82       	std	Z+4, r1	; 0x04
    3b62:	08 95       	ret

00003b64 <_serial_call_back>:
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	1f 92       	push	r1
    3b6e:	1f 92       	push	r1
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	8c 01       	movw	r16, r24
    3b76:	19 82       	std	Y+1, r1	; 0x01
    3b78:	2d c0       	rjmp	.+90     	; 0x3bd4 <_serial_call_back+0x70>
    3b7a:	e0 91 ed 08 	lds	r30, 0x08ED	; 0x8008ed <rec_buf_inp.2926>
    3b7e:	ec 32       	cpi	r30, 0x2C	; 44
    3b80:	50 f4       	brcc	.+20     	; 0x3b96 <_serial_call_back+0x32>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	8e 0f       	add	r24, r30
    3b86:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <rec_buf_inp.2926>
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	e3 5e       	subi	r30, 0xE3	; 227
    3b8e:	f6 4f       	sbci	r31, 0xF6	; 246
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	80 83       	st	Z, r24
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <_serial_call_back+0x36>
    3b96:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <rec_buf_inp.2926>
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	8a 30       	cpi	r24, 0x0A	; 10
    3b9e:	d1 f4       	brne	.+52     	; 0x3bd4 <_serial_call_back+0x70>
    3ba0:	40 91 ed 08 	lds	r20, 0x08ED	; 0x8008ed <rec_buf_inp.2926>
    3ba4:	50 e0       	ldi	r21, 0x00	; 0
    3ba6:	fa 01       	movw	r30, r20
    3ba8:	e5 5e       	subi	r30, 0xE5	; 229
    3baa:	f6 4f       	sbci	r31, 0xF6	; 246
    3bac:	10 82       	st	Z, r1
    3bae:	41 50       	subi	r20, 0x01	; 1
    3bb0:	51 09       	sbc	r21, r1
    3bb2:	9e 01       	movw	r18, r28
    3bb4:	2f 5f       	subi	r18, 0xFF	; 255
    3bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb8:	6d e1       	ldi	r22, 0x1D	; 29
    3bba:	79 e0       	ldi	r23, 0x09	; 9
    3bbc:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_reply_buffer_handle>
    3bc0:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <_reply_buffer_handle+0x1>
    3bc4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xStreamBufferSendFromISR>
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	81 11       	cpse	r24, r1
    3bcc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vPortYield>
    3bd0:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <rec_buf_inp.2926>
    3bd4:	be 01       	movw	r22, r28
    3bd6:	6e 5f       	subi	r22, 0xFE	; 254
    3bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bda:	c8 01       	movw	r24, r16
    3bdc:	db d5       	rcall	.+2998   	; 0x4794 <serial_get_byte>
    3bde:	88 23       	and	r24, r24
    3be0:	61 f2       	breq	.-104    	; 0x3b7a <_serial_call_back+0x16>
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	08 95       	ret

00003bf0 <_upload_message>:
    3bf0:	0f 93       	push	r16
    3bf2:	1f 93       	push	r17
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	8c 01       	movw	r16, r24
    3bfa:	eb 01       	movw	r28, r22
    3bfc:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_reply_buffer_handle>
    3c00:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <_reply_buffer_handle+0x1>
    3c04:	0e 94 cc 09 	call	0x1398	; 0x1398 <xStreamBufferReset>
    3c08:	b8 01       	movw	r22, r16
    3c0a:	89 e8       	ldi	r24, 0x89	; 137
    3c0c:	98 e0       	ldi	r25, 0x08	; 8
    3c0e:	0e 94 bf 2b 	call	0x577e	; 0x577e <strcpy>
    3c12:	20 97       	sbiw	r28, 0x00	; 0
    3c14:	79 f0       	breq	.+30     	; 0x3c34 <_upload_message+0x44>
    3c16:	e9 e8       	ldi	r30, 0x89	; 137
    3c18:	f8 e0       	ldi	r31, 0x08	; 8
    3c1a:	01 90       	ld	r0, Z+
    3c1c:	00 20       	and	r0, r0
    3c1e:	e9 f7       	brne	.-6      	; 0x3c1a <_upload_message+0x2a>
    3c20:	31 97       	sbiw	r30, 0x01	; 1
    3c22:	80 e2       	ldi	r24, 0x20	; 32
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
    3c2a:	be 01       	movw	r22, r28
    3c2c:	89 e8       	ldi	r24, 0x89	; 137
    3c2e:	98 e0       	ldi	r25, 0x08	; 8
    3c30:	0e 94 b4 2b 	call	0x5768	; 0x5768 <strcat>
    3c34:	e9 e8       	ldi	r30, 0x89	; 137
    3c36:	f8 e0       	ldi	r31, 0x08	; 8
    3c38:	df 01       	movw	r26, r30
    3c3a:	0d 90       	ld	r0, X+
    3c3c:	00 20       	and	r0, r0
    3c3e:	e9 f7       	brne	.-6      	; 0x3c3a <_upload_message+0x4a>
    3c40:	11 97       	sbiw	r26, 0x01	; 1
    3c42:	8d e0       	ldi	r24, 0x0D	; 13
    3c44:	9a e0       	ldi	r25, 0x0A	; 10
    3c46:	11 96       	adiw	r26, 0x01	; 1
    3c48:	9c 93       	st	X, r25
    3c4a:	8e 93       	st	-X, r24
    3c4c:	12 96       	adiw	r26, 0x02	; 2
    3c4e:	1c 92       	st	X, r1
    3c50:	01 90       	ld	r0, Z+
    3c52:	00 20       	and	r0, r0
    3c54:	e9 f7       	brne	.-6      	; 0x3c50 <_upload_message+0x60>
    3c56:	31 97       	sbiw	r30, 0x01	; 1
    3c58:	e9 58       	subi	r30, 0x89	; 137
    3c5a:	f8 40       	sbci	r31, 0x08	; 8
    3c5c:	ae 2f       	mov	r26, r30
    3c5e:	89 e8       	ldi	r24, 0x89	; 137
    3c60:	98 e0       	ldi	r25, 0x08	; 8
    3c62:	ac 01       	movw	r20, r24
    3c64:	6a 2f       	mov	r22, r26
    3c66:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_rn2483_serial>
    3c6a:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_rn2483_serial+0x1>
    3c6e:	42 d5       	rcall	.+2692   	; 0x46f4 <serial_send_bytes>
    3c70:	81 11       	cpse	r24, r1
    3c72:	0f c0       	rjmp	.+30     	; 0x3c92 <_upload_message+0xa2>
    3c74:	28 e2       	ldi	r18, 0x28	; 40
    3c76:	35 e0       	ldi	r19, 0x05	; 5
    3c78:	4d e2       	ldi	r20, 0x2D	; 45
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	67 e7       	ldi	r22, 0x77	; 119
    3c7e:	79 e0       	ldi	r23, 0x09	; 9
    3c80:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_reply_buffer_handle>
    3c84:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <_reply_buffer_handle+0x1>
    3c88:	0e 94 4d 0a 	call	0x149a	; 0x149a <xStreamBufferReceive>
    3c8c:	87 e7       	ldi	r24, 0x77	; 119
    3c8e:	99 e0       	ldi	r25, 0x09	; 9
    3c90:	02 c0       	rjmp	.+4      	; 0x3c96 <_upload_message+0xa6>
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	08 95       	ret

00003ca0 <_reply2return_code>:
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	6c 01       	movw	r12, r24
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	01 90       	ld	r0, Z+
    3cba:	00 20       	and	r0, r0
    3cbc:	e9 f7       	brne	.-6      	; 0x3cb8 <_reply2return_code+0x18>
    3cbe:	31 97       	sbiw	r30, 0x01	; 1
    3cc0:	7f 01       	movw	r14, r30
    3cc2:	e8 1a       	sub	r14, r24
    3cc4:	f9 0a       	sbc	r15, r25
    3cc6:	06 e5       	ldi	r16, 0x56	; 86
    3cc8:	17 e0       	ldi	r17, 0x07	; 7
    3cca:	c0 e0       	ldi	r28, 0x00	; 0
    3ccc:	d0 e0       	ldi	r29, 0x00	; 0
    3cce:	f8 01       	movw	r30, r16
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	a7 01       	movw	r20, r14
    3cd6:	c6 01       	movw	r24, r12
    3cd8:	0e 94 c6 2b 	call	0x578c	; 0x578c <strncasecmp>
    3cdc:	89 2b       	or	r24, r25
    3cde:	49 f4       	brne	.+18     	; 0x3cf2 <_reply2return_code+0x52>
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	ee 0f       	add	r30, r30
    3ce4:	ff 1f       	adc	r31, r31
    3ce6:	ec 0f       	add	r30, r28
    3ce8:	fd 1f       	adc	r31, r29
    3cea:	eb 5a       	subi	r30, 0xAB	; 171
    3cec:	f8 4f       	sbci	r31, 0xF8	; 248
    3cee:	80 81       	ld	r24, Z
    3cf0:	07 c0       	rjmp	.+14     	; 0x3d00 <_reply2return_code+0x60>
    3cf2:	21 96       	adiw	r28, 0x01	; 1
    3cf4:	0d 5f       	subi	r16, 0xFD	; 253
    3cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf8:	c1 31       	cpi	r28, 0x11	; 17
    3cfa:	d1 05       	cpc	r29, r1
    3cfc:	41 f7       	brne	.-48     	; 0x3cce <_reply2return_code+0x2e>
    3cfe:	80 e1       	ldi	r24, 0x10	; 16
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	ff 90       	pop	r15
    3d0a:	ef 90       	pop	r14
    3d0c:	df 90       	pop	r13
    3d0e:	cf 90       	pop	r12
    3d10:	bf 90       	pop	r11
    3d12:	af 90       	pop	r10
    3d14:	08 95       	ret

00003d16 <_upload_message_rc>:
    3d16:	6c df       	rcall	.-296    	; 0x3bf0 <_upload_message>
    3d18:	c3 cf       	rjmp	.-122    	; 0x3ca0 <_reply2return_code>
    3d1a:	08 95       	ret

00003d1c <lora_driver_flush_buffers>:
    3d1c:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_reply_buffer_handle>
    3d20:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <_reply_buffer_handle+0x1>
    3d24:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <xStreamBufferReset>
    3d28:	08 95       	ret

00003d2a <lora_driver_create>:
    3d2a:	8f 92       	push	r8
    3d2c:	9f 92       	push	r9
    3d2e:	af 92       	push	r10
    3d30:	cf 92       	push	r12
    3d32:	ef 92       	push	r14
    3d34:	0f 93       	push	r16
    3d36:	cf 93       	push	r28
    3d38:	c8 2f       	mov	r28, r24
    3d3a:	41 e0       	ldi	r20, 0x01	; 1
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	88 ec       	ldi	r24, 0xC8	; 200
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 a0 09 	call	0x1340	; 0x1340 <xStreamBufferGenericCreate>
    3d48:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <_reply_buffer_handle+0x1>
    3d4c:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <_reply_buffer_handle>
    3d50:	0f 2e       	mov	r0, r31
    3d52:	f2 eb       	ldi	r31, 0xB2	; 178
    3d54:	8f 2e       	mov	r8, r31
    3d56:	fd e1       	ldi	r31, 0x1D	; 29
    3d58:	9f 2e       	mov	r9, r31
    3d5a:	f0 2d       	mov	r31, r0
    3d5c:	68 94       	set
    3d5e:	aa 24       	eor	r10, r10
    3d60:	a6 f8       	bld	r10, 6
    3d62:	68 94       	set
    3d64:	cc 24       	eor	r12, r12
    3d66:	c6 f8       	bld	r12, 6
    3d68:	e1 2c       	mov	r14, r1
    3d6a:	00 e0       	ldi	r16, 0x00	; 0
    3d6c:	23 e0       	ldi	r18, 0x03	; 3
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	51 ee       	ldi	r21, 0xE1	; 225
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	8c 2f       	mov	r24, r28
    3d78:	00 d4       	rcall	.+2048   	; 0x457a <serial_new_instance>
    3d7a:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <_rn2483_serial+0x1>
    3d7e:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <_rn2483_serial>
    3d82:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <register_access+0x8>
    3d86:	f0 91 dc 09 	lds	r31, 0x09DC	; 0x8009dc <register_access+0x9>
    3d8a:	64 e0       	ldi	r22, 0x04	; 4
    3d8c:	87 e0       	ldi	r24, 0x07	; 7
    3d8e:	91 e0       	ldi	r25, 0x01	; 1
    3d90:	19 95       	eicall
    3d92:	cf 91       	pop	r28
    3d94:	0f 91       	pop	r16
    3d96:	ef 90       	pop	r14
    3d98:	cf 90       	pop	r12
    3d9a:	af 90       	pop	r10
    3d9c:	9f 90       	pop	r9
    3d9e:	8f 90       	pop	r8
    3da0:	08 95       	ret

00003da2 <lora_driver_reset_rn2483>:
    3da2:	88 23       	and	r24, r24
    3da4:	49 f0       	breq	.+18     	; 0x3db8 <lora_driver_reset_rn2483+0x16>
    3da6:	e0 91 e5 09 	lds	r30, 0x09E5	; 0x8009e5 <register_access+0x12>
    3daa:	f0 91 e6 09 	lds	r31, 0x09E6	; 0x8009e6 <register_access+0x13>
    3dae:	64 e0       	ldi	r22, 0x04	; 4
    3db0:	88 e0       	ldi	r24, 0x08	; 8
    3db2:	91 e0       	ldi	r25, 0x01	; 1
    3db4:	19 95       	eicall
    3db6:	08 95       	ret
    3db8:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <register_access+0x8>
    3dbc:	f0 91 dc 09 	lds	r31, 0x09DC	; 0x8009dc <register_access+0x9>
    3dc0:	64 e0       	ldi	r22, 0x04	; 4
    3dc2:	88 e0       	ldi	r24, 0x08	; 8
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
    3dc6:	19 95       	eicall
    3dc8:	08 95       	ret

00003dca <lora_driver_rn2483_factory_reset>:
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	88 ed       	ldi	r24, 0xD8	; 216
    3dd0:	94 e0       	ldi	r25, 0x04	; 4
    3dd2:	0e df       	rcall	.-484    	; 0x3bf0 <_upload_message>
    3dd4:	e7 e7       	ldi	r30, 0x77	; 119
    3dd6:	f9 e0       	ldi	r31, 0x09	; 9
    3dd8:	01 90       	ld	r0, Z+
    3dda:	00 20       	and	r0, r0
    3ddc:	e9 f7       	brne	.-6      	; 0x3dd8 <lora_driver_rn2483_factory_reset+0xe>
    3dde:	31 97       	sbiw	r30, 0x01	; 1
    3de0:	e7 57       	subi	r30, 0x77	; 119
    3de2:	f9 40       	sbci	r31, 0x09	; 9
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	75 97       	sbiw	r30, 0x15	; 21
    3de8:	08 f0       	brcs	.+2      	; 0x3dec <lora_driver_rn2483_factory_reset+0x22>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	08 95       	ret

00003dee <lora_driver_get_rn2483_hweui>:
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	ec 01       	movw	r28, r24
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	89 ee       	ldi	r24, 0xE9	; 233
    3dfa:	94 e0       	ldi	r25, 0x04	; 4
    3dfc:	f9 de       	rcall	.-526    	; 0x3bf0 <_upload_message>
    3dfe:	e7 e7       	ldi	r30, 0x77	; 119
    3e00:	f9 e0       	ldi	r31, 0x09	; 9
    3e02:	01 90       	ld	r0, Z+
    3e04:	00 20       	and	r0, r0
    3e06:	e9 f7       	brne	.-6      	; 0x3e02 <lora_driver_get_rn2483_hweui+0x14>
    3e08:	e8 58       	subi	r30, 0x88	; 136
    3e0a:	f9 40       	sbci	r31, 0x09	; 9
    3e0c:	39 f4       	brne	.+14     	; 0x3e1c <lora_driver_get_rn2483_hweui+0x2e>
    3e0e:	67 e7       	ldi	r22, 0x77	; 119
    3e10:	79 e0       	ldi	r23, 0x09	; 9
    3e12:	ce 01       	movw	r24, r28
    3e14:	0e 94 bf 2b 	call	0x577e	; 0x577e <strcpy>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	02 c0       	rjmp	.+4      	; 0x3e20 <lora_driver_get_rn2483_hweui+0x32>
    3e1c:	18 82       	st	Y, r1
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	df 91       	pop	r29
    3e22:	cf 91       	pop	r28
    3e24:	08 95       	ret

00003e26 <lora_driver_set_device_identifier>:
    3e26:	fc 01       	movw	r30, r24
    3e28:	01 90       	ld	r0, Z+
    3e2a:	00 20       	and	r0, r0
    3e2c:	e9 f7       	brne	.-6      	; 0x3e28 <lora_driver_set_device_identifier+0x2>
    3e2e:	9f 01       	movw	r18, r30
    3e30:	21 51       	subi	r18, 0x11	; 17
    3e32:	31 09       	sbc	r19, r1
    3e34:	28 17       	cp	r18, r24
    3e36:	39 07       	cpc	r19, r25
    3e38:	29 f4       	brne	.+10     	; 0x3e44 <lora_driver_set_device_identifier+0x1e>
    3e3a:	bc 01       	movw	r22, r24
    3e3c:	87 e1       	ldi	r24, 0x17	; 23
    3e3e:	95 e0       	ldi	r25, 0x05	; 5
    3e40:	6a cf       	rjmp	.-300    	; 0x3d16 <_upload_message_rc>
    3e42:	08 95       	ret
    3e44:	89 e0       	ldi	r24, 0x09	; 9
    3e46:	08 95       	ret

00003e48 <lora_driver_set_application_identifier>:
    3e48:	fc 01       	movw	r30, r24
    3e4a:	01 90       	ld	r0, Z+
    3e4c:	00 20       	and	r0, r0
    3e4e:	e9 f7       	brne	.-6      	; 0x3e4a <lora_driver_set_application_identifier+0x2>
    3e50:	9f 01       	movw	r18, r30
    3e52:	21 51       	subi	r18, 0x11	; 17
    3e54:	31 09       	sbc	r19, r1
    3e56:	28 17       	cp	r18, r24
    3e58:	39 07       	cpc	r19, r25
    3e5a:	29 f4       	brne	.+10     	; 0x3e66 <lora_driver_set_application_identifier+0x1e>
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	86 e2       	ldi	r24, 0x26	; 38
    3e60:	95 e0       	ldi	r25, 0x05	; 5
    3e62:	59 cf       	rjmp	.-334    	; 0x3d16 <_upload_message_rc>
    3e64:	08 95       	ret
    3e66:	89 e0       	ldi	r24, 0x09	; 9
    3e68:	08 95       	ret

00003e6a <lora_driver_set_application_key>:
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	01 90       	ld	r0, Z+
    3e6e:	00 20       	and	r0, r0
    3e70:	e9 f7       	brne	.-6      	; 0x3e6c <lora_driver_set_application_key+0x2>
    3e72:	9f 01       	movw	r18, r30
    3e74:	21 52       	subi	r18, 0x21	; 33
    3e76:	31 09       	sbc	r19, r1
    3e78:	28 17       	cp	r18, r24
    3e7a:	39 07       	cpc	r19, r25
    3e7c:	29 f4       	brne	.+10     	; 0x3e88 <lora_driver_set_application_key+0x1e>
    3e7e:	bc 01       	movw	r22, r24
    3e80:	85 e3       	ldi	r24, 0x35	; 53
    3e82:	95 e0       	ldi	r25, 0x05	; 5
    3e84:	48 cf       	rjmp	.-368    	; 0x3d16 <_upload_message_rc>
    3e86:	08 95       	ret
    3e88:	89 e0       	ldi	r24, 0x09	; 9
    3e8a:	08 95       	ret

00003e8c <lora_driver_save_mac>:
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	70 e0       	ldi	r23, 0x00	; 0
    3e90:	84 e7       	ldi	r24, 0x74	; 116
    3e92:	95 e0       	ldi	r25, 0x05	; 5
    3e94:	40 cf       	rjmp	.-384    	; 0x3d16 <_upload_message_rc>
    3e96:	08 95       	ret

00003e98 <lora_driver_join>:
    3e98:	e8 2f       	mov	r30, r24
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	ee 0f       	add	r30, r30
    3e9e:	ff 1f       	adc	r31, r31
    3ea0:	ef 5a       	subi	r30, 0xAF	; 175
    3ea2:	f8 4f       	sbci	r31, 0xF8	; 248
    3ea4:	60 81       	ld	r22, Z
    3ea6:	71 81       	ldd	r23, Z+1	; 0x01
    3ea8:	8d e7       	ldi	r24, 0x7D	; 125
    3eaa:	95 e0       	ldi	r25, 0x05	; 5
    3eac:	34 df       	rcall	.-408    	; 0x3d16 <_upload_message_rc>
    3eae:	81 11       	cpse	r24, r1
    3eb0:	12 c0       	rjmp	.+36     	; 0x3ed6 <lora_driver_join+0x3e>
    3eb2:	28 e2       	ldi	r18, 0x28	; 40
    3eb4:	35 e0       	ldi	r19, 0x05	; 5
    3eb6:	4d e2       	ldi	r20, 0x2D	; 45
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	67 e7       	ldi	r22, 0x77	; 119
    3ebc:	79 e0       	ldi	r23, 0x09	; 9
    3ebe:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_reply_buffer_handle>
    3ec2:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <_reply_buffer_handle+0x1>
    3ec6:	0e 94 4d 0a 	call	0x149a	; 0x149a <xStreamBufferReceive>
    3eca:	88 23       	and	r24, r24
    3ecc:	21 f0       	breq	.+8      	; 0x3ed6 <lora_driver_join+0x3e>
    3ece:	87 e7       	ldi	r24, 0x77	; 119
    3ed0:	99 e0       	ldi	r25, 0x09	; 9
    3ed2:	e6 ce       	rjmp	.-564    	; 0x3ca0 <_reply2return_code>
    3ed4:	08 95       	ret
    3ed6:	87 e7       	ldi	r24, 0x77	; 119
    3ed8:	99 e0       	ldi	r25, 0x09	; 9
    3eda:	e2 ce       	rjmp	.-572    	; 0x3ca0 <_reply2return_code>
    3edc:	08 95       	ret

00003ede <lora_driver_sent_upload_message>:
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	1f 92       	push	r1
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	db 01       	movw	r26, r22
    3eea:	11 96       	adiw	r26, 0x01	; 1
    3eec:	9c 91       	ld	r25, X
    3eee:	11 97       	sbiw	r26, 0x01	; 1
    3ef0:	95 31       	cpi	r25, 0x15	; 21
    3ef2:	08 f0       	brcs	.+2      	; 0x3ef6 <lora_driver_sent_upload_message+0x18>
    3ef4:	87 c0       	rjmp	.+270    	; 0x4004 <lora_driver_sent_upload_message+0x126>
    3ef6:	99 23       	and	r25, r25
    3ef8:	81 f1       	breq	.+96     	; 0x3f5a <lora_driver_sent_upload_message+0x7c>
    3efa:	60 e0       	ldi	r22, 0x00	; 0
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	27 2f       	mov	r18, r23
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	46 2f       	mov	r20, r22
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	fd 01       	movw	r30, r26
    3f08:	e4 0f       	add	r30, r20
    3f0a:	f5 1f       	adc	r31, r21
    3f0c:	92 81       	ldd	r25, Z+2	; 0x02
    3f0e:	92 95       	swap	r25
    3f10:	9f 70       	andi	r25, 0x0F	; 15
    3f12:	9a 30       	cpi	r25, 0x0A	; 10
    3f14:	10 f0       	brcs	.+4      	; 0x3f1a <lora_driver_sent_upload_message+0x3c>
    3f16:	99 5c       	subi	r25, 0xC9	; 201
    3f18:	01 c0       	rjmp	.+2      	; 0x3f1c <lora_driver_sent_upload_message+0x3e>
    3f1a:	90 5d       	subi	r25, 0xD0	; 208
    3f1c:	f9 01       	movw	r30, r18
    3f1e:	e8 5f       	subi	r30, 0xF8	; 248
    3f20:	f6 4f       	sbci	r31, 0xF6	; 246
    3f22:	90 83       	st	Z, r25
    3f24:	2f 5f       	subi	r18, 0xFF	; 255
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
    3f28:	fd 01       	movw	r30, r26
    3f2a:	e4 0f       	add	r30, r20
    3f2c:	f5 1f       	adc	r31, r21
    3f2e:	92 81       	ldd	r25, Z+2	; 0x02
    3f30:	9f 70       	andi	r25, 0x0F	; 15
    3f32:	49 2f       	mov	r20, r25
    3f34:	50 e0       	ldi	r21, 0x00	; 0
    3f36:	4a 30       	cpi	r20, 0x0A	; 10
    3f38:	51 05       	cpc	r21, r1
    3f3a:	14 f0       	brlt	.+4      	; 0x3f40 <lora_driver_sent_upload_message+0x62>
    3f3c:	99 5c       	subi	r25, 0xC9	; 201
    3f3e:	01 c0       	rjmp	.+2      	; 0x3f42 <lora_driver_sent_upload_message+0x64>
    3f40:	90 5d       	subi	r25, 0xD0	; 208
    3f42:	f9 01       	movw	r30, r18
    3f44:	e8 5f       	subi	r30, 0xF8	; 248
    3f46:	f6 4f       	sbci	r31, 0xF6	; 246
    3f48:	90 83       	st	Z, r25
    3f4a:	7e 5f       	subi	r23, 0xFE	; 254
    3f4c:	6f 5f       	subi	r22, 0xFF	; 255
    3f4e:	11 96       	adiw	r26, 0x01	; 1
    3f50:	9c 91       	ld	r25, X
    3f52:	11 97       	sbiw	r26, 0x01	; 1
    3f54:	69 17       	cp	r22, r25
    3f56:	98 f2       	brcs	.-90     	; 0x3efe <lora_driver_sent_upload_message+0x20>
    3f58:	01 c0       	rjmp	.+2      	; 0x3f5c <lora_driver_sent_upload_message+0x7e>
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	e7 2f       	mov	r30, r23
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	e8 5f       	subi	r30, 0xF8	; 248
    3f62:	f6 4f       	sbci	r31, 0xF6	; 246
    3f64:	10 82       	st	Z, r1
    3f66:	4c 91       	ld	r20, X
    3f68:	81 11       	cpse	r24, r1
    3f6a:	03 c0       	rjmp	.+6      	; 0x3f72 <lora_driver_sent_upload_message+0x94>
    3f6c:	86 e8       	ldi	r24, 0x86	; 134
    3f6e:	95 e0       	ldi	r25, 0x05	; 5
    3f70:	02 c0       	rjmp	.+4      	; 0x3f76 <lora_driver_sent_upload_message+0x98>
    3f72:	88 e8       	ldi	r24, 0x88	; 136
    3f74:	95 e0       	ldi	r25, 0x05	; 5
    3f76:	28 e0       	ldi	r18, 0x08	; 8
    3f78:	39 e0       	ldi	r19, 0x09	; 9
    3f7a:	3f 93       	push	r19
    3f7c:	2f 93       	push	r18
    3f7e:	1f 92       	push	r1
    3f80:	4f 93       	push	r20
    3f82:	9f 93       	push	r25
    3f84:	8f 93       	push	r24
    3f86:	8c e8       	ldi	r24, 0x8C	; 140
    3f88:	95 e0       	ldi	r25, 0x05	; 5
    3f8a:	9f 93       	push	r25
    3f8c:	8f 93       	push	r24
    3f8e:	8a e4       	ldi	r24, 0x4A	; 74
    3f90:	99 e0       	ldi	r25, 0x09	; 9
    3f92:	9f 93       	push	r25
    3f94:	8f 93       	push	r24
    3f96:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <sprintf>
    3f9a:	60 e0       	ldi	r22, 0x00	; 0
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	8a e4       	ldi	r24, 0x4A	; 74
    3fa0:	99 e0       	ldi	r25, 0x09	; 9
    3fa2:	b9 de       	rcall	.-654    	; 0x3d16 <_upload_message_rc>
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	8e 30       	cpi	r24, 0x0E	; 14
    3fb0:	51 f5       	brne	.+84     	; 0x4006 <lora_driver_sent_upload_message+0x128>
    3fb2:	87 e0       	ldi	r24, 0x07	; 7
    3fb4:	89 83       	std	Y+1, r24	; 0x01
    3fb6:	be 01       	movw	r22, r28
    3fb8:	6f 5f       	subi	r22, 0xFF	; 255
    3fba:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbc:	87 e7       	ldi	r24, 0x77	; 119
    3fbe:	99 e0       	ldi	r25, 0x09	; 9
    3fc0:	51 d1       	rcall	.+674    	; 0x4264 <decode_port_no>
    3fc2:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <_downlink_payload>
    3fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc8:	f0 e0       	ldi	r31, 0x00	; 0
    3fca:	e9 58       	subi	r30, 0x89	; 137
    3fcc:	f6 4f       	sbci	r31, 0xF6	; 246
    3fce:	df 01       	movw	r26, r30
    3fd0:	0d 90       	ld	r0, X+
    3fd2:	00 20       	and	r0, r0
    3fd4:	e9 f7       	brne	.-6      	; 0x3fd0 <lora_driver_sent_upload_message+0xf2>
    3fd6:	11 97       	sbiw	r26, 0x01	; 1
    3fd8:	ae 1b       	sub	r26, r30
    3fda:	bf 0b       	sbc	r27, r31
    3fdc:	aa 23       	and	r26, r26
    3fde:	81 f0       	breq	.+32     	; 0x4000 <lora_driver_sent_upload_message+0x122>
    3fe0:	bb 27       	eor	r27, r27
    3fe2:	11 97       	sbiw	r26, 0x01	; 1
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0a f4       	brpl	.+2      	; 0x3fea <lora_driver_sent_upload_message+0x10c>
    3fe8:	01 96       	adiw	r24, 0x01	; 1
    3fea:	95 95       	asr	r25
    3fec:	87 95       	ror	r24
    3fee:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <_downlink_payload+0x1>
    3ff2:	af 01       	movw	r20, r30
    3ff4:	4f 5f       	subi	r20, 0xFF	; 255
    3ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff8:	64 e1       	ldi	r22, 0x14	; 20
    3ffa:	84 ef       	ldi	r24, 0xF4	; 244
    3ffc:	98 e0       	ldi	r25, 0x08	; 8
    3ffe:	5e d1       	rcall	.+700    	; 0x42bc <decode_hexadecimal_string_bytes>
    4000:	8e e0       	ldi	r24, 0x0E	; 14
    4002:	01 c0       	rjmp	.+2      	; 0x4006 <lora_driver_sent_upload_message+0x128>
    4004:	84 e1       	ldi	r24, 0x14	; 20
    4006:	0f 90       	pop	r0
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	08 95       	ret

0000400e <lora_driver_set_adaptive_data_rate>:
    400e:	81 30       	cpi	r24, 0x01	; 1
    4010:	19 f0       	breq	.+6      	; 0x4018 <lora_driver_set_adaptive_data_rate+0xa>
    4012:	6c e9       	ldi	r22, 0x9C	; 156
    4014:	75 e0       	ldi	r23, 0x05	; 5
    4016:	02 c0       	rjmp	.+4      	; 0x401c <lora_driver_set_adaptive_data_rate+0xe>
    4018:	65 e7       	ldi	r22, 0x75	; 117
    401a:	76 e0       	ldi	r23, 0x06	; 6
    401c:	80 ea       	ldi	r24, 0xA0	; 160
    401e:	95 e0       	ldi	r25, 0x05	; 5
    4020:	7a ce       	rjmp	.-780    	; 0x3d16 <_upload_message_rc>
    4022:	08 95       	ret

00004024 <lora_driver_set_data_rate>:
    4024:	88 30       	cpi	r24, 0x08	; 8
    4026:	c0 f4       	brcc	.+48     	; 0x4058 <lora_driver_set_data_rate+0x34>
    4028:	1f 92       	push	r1
    402a:	8f 93       	push	r24
    402c:	88 eb       	ldi	r24, 0xB8	; 184
    402e:	95 e0       	ldi	r25, 0x05	; 5
    4030:	9f 93       	push	r25
    4032:	8f 93       	push	r24
    4034:	8a e4       	ldi	r24, 0x4A	; 74
    4036:	99 e0       	ldi	r25, 0x09	; 9
    4038:	9f 93       	push	r25
    403a:	8f 93       	push	r24
    403c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <sprintf>
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	70 e0       	ldi	r23, 0x00	; 0
    4044:	8a e4       	ldi	r24, 0x4A	; 74
    4046:	99 e0       	ldi	r25, 0x09	; 9
    4048:	66 de       	rcall	.-820    	; 0x3d16 <_upload_message_rc>
    404a:	0f 90       	pop	r0
    404c:	0f 90       	pop	r0
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	08 95       	ret
    4058:	89 e0       	ldi	r24, 0x09	; 9
    405a:	08 95       	ret

0000405c <lora_driver_configure_to_eu868>:
    405c:	2f 92       	push	r2
    405e:	3f 92       	push	r3
    4060:	4f 92       	push	r4
    4062:	5f 92       	push	r5
    4064:	6f 92       	push	r6
    4066:	7f 92       	push	r7
    4068:	8f 92       	push	r8
    406a:	9f 92       	push	r9
    406c:	af 92       	push	r10
    406e:	bf 92       	push	r11
    4070:	cf 92       	push	r12
    4072:	df 92       	push	r13
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	65 ee       	ldi	r22, 0xE5	; 229
    4082:	75 e0       	ldi	r23, 0x05	; 5
    4084:	81 ef       	ldi	r24, 0xF1	; 241
    4086:	95 e0       	ldi	r25, 0x05	; 5
    4088:	b3 dd       	rcall	.-1178   	; 0x3bf0 <_upload_message>
    408a:	0a de       	rcall	.-1004   	; 0x3ca0 <_reply2return_code>
    408c:	81 11       	cpse	r24, r1
    408e:	a6 c0       	rjmp	.+332    	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    4090:	6d ef       	ldi	r22, 0xFD	; 253
    4092:	75 e0       	ldi	r23, 0x05	; 5
    4094:	83 e0       	ldi	r24, 0x03	; 3
    4096:	96 e0       	ldi	r25, 0x06	; 6
    4098:	ab dd       	rcall	.-1194   	; 0x3bf0 <_upload_message>
    409a:	02 de       	rcall	.-1020   	; 0x3ca0 <_reply2return_code>
    409c:	81 11       	cpse	r24, r1
    409e:	9e c0       	rjmp	.+316    	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    40a0:	c0 e0       	ldi	r28, 0x00	; 0
    40a2:	d0 e0       	ldi	r29, 0x00	; 0
    40a4:	0f 2e       	mov	r0, r31
    40a6:	f0 e6       	ldi	r31, 0x60	; 96
    40a8:	8f 2e       	mov	r8, r31
    40aa:	f5 ee       	ldi	r31, 0xE5	; 229
    40ac:	9f 2e       	mov	r9, r31
    40ae:	fe ea       	ldi	r31, 0xAE	; 174
    40b0:	af 2e       	mov	r10, r31
    40b2:	f3 e3       	ldi	r31, 0x33	; 51
    40b4:	bf 2e       	mov	r11, r31
    40b6:	f0 2d       	mov	r31, r0
    40b8:	0f 2e       	mov	r0, r31
    40ba:	f6 e1       	ldi	r31, 0x16	; 22
    40bc:	ef 2e       	mov	r14, r31
    40be:	f6 e0       	ldi	r31, 0x06	; 6
    40c0:	ff 2e       	mov	r15, r31
    40c2:	f0 2d       	mov	r31, r0
    40c4:	0a e4       	ldi	r16, 0x4A	; 74
    40c6:	19 e0       	ldi	r17, 0x09	; 9
    40c8:	0f 2e       	mov	r0, r31
    40ca:	ff e2       	ldi	r31, 0x2F	; 47
    40cc:	cf 2e       	mov	r12, r31
    40ce:	f6 e0       	ldi	r31, 0x06	; 6
    40d0:	df 2e       	mov	r13, r31
    40d2:	f0 2d       	mov	r31, r0
    40d4:	0f 2e       	mov	r0, r31
    40d6:	f6 e4       	ldi	r31, 0x46	; 70
    40d8:	6f 2e       	mov	r6, r31
    40da:	f6 e0       	ldi	r31, 0x06	; 6
    40dc:	7f 2e       	mov	r7, r31
    40de:	f0 2d       	mov	r31, r0
    40e0:	0f 2e       	mov	r0, r31
    40e2:	f0 e6       	ldi	r31, 0x60	; 96
    40e4:	4f 2e       	mov	r4, r31
    40e6:	f6 e0       	ldi	r31, 0x06	; 6
    40e8:	5f 2e       	mov	r5, r31
    40ea:	f0 2d       	mov	r31, r0
    40ec:	df 93       	push	r29
    40ee:	cf 93       	push	r28
    40f0:	ff 92       	push	r15
    40f2:	ef 92       	push	r14
    40f4:	1f 93       	push	r17
    40f6:	0f 93       	push	r16
    40f8:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <sprintf>
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	70 e0       	ldi	r23, 0x00	; 0
    4100:	c8 01       	movw	r24, r16
    4102:	76 dd       	rcall	.-1300   	; 0x3bf0 <_upload_message>
    4104:	cd dd       	rcall	.-1126   	; 0x3ca0 <_reply2return_code>
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	81 11       	cpse	r24, r1
    4114:	63 c0       	rjmp	.+198    	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    4116:	c3 30       	cpi	r28, 0x03	; 3
    4118:	08 f4       	brcc	.+2      	; 0x411c <lora_driver_configure_to_eu868+0xc0>
    411a:	4d c0       	rjmp	.+154    	; 0x41b6 <lora_driver_configure_to_eu868+0x15a>
    411c:	bf 92       	push	r11
    411e:	af 92       	push	r10
    4120:	9f 92       	push	r9
    4122:	8f 92       	push	r8
    4124:	df 93       	push	r29
    4126:	cf 93       	push	r28
    4128:	df 92       	push	r13
    412a:	cf 92       	push	r12
    412c:	1f 93       	push	r17
    412e:	0f 93       	push	r16
    4130:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <sprintf>
    4134:	60 e0       	ldi	r22, 0x00	; 0
    4136:	70 e0       	ldi	r23, 0x00	; 0
    4138:	c8 01       	movw	r24, r16
    413a:	5a dd       	rcall	.-1356   	; 0x3bf0 <_upload_message>
    413c:	b1 dd       	rcall	.-1182   	; 0x3ca0 <_reply2return_code>
    413e:	2d b7       	in	r18, 0x3d	; 61
    4140:	3e b7       	in	r19, 0x3e	; 62
    4142:	26 5f       	subi	r18, 0xF6	; 246
    4144:	3f 4f       	sbci	r19, 0xFF	; 255
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	3e bf       	out	0x3e, r19	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	2d bf       	out	0x3d, r18	; 61
    4150:	81 11       	cpse	r24, r1
    4152:	44 c0       	rjmp	.+136    	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    4154:	df 93       	push	r29
    4156:	cf 93       	push	r28
    4158:	7f 92       	push	r7
    415a:	6f 92       	push	r6
    415c:	1f 93       	push	r17
    415e:	0f 93       	push	r16
    4160:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <sprintf>
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	c8 01       	movw	r24, r16
    416a:	42 dd       	rcall	.-1404   	; 0x3bf0 <_upload_message>
    416c:	99 dd       	rcall	.-1230   	; 0x3ca0 <_reply2return_code>
    416e:	0f 90       	pop	r0
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	81 11       	cpse	r24, r1
    417c:	2f c0       	rjmp	.+94     	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	5f 92       	push	r5
    4184:	4f 92       	push	r4
    4186:	1f 93       	push	r17
    4188:	0f 93       	push	r16
    418a:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <sprintf>
    418e:	60 e0       	ldi	r22, 0x00	; 0
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	c8 01       	movw	r24, r16
    4194:	2d dd       	rcall	.-1446   	; 0x3bf0 <_upload_message>
    4196:	84 dd       	rcall	.-1272   	; 0x3ca0 <_reply2return_code>
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	81 11       	cpse	r24, r1
    41a6:	1a c0       	rjmp	.+52     	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    41a8:	30 e4       	ldi	r19, 0x40	; 64
    41aa:	83 0e       	add	r8, r19
    41ac:	3d e0       	ldi	r19, 0x0D	; 13
    41ae:	93 1e       	adc	r9, r19
    41b0:	33 e0       	ldi	r19, 0x03	; 3
    41b2:	a3 1e       	adc	r10, r19
    41b4:	b1 1c       	adc	r11, r1
    41b6:	21 96       	adiw	r28, 0x01	; 1
    41b8:	c8 30       	cpi	r28, 0x08	; 8
    41ba:	d1 05       	cpc	r29, r1
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <lora_driver_configure_to_eu868+0x164>
    41be:	96 cf       	rjmp	.-212    	; 0x40ec <lora_driver_configure_to_eu868+0x90>
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	88 e7       	ldi	r24, 0x78	; 120
    41c6:	96 e0       	ldi	r25, 0x06	; 6
    41c8:	13 dd       	rcall	.-1498   	; 0x3bf0 <_upload_message>
    41ca:	6a dd       	rcall	.-1324   	; 0x3ca0 <_reply2return_code>
    41cc:	81 11       	cpse	r24, r1
    41ce:	06 c0       	rjmp	.+12     	; 0x41dc <lora_driver_configure_to_eu868+0x180>
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	89 e8       	ldi	r24, 0x89	; 137
    41d6:	96 e0       	ldi	r25, 0x06	; 6
    41d8:	0b dd       	rcall	.-1514   	; 0x3bf0 <_upload_message>
    41da:	62 dd       	rcall	.-1340   	; 0x3ca0 <_reply2return_code>
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	ff 90       	pop	r15
    41e6:	ef 90       	pop	r14
    41e8:	df 90       	pop	r13
    41ea:	cf 90       	pop	r12
    41ec:	bf 90       	pop	r11
    41ee:	af 90       	pop	r10
    41f0:	9f 90       	pop	r9
    41f2:	8f 90       	pop	r8
    41f4:	7f 90       	pop	r7
    41f6:	6f 90       	pop	r6
    41f8:	5f 90       	pop	r5
    41fa:	4f 90       	pop	r4
    41fc:	3f 90       	pop	r3
    41fe:	2f 90       	pop	r2
    4200:	08 95       	ret

00004202 <lora_driver_set_otaa_identity>:
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	ec 01       	movw	r28, r24
    4210:	8b 01       	movw	r16, r22
    4212:	7a 01       	movw	r14, r20
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	fb de       	rcall	.-522    	; 0x400e <lora_driver_set_adaptive_data_rate>
    4218:	81 11       	cpse	r24, r1
    421a:	11 c0       	rjmp	.+34     	; 0x423e <lora_driver_set_otaa_identity+0x3c>
    421c:	ce 01       	movw	r24, r28
    421e:	14 de       	rcall	.-984    	; 0x3e48 <lora_driver_set_application_identifier>
    4220:	81 11       	cpse	r24, r1
    4222:	0d c0       	rjmp	.+26     	; 0x423e <lora_driver_set_otaa_identity+0x3c>
    4224:	c8 01       	movw	r24, r16
    4226:	21 de       	rcall	.-958    	; 0x3e6a <lora_driver_set_application_key>
    4228:	81 11       	cpse	r24, r1
    422a:	09 c0       	rjmp	.+18     	; 0x423e <lora_driver_set_otaa_identity+0x3c>
    422c:	c7 01       	movw	r24, r14
    422e:	fb dd       	rcall	.-1034   	; 0x3e26 <lora_driver_set_device_identifier>
    4230:	81 11       	cpse	r24, r1
    4232:	05 c0       	rjmp	.+10     	; 0x423e <lora_driver_set_otaa_identity+0x3c>
    4234:	85 e0       	ldi	r24, 0x05	; 5
    4236:	f6 de       	rcall	.-532    	; 0x4024 <lora_driver_set_data_rate>
    4238:	81 11       	cpse	r24, r1
    423a:	01 c0       	rjmp	.+2      	; 0x423e <lora_driver_set_otaa_identity+0x3c>
    423c:	27 de       	rcall	.-946    	; 0x3e8c <lora_driver_save_mac>
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	ff 90       	pop	r15
    4248:	ef 90       	pop	r14
    424a:	08 95       	ret

0000424c <lora_driver_map_return_code_to_text>:
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	fc 01       	movw	r30, r24
    4250:	ee 0f       	add	r30, r30
    4252:	ff 1f       	adc	r31, r31
    4254:	8e 0f       	add	r24, r30
    4256:	9f 1f       	adc	r25, r31
    4258:	fc 01       	movw	r30, r24
    425a:	eb 5a       	subi	r30, 0xAB	; 171
    425c:	f8 4f       	sbci	r31, 0xF8	; 248
    425e:	81 81       	ldd	r24, Z+1	; 0x01
    4260:	92 81       	ldd	r25, Z+2	; 0x02
    4262:	08 95       	ret

00004264 <decode_port_no>:
    4264:	dc 01       	movw	r26, r24
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	29 f1       	breq	.+74     	; 0x42b4 <decode_port_no+0x50>
    426a:	fb 01       	movw	r30, r22
    426c:	20 81       	ld	r18, Z
    426e:	fc 01       	movw	r30, r24
    4270:	01 90       	ld	r0, Z+
    4272:	00 20       	and	r0, r0
    4274:	e9 f7       	brne	.-6      	; 0x4270 <decode_port_no+0xc>
    4276:	31 97       	sbiw	r30, 0x01	; 1
    4278:	e8 1b       	sub	r30, r24
    427a:	f9 0b       	sbc	r31, r25
    427c:	82 2f       	mov	r24, r18
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	e8 17       	cp	r30, r24
    4282:	f9 07       	cpc	r31, r25
    4284:	c8 f0       	brcs	.+50     	; 0x42b8 <decode_port_no+0x54>
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	08 c0       	rjmp	.+16     	; 0x429a <decode_port_no+0x36>
    428a:	88 0f       	add	r24, r24
    428c:	38 2f       	mov	r19, r24
    428e:	33 0f       	add	r19, r19
    4290:	33 0f       	add	r19, r19
    4292:	83 0f       	add	r24, r19
    4294:	80 53       	subi	r24, 0x30	; 48
    4296:	89 0f       	add	r24, r25
    4298:	2f 5f       	subi	r18, 0xFF	; 255
    429a:	fd 01       	movw	r30, r26
    429c:	e2 0f       	add	r30, r18
    429e:	f1 1d       	adc	r31, r1
    42a0:	90 81       	ld	r25, Z
    42a2:	30 ed       	ldi	r19, 0xD0	; 208
    42a4:	39 0f       	add	r19, r25
    42a6:	3a 30       	cpi	r19, 0x0A	; 10
    42a8:	10 f4       	brcc	.+4      	; 0x42ae <decode_port_no+0x4a>
    42aa:	91 11       	cpse	r25, r1
    42ac:	ee cf       	rjmp	.-36     	; 0x428a <decode_port_no+0x26>
    42ae:	fb 01       	movw	r30, r22
    42b0:	20 83       	st	Z, r18
    42b2:	08 95       	ret
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	08 95       	ret
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	08 95       	ret

000042bc <decode_hexadecimal_string_bytes>:
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	dc 01       	movw	r26, r24
    42c6:	ea 01       	movw	r28, r20
    42c8:	20 97       	sbiw	r28, 0x00	; 0
    42ca:	e1 f1       	breq	.+120    	; 0x4344 <decode_hexadecimal_string_bytes+0x88>
    42cc:	fa 01       	movw	r30, r20
    42ce:	01 90       	ld	r0, Z+
    42d0:	00 20       	and	r0, r0
    42d2:	e9 f7       	brne	.-6      	; 0x42ce <decode_hexadecimal_string_bytes+0x12>
    42d4:	31 97       	sbiw	r30, 0x01	; 1
    42d6:	e4 1b       	sub	r30, r20
    42d8:	f5 0b       	sbc	r31, r21
    42da:	32 97       	sbiw	r30, 0x02	; 2
    42dc:	10 f5       	brcc	.+68     	; 0x4322 <decode_hexadecimal_string_bytes+0x66>
    42de:	32 c0       	rjmp	.+100    	; 0x4344 <decode_hexadecimal_string_bytes+0x88>
    42e0:	8d 01       	movw	r16, r26
    42e2:	04 0f       	add	r16, r20
    42e4:	15 1f       	adc	r17, r21
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	ae 01       	movw	r20, r28
    42ea:	42 0f       	add	r20, r18
    42ec:	53 1f       	adc	r21, r19
    42ee:	fa 01       	movw	r30, r20
    42f0:	90 81       	ld	r25, Z
    42f2:	91 34       	cpi	r25, 0x41	; 65
    42f4:	28 f0       	brcs	.+10     	; 0x4300 <decode_hexadecimal_string_bytes+0x44>
    42f6:	97 53       	subi	r25, 0x37	; 55
    42f8:	59 2f       	mov	r21, r25
    42fa:	52 95       	swap	r21
    42fc:	50 7f       	andi	r21, 0xF0	; 240
    42fe:	03 c0       	rjmp	.+6      	; 0x4306 <decode_hexadecimal_string_bytes+0x4a>
    4300:	59 2f       	mov	r21, r25
    4302:	52 95       	swap	r21
    4304:	50 7f       	andi	r21, 0xF0	; 240
    4306:	2c 0f       	add	r18, r28
    4308:	3d 1f       	adc	r19, r29
    430a:	f9 01       	movw	r30, r18
    430c:	91 81       	ldd	r25, Z+1	; 0x01
    430e:	91 34       	cpi	r25, 0x41	; 65
    4310:	10 f0       	brcs	.+4      	; 0x4316 <decode_hexadecimal_string_bytes+0x5a>
    4312:	97 53       	subi	r25, 0x37	; 55
    4314:	01 c0       	rjmp	.+2      	; 0x4318 <decode_hexadecimal_string_bytes+0x5c>
    4316:	90 53       	subi	r25, 0x30	; 48
    4318:	95 0f       	add	r25, r21
    431a:	f8 01       	movw	r30, r16
    431c:	90 83       	st	Z, r25
    431e:	8f 5f       	subi	r24, 0xFF	; 255
    4320:	01 c0       	rjmp	.+2      	; 0x4324 <decode_hexadecimal_string_bytes+0x68>
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	28 2f       	mov	r18, r24
    4326:	22 0f       	add	r18, r18
    4328:	48 2f       	mov	r20, r24
    432a:	50 e0       	ldi	r21, 0x00	; 0
    432c:	fe 01       	movw	r30, r28
    432e:	01 90       	ld	r0, Z+
    4330:	00 20       	and	r0, r0
    4332:	e9 f7       	brne	.-6      	; 0x432e <decode_hexadecimal_string_bytes+0x72>
    4334:	31 97       	sbiw	r30, 0x01	; 1
    4336:	ec 1b       	sub	r30, r28
    4338:	fd 0b       	sbc	r31, r29
    433a:	4e 17       	cp	r20, r30
    433c:	5f 07       	cpc	r21, r31
    433e:	10 f4       	brcc	.+4      	; 0x4344 <decode_hexadecimal_string_bytes+0x88>
    4340:	86 13       	cpse	r24, r22
    4342:	ce cf       	rjmp	.-100    	; 0x42e0 <decode_hexadecimal_string_bytes+0x24>
    4344:	df 91       	pop	r29
    4346:	cf 91       	pop	r28
    4348:	1f 91       	pop	r17
    434a:	0f 91       	pop	r16
    434c:	08 95       	ret

0000434e <reg_read_register>:
    434e:	fc 01       	movw	r30, r24
    4350:	80 81       	ld	r24, Z
    4352:	08 95       	ret

00004354 <reg_read_bit>:
    4354:	fc 01       	movw	r30, r24
    4356:	20 81       	ld	r18, Z
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <reg_read_bit+0xe>
    435e:	88 0f       	add	r24, r24
    4360:	99 1f       	adc	r25, r25
    4362:	6a 95       	dec	r22
    4364:	e2 f7       	brpl	.-8      	; 0x435e <reg_read_bit+0xa>
    4366:	82 23       	and	r24, r18
    4368:	08 95       	ret

0000436a <reg_read_bits>:
    436a:	fc 01       	movw	r30, r24
    436c:	80 81       	ld	r24, Z
    436e:	86 23       	and	r24, r22
    4370:	08 95       	ret

00004372 <reg_set_register>:
    4372:	fc 01       	movw	r30, r24
    4374:	60 83       	st	Z, r22
    4376:	08 95       	ret

00004378 <reg_clear_register>:
    4378:	fc 01       	movw	r30, r24
    437a:	10 82       	st	Z, r1
    437c:	08 95       	ret

0000437e <reg_set_bit>:
    437e:	fc 01       	movw	r30, r24
    4380:	40 81       	ld	r20, Z
    4382:	21 e0       	ldi	r18, 0x01	; 1
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	02 c0       	rjmp	.+4      	; 0x438c <reg_set_bit+0xe>
    4388:	22 0f       	add	r18, r18
    438a:	33 1f       	adc	r19, r19
    438c:	6a 95       	dec	r22
    438e:	e2 f7       	brpl	.-8      	; 0x4388 <reg_set_bit+0xa>
    4390:	24 2b       	or	r18, r20
    4392:	20 83       	st	Z, r18
    4394:	08 95       	ret

00004396 <reg_set_bits>:
    4396:	fc 01       	movw	r30, r24
    4398:	20 81       	ld	r18, Z
    439a:	62 2b       	or	r22, r18
    439c:	60 83       	st	Z, r22
    439e:	08 95       	ret

000043a0 <reg_toggle_bit>:
    43a0:	fc 01       	movw	r30, r24
    43a2:	40 81       	ld	r20, Z
    43a4:	21 e0       	ldi	r18, 0x01	; 1
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <reg_toggle_bit+0xe>
    43aa:	22 0f       	add	r18, r18
    43ac:	33 1f       	adc	r19, r19
    43ae:	6a 95       	dec	r22
    43b0:	e2 f7       	brpl	.-8      	; 0x43aa <reg_toggle_bit+0xa>
    43b2:	24 27       	eor	r18, r20
    43b4:	20 83       	st	Z, r18
    43b6:	08 95       	ret

000043b8 <reg_toggle_bits>:
    43b8:	fc 01       	movw	r30, r24
    43ba:	20 81       	ld	r18, Z
    43bc:	62 27       	eor	r22, r18
    43be:	60 83       	st	Z, r22
    43c0:	08 95       	ret

000043c2 <reg_clear_bit>:
    43c2:	fc 01       	movw	r30, r24
    43c4:	90 81       	ld	r25, Z
    43c6:	21 e0       	ldi	r18, 0x01	; 1
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	02 c0       	rjmp	.+4      	; 0x43d0 <reg_clear_bit+0xe>
    43cc:	22 0f       	add	r18, r18
    43ce:	33 1f       	adc	r19, r19
    43d0:	6a 95       	dec	r22
    43d2:	e2 f7       	brpl	.-8      	; 0x43cc <reg_clear_bit+0xa>
    43d4:	20 95       	com	r18
    43d6:	29 23       	and	r18, r25
    43d8:	20 83       	st	Z, r18
    43da:	08 95       	ret

000043dc <reg_clear_bits>:
    43dc:	fc 01       	movw	r30, r24
    43de:	90 81       	ld	r25, Z
    43e0:	60 95       	com	r22
    43e2:	69 23       	and	r22, r25
    43e4:	60 83       	st	Z, r22
    43e6:	08 95       	ret

000043e8 <_serial_call_back>:
    43e8:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <crc_sum.1941>
    43ec:	86 0f       	add	r24, r22
    43ee:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <crc_sum.1941>
    43f2:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <_mh_state>
    43f6:	91 30       	cpi	r25, 0x01	; 1
    43f8:	79 f0       	breq	.+30     	; 0x4418 <_serial_call_back+0x30>
    43fa:	28 f0       	brcs	.+10     	; 0x4406 <_serial_call_back+0x1e>
    43fc:	92 30       	cpi	r25, 0x02	; 2
    43fe:	a9 f0       	breq	.+42     	; 0x442a <_serial_call_back+0x42>
    4400:	93 30       	cpi	r25, 0x03	; 3
    4402:	19 f1       	breq	.+70     	; 0x444a <_serial_call_back+0x62>
    4404:	08 95       	ret
    4406:	6f 3f       	cpi	r22, 0xFF	; 255
    4408:	09 f0       	breq	.+2      	; 0x440c <_serial_call_back+0x24>
    440a:	48 c0       	rjmp	.+144    	; 0x449c <_serial_call_back+0xb4>
    440c:	10 92 a7 09 	sts	0x09A7, r1	; 0x8009a7 <crc_sum.1941>
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <_mh_state>
    4416:	08 95       	ret
    4418:	66 38       	cpi	r22, 0x86	; 134
    441a:	09 f0       	breq	.+2      	; 0x441e <_serial_call_back+0x36>
    441c:	3f c0       	rjmp	.+126    	; 0x449c <_serial_call_back+0xb4>
    441e:	10 92 a6 09 	sts	0x09A6, r1	; 0x8009a6 <inDex.1939>
    4422:	82 e0       	ldi	r24, 0x02	; 2
    4424:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <_mh_state>
    4428:	08 95       	ret
    442a:	e0 91 a6 09 	lds	r30, 0x09A6	; 0x8009a6 <inDex.1939>
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	8e 0f       	add	r24, r30
    4432:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <inDex.1939>
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	ec 55       	subi	r30, 0x5C	; 92
    443a:	f6 4f       	sbci	r31, 0xF6	; 246
    443c:	60 83       	st	Z, r22
    443e:	82 30       	cpi	r24, 0x02	; 2
    4440:	69 f5       	brne	.+90     	; 0x449c <_serial_call_back+0xb4>
    4442:	83 e0       	ldi	r24, 0x03	; 3
    4444:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <_mh_state>
    4448:	08 95       	ret
    444a:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <inDex.1939>
    444e:	21 e0       	ldi	r18, 0x01	; 1
    4450:	29 0f       	add	r18, r25
    4452:	20 93 a6 09 	sts	0x09A6, r18	; 0x8009a6 <inDex.1939>
    4456:	96 30       	cpi	r25, 0x06	; 6
    4458:	09 f5       	brne	.+66     	; 0x449c <_serial_call_back+0xb4>
    445a:	81 11       	cpse	r24, r1
    445c:	0e c0       	rjmp	.+28     	; 0x447a <_serial_call_back+0x92>
    445e:	e4 ea       	ldi	r30, 0xA4	; 164
    4460:	f9 e0       	ldi	r31, 0x09	; 9
    4462:	80 81       	ld	r24, Z
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	98 2f       	mov	r25, r24
    4468:	88 27       	eor	r24, r24
    446a:	21 81       	ldd	r18, Z+1	; 0x01
    446c:	82 0f       	add	r24, r18
    446e:	91 1d       	adc	r25, r1
    4470:	90 93 ac 09 	sts	0x09AC, r25	; 0x8009ac <_ppm+0x1>
    4474:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <_ppm>
    4478:	04 c0       	rjmp	.+8      	; 0x4482 <_serial_call_back+0x9a>
    447a:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <_ppm+0x1>
    447e:	10 92 ab 09 	sts	0x09AB, r1	; 0x8009ab <_ppm>
    4482:	10 92 aa 09 	sts	0x09AA, r1	; 0x8009aa <_mh_state>
    4486:	e0 91 a8 09 	lds	r30, 0x09A8	; 0x8009a8 <_app_call_back>
    448a:	f0 91 a9 09 	lds	r31, 0x09A9	; 0x8009a9 <_app_call_back+0x1>
    448e:	30 97       	sbiw	r30, 0x00	; 0
    4490:	29 f0       	breq	.+10     	; 0x449c <_serial_call_back+0xb4>
    4492:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <_ppm>
    4496:	90 91 ac 09 	lds	r25, 0x09AC	; 0x8009ac <_ppm+0x1>
    449a:	19 95       	eicall
    449c:	08 95       	ret

0000449e <mh_z19_create>:
    449e:	8f 92       	push	r8
    44a0:	9f 92       	push	r9
    44a2:	af 92       	push	r10
    44a4:	cf 92       	push	r12
    44a6:	ef 92       	push	r14
    44a8:	0f 93       	push	r16
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	eb 01       	movw	r28, r22
    44b0:	0f 2e       	mov	r0, r31
    44b2:	f4 ef       	ldi	r31, 0xF4	; 244
    44b4:	8f 2e       	mov	r8, r31
    44b6:	f1 e2       	ldi	r31, 0x21	; 33
    44b8:	9f 2e       	mov	r9, r31
    44ba:	f0 2d       	mov	r31, r0
    44bc:	68 94       	set
    44be:	aa 24       	eor	r10, r10
    44c0:	a4 f8       	bld	r10, 4
    44c2:	68 94       	set
    44c4:	cc 24       	eor	r12, r12
    44c6:	c4 f8       	bld	r12, 4
    44c8:	e1 2c       	mov	r14, r1
    44ca:	00 e0       	ldi	r16, 0x00	; 0
    44cc:	23 e0       	ldi	r18, 0x03	; 3
    44ce:	40 e8       	ldi	r20, 0x80	; 128
    44d0:	55 e2       	ldi	r21, 0x25	; 37
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	51 d0       	rcall	.+162    	; 0x457a <serial_new_instance>
    44d8:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <_serial+0x1>
    44dc:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <_serial>
    44e0:	d0 93 a9 09 	sts	0x09A9, r29	; 0x8009a9 <_app_call_back+0x1>
    44e4:	c0 93 a8 09 	sts	0x09A8, r28	; 0x8009a8 <_app_call_back>
    44e8:	df 91       	pop	r29
    44ea:	cf 91       	pop	r28
    44ec:	0f 91       	pop	r16
    44ee:	ef 90       	pop	r14
    44f0:	cf 90       	pop	r12
    44f2:	af 90       	pop	r10
    44f4:	9f 90       	pop	r9
    44f6:	8f 90       	pop	r8
    44f8:	08 95       	ret

000044fa <mh_z19_take_meassuring>:
    44fa:	cf 93       	push	r28
    44fc:	df 93       	push	r29
    44fe:	cd b7       	in	r28, 0x3d	; 61
    4500:	de b7       	in	r29, 0x3e	; 62
    4502:	29 97       	sbiw	r28, 0x09	; 9
    4504:	0f b6       	in	r0, 0x3f	; 63
    4506:	f8 94       	cli
    4508:	de bf       	out	0x3e, r29	; 62
    450a:	0f be       	out	0x3f, r0	; 63
    450c:	cd bf       	out	0x3d, r28	; 61
    450e:	89 e0       	ldi	r24, 0x09	; 9
    4510:	e3 e2       	ldi	r30, 0x23	; 35
    4512:	f2 e0       	ldi	r31, 0x02	; 2
    4514:	9e 01       	movw	r18, r28
    4516:	2f 5f       	subi	r18, 0xFF	; 255
    4518:	3f 4f       	sbci	r19, 0xFF	; 255
    451a:	d9 01       	movw	r26, r18
    451c:	01 90       	ld	r0, Z+
    451e:	0d 92       	st	X+, r0
    4520:	8a 95       	dec	r24
    4522:	e1 f7       	brne	.-8      	; 0x451c <mh_z19_take_meassuring+0x22>
    4524:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <_ppm+0x1>
    4528:	10 92 ab 09 	sts	0x09AB, r1	; 0x8009ab <_ppm>
    452c:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <_serial>
    4530:	90 91 ae 09 	lds	r25, 0x09AE	; 0x8009ae <_serial+0x1>
    4534:	00 97       	sbiw	r24, 0x00	; 0
    4536:	31 f0       	breq	.+12     	; 0x4544 <mh_z19_take_meassuring+0x4a>
    4538:	42 2f       	mov	r20, r18
    453a:	53 2f       	mov	r21, r19
    453c:	69 e0       	ldi	r22, 0x09	; 9
    453e:	da d0       	rcall	.+436    	; 0x46f4 <serial_send_bytes>
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	01 c0       	rjmp	.+2      	; 0x4546 <mh_z19_take_meassuring+0x4c>
    4544:	82 e0       	ldi	r24, 0x02	; 2
    4546:	29 96       	adiw	r28, 0x09	; 9
    4548:	0f b6       	in	r0, 0x3f	; 63
    454a:	f8 94       	cli
    454c:	de bf       	out	0x3e, r29	; 62
    454e:	0f be       	out	0x3f, r0	; 63
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	df 91       	pop	r29
    4554:	cf 91       	pop	r28
    4556:	08 95       	ret

00004558 <mh_z19_get_co2_ppm>:
    4558:	20 91 ab 09 	lds	r18, 0x09AB	; 0x8009ab <_ppm>
    455c:	30 91 ac 09 	lds	r19, 0x09AC	; 0x8009ac <_ppm+0x1>
    4560:	21 15       	cp	r18, r1
    4562:	31 05       	cpc	r19, r1
    4564:	29 f4       	brne	.+10     	; 0x4570 <mh_z19_get_co2_ppm+0x18>
    4566:	fc 01       	movw	r30, r24
    4568:	11 82       	std	Z+1, r1	; 0x01
    456a:	10 82       	st	Z, r1
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	08 95       	ret
    4570:	fc 01       	movw	r30, r24
    4572:	31 83       	std	Z+1, r19	; 0x01
    4574:	20 83       	st	Z, r18
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	08 95       	ret

0000457a <serial_new_instance>:
    457a:	2f 92       	push	r2
    457c:	3f 92       	push	r3
    457e:	4f 92       	push	r4
    4580:	5f 92       	push	r5
    4582:	6f 92       	push	r6
    4584:	7f 92       	push	r7
    4586:	8f 92       	push	r8
    4588:	9f 92       	push	r9
    458a:	af 92       	push	r10
    458c:	cf 92       	push	r12
    458e:	ef 92       	push	r14
    4590:	ff 92       	push	r15
    4592:	0f 93       	push	r16
    4594:	1f 93       	push	r17
    4596:	cf 93       	push	r28
    4598:	df 93       	push	r29
    459a:	cd b7       	in	r28, 0x3d	; 61
    459c:	de b7       	in	r29, 0x3e	; 62
    459e:	f8 2e       	mov	r15, r24
    45a0:	2a 01       	movw	r4, r20
    45a2:	3b 01       	movw	r6, r22
    45a4:	88 e0       	ldi	r24, 0x08	; 8
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	c7 d6       	rcall	.+3470   	; 0x5338 <malloc>
    45aa:	8c 01       	movw	r16, r24
    45ac:	8f 2d       	mov	r24, r15
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	88 0f       	add	r24, r24
    45b2:	99 1f       	adc	r25, r25
    45b4:	fc 01       	movw	r30, r24
    45b6:	e1 55       	subi	r30, 0x51	; 81
    45b8:	f6 4f       	sbci	r31, 0xF6	; 246
    45ba:	11 83       	std	Z+1, r17	; 0x01
    45bc:	00 83       	st	Z, r16
    45be:	fc 01       	movw	r30, r24
    45c0:	e4 5f       	subi	r30, 0xF4	; 244
    45c2:	fd 4f       	sbci	r31, 0xFD	; 253
    45c4:	80 81       	ld	r24, Z
    45c6:	91 81       	ldd	r25, Z+1	; 0x01
    45c8:	d8 01       	movw	r26, r16
    45ca:	8d 93       	st	X+, r24
    45cc:	9c 93       	st	X, r25
    45ce:	6c 2d       	mov	r22, r12
    45d0:	70 e0       	ldi	r23, 0x00	; 0
    45d2:	84 e0       	ldi	r24, 0x04	; 4
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	96 d6       	rcall	.+3372   	; 0x5304 <calloc>
    45d8:	1c 01       	movw	r2, r24
    45da:	61 e0       	ldi	r22, 0x01	; 1
    45dc:	70 e0       	ldi	r23, 0x00	; 0
    45de:	86 e0       	ldi	r24, 0x06	; 6
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	90 d6       	rcall	.+3360   	; 0x5304 <calloc>
    45e4:	7c 01       	movw	r14, r24
    45e6:	4c 2d       	mov	r20, r12
    45e8:	b1 01       	movw	r22, r2
    45ea:	2c d5       	rcall	.+2648   	; 0x5044 <fifo_init>
    45ec:	f8 01       	movw	r30, r16
    45ee:	f5 82       	std	Z+5, r15	; 0x05
    45f0:	e4 82       	std	Z+4, r14	; 0x04
    45f2:	6a 2d       	mov	r22, r10
    45f4:	70 e0       	ldi	r23, 0x00	; 0
    45f6:	84 e0       	ldi	r24, 0x04	; 4
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	84 d6       	rcall	.+3336   	; 0x5304 <calloc>
    45fc:	1c 01       	movw	r2, r24
    45fe:	61 e0       	ldi	r22, 0x01	; 1
    4600:	70 e0       	ldi	r23, 0x00	; 0
    4602:	86 e0       	ldi	r24, 0x06	; 6
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	7e d6       	rcall	.+3324   	; 0x5304 <calloc>
    4608:	7c 01       	movw	r14, r24
    460a:	4a 2d       	mov	r20, r10
    460c:	b1 01       	movw	r22, r2
    460e:	1a d5       	rcall	.+2612   	; 0x5044 <fifo_init>
    4610:	d8 01       	movw	r26, r16
    4612:	13 96       	adiw	r26, 0x03	; 3
    4614:	fc 92       	st	X, r15
    4616:	ee 92       	st	-X, r14
    4618:	12 97       	sbiw	r26, 0x02	; 2
    461a:	17 96       	adiw	r26, 0x07	; 7
    461c:	9c 92       	st	X, r9
    461e:	8e 92       	st	-X, r8
    4620:	16 97       	sbiw	r26, 0x06	; 6
    4622:	ff b6       	in	r15, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	ed 91       	ld	r30, X+
    4628:	fc 91       	ld	r31, X
    462a:	11 97       	sbiw	r26, 0x01	; 1
    462c:	36 97       	sbiw	r30, 0x06	; 6
    462e:	80 81       	ld	r24, Z
    4630:	82 60       	ori	r24, 0x02	; 2
    4632:	80 83       	st	Z, r24
    4634:	8d 90       	ld	r8, X+
    4636:	9c 90       	ld	r9, X
    4638:	c3 01       	movw	r24, r6
    463a:	b2 01       	movw	r22, r4
    463c:	fc d5       	rcall	.+3064   	; 0x5236 <__floatunsisf>
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	51 e4       	ldi	r21, 0x41	; 65
    4646:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__mulsf3>
    464a:	9b 01       	movw	r18, r22
    464c:	ac 01       	movw	r20, r24
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	74 e2       	ldi	r23, 0x24	; 36
    4652:	84 e7       	ldi	r24, 0x74	; 116
    4654:	9b e4       	ldi	r25, 0x4B	; 75
    4656:	7e d5       	rcall	.+2812   	; 0x5154 <__divsf3>
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	40 e8       	ldi	r20, 0x80	; 128
    465e:	5f e3       	ldi	r21, 0x3F	; 63
    4660:	0d d5       	rcall	.+2586   	; 0x507c <__subsf3>
    4662:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__fixunssfsi>
    4666:	f4 01       	movw	r30, r8
    4668:	32 97       	sbiw	r30, 0x02	; 2
    466a:	60 83       	st	Z, r22
    466c:	d8 01       	movw	r26, r16
    466e:	ed 91       	ld	r30, X+
    4670:	fc 91       	ld	r31, X
    4672:	11 97       	sbiw	r26, 0x01	; 1
    4674:	35 97       	sbiw	r30, 0x05	; 5
    4676:	88 e9       	ldi	r24, 0x98	; 152
    4678:	80 83       	st	Z, r24
    467a:	ed 91       	ld	r30, X+
    467c:	fc 91       	ld	r31, X
    467e:	34 97       	sbiw	r30, 0x04	; 4
    4680:	86 e0       	ldi	r24, 0x06	; 6
    4682:	80 83       	st	Z, r24
    4684:	ff be       	out	0x3f, r15	; 63
    4686:	c8 01       	movw	r24, r16
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	cf 90       	pop	r12
    4696:	af 90       	pop	r10
    4698:	9f 90       	pop	r9
    469a:	8f 90       	pop	r8
    469c:	7f 90       	pop	r7
    469e:	6f 90       	pop	r6
    46a0:	5f 90       	pop	r5
    46a2:	4f 90       	pop	r4
    46a4:	3f 90       	pop	r3
    46a6:	2f 90       	pop	r2
    46a8:	08 95       	ret

000046aa <serial_send_byte>:
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	ec 01       	movw	r28, r24
    46b0:	ea 81       	ldd	r30, Y+2	; 0x02
    46b2:	fb 81       	ldd	r31, Y+3	; 0x03
    46b4:	93 81       	ldd	r25, Z+3	; 0x03
    46b6:	82 81       	ldd	r24, Z+2	; 0x02
    46b8:	25 81       	ldd	r18, Z+5	; 0x05
    46ba:	98 1b       	sub	r25, r24
    46bc:	92 23       	and	r25, r18
    46be:	84 81       	ldd	r24, Z+4	; 0x04
    46c0:	98 17       	cp	r25, r24
    46c2:	a1 f0       	breq	.+40     	; 0x46ec <serial_send_byte+0x42>
    46c4:	93 81       	ldd	r25, Z+3	; 0x03
    46c6:	26 95       	lsr	r18
    46c8:	29 23       	and	r18, r25
    46ca:	a0 81       	ld	r26, Z
    46cc:	b1 81       	ldd	r27, Z+1	; 0x01
    46ce:	a2 0f       	add	r26, r18
    46d0:	b1 1d       	adc	r27, r1
    46d2:	6c 93       	st	X, r22
    46d4:	9f 5f       	subi	r25, 0xFF	; 255
    46d6:	25 81       	ldd	r18, Z+5	; 0x05
    46d8:	92 23       	and	r25, r18
    46da:	93 83       	std	Z+3, r25	; 0x03
    46dc:	e8 81       	ld	r30, Y
    46de:	f9 81       	ldd	r31, Y+1	; 0x01
    46e0:	35 97       	sbiw	r30, 0x05	; 5
    46e2:	80 81       	ld	r24, Z
    46e4:	80 62       	ori	r24, 0x20	; 32
    46e6:	80 83       	st	Z, r24
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	01 c0       	rjmp	.+2      	; 0x46ee <serial_send_byte+0x44>
    46ec:	82 e0       	ldi	r24, 0x02	; 2
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	08 95       	ret

000046f4 <serial_send_bytes>:
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	7c 01       	movw	r14, r24
    4702:	dc 01       	movw	r26, r24
    4704:	12 96       	adiw	r26, 0x02	; 2
    4706:	ed 91       	ld	r30, X+
    4708:	fc 91       	ld	r31, X
    470a:	13 97       	sbiw	r26, 0x03	; 3
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	82 81       	ldd	r24, Z+2	; 0x02
    4710:	98 1b       	sub	r25, r24
    4712:	85 81       	ldd	r24, Z+5	; 0x05
    4714:	98 23       	and	r25, r24
    4716:	84 81       	ldd	r24, Z+4	; 0x04
    4718:	89 1b       	sub	r24, r25
    471a:	86 17       	cp	r24, r22
    471c:	98 f1       	brcs	.+102    	; 0x4784 <serial_send_bytes+0x90>
    471e:	66 23       	and	r22, r22
    4720:	41 f1       	breq	.+80     	; 0x4772 <serial_send_bytes+0x7e>
    4722:	84 2f       	mov	r24, r20
    4724:	95 2f       	mov	r25, r21
    4726:	dc 01       	movw	r26, r24
    4728:	61 50       	subi	r22, 0x01	; 1
    472a:	46 2f       	mov	r20, r22
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	4f 5f       	subi	r20, 0xFF	; 255
    4730:	5f 4f       	sbci	r21, 0xFF	; 255
    4732:	48 0f       	add	r20, r24
    4734:	59 1f       	adc	r21, r25
    4736:	e7 01       	movw	r28, r14
    4738:	ea 81       	ldd	r30, Y+2	; 0x02
    473a:	fb 81       	ldd	r31, Y+3	; 0x03
    473c:	93 81       	ldd	r25, Z+3	; 0x03
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	25 81       	ldd	r18, Z+5	; 0x05
    4742:	98 1b       	sub	r25, r24
    4744:	92 23       	and	r25, r18
    4746:	84 81       	ldd	r24, Z+4	; 0x04
    4748:	98 17       	cp	r25, r24
    474a:	79 f0       	breq	.+30     	; 0x476a <serial_send_bytes+0x76>
    474c:	8c 91       	ld	r24, X
    474e:	93 81       	ldd	r25, Z+3	; 0x03
    4750:	26 95       	lsr	r18
    4752:	29 23       	and	r18, r25
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	8b 01       	movw	r16, r22
    475a:	02 0f       	add	r16, r18
    475c:	11 1d       	adc	r17, r1
    475e:	e8 01       	movw	r28, r16
    4760:	88 83       	st	Y, r24
    4762:	9f 5f       	subi	r25, 0xFF	; 255
    4764:	85 81       	ldd	r24, Z+5	; 0x05
    4766:	98 23       	and	r25, r24
    4768:	93 83       	std	Z+3, r25	; 0x03
    476a:	11 96       	adiw	r26, 0x01	; 1
    476c:	a4 17       	cp	r26, r20
    476e:	b5 07       	cpc	r27, r21
    4770:	11 f7       	brne	.-60     	; 0x4736 <serial_send_bytes+0x42>
    4772:	d7 01       	movw	r26, r14
    4774:	ed 91       	ld	r30, X+
    4776:	fc 91       	ld	r31, X
    4778:	35 97       	sbiw	r30, 0x05	; 5
    477a:	80 81       	ld	r24, Z
    477c:	80 62       	ori	r24, 0x20	; 32
    477e:	80 83       	st	Z, r24
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	01 c0       	rjmp	.+2      	; 0x4786 <serial_send_bytes+0x92>
    4784:	82 e0       	ldi	r24, 0x02	; 2
    4786:	df 91       	pop	r29
    4788:	cf 91       	pop	r28
    478a:	1f 91       	pop	r17
    478c:	0f 91       	pop	r16
    478e:	ff 90       	pop	r15
    4790:	ef 90       	pop	r14
    4792:	08 95       	ret

00004794 <serial_get_byte>:
    4794:	dc 01       	movw	r26, r24
    4796:	14 96       	adiw	r26, 0x04	; 4
    4798:	ed 91       	ld	r30, X+
    479a:	fc 91       	ld	r31, X
    479c:	15 97       	sbiw	r26, 0x05	; 5
    479e:	93 81       	ldd	r25, Z+3	; 0x03
    47a0:	82 81       	ldd	r24, Z+2	; 0x02
    47a2:	98 17       	cp	r25, r24
    47a4:	89 f0       	breq	.+34     	; 0x47c8 <serial_get_byte+0x34>
    47a6:	92 81       	ldd	r25, Z+2	; 0x02
    47a8:	85 81       	ldd	r24, Z+5	; 0x05
    47aa:	86 95       	lsr	r24
    47ac:	89 23       	and	r24, r25
    47ae:	a0 81       	ld	r26, Z
    47b0:	b1 81       	ldd	r27, Z+1	; 0x01
    47b2:	a8 0f       	add	r26, r24
    47b4:	b1 1d       	adc	r27, r1
    47b6:	8c 91       	ld	r24, X
    47b8:	db 01       	movw	r26, r22
    47ba:	8c 93       	st	X, r24
    47bc:	9f 5f       	subi	r25, 0xFF	; 255
    47be:	85 81       	ldd	r24, Z+5	; 0x05
    47c0:	98 23       	and	r25, r24
    47c2:	92 83       	std	Z+2, r25	; 0x02
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	08 95       	ret
    47c8:	83 e0       	ldi	r24, 0x03	; 3
    47ca:	08 95       	ret

000047cc <__vector_25>:
    47cc:	1f 92       	push	r1
    47ce:	0f 92       	push	r0
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	0f 92       	push	r0
    47d4:	11 24       	eor	r1, r1
    47d6:	0b b6       	in	r0, 0x3b	; 59
    47d8:	0f 92       	push	r0
    47da:	2f 93       	push	r18
    47dc:	3f 93       	push	r19
    47de:	4f 93       	push	r20
    47e0:	5f 93       	push	r21
    47e2:	6f 93       	push	r22
    47e4:	7f 93       	push	r23
    47e6:	8f 93       	push	r24
    47e8:	9f 93       	push	r25
    47ea:	af 93       	push	r26
    47ec:	bf 93       	push	r27
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	ef 93       	push	r30
    47f4:	ff 93       	push	r31
    47f6:	a0 91 af 09 	lds	r26, 0x09AF	; 0x8009af <_ser_handle>
    47fa:	b0 91 b0 09 	lds	r27, 0x09B0	; 0x8009b0 <_ser_handle+0x1>
    47fe:	10 97       	sbiw	r26, 0x00	; 0
    4800:	11 f1       	breq	.+68     	; 0x4846 <__vector_25+0x7a>
    4802:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4806:	14 96       	adiw	r26, 0x04	; 4
    4808:	ed 91       	ld	r30, X+
    480a:	fc 91       	ld	r31, X
    480c:	15 97       	sbiw	r26, 0x05	; 5
    480e:	93 81       	ldd	r25, Z+3	; 0x03
    4810:	82 81       	ldd	r24, Z+2	; 0x02
    4812:	25 81       	ldd	r18, Z+5	; 0x05
    4814:	98 1b       	sub	r25, r24
    4816:	92 23       	and	r25, r18
    4818:	84 81       	ldd	r24, Z+4	; 0x04
    481a:	98 17       	cp	r25, r24
    481c:	61 f0       	breq	.+24     	; 0x4836 <__vector_25+0x6a>
    481e:	83 81       	ldd	r24, Z+3	; 0x03
    4820:	26 95       	lsr	r18
    4822:	28 23       	and	r18, r24
    4824:	c0 81       	ld	r28, Z
    4826:	d1 81       	ldd	r29, Z+1	; 0x01
    4828:	c2 0f       	add	r28, r18
    482a:	d1 1d       	adc	r29, r1
    482c:	68 83       	st	Y, r22
    482e:	8f 5f       	subi	r24, 0xFF	; 255
    4830:	95 81       	ldd	r25, Z+5	; 0x05
    4832:	89 23       	and	r24, r25
    4834:	83 83       	std	Z+3, r24	; 0x03
    4836:	16 96       	adiw	r26, 0x06	; 6
    4838:	ed 91       	ld	r30, X+
    483a:	fc 91       	ld	r31, X
    483c:	17 97       	sbiw	r26, 0x07	; 7
    483e:	30 97       	sbiw	r30, 0x00	; 0
    4840:	11 f0       	breq	.+4      	; 0x4846 <__vector_25+0x7a>
    4842:	cd 01       	movw	r24, r26
    4844:	19 95       	eicall
    4846:	ff 91       	pop	r31
    4848:	ef 91       	pop	r30
    484a:	df 91       	pop	r29
    484c:	cf 91       	pop	r28
    484e:	bf 91       	pop	r27
    4850:	af 91       	pop	r26
    4852:	9f 91       	pop	r25
    4854:	8f 91       	pop	r24
    4856:	7f 91       	pop	r23
    4858:	6f 91       	pop	r22
    485a:	5f 91       	pop	r21
    485c:	4f 91       	pop	r20
    485e:	3f 91       	pop	r19
    4860:	2f 91       	pop	r18
    4862:	0f 90       	pop	r0
    4864:	0b be       	out	0x3b, r0	; 59
    4866:	0f 90       	pop	r0
    4868:	0f be       	out	0x3f, r0	; 63
    486a:	0f 90       	pop	r0
    486c:	1f 90       	pop	r1
    486e:	18 95       	reti

00004870 <__vector_26>:
    4870:	1f 92       	push	r1
    4872:	0f 92       	push	r0
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	0f 92       	push	r0
    4878:	11 24       	eor	r1, r1
    487a:	0b b6       	in	r0, 0x3b	; 59
    487c:	0f 92       	push	r0
    487e:	2f 93       	push	r18
    4880:	8f 93       	push	r24
    4882:	9f 93       	push	r25
    4884:	af 93       	push	r26
    4886:	bf 93       	push	r27
    4888:	ef 93       	push	r30
    488a:	ff 93       	push	r31
    488c:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <_ser_handle>
    4890:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <_ser_handle+0x1>
    4894:	30 97       	sbiw	r30, 0x00	; 0
    4896:	b9 f0       	breq	.+46     	; 0x48c6 <__vector_26+0x56>
    4898:	02 80       	ldd	r0, Z+2	; 0x02
    489a:	f3 81       	ldd	r31, Z+3	; 0x03
    489c:	e0 2d       	mov	r30, r0
    489e:	93 81       	ldd	r25, Z+3	; 0x03
    48a0:	82 81       	ldd	r24, Z+2	; 0x02
    48a2:	98 17       	cp	r25, r24
    48a4:	b1 f0       	breq	.+44     	; 0x48d2 <__vector_26+0x62>
    48a6:	92 81       	ldd	r25, Z+2	; 0x02
    48a8:	85 81       	ldd	r24, Z+5	; 0x05
    48aa:	28 2f       	mov	r18, r24
    48ac:	26 95       	lsr	r18
    48ae:	29 23       	and	r18, r25
    48b0:	a0 81       	ld	r26, Z
    48b2:	b1 81       	ldd	r27, Z+1	; 0x01
    48b4:	a2 0f       	add	r26, r18
    48b6:	b1 1d       	adc	r27, r1
    48b8:	2c 91       	ld	r18, X
    48ba:	9f 5f       	subi	r25, 0xFF	; 255
    48bc:	89 23       	and	r24, r25
    48be:	82 83       	std	Z+2, r24	; 0x02
    48c0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    48c4:	0b c0       	rjmp	.+22     	; 0x48dc <__vector_26+0x6c>
    48c6:	e1 ec       	ldi	r30, 0xC1	; 193
    48c8:	f0 e0       	ldi	r31, 0x00	; 0
    48ca:	80 81       	ld	r24, Z
    48cc:	8f 7d       	andi	r24, 0xDF	; 223
    48ce:	80 83       	st	Z, r24
    48d0:	05 c0       	rjmp	.+10     	; 0x48dc <__vector_26+0x6c>
    48d2:	e1 ec       	ldi	r30, 0xC1	; 193
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	80 81       	ld	r24, Z
    48d8:	8f 7d       	andi	r24, 0xDF	; 223
    48da:	80 83       	st	Z, r24
    48dc:	ff 91       	pop	r31
    48de:	ef 91       	pop	r30
    48e0:	bf 91       	pop	r27
    48e2:	af 91       	pop	r26
    48e4:	9f 91       	pop	r25
    48e6:	8f 91       	pop	r24
    48e8:	2f 91       	pop	r18
    48ea:	0f 90       	pop	r0
    48ec:	0b be       	out	0x3b, r0	; 59
    48ee:	0f 90       	pop	r0
    48f0:	0f be       	out	0x3f, r0	; 63
    48f2:	0f 90       	pop	r0
    48f4:	1f 90       	pop	r1
    48f6:	18 95       	reti

000048f8 <__vector_36>:
    48f8:	1f 92       	push	r1
    48fa:	0f 92       	push	r0
    48fc:	0f b6       	in	r0, 0x3f	; 63
    48fe:	0f 92       	push	r0
    4900:	11 24       	eor	r1, r1
    4902:	0b b6       	in	r0, 0x3b	; 59
    4904:	0f 92       	push	r0
    4906:	2f 93       	push	r18
    4908:	3f 93       	push	r19
    490a:	4f 93       	push	r20
    490c:	5f 93       	push	r21
    490e:	6f 93       	push	r22
    4910:	7f 93       	push	r23
    4912:	8f 93       	push	r24
    4914:	9f 93       	push	r25
    4916:	af 93       	push	r26
    4918:	bf 93       	push	r27
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	ef 93       	push	r30
    4920:	ff 93       	push	r31
    4922:	a0 91 b1 09 	lds	r26, 0x09B1	; 0x8009b1 <_ser_handle+0x2>
    4926:	b0 91 b2 09 	lds	r27, 0x09B2	; 0x8009b2 <_ser_handle+0x3>
    492a:	10 97       	sbiw	r26, 0x00	; 0
    492c:	11 f1       	breq	.+68     	; 0x4972 <__vector_36+0x7a>
    492e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4932:	14 96       	adiw	r26, 0x04	; 4
    4934:	ed 91       	ld	r30, X+
    4936:	fc 91       	ld	r31, X
    4938:	15 97       	sbiw	r26, 0x05	; 5
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	25 81       	ldd	r18, Z+5	; 0x05
    4940:	98 1b       	sub	r25, r24
    4942:	92 23       	and	r25, r18
    4944:	84 81       	ldd	r24, Z+4	; 0x04
    4946:	98 17       	cp	r25, r24
    4948:	61 f0       	breq	.+24     	; 0x4962 <__vector_36+0x6a>
    494a:	83 81       	ldd	r24, Z+3	; 0x03
    494c:	26 95       	lsr	r18
    494e:	28 23       	and	r18, r24
    4950:	c0 81       	ld	r28, Z
    4952:	d1 81       	ldd	r29, Z+1	; 0x01
    4954:	c2 0f       	add	r28, r18
    4956:	d1 1d       	adc	r29, r1
    4958:	68 83       	st	Y, r22
    495a:	8f 5f       	subi	r24, 0xFF	; 255
    495c:	95 81       	ldd	r25, Z+5	; 0x05
    495e:	89 23       	and	r24, r25
    4960:	83 83       	std	Z+3, r24	; 0x03
    4962:	16 96       	adiw	r26, 0x06	; 6
    4964:	ed 91       	ld	r30, X+
    4966:	fc 91       	ld	r31, X
    4968:	17 97       	sbiw	r26, 0x07	; 7
    496a:	30 97       	sbiw	r30, 0x00	; 0
    496c:	11 f0       	breq	.+4      	; 0x4972 <__vector_36+0x7a>
    496e:	cd 01       	movw	r24, r26
    4970:	19 95       	eicall
    4972:	ff 91       	pop	r31
    4974:	ef 91       	pop	r30
    4976:	df 91       	pop	r29
    4978:	cf 91       	pop	r28
    497a:	bf 91       	pop	r27
    497c:	af 91       	pop	r26
    497e:	9f 91       	pop	r25
    4980:	8f 91       	pop	r24
    4982:	7f 91       	pop	r23
    4984:	6f 91       	pop	r22
    4986:	5f 91       	pop	r21
    4988:	4f 91       	pop	r20
    498a:	3f 91       	pop	r19
    498c:	2f 91       	pop	r18
    498e:	0f 90       	pop	r0
    4990:	0b be       	out	0x3b, r0	; 59
    4992:	0f 90       	pop	r0
    4994:	0f be       	out	0x3f, r0	; 63
    4996:	0f 90       	pop	r0
    4998:	1f 90       	pop	r1
    499a:	18 95       	reti

0000499c <__vector_37>:
    499c:	1f 92       	push	r1
    499e:	0f 92       	push	r0
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	0f 92       	push	r0
    49a4:	11 24       	eor	r1, r1
    49a6:	0b b6       	in	r0, 0x3b	; 59
    49a8:	0f 92       	push	r0
    49aa:	2f 93       	push	r18
    49ac:	8f 93       	push	r24
    49ae:	9f 93       	push	r25
    49b0:	af 93       	push	r26
    49b2:	bf 93       	push	r27
    49b4:	ef 93       	push	r30
    49b6:	ff 93       	push	r31
    49b8:	e0 91 b1 09 	lds	r30, 0x09B1	; 0x8009b1 <_ser_handle+0x2>
    49bc:	f0 91 b2 09 	lds	r31, 0x09B2	; 0x8009b2 <_ser_handle+0x3>
    49c0:	30 97       	sbiw	r30, 0x00	; 0
    49c2:	b9 f0       	breq	.+46     	; 0x49f2 <__vector_37+0x56>
    49c4:	02 80       	ldd	r0, Z+2	; 0x02
    49c6:	f3 81       	ldd	r31, Z+3	; 0x03
    49c8:	e0 2d       	mov	r30, r0
    49ca:	93 81       	ldd	r25, Z+3	; 0x03
    49cc:	82 81       	ldd	r24, Z+2	; 0x02
    49ce:	98 17       	cp	r25, r24
    49d0:	b1 f0       	breq	.+44     	; 0x49fe <__vector_37+0x62>
    49d2:	92 81       	ldd	r25, Z+2	; 0x02
    49d4:	85 81       	ldd	r24, Z+5	; 0x05
    49d6:	28 2f       	mov	r18, r24
    49d8:	26 95       	lsr	r18
    49da:	29 23       	and	r18, r25
    49dc:	a0 81       	ld	r26, Z
    49de:	b1 81       	ldd	r27, Z+1	; 0x01
    49e0:	a2 0f       	add	r26, r18
    49e2:	b1 1d       	adc	r27, r1
    49e4:	2c 91       	ld	r18, X
    49e6:	9f 5f       	subi	r25, 0xFF	; 255
    49e8:	89 23       	and	r24, r25
    49ea:	82 83       	std	Z+2, r24	; 0x02
    49ec:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    49f0:	0b c0       	rjmp	.+22     	; 0x4a08 <__vector_37+0x6c>
    49f2:	e9 ec       	ldi	r30, 0xC9	; 201
    49f4:	f0 e0       	ldi	r31, 0x00	; 0
    49f6:	80 81       	ld	r24, Z
    49f8:	8f 7d       	andi	r24, 0xDF	; 223
    49fa:	80 83       	st	Z, r24
    49fc:	05 c0       	rjmp	.+10     	; 0x4a08 <__vector_37+0x6c>
    49fe:	e9 ec       	ldi	r30, 0xC9	; 201
    4a00:	f0 e0       	ldi	r31, 0x00	; 0
    4a02:	80 81       	ld	r24, Z
    4a04:	8f 7d       	andi	r24, 0xDF	; 223
    4a06:	80 83       	st	Z, r24
    4a08:	ff 91       	pop	r31
    4a0a:	ef 91       	pop	r30
    4a0c:	bf 91       	pop	r27
    4a0e:	af 91       	pop	r26
    4a10:	9f 91       	pop	r25
    4a12:	8f 91       	pop	r24
    4a14:	2f 91       	pop	r18
    4a16:	0f 90       	pop	r0
    4a18:	0b be       	out	0x3b, r0	; 59
    4a1a:	0f 90       	pop	r0
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	0f 90       	pop	r0
    4a20:	1f 90       	pop	r1
    4a22:	18 95       	reti

00004a24 <__vector_51>:
    4a24:	1f 92       	push	r1
    4a26:	0f 92       	push	r0
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	0f 92       	push	r0
    4a2c:	11 24       	eor	r1, r1
    4a2e:	0b b6       	in	r0, 0x3b	; 59
    4a30:	0f 92       	push	r0
    4a32:	2f 93       	push	r18
    4a34:	3f 93       	push	r19
    4a36:	4f 93       	push	r20
    4a38:	5f 93       	push	r21
    4a3a:	6f 93       	push	r22
    4a3c:	7f 93       	push	r23
    4a3e:	8f 93       	push	r24
    4a40:	9f 93       	push	r25
    4a42:	af 93       	push	r26
    4a44:	bf 93       	push	r27
    4a46:	cf 93       	push	r28
    4a48:	df 93       	push	r29
    4a4a:	ef 93       	push	r30
    4a4c:	ff 93       	push	r31
    4a4e:	a0 91 b3 09 	lds	r26, 0x09B3	; 0x8009b3 <_ser_handle+0x4>
    4a52:	b0 91 b4 09 	lds	r27, 0x09B4	; 0x8009b4 <_ser_handle+0x5>
    4a56:	10 97       	sbiw	r26, 0x00	; 0
    4a58:	11 f1       	breq	.+68     	; 0x4a9e <__vector_51+0x7a>
    4a5a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4a5e:	14 96       	adiw	r26, 0x04	; 4
    4a60:	ed 91       	ld	r30, X+
    4a62:	fc 91       	ld	r31, X
    4a64:	15 97       	sbiw	r26, 0x05	; 5
    4a66:	93 81       	ldd	r25, Z+3	; 0x03
    4a68:	82 81       	ldd	r24, Z+2	; 0x02
    4a6a:	25 81       	ldd	r18, Z+5	; 0x05
    4a6c:	98 1b       	sub	r25, r24
    4a6e:	92 23       	and	r25, r18
    4a70:	84 81       	ldd	r24, Z+4	; 0x04
    4a72:	98 17       	cp	r25, r24
    4a74:	61 f0       	breq	.+24     	; 0x4a8e <__vector_51+0x6a>
    4a76:	83 81       	ldd	r24, Z+3	; 0x03
    4a78:	26 95       	lsr	r18
    4a7a:	28 23       	and	r18, r24
    4a7c:	c0 81       	ld	r28, Z
    4a7e:	d1 81       	ldd	r29, Z+1	; 0x01
    4a80:	c2 0f       	add	r28, r18
    4a82:	d1 1d       	adc	r29, r1
    4a84:	68 83       	st	Y, r22
    4a86:	8f 5f       	subi	r24, 0xFF	; 255
    4a88:	95 81       	ldd	r25, Z+5	; 0x05
    4a8a:	89 23       	and	r24, r25
    4a8c:	83 83       	std	Z+3, r24	; 0x03
    4a8e:	16 96       	adiw	r26, 0x06	; 6
    4a90:	ed 91       	ld	r30, X+
    4a92:	fc 91       	ld	r31, X
    4a94:	17 97       	sbiw	r26, 0x07	; 7
    4a96:	30 97       	sbiw	r30, 0x00	; 0
    4a98:	11 f0       	breq	.+4      	; 0x4a9e <__vector_51+0x7a>
    4a9a:	cd 01       	movw	r24, r26
    4a9c:	19 95       	eicall
    4a9e:	ff 91       	pop	r31
    4aa0:	ef 91       	pop	r30
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	bf 91       	pop	r27
    4aa8:	af 91       	pop	r26
    4aaa:	9f 91       	pop	r25
    4aac:	8f 91       	pop	r24
    4aae:	7f 91       	pop	r23
    4ab0:	6f 91       	pop	r22
    4ab2:	5f 91       	pop	r21
    4ab4:	4f 91       	pop	r20
    4ab6:	3f 91       	pop	r19
    4ab8:	2f 91       	pop	r18
    4aba:	0f 90       	pop	r0
    4abc:	0b be       	out	0x3b, r0	; 59
    4abe:	0f 90       	pop	r0
    4ac0:	0f be       	out	0x3f, r0	; 63
    4ac2:	0f 90       	pop	r0
    4ac4:	1f 90       	pop	r1
    4ac6:	18 95       	reti

00004ac8 <__vector_52>:
    4ac8:	1f 92       	push	r1
    4aca:	0f 92       	push	r0
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	0f 92       	push	r0
    4ad0:	11 24       	eor	r1, r1
    4ad2:	0b b6       	in	r0, 0x3b	; 59
    4ad4:	0f 92       	push	r0
    4ad6:	2f 93       	push	r18
    4ad8:	8f 93       	push	r24
    4ada:	9f 93       	push	r25
    4adc:	af 93       	push	r26
    4ade:	bf 93       	push	r27
    4ae0:	ef 93       	push	r30
    4ae2:	ff 93       	push	r31
    4ae4:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <_ser_handle+0x4>
    4ae8:	f0 91 b4 09 	lds	r31, 0x09B4	; 0x8009b4 <_ser_handle+0x5>
    4aec:	30 97       	sbiw	r30, 0x00	; 0
    4aee:	b9 f0       	breq	.+46     	; 0x4b1e <__vector_52+0x56>
    4af0:	02 80       	ldd	r0, Z+2	; 0x02
    4af2:	f3 81       	ldd	r31, Z+3	; 0x03
    4af4:	e0 2d       	mov	r30, r0
    4af6:	93 81       	ldd	r25, Z+3	; 0x03
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	98 17       	cp	r25, r24
    4afc:	b1 f0       	breq	.+44     	; 0x4b2a <__vector_52+0x62>
    4afe:	92 81       	ldd	r25, Z+2	; 0x02
    4b00:	85 81       	ldd	r24, Z+5	; 0x05
    4b02:	28 2f       	mov	r18, r24
    4b04:	26 95       	lsr	r18
    4b06:	29 23       	and	r18, r25
    4b08:	a0 81       	ld	r26, Z
    4b0a:	b1 81       	ldd	r27, Z+1	; 0x01
    4b0c:	a2 0f       	add	r26, r18
    4b0e:	b1 1d       	adc	r27, r1
    4b10:	2c 91       	ld	r18, X
    4b12:	9f 5f       	subi	r25, 0xFF	; 255
    4b14:	89 23       	and	r24, r25
    4b16:	82 83       	std	Z+2, r24	; 0x02
    4b18:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4b1c:	0b c0       	rjmp	.+22     	; 0x4b34 <__vector_52+0x6c>
    4b1e:	e1 ed       	ldi	r30, 0xD1	; 209
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	80 81       	ld	r24, Z
    4b24:	8f 7d       	andi	r24, 0xDF	; 223
    4b26:	80 83       	st	Z, r24
    4b28:	05 c0       	rjmp	.+10     	; 0x4b34 <__vector_52+0x6c>
    4b2a:	e1 ed       	ldi	r30, 0xD1	; 209
    4b2c:	f0 e0       	ldi	r31, 0x00	; 0
    4b2e:	80 81       	ld	r24, Z
    4b30:	8f 7d       	andi	r24, 0xDF	; 223
    4b32:	80 83       	st	Z, r24
    4b34:	ff 91       	pop	r31
    4b36:	ef 91       	pop	r30
    4b38:	bf 91       	pop	r27
    4b3a:	af 91       	pop	r26
    4b3c:	9f 91       	pop	r25
    4b3e:	8f 91       	pop	r24
    4b40:	2f 91       	pop	r18
    4b42:	0f 90       	pop	r0
    4b44:	0b be       	out	0x3b, r0	; 59
    4b46:	0f 90       	pop	r0
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	0f 90       	pop	r0
    4b4c:	1f 90       	pop	r1
    4b4e:	18 95       	reti

00004b50 <__vector_54>:
    4b50:	1f 92       	push	r1
    4b52:	0f 92       	push	r0
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	0f 92       	push	r0
    4b58:	11 24       	eor	r1, r1
    4b5a:	0b b6       	in	r0, 0x3b	; 59
    4b5c:	0f 92       	push	r0
    4b5e:	2f 93       	push	r18
    4b60:	3f 93       	push	r19
    4b62:	4f 93       	push	r20
    4b64:	5f 93       	push	r21
    4b66:	6f 93       	push	r22
    4b68:	7f 93       	push	r23
    4b6a:	8f 93       	push	r24
    4b6c:	9f 93       	push	r25
    4b6e:	af 93       	push	r26
    4b70:	bf 93       	push	r27
    4b72:	cf 93       	push	r28
    4b74:	df 93       	push	r29
    4b76:	ef 93       	push	r30
    4b78:	ff 93       	push	r31
    4b7a:	a0 91 b5 09 	lds	r26, 0x09B5	; 0x8009b5 <_ser_handle+0x6>
    4b7e:	b0 91 b6 09 	lds	r27, 0x09B6	; 0x8009b6 <_ser_handle+0x7>
    4b82:	10 97       	sbiw	r26, 0x00	; 0
    4b84:	11 f1       	breq	.+68     	; 0x4bca <__vector_54+0x7a>
    4b86:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4b8a:	14 96       	adiw	r26, 0x04	; 4
    4b8c:	ed 91       	ld	r30, X+
    4b8e:	fc 91       	ld	r31, X
    4b90:	15 97       	sbiw	r26, 0x05	; 5
    4b92:	93 81       	ldd	r25, Z+3	; 0x03
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	25 81       	ldd	r18, Z+5	; 0x05
    4b98:	98 1b       	sub	r25, r24
    4b9a:	92 23       	and	r25, r18
    4b9c:	84 81       	ldd	r24, Z+4	; 0x04
    4b9e:	98 17       	cp	r25, r24
    4ba0:	61 f0       	breq	.+24     	; 0x4bba <__vector_54+0x6a>
    4ba2:	83 81       	ldd	r24, Z+3	; 0x03
    4ba4:	26 95       	lsr	r18
    4ba6:	28 23       	and	r18, r24
    4ba8:	c0 81       	ld	r28, Z
    4baa:	d1 81       	ldd	r29, Z+1	; 0x01
    4bac:	c2 0f       	add	r28, r18
    4bae:	d1 1d       	adc	r29, r1
    4bb0:	68 83       	st	Y, r22
    4bb2:	8f 5f       	subi	r24, 0xFF	; 255
    4bb4:	95 81       	ldd	r25, Z+5	; 0x05
    4bb6:	89 23       	and	r24, r25
    4bb8:	83 83       	std	Z+3, r24	; 0x03
    4bba:	16 96       	adiw	r26, 0x06	; 6
    4bbc:	ed 91       	ld	r30, X+
    4bbe:	fc 91       	ld	r31, X
    4bc0:	17 97       	sbiw	r26, 0x07	; 7
    4bc2:	30 97       	sbiw	r30, 0x00	; 0
    4bc4:	11 f0       	breq	.+4      	; 0x4bca <__vector_54+0x7a>
    4bc6:	cd 01       	movw	r24, r26
    4bc8:	19 95       	eicall
    4bca:	ff 91       	pop	r31
    4bcc:	ef 91       	pop	r30
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	bf 91       	pop	r27
    4bd4:	af 91       	pop	r26
    4bd6:	9f 91       	pop	r25
    4bd8:	8f 91       	pop	r24
    4bda:	7f 91       	pop	r23
    4bdc:	6f 91       	pop	r22
    4bde:	5f 91       	pop	r21
    4be0:	4f 91       	pop	r20
    4be2:	3f 91       	pop	r19
    4be4:	2f 91       	pop	r18
    4be6:	0f 90       	pop	r0
    4be8:	0b be       	out	0x3b, r0	; 59
    4bea:	0f 90       	pop	r0
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	0f 90       	pop	r0
    4bf0:	1f 90       	pop	r1
    4bf2:	18 95       	reti

00004bf4 <__vector_55>:
    4bf4:	1f 92       	push	r1
    4bf6:	0f 92       	push	r0
    4bf8:	0f b6       	in	r0, 0x3f	; 63
    4bfa:	0f 92       	push	r0
    4bfc:	11 24       	eor	r1, r1
    4bfe:	0b b6       	in	r0, 0x3b	; 59
    4c00:	0f 92       	push	r0
    4c02:	2f 93       	push	r18
    4c04:	8f 93       	push	r24
    4c06:	9f 93       	push	r25
    4c08:	af 93       	push	r26
    4c0a:	bf 93       	push	r27
    4c0c:	ef 93       	push	r30
    4c0e:	ff 93       	push	r31
    4c10:	e0 91 b5 09 	lds	r30, 0x09B5	; 0x8009b5 <_ser_handle+0x6>
    4c14:	f0 91 b6 09 	lds	r31, 0x09B6	; 0x8009b6 <_ser_handle+0x7>
    4c18:	30 97       	sbiw	r30, 0x00	; 0
    4c1a:	b9 f0       	breq	.+46     	; 0x4c4a <__vector_55+0x56>
    4c1c:	02 80       	ldd	r0, Z+2	; 0x02
    4c1e:	f3 81       	ldd	r31, Z+3	; 0x03
    4c20:	e0 2d       	mov	r30, r0
    4c22:	93 81       	ldd	r25, Z+3	; 0x03
    4c24:	82 81       	ldd	r24, Z+2	; 0x02
    4c26:	98 17       	cp	r25, r24
    4c28:	b1 f0       	breq	.+44     	; 0x4c56 <__vector_55+0x62>
    4c2a:	92 81       	ldd	r25, Z+2	; 0x02
    4c2c:	85 81       	ldd	r24, Z+5	; 0x05
    4c2e:	28 2f       	mov	r18, r24
    4c30:	26 95       	lsr	r18
    4c32:	29 23       	and	r18, r25
    4c34:	a0 81       	ld	r26, Z
    4c36:	b1 81       	ldd	r27, Z+1	; 0x01
    4c38:	a2 0f       	add	r26, r18
    4c3a:	b1 1d       	adc	r27, r1
    4c3c:	2c 91       	ld	r18, X
    4c3e:	9f 5f       	subi	r25, 0xFF	; 255
    4c40:	89 23       	and	r24, r25
    4c42:	82 83       	std	Z+2, r24	; 0x02
    4c44:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4c48:	0b c0       	rjmp	.+22     	; 0x4c60 <__vector_55+0x6c>
    4c4a:	e1 e3       	ldi	r30, 0x31	; 49
    4c4c:	f1 e0       	ldi	r31, 0x01	; 1
    4c4e:	80 81       	ld	r24, Z
    4c50:	8f 7d       	andi	r24, 0xDF	; 223
    4c52:	80 83       	st	Z, r24
    4c54:	05 c0       	rjmp	.+10     	; 0x4c60 <__vector_55+0x6c>
    4c56:	e1 e3       	ldi	r30, 0x31	; 49
    4c58:	f1 e0       	ldi	r31, 0x01	; 1
    4c5a:	80 81       	ld	r24, Z
    4c5c:	8f 7d       	andi	r24, 0xDF	; 223
    4c5e:	80 83       	st	Z, r24
    4c60:	ff 91       	pop	r31
    4c62:	ef 91       	pop	r30
    4c64:	bf 91       	pop	r27
    4c66:	af 91       	pop	r26
    4c68:	9f 91       	pop	r25
    4c6a:	8f 91       	pop	r24
    4c6c:	2f 91       	pop	r18
    4c6e:	0f 90       	pop	r0
    4c70:	0b be       	out	0x3b, r0	; 59
    4c72:	0f 90       	pop	r0
    4c74:	0f be       	out	0x3f, r0	; 63
    4c76:	0f 90       	pop	r0
    4c78:	1f 90       	pop	r1
    4c7a:	18 95       	reti

00004c7c <usart_getchar>:
    4c7c:	cf 93       	push	r28
    4c7e:	df 93       	push	r29
    4c80:	1f 92       	push	r1
    4c82:	cd b7       	in	r28, 0x3d	; 61
    4c84:	de b7       	in	r29, 0x3e	; 62
    4c86:	be 01       	movw	r22, r28
    4c88:	6f 5f       	subi	r22, 0xFF	; 255
    4c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c8c:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_com_serial_instance>
    4c90:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <_com_serial_instance+0x1>
    4c94:	7f dd       	rcall	.-1282   	; 0x4794 <serial_get_byte>
    4c96:	81 11       	cpse	r24, r1
    4c98:	f6 cf       	rjmp	.-20     	; 0x4c86 <usart_getchar+0xa>
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	0f 90       	pop	r0
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	08 95       	ret

00004ca6 <usart_putchar>:
    4ca6:	68 2f       	mov	r22, r24
    4ca8:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_com_serial_instance>
    4cac:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <_com_serial_instance+0x1>
    4cb0:	fc dc       	rcall	.-1544   	; 0x46aa <serial_send_byte>
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	08 95       	ret

00004cb8 <stdioCreate>:
    4cb8:	8f 92       	push	r8
    4cba:	9f 92       	push	r9
    4cbc:	af 92       	push	r10
    4cbe:	cf 92       	push	r12
    4cc0:	ef 92       	push	r14
    4cc2:	0f 93       	push	r16
    4cc4:	81 2c       	mov	r8, r1
    4cc6:	91 2c       	mov	r9, r1
    4cc8:	68 94       	set
    4cca:	aa 24       	eor	r10, r10
    4ccc:	a7 f8       	bld	r10, 7
    4cce:	68 94       	set
    4cd0:	cc 24       	eor	r12, r12
    4cd2:	c7 f8       	bld	r12, 7
    4cd4:	e1 2c       	mov	r14, r1
    4cd6:	00 e0       	ldi	r16, 0x00	; 0
    4cd8:	23 e0       	ldi	r18, 0x03	; 3
    4cda:	40 e0       	ldi	r20, 0x00	; 0
    4cdc:	51 ee       	ldi	r21, 0xE1	; 225
    4cde:	60 e0       	ldi	r22, 0x00	; 0
    4ce0:	70 e0       	ldi	r23, 0x00	; 0
    4ce2:	4b dc       	rcall	.-1898   	; 0x457a <serial_new_instance>
    4ce4:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <_com_serial_instance+0x1>
    4ce8:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_com_serial_instance>
    4cec:	ed ee       	ldi	r30, 0xED	; 237
    4cee:	f9 e0       	ldi	r31, 0x09	; 9
    4cf0:	84 e1       	ldi	r24, 0x14	; 20
    4cf2:	92 e0       	ldi	r25, 0x02	; 2
    4cf4:	91 83       	std	Z+1, r25	; 0x01
    4cf6:	80 83       	st	Z, r24
    4cf8:	93 83       	std	Z+3, r25	; 0x03
    4cfa:	82 83       	std	Z+2, r24	; 0x02
    4cfc:	0f 91       	pop	r16
    4cfe:	ef 90       	pop	r14
    4d00:	cf 90       	pop	r12
    4d02:	af 90       	pop	r10
    4d04:	9f 90       	pop	r9
    4d06:	8f 90       	pop	r8
    4d08:	08 95       	ret

00004d0a <_initTwiInterface>:
    4d0a:	80 91 c7 09 	lds	r24, 0x09C7	; 0x8009c7 <_twiIsInitiated>
    4d0e:	81 11       	cpse	r24, r1
    4d10:	0c c0       	rjmp	.+24     	; 0x4d2a <_initTwiInterface+0x20>
    4d12:	8c e0       	ldi	r24, 0x0C	; 12
    4d14:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d18:	8f ef       	ldi	r24, 0xFF	; 255
    4d1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d1e:	84 e0       	ldi	r24, 0x04	; 4
    4d20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <_twiIsInitiated>
    4d2a:	08 95       	ret

00004d2c <twiCreate>:
    4d2c:	af 92       	push	r10
    4d2e:	bf 92       	push	r11
    4d30:	cf 92       	push	r12
    4d32:	df 92       	push	r13
    4d34:	ef 92       	push	r14
    4d36:	ff 92       	push	r15
    4d38:	0f 93       	push	r16
    4d3a:	1f 93       	push	r17
    4d3c:	cf 93       	push	r28
    4d3e:	df 93       	push	r29
    4d40:	a8 2e       	mov	r10, r24
    4d42:	b6 2e       	mov	r11, r22
    4d44:	69 01       	movw	r12, r18
    4d46:	7a 01       	movw	r14, r20
    4d48:	84 e0       	ldi	r24, 0x04	; 4
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	f5 d2       	rcall	.+1514   	; 0x5338 <malloc>
    4d4e:	ec 01       	movw	r28, r24
    4d50:	89 2b       	or	r24, r25
    4d52:	61 f1       	breq	.+88     	; 0x4dac <twiCreate+0x80>
    4d54:	a8 82       	st	Y, r10
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	b8 12       	cpse	r11, r24
    4d5a:	12 c0       	rjmp	.+36     	; 0x4d80 <twiCreate+0x54>
    4d5c:	c7 01       	movw	r24, r14
    4d5e:	b6 01       	movw	r22, r12
    4d60:	20 ea       	ldi	r18, 0xA0	; 160
    4d62:	36 e8       	ldi	r19, 0x86	; 134
    4d64:	41 e0       	ldi	r20, 0x01	; 1
    4d66:	50 e0       	ldi	r21, 0x00	; 0
    4d68:	a3 d2       	rcall	.+1350   	; 0x52b0 <__udivmodsi4>
    4d6a:	da 01       	movw	r26, r20
    4d6c:	c9 01       	movw	r24, r18
    4d6e:	40 97       	sbiw	r24, 0x10	; 16
    4d70:	a1 09       	sbc	r26, r1
    4d72:	b1 09       	sbc	r27, r1
    4d74:	b6 95       	lsr	r27
    4d76:	a7 95       	ror	r26
    4d78:	97 95       	ror	r25
    4d7a:	87 95       	ror	r24
    4d7c:	89 83       	std	Y+1, r24	; 0x01
    4d7e:	11 c0       	rjmp	.+34     	; 0x4da2 <twiCreate+0x76>
    4d80:	c7 01       	movw	r24, r14
    4d82:	b6 01       	movw	r22, r12
    4d84:	20 e8       	ldi	r18, 0x80	; 128
    4d86:	3a e1       	ldi	r19, 0x1A	; 26
    4d88:	46 e0       	ldi	r20, 0x06	; 6
    4d8a:	50 e0       	ldi	r21, 0x00	; 0
    4d8c:	91 d2       	rcall	.+1314   	; 0x52b0 <__udivmodsi4>
    4d8e:	da 01       	movw	r26, r20
    4d90:	c9 01       	movw	r24, r18
    4d92:	40 97       	sbiw	r24, 0x10	; 16
    4d94:	a1 09       	sbc	r26, r1
    4d96:	b1 09       	sbc	r27, r1
    4d98:	b6 95       	lsr	r27
    4d9a:	a7 95       	ror	r26
    4d9c:	97 95       	ror	r25
    4d9e:	87 95       	ror	r24
    4da0:	89 83       	std	Y+1, r24	; 0x01
    4da2:	1b 83       	std	Y+3, r17	; 0x03
    4da4:	0a 83       	std	Y+2, r16	; 0x02
    4da6:	8c 2f       	mov	r24, r28
    4da8:	9d 2f       	mov	r25, r29
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <twiCreate+0x84>
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	1f 91       	pop	r17
    4db6:	0f 91       	pop	r16
    4db8:	ff 90       	pop	r15
    4dba:	ef 90       	pop	r14
    4dbc:	df 90       	pop	r13
    4dbe:	cf 90       	pop	r12
    4dc0:	bf 90       	pop	r11
    4dc2:	af 90       	pop	r10
    4dc4:	08 95       	ret

00004dc6 <twiIsBusy>:
    4dc6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dca:	81 70       	andi	r24, 0x01	; 1
    4dcc:	08 95       	ret

00004dce <twiTransmit>:
    4dce:	ff 92       	push	r15
    4dd0:	0f 93       	push	r16
    4dd2:	1f 93       	push	r17
    4dd4:	cf 93       	push	r28
    4dd6:	df 93       	push	r29
    4dd8:	00 97       	sbiw	r24, 0x00	; 0
    4dda:	c9 f1       	breq	.+114    	; 0x4e4e <twiTransmit+0x80>
    4ddc:	4a 30       	cpi	r20, 0x0A	; 10
    4dde:	c8 f5       	brcc	.+114    	; 0x4e52 <twiTransmit+0x84>
    4de0:	f4 2e       	mov	r15, r20
    4de2:	8b 01       	movw	r16, r22
    4de4:	ec 01       	movw	r28, r24
    4de6:	ef df       	rcall	.-34     	; 0x4dc6 <twiIsBusy>
    4de8:	81 11       	cpse	r24, r1
    4dea:	35 c0       	rjmp	.+106    	; 0x4e56 <twiTransmit+0x88>
    4dec:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <_twiCurrentHandler>
    4df0:	90 91 bb 09 	lds	r25, 0x09BB	; 0x8009bb <_twiCurrentHandler+0x1>
    4df4:	c8 17       	cp	r28, r24
    4df6:	d9 07       	cpc	r29, r25
    4df8:	41 f0       	breq	.+16     	; 0x4e0a <twiTransmit+0x3c>
    4dfa:	87 df       	rcall	.-242    	; 0x4d0a <_initTwiInterface>
    4dfc:	89 81       	ldd	r24, Y+1	; 0x01
    4dfe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4e02:	d0 93 bb 09 	sts	0x09BB, r29	; 0x8009bb <_twiCurrentHandler+0x1>
    4e06:	c0 93 ba 09 	sts	0x09BA, r28	; 0x8009ba <_twiCurrentHandler>
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	8f 0d       	add	r24, r15
    4e0e:	80 93 bc 09 	sts	0x09BC, r24	; 0x8009bc <_twiMessageLen>
    4e12:	88 81       	ld	r24, Y
    4e14:	88 0f       	add	r24, r24
    4e16:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <_twiMessageBuffer>
    4e1a:	ff 20       	and	r15, r15
    4e1c:	81 f0       	breq	.+32     	; 0x4e3e <twiTransmit+0x70>
    4e1e:	f8 01       	movw	r30, r16
    4e20:	ae eb       	ldi	r26, 0xBE	; 190
    4e22:	b9 e0       	ldi	r27, 0x09	; 9
    4e24:	4f ef       	ldi	r20, 0xFF	; 255
    4e26:	4f 0d       	add	r20, r15
    4e28:	64 2f       	mov	r22, r20
    4e2a:	70 e0       	ldi	r23, 0x00	; 0
    4e2c:	6f 5f       	subi	r22, 0xFF	; 255
    4e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e30:	60 0f       	add	r22, r16
    4e32:	71 1f       	adc	r23, r17
    4e34:	81 91       	ld	r24, Z+
    4e36:	8d 93       	st	X+, r24
    4e38:	e6 17       	cp	r30, r22
    4e3a:	f7 07       	cpc	r31, r23
    4e3c:	d9 f7       	brne	.-10     	; 0x4e34 <twiTransmit+0x66>
    4e3e:	88 ef       	ldi	r24, 0xF8	; 248
    4e40:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4e44:	85 ea       	ldi	r24, 0xA5	; 165
    4e46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	05 c0       	rjmp	.+10     	; 0x4e58 <twiTransmit+0x8a>
    4e4e:	86 e0       	ldi	r24, 0x06	; 6
    4e50:	03 c0       	rjmp	.+6      	; 0x4e58 <twiTransmit+0x8a>
    4e52:	87 e0       	ldi	r24, 0x07	; 7
    4e54:	01 c0       	rjmp	.+2      	; 0x4e58 <twiTransmit+0x8a>
    4e56:	82 e0       	ldi	r24, 0x02	; 2
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	1f 91       	pop	r17
    4e5e:	0f 91       	pop	r16
    4e60:	ff 90       	pop	r15
    4e62:	08 95       	ret

00004e64 <twiReceive>:
    4e64:	1f 93       	push	r17
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	00 97       	sbiw	r24, 0x00	; 0
    4e6c:	29 f1       	breq	.+74     	; 0x4eb8 <twiReceive+0x54>
    4e6e:	6b 30       	cpi	r22, 0x0B	; 11
    4e70:	28 f5       	brcc	.+74     	; 0x4ebc <twiReceive+0x58>
    4e72:	16 2f       	mov	r17, r22
    4e74:	ec 01       	movw	r28, r24
    4e76:	a7 df       	rcall	.-178    	; 0x4dc6 <twiIsBusy>
    4e78:	81 11       	cpse	r24, r1
    4e7a:	22 c0       	rjmp	.+68     	; 0x4ec0 <twiReceive+0x5c>
    4e7c:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <_twiCurrentHandler>
    4e80:	90 91 bb 09 	lds	r25, 0x09BB	; 0x8009bb <_twiCurrentHandler+0x1>
    4e84:	c8 17       	cp	r28, r24
    4e86:	d9 07       	cpc	r29, r25
    4e88:	41 f0       	breq	.+16     	; 0x4e9a <twiReceive+0x36>
    4e8a:	3f df       	rcall	.-386    	; 0x4d0a <_initTwiInterface>
    4e8c:	89 81       	ldd	r24, Y+1	; 0x01
    4e8e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4e92:	d0 93 bb 09 	sts	0x09BB, r29	; 0x8009bb <_twiCurrentHandler+0x1>
    4e96:	c0 93 ba 09 	sts	0x09BA, r28	; 0x8009ba <_twiCurrentHandler>
    4e9a:	10 93 bc 09 	sts	0x09BC, r17	; 0x8009bc <_twiMessageLen>
    4e9e:	88 81       	ld	r24, Y
    4ea0:	88 0f       	add	r24, r24
    4ea2:	81 60       	ori	r24, 0x01	; 1
    4ea4:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <_twiMessageBuffer>
    4ea8:	88 ef       	ldi	r24, 0xF8	; 248
    4eaa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4eae:	85 ea       	ldi	r24, 0xA5	; 165
    4eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4eb4:	81 e0       	ldi	r24, 0x01	; 1
    4eb6:	05 c0       	rjmp	.+10     	; 0x4ec2 <twiReceive+0x5e>
    4eb8:	86 e0       	ldi	r24, 0x06	; 6
    4eba:	03 c0       	rjmp	.+6      	; 0x4ec2 <twiReceive+0x5e>
    4ebc:	87 e0       	ldi	r24, 0x07	; 7
    4ebe:	01 c0       	rjmp	.+2      	; 0x4ec2 <twiReceive+0x5e>
    4ec0:	82 e0       	ldi	r24, 0x02	; 2
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	08 95       	ret

00004eca <__vector_39>:
    4eca:	1f 92       	push	r1
    4ecc:	0f 92       	push	r0
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	0f 92       	push	r0
    4ed2:	11 24       	eor	r1, r1
    4ed4:	0b b6       	in	r0, 0x3b	; 59
    4ed6:	0f 92       	push	r0
    4ed8:	2f 93       	push	r18
    4eda:	3f 93       	push	r19
    4edc:	4f 93       	push	r20
    4ede:	5f 93       	push	r21
    4ee0:	6f 93       	push	r22
    4ee2:	7f 93       	push	r23
    4ee4:	8f 93       	push	r24
    4ee6:	9f 93       	push	r25
    4ee8:	af 93       	push	r26
    4eea:	bf 93       	push	r27
    4eec:	ef 93       	push	r30
    4eee:	ff 93       	push	r31
    4ef0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4ef4:	8e 2f       	mov	r24, r30
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	fc 01       	movw	r30, r24
    4efa:	38 97       	sbiw	r30, 0x08	; 8
    4efc:	e1 35       	cpi	r30, 0x51	; 81
    4efe:	f1 05       	cpc	r31, r1
    4f00:	08 f0       	brcs	.+2      	; 0x4f04 <__vector_39+0x3a>
    4f02:	75 c0       	rjmp	.+234    	; 0x4fee <__vector_39+0x124>
    4f04:	88 27       	eor	r24, r24
    4f06:	e4 58       	subi	r30, 0x84	; 132
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f0c:	f3 c1       	rjmp	.+998    	; 0x52f4 <__tablejump2__>
    4f0e:	10 92 b9 09 	sts	0x09B9, r1	; 0x8009b9 <_index.1885>
    4f12:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <_index.1885>
    4f16:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiMessageLen>
    4f1a:	e8 17       	cp	r30, r24
    4f1c:	70 f4       	brcc	.+28     	; 0x4f3a <__vector_39+0x70>
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
    4f20:	8e 0f       	add	r24, r30
    4f22:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_index.1885>
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	e3 54       	subi	r30, 0x43	; 67
    4f2a:	f6 4f       	sbci	r31, 0xF6	; 246
    4f2c:	80 81       	ld	r24, Z
    4f2e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f32:	85 e8       	ldi	r24, 0x85	; 133
    4f34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f38:	72 c0       	rjmp	.+228    	; 0x501e <__vector_39+0x154>
    4f3a:	84 e9       	ldi	r24, 0x94	; 148
    4f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f40:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <_twiCurrentHandler>
    4f44:	90 91 bb 09 	lds	r25, 0x09BB	; 0x8009bb <_twiCurrentHandler+0x1>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	12 96       	adiw	r26, 0x02	; 2
    4f4c:	ed 91       	ld	r30, X+
    4f4e:	fc 91       	ld	r31, X
    4f50:	13 97       	sbiw	r26, 0x03	; 3
    4f52:	30 97       	sbiw	r30, 0x00	; 0
    4f54:	09 f4       	brne	.+2      	; 0x4f58 <__vector_39+0x8e>
    4f56:	63 c0       	rjmp	.+198    	; 0x501e <__vector_39+0x154>
    4f58:	20 e0       	ldi	r18, 0x00	; 0
    4f5a:	40 e0       	ldi	r20, 0x00	; 0
    4f5c:	50 e0       	ldi	r21, 0x00	; 0
    4f5e:	64 e0       	ldi	r22, 0x04	; 4
    4f60:	19 95       	eicall
    4f62:	5d c0       	rjmp	.+186    	; 0x501e <__vector_39+0x154>
    4f64:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <_index.1885>
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	8e 0f       	add	r24, r30
    4f6c:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_index.1885>
    4f70:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f74:	f0 e0       	ldi	r31, 0x00	; 0
    4f76:	e3 54       	subi	r30, 0x43	; 67
    4f78:	f6 4f       	sbci	r31, 0xF6	; 246
    4f7a:	80 83       	st	Z, r24
    4f7c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4f80:	80 34       	cpi	r24, 0x40	; 64
    4f82:	11 f4       	brne	.+4      	; 0x4f88 <__vector_39+0xbe>
    4f84:	10 92 b9 09 	sts	0x09B9, r1	; 0x8009b9 <_index.1885>
    4f88:	20 91 b9 09 	lds	r18, 0x09B9	; 0x8009b9 <_index.1885>
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiMessageLen>
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	01 97       	sbiw	r24, 0x01	; 1
    4f96:	28 17       	cp	r18, r24
    4f98:	39 07       	cpc	r19, r25
    4f9a:	24 f4       	brge	.+8      	; 0x4fa4 <__vector_39+0xda>
    4f9c:	85 ec       	ldi	r24, 0xC5	; 197
    4f9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fa2:	3d c0       	rjmp	.+122    	; 0x501e <__vector_39+0x154>
    4fa4:	85 e8       	ldi	r24, 0x85	; 133
    4fa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4faa:	39 c0       	rjmp	.+114    	; 0x501e <__vector_39+0x154>
    4fac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fb0:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <_index.1885>
    4fb4:	f0 e0       	ldi	r31, 0x00	; 0
    4fb6:	e3 54       	subi	r30, 0x43	; 67
    4fb8:	f6 4f       	sbci	r31, 0xF6	; 246
    4fba:	80 83       	st	Z, r24
    4fbc:	84 e9       	ldi	r24, 0x94	; 148
    4fbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fc2:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <_twiCurrentHandler>
    4fc6:	90 91 bb 09 	lds	r25, 0x09BB	; 0x8009bb <_twiCurrentHandler+0x1>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	12 96       	adiw	r26, 0x02	; 2
    4fce:	ed 91       	ld	r30, X+
    4fd0:	fc 91       	ld	r31, X
    4fd2:	13 97       	sbiw	r26, 0x03	; 3
    4fd4:	30 97       	sbiw	r30, 0x00	; 0
    4fd6:	19 f1       	breq	.+70     	; 0x501e <__vector_39+0x154>
    4fd8:	20 91 bc 09 	lds	r18, 0x09BC	; 0x8009bc <_twiMessageLen>
    4fdc:	4d eb       	ldi	r20, 0xBD	; 189
    4fde:	59 e0       	ldi	r21, 0x09	; 9
    4fe0:	65 e0       	ldi	r22, 0x05	; 5
    4fe2:	19 95       	eicall
    4fe4:	1c c0       	rjmp	.+56     	; 0x501e <__vector_39+0x154>
    4fe6:	85 ea       	ldi	r24, 0xA5	; 165
    4fe8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fec:	18 c0       	rjmp	.+48     	; 0x501e <__vector_39+0x154>
    4fee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4ff2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4ff6:	84 e0       	ldi	r24, 0x04	; 4
    4ff8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ffc:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <_twiCurrentHandler>
    5000:	90 91 bb 09 	lds	r25, 0x09BB	; 0x8009bb <_twiCurrentHandler+0x1>
    5004:	dc 01       	movw	r26, r24
    5006:	12 96       	adiw	r26, 0x02	; 2
    5008:	ed 91       	ld	r30, X+
    500a:	fc 91       	ld	r31, X
    500c:	13 97       	sbiw	r26, 0x03	; 3
    500e:	30 97       	sbiw	r30, 0x00	; 0
    5010:	31 f0       	breq	.+12     	; 0x501e <__vector_39+0x154>
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    501c:	19 95       	eicall
    501e:	ff 91       	pop	r31
    5020:	ef 91       	pop	r30
    5022:	bf 91       	pop	r27
    5024:	af 91       	pop	r26
    5026:	9f 91       	pop	r25
    5028:	8f 91       	pop	r24
    502a:	7f 91       	pop	r23
    502c:	6f 91       	pop	r22
    502e:	5f 91       	pop	r21
    5030:	4f 91       	pop	r20
    5032:	3f 91       	pop	r19
    5034:	2f 91       	pop	r18
    5036:	0f 90       	pop	r0
    5038:	0b be       	out	0x3b, r0	; 59
    503a:	0f 90       	pop	r0
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	0f 90       	pop	r0
    5040:	1f 90       	pop	r1
    5042:	18 95       	reti

00005044 <fifo_init>:
    5044:	fc 01       	movw	r30, r24
    5046:	41 11       	cpse	r20, r1
    5048:	01 c0       	rjmp	.+2      	; 0x504c <fifo_init+0x8>
    504a:	97 d2       	rcall	.+1326   	; 0x557a <abort>
    504c:	84 2f       	mov	r24, r20
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	9c 01       	movw	r18, r24
    5052:	21 50       	subi	r18, 0x01	; 1
    5054:	31 09       	sbc	r19, r1
    5056:	82 23       	and	r24, r18
    5058:	93 23       	and	r25, r19
    505a:	89 2b       	or	r24, r25
    505c:	09 f0       	breq	.+2      	; 0x5060 <fifo_init+0x1c>
    505e:	8d d2       	rcall	.+1306   	; 0x557a <abort>
    5060:	41 38       	cpi	r20, 0x81	; 129
    5062:	08 f0       	brcs	.+2      	; 0x5066 <fifo_init+0x22>
    5064:	8a d2       	rcall	.+1300   	; 0x557a <abort>
    5066:	12 82       	std	Z+2, r1	; 0x02
    5068:	13 82       	std	Z+3, r1	; 0x03
    506a:	44 83       	std	Z+4, r20	; 0x04
    506c:	44 0f       	add	r20, r20
    506e:	41 50       	subi	r20, 0x01	; 1
    5070:	45 83       	std	Z+5, r20	; 0x05
    5072:	71 83       	std	Z+1, r23	; 0x01
    5074:	60 83       	st	Z, r22
    5076:	80 e0       	ldi	r24, 0x00	; 0
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	08 95       	ret

0000507c <__subsf3>:
    507c:	50 58       	subi	r21, 0x80	; 128

0000507e <__addsf3>:
    507e:	bb 27       	eor	r27, r27
    5080:	aa 27       	eor	r26, r26
    5082:	13 d0       	rcall	.+38     	; 0x50aa <__addsf3x>
    5084:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__fp_round>
    5088:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__fp_pscA>
    508c:	38 f0       	brcs	.+14     	; 0x509c <__addsf3+0x1e>
    508e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__fp_pscB>
    5092:	20 f0       	brcs	.+8      	; 0x509c <__addsf3+0x1e>
    5094:	39 f4       	brne	.+14     	; 0x50a4 <__addsf3+0x26>
    5096:	9f 3f       	cpi	r25, 0xFF	; 255
    5098:	19 f4       	brne	.+6      	; 0x50a0 <__addsf3+0x22>
    509a:	26 f4       	brtc	.+8      	; 0x50a4 <__addsf3+0x26>
    509c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__fp_nan>
    50a0:	0e f4       	brtc	.+2      	; 0x50a4 <__addsf3+0x26>
    50a2:	e0 95       	com	r30
    50a4:	e7 fb       	bst	r30, 7
    50a6:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__fp_inf>

000050aa <__addsf3x>:
    50aa:	e9 2f       	mov	r30, r25
    50ac:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__fp_split3>
    50b0:	58 f3       	brcs	.-42     	; 0x5088 <__addsf3+0xa>
    50b2:	ba 17       	cp	r27, r26
    50b4:	62 07       	cpc	r22, r18
    50b6:	73 07       	cpc	r23, r19
    50b8:	84 07       	cpc	r24, r20
    50ba:	95 07       	cpc	r25, r21
    50bc:	20 f0       	brcs	.+8      	; 0x50c6 <__addsf3x+0x1c>
    50be:	79 f4       	brne	.+30     	; 0x50de <__addsf3x+0x34>
    50c0:	a6 f5       	brtc	.+104    	; 0x512a <__addsf3x+0x80>
    50c2:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__fp_zero>
    50c6:	0e f4       	brtc	.+2      	; 0x50ca <__addsf3x+0x20>
    50c8:	e0 95       	com	r30
    50ca:	0b 2e       	mov	r0, r27
    50cc:	ba 2f       	mov	r27, r26
    50ce:	a0 2d       	mov	r26, r0
    50d0:	0b 01       	movw	r0, r22
    50d2:	b9 01       	movw	r22, r18
    50d4:	90 01       	movw	r18, r0
    50d6:	0c 01       	movw	r0, r24
    50d8:	ca 01       	movw	r24, r20
    50da:	a0 01       	movw	r20, r0
    50dc:	11 24       	eor	r1, r1
    50de:	ff 27       	eor	r31, r31
    50e0:	59 1b       	sub	r21, r25
    50e2:	99 f0       	breq	.+38     	; 0x510a <__addsf3x+0x60>
    50e4:	59 3f       	cpi	r21, 0xF9	; 249
    50e6:	50 f4       	brcc	.+20     	; 0x50fc <__addsf3x+0x52>
    50e8:	50 3e       	cpi	r21, 0xE0	; 224
    50ea:	68 f1       	brcs	.+90     	; 0x5146 <__addsf3x+0x9c>
    50ec:	1a 16       	cp	r1, r26
    50ee:	f0 40       	sbci	r31, 0x00	; 0
    50f0:	a2 2f       	mov	r26, r18
    50f2:	23 2f       	mov	r18, r19
    50f4:	34 2f       	mov	r19, r20
    50f6:	44 27       	eor	r20, r20
    50f8:	58 5f       	subi	r21, 0xF8	; 248
    50fa:	f3 cf       	rjmp	.-26     	; 0x50e2 <__addsf3x+0x38>
    50fc:	46 95       	lsr	r20
    50fe:	37 95       	ror	r19
    5100:	27 95       	ror	r18
    5102:	a7 95       	ror	r26
    5104:	f0 40       	sbci	r31, 0x00	; 0
    5106:	53 95       	inc	r21
    5108:	c9 f7       	brne	.-14     	; 0x50fc <__addsf3x+0x52>
    510a:	7e f4       	brtc	.+30     	; 0x512a <__addsf3x+0x80>
    510c:	1f 16       	cp	r1, r31
    510e:	ba 0b       	sbc	r27, r26
    5110:	62 0b       	sbc	r22, r18
    5112:	73 0b       	sbc	r23, r19
    5114:	84 0b       	sbc	r24, r20
    5116:	ba f0       	brmi	.+46     	; 0x5146 <__addsf3x+0x9c>
    5118:	91 50       	subi	r25, 0x01	; 1
    511a:	a1 f0       	breq	.+40     	; 0x5144 <__addsf3x+0x9a>
    511c:	ff 0f       	add	r31, r31
    511e:	bb 1f       	adc	r27, r27
    5120:	66 1f       	adc	r22, r22
    5122:	77 1f       	adc	r23, r23
    5124:	88 1f       	adc	r24, r24
    5126:	c2 f7       	brpl	.-16     	; 0x5118 <__addsf3x+0x6e>
    5128:	0e c0       	rjmp	.+28     	; 0x5146 <__addsf3x+0x9c>
    512a:	ba 0f       	add	r27, r26
    512c:	62 1f       	adc	r22, r18
    512e:	73 1f       	adc	r23, r19
    5130:	84 1f       	adc	r24, r20
    5132:	48 f4       	brcc	.+18     	; 0x5146 <__addsf3x+0x9c>
    5134:	87 95       	ror	r24
    5136:	77 95       	ror	r23
    5138:	67 95       	ror	r22
    513a:	b7 95       	ror	r27
    513c:	f7 95       	ror	r31
    513e:	9e 3f       	cpi	r25, 0xFE	; 254
    5140:	08 f0       	brcs	.+2      	; 0x5144 <__addsf3x+0x9a>
    5142:	b0 cf       	rjmp	.-160    	; 0x50a4 <__addsf3+0x26>
    5144:	93 95       	inc	r25
    5146:	88 0f       	add	r24, r24
    5148:	08 f0       	brcs	.+2      	; 0x514c <__addsf3x+0xa2>
    514a:	99 27       	eor	r25, r25
    514c:	ee 0f       	add	r30, r30
    514e:	97 95       	ror	r25
    5150:	87 95       	ror	r24
    5152:	08 95       	ret

00005154 <__divsf3>:
    5154:	12 d0       	rcall	.+36     	; 0x517a <__divsf3x>
    5156:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__fp_round>
    515a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__fp_pscB>
    515e:	58 f0       	brcs	.+22     	; 0x5176 <__divsf3+0x22>
    5160:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__fp_pscA>
    5164:	40 f0       	brcs	.+16     	; 0x5176 <__divsf3+0x22>
    5166:	29 f4       	brne	.+10     	; 0x5172 <__divsf3+0x1e>
    5168:	5f 3f       	cpi	r21, 0xFF	; 255
    516a:	29 f0       	breq	.+10     	; 0x5176 <__divsf3+0x22>
    516c:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__fp_inf>
    5170:	51 11       	cpse	r21, r1
    5172:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__fp_szero>
    5176:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__fp_nan>

0000517a <__divsf3x>:
    517a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__fp_split3>
    517e:	68 f3       	brcs	.-38     	; 0x515a <__divsf3+0x6>

00005180 <__divsf3_pse>:
    5180:	99 23       	and	r25, r25
    5182:	b1 f3       	breq	.-20     	; 0x5170 <__divsf3+0x1c>
    5184:	55 23       	and	r21, r21
    5186:	91 f3       	breq	.-28     	; 0x516c <__divsf3+0x18>
    5188:	95 1b       	sub	r25, r21
    518a:	55 0b       	sbc	r21, r21
    518c:	bb 27       	eor	r27, r27
    518e:	aa 27       	eor	r26, r26
    5190:	62 17       	cp	r22, r18
    5192:	73 07       	cpc	r23, r19
    5194:	84 07       	cpc	r24, r20
    5196:	38 f0       	brcs	.+14     	; 0x51a6 <__divsf3_pse+0x26>
    5198:	9f 5f       	subi	r25, 0xFF	; 255
    519a:	5f 4f       	sbci	r21, 0xFF	; 255
    519c:	22 0f       	add	r18, r18
    519e:	33 1f       	adc	r19, r19
    51a0:	44 1f       	adc	r20, r20
    51a2:	aa 1f       	adc	r26, r26
    51a4:	a9 f3       	breq	.-22     	; 0x5190 <__divsf3_pse+0x10>
    51a6:	35 d0       	rcall	.+106    	; 0x5212 <__divsf3_pse+0x92>
    51a8:	0e 2e       	mov	r0, r30
    51aa:	3a f0       	brmi	.+14     	; 0x51ba <__divsf3_pse+0x3a>
    51ac:	e0 e8       	ldi	r30, 0x80	; 128
    51ae:	32 d0       	rcall	.+100    	; 0x5214 <__divsf3_pse+0x94>
    51b0:	91 50       	subi	r25, 0x01	; 1
    51b2:	50 40       	sbci	r21, 0x00	; 0
    51b4:	e6 95       	lsr	r30
    51b6:	00 1c       	adc	r0, r0
    51b8:	ca f7       	brpl	.-14     	; 0x51ac <__divsf3_pse+0x2c>
    51ba:	2b d0       	rcall	.+86     	; 0x5212 <__divsf3_pse+0x92>
    51bc:	fe 2f       	mov	r31, r30
    51be:	29 d0       	rcall	.+82     	; 0x5212 <__divsf3_pse+0x92>
    51c0:	66 0f       	add	r22, r22
    51c2:	77 1f       	adc	r23, r23
    51c4:	88 1f       	adc	r24, r24
    51c6:	bb 1f       	adc	r27, r27
    51c8:	26 17       	cp	r18, r22
    51ca:	37 07       	cpc	r19, r23
    51cc:	48 07       	cpc	r20, r24
    51ce:	ab 07       	cpc	r26, r27
    51d0:	b0 e8       	ldi	r27, 0x80	; 128
    51d2:	09 f0       	breq	.+2      	; 0x51d6 <__divsf3_pse+0x56>
    51d4:	bb 0b       	sbc	r27, r27
    51d6:	80 2d       	mov	r24, r0
    51d8:	bf 01       	movw	r22, r30
    51da:	ff 27       	eor	r31, r31
    51dc:	93 58       	subi	r25, 0x83	; 131
    51de:	5f 4f       	sbci	r21, 0xFF	; 255
    51e0:	3a f0       	brmi	.+14     	; 0x51f0 <__divsf3_pse+0x70>
    51e2:	9e 3f       	cpi	r25, 0xFE	; 254
    51e4:	51 05       	cpc	r21, r1
    51e6:	78 f0       	brcs	.+30     	; 0x5206 <__divsf3_pse+0x86>
    51e8:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__fp_inf>
    51ec:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__fp_szero>
    51f0:	5f 3f       	cpi	r21, 0xFF	; 255
    51f2:	e4 f3       	brlt	.-8      	; 0x51ec <__divsf3_pse+0x6c>
    51f4:	98 3e       	cpi	r25, 0xE8	; 232
    51f6:	d4 f3       	brlt	.-12     	; 0x51ec <__divsf3_pse+0x6c>
    51f8:	86 95       	lsr	r24
    51fa:	77 95       	ror	r23
    51fc:	67 95       	ror	r22
    51fe:	b7 95       	ror	r27
    5200:	f7 95       	ror	r31
    5202:	9f 5f       	subi	r25, 0xFF	; 255
    5204:	c9 f7       	brne	.-14     	; 0x51f8 <__divsf3_pse+0x78>
    5206:	88 0f       	add	r24, r24
    5208:	91 1d       	adc	r25, r1
    520a:	96 95       	lsr	r25
    520c:	87 95       	ror	r24
    520e:	97 f9       	bld	r25, 7
    5210:	08 95       	ret
    5212:	e1 e0       	ldi	r30, 0x01	; 1
    5214:	66 0f       	add	r22, r22
    5216:	77 1f       	adc	r23, r23
    5218:	88 1f       	adc	r24, r24
    521a:	bb 1f       	adc	r27, r27
    521c:	62 17       	cp	r22, r18
    521e:	73 07       	cpc	r23, r19
    5220:	84 07       	cpc	r24, r20
    5222:	ba 07       	cpc	r27, r26
    5224:	20 f0       	brcs	.+8      	; 0x522e <__divsf3_pse+0xae>
    5226:	62 1b       	sub	r22, r18
    5228:	73 0b       	sbc	r23, r19
    522a:	84 0b       	sbc	r24, r20
    522c:	ba 0b       	sbc	r27, r26
    522e:	ee 1f       	adc	r30, r30
    5230:	88 f7       	brcc	.-30     	; 0x5214 <__divsf3_pse+0x94>
    5232:	e0 95       	com	r30
    5234:	08 95       	ret

00005236 <__floatunsisf>:
    5236:	e8 94       	clt
    5238:	09 c0       	rjmp	.+18     	; 0x524c <__floatsisf+0x12>

0000523a <__floatsisf>:
    523a:	97 fb       	bst	r25, 7
    523c:	3e f4       	brtc	.+14     	; 0x524c <__floatsisf+0x12>
    523e:	90 95       	com	r25
    5240:	80 95       	com	r24
    5242:	70 95       	com	r23
    5244:	61 95       	neg	r22
    5246:	7f 4f       	sbci	r23, 0xFF	; 255
    5248:	8f 4f       	sbci	r24, 0xFF	; 255
    524a:	9f 4f       	sbci	r25, 0xFF	; 255
    524c:	99 23       	and	r25, r25
    524e:	a9 f0       	breq	.+42     	; 0x527a <__floatsisf+0x40>
    5250:	f9 2f       	mov	r31, r25
    5252:	96 e9       	ldi	r25, 0x96	; 150
    5254:	bb 27       	eor	r27, r27
    5256:	93 95       	inc	r25
    5258:	f6 95       	lsr	r31
    525a:	87 95       	ror	r24
    525c:	77 95       	ror	r23
    525e:	67 95       	ror	r22
    5260:	b7 95       	ror	r27
    5262:	f1 11       	cpse	r31, r1
    5264:	f8 cf       	rjmp	.-16     	; 0x5256 <__floatsisf+0x1c>
    5266:	fa f4       	brpl	.+62     	; 0x52a6 <__floatsisf+0x6c>
    5268:	bb 0f       	add	r27, r27
    526a:	11 f4       	brne	.+4      	; 0x5270 <__floatsisf+0x36>
    526c:	60 ff       	sbrs	r22, 0
    526e:	1b c0       	rjmp	.+54     	; 0x52a6 <__floatsisf+0x6c>
    5270:	6f 5f       	subi	r22, 0xFF	; 255
    5272:	7f 4f       	sbci	r23, 0xFF	; 255
    5274:	8f 4f       	sbci	r24, 0xFF	; 255
    5276:	9f 4f       	sbci	r25, 0xFF	; 255
    5278:	16 c0       	rjmp	.+44     	; 0x52a6 <__floatsisf+0x6c>
    527a:	88 23       	and	r24, r24
    527c:	11 f0       	breq	.+4      	; 0x5282 <__floatsisf+0x48>
    527e:	96 e9       	ldi	r25, 0x96	; 150
    5280:	11 c0       	rjmp	.+34     	; 0x52a4 <__floatsisf+0x6a>
    5282:	77 23       	and	r23, r23
    5284:	21 f0       	breq	.+8      	; 0x528e <__floatsisf+0x54>
    5286:	9e e8       	ldi	r25, 0x8E	; 142
    5288:	87 2f       	mov	r24, r23
    528a:	76 2f       	mov	r23, r22
    528c:	05 c0       	rjmp	.+10     	; 0x5298 <__floatsisf+0x5e>
    528e:	66 23       	and	r22, r22
    5290:	71 f0       	breq	.+28     	; 0x52ae <__floatsisf+0x74>
    5292:	96 e8       	ldi	r25, 0x86	; 134
    5294:	86 2f       	mov	r24, r22
    5296:	70 e0       	ldi	r23, 0x00	; 0
    5298:	60 e0       	ldi	r22, 0x00	; 0
    529a:	2a f0       	brmi	.+10     	; 0x52a6 <__floatsisf+0x6c>
    529c:	9a 95       	dec	r25
    529e:	66 0f       	add	r22, r22
    52a0:	77 1f       	adc	r23, r23
    52a2:	88 1f       	adc	r24, r24
    52a4:	da f7       	brpl	.-10     	; 0x529c <__floatsisf+0x62>
    52a6:	88 0f       	add	r24, r24
    52a8:	96 95       	lsr	r25
    52aa:	87 95       	ror	r24
    52ac:	97 f9       	bld	r25, 7
    52ae:	08 95       	ret

000052b0 <__udivmodsi4>:
    52b0:	a1 e2       	ldi	r26, 0x21	; 33
    52b2:	1a 2e       	mov	r1, r26
    52b4:	aa 1b       	sub	r26, r26
    52b6:	bb 1b       	sub	r27, r27
    52b8:	fd 01       	movw	r30, r26
    52ba:	0d c0       	rjmp	.+26     	; 0x52d6 <__udivmodsi4_ep>

000052bc <__udivmodsi4_loop>:
    52bc:	aa 1f       	adc	r26, r26
    52be:	bb 1f       	adc	r27, r27
    52c0:	ee 1f       	adc	r30, r30
    52c2:	ff 1f       	adc	r31, r31
    52c4:	a2 17       	cp	r26, r18
    52c6:	b3 07       	cpc	r27, r19
    52c8:	e4 07       	cpc	r30, r20
    52ca:	f5 07       	cpc	r31, r21
    52cc:	20 f0       	brcs	.+8      	; 0x52d6 <__udivmodsi4_ep>
    52ce:	a2 1b       	sub	r26, r18
    52d0:	b3 0b       	sbc	r27, r19
    52d2:	e4 0b       	sbc	r30, r20
    52d4:	f5 0b       	sbc	r31, r21

000052d6 <__udivmodsi4_ep>:
    52d6:	66 1f       	adc	r22, r22
    52d8:	77 1f       	adc	r23, r23
    52da:	88 1f       	adc	r24, r24
    52dc:	99 1f       	adc	r25, r25
    52de:	1a 94       	dec	r1
    52e0:	69 f7       	brne	.-38     	; 0x52bc <__udivmodsi4_loop>
    52e2:	60 95       	com	r22
    52e4:	70 95       	com	r23
    52e6:	80 95       	com	r24
    52e8:	90 95       	com	r25
    52ea:	9b 01       	movw	r18, r22
    52ec:	ac 01       	movw	r20, r24
    52ee:	bd 01       	movw	r22, r26
    52f0:	cf 01       	movw	r24, r30
    52f2:	08 95       	ret

000052f4 <__tablejump2__>:
    52f4:	ee 0f       	add	r30, r30
    52f6:	ff 1f       	adc	r31, r31
    52f8:	88 1f       	adc	r24, r24
    52fa:	8b bf       	out	0x3b, r24	; 59
    52fc:	07 90       	elpm	r0, Z+
    52fe:	f6 91       	elpm	r31, Z
    5300:	e0 2d       	mov	r30, r0
    5302:	19 94       	eijmp

00005304 <calloc>:
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	86 9f       	mul	r24, r22
    530e:	80 01       	movw	r16, r0
    5310:	87 9f       	mul	r24, r23
    5312:	10 0d       	add	r17, r0
    5314:	96 9f       	mul	r25, r22
    5316:	10 0d       	add	r17, r0
    5318:	11 24       	eor	r1, r1
    531a:	c8 01       	movw	r24, r16
    531c:	0d d0       	rcall	.+26     	; 0x5338 <malloc>
    531e:	ec 01       	movw	r28, r24
    5320:	00 97       	sbiw	r24, 0x00	; 0
    5322:	21 f0       	breq	.+8      	; 0x532c <calloc+0x28>
    5324:	a8 01       	movw	r20, r16
    5326:	60 e0       	ldi	r22, 0x00	; 0
    5328:	70 e0       	ldi	r23, 0x00	; 0
    532a:	17 d2       	rcall	.+1070   	; 0x575a <memset>
    532c:	ce 01       	movw	r24, r28
    532e:	df 91       	pop	r29
    5330:	cf 91       	pop	r28
    5332:	1f 91       	pop	r17
    5334:	0f 91       	pop	r16
    5336:	08 95       	ret

00005338 <malloc>:
    5338:	0f 93       	push	r16
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	82 30       	cpi	r24, 0x02	; 2
    5342:	91 05       	cpc	r25, r1
    5344:	10 f4       	brcc	.+4      	; 0x534a <malloc+0x12>
    5346:	82 e0       	ldi	r24, 0x02	; 2
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	e0 91 eb 09 	lds	r30, 0x09EB	; 0x8009eb <__flp>
    534e:	f0 91 ec 09 	lds	r31, 0x09EC	; 0x8009ec <__flp+0x1>
    5352:	20 e0       	ldi	r18, 0x00	; 0
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	a0 e0       	ldi	r26, 0x00	; 0
    5358:	b0 e0       	ldi	r27, 0x00	; 0
    535a:	30 97       	sbiw	r30, 0x00	; 0
    535c:	19 f1       	breq	.+70     	; 0x53a4 <malloc+0x6c>
    535e:	40 81       	ld	r20, Z
    5360:	51 81       	ldd	r21, Z+1	; 0x01
    5362:	02 81       	ldd	r16, Z+2	; 0x02
    5364:	13 81       	ldd	r17, Z+3	; 0x03
    5366:	48 17       	cp	r20, r24
    5368:	59 07       	cpc	r21, r25
    536a:	c8 f0       	brcs	.+50     	; 0x539e <malloc+0x66>
    536c:	84 17       	cp	r24, r20
    536e:	95 07       	cpc	r25, r21
    5370:	69 f4       	brne	.+26     	; 0x538c <malloc+0x54>
    5372:	10 97       	sbiw	r26, 0x00	; 0
    5374:	31 f0       	breq	.+12     	; 0x5382 <malloc+0x4a>
    5376:	12 96       	adiw	r26, 0x02	; 2
    5378:	0c 93       	st	X, r16
    537a:	12 97       	sbiw	r26, 0x02	; 2
    537c:	13 96       	adiw	r26, 0x03	; 3
    537e:	1c 93       	st	X, r17
    5380:	27 c0       	rjmp	.+78     	; 0x53d0 <malloc+0x98>
    5382:	00 93 eb 09 	sts	0x09EB, r16	; 0x8009eb <__flp>
    5386:	10 93 ec 09 	sts	0x09EC, r17	; 0x8009ec <__flp+0x1>
    538a:	22 c0       	rjmp	.+68     	; 0x53d0 <malloc+0x98>
    538c:	21 15       	cp	r18, r1
    538e:	31 05       	cpc	r19, r1
    5390:	19 f0       	breq	.+6      	; 0x5398 <malloc+0x60>
    5392:	42 17       	cp	r20, r18
    5394:	53 07       	cpc	r21, r19
    5396:	18 f4       	brcc	.+6      	; 0x539e <malloc+0x66>
    5398:	9a 01       	movw	r18, r20
    539a:	bd 01       	movw	r22, r26
    539c:	ef 01       	movw	r28, r30
    539e:	df 01       	movw	r26, r30
    53a0:	f8 01       	movw	r30, r16
    53a2:	db cf       	rjmp	.-74     	; 0x535a <malloc+0x22>
    53a4:	21 15       	cp	r18, r1
    53a6:	31 05       	cpc	r19, r1
    53a8:	f9 f0       	breq	.+62     	; 0x53e8 <malloc+0xb0>
    53aa:	28 1b       	sub	r18, r24
    53ac:	39 0b       	sbc	r19, r25
    53ae:	24 30       	cpi	r18, 0x04	; 4
    53b0:	31 05       	cpc	r19, r1
    53b2:	80 f4       	brcc	.+32     	; 0x53d4 <malloc+0x9c>
    53b4:	8a 81       	ldd	r24, Y+2	; 0x02
    53b6:	9b 81       	ldd	r25, Y+3	; 0x03
    53b8:	61 15       	cp	r22, r1
    53ba:	71 05       	cpc	r23, r1
    53bc:	21 f0       	breq	.+8      	; 0x53c6 <malloc+0x8e>
    53be:	fb 01       	movw	r30, r22
    53c0:	93 83       	std	Z+3, r25	; 0x03
    53c2:	82 83       	std	Z+2, r24	; 0x02
    53c4:	04 c0       	rjmp	.+8      	; 0x53ce <malloc+0x96>
    53c6:	90 93 ec 09 	sts	0x09EC, r25	; 0x8009ec <__flp+0x1>
    53ca:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <__flp>
    53ce:	fe 01       	movw	r30, r28
    53d0:	32 96       	adiw	r30, 0x02	; 2
    53d2:	44 c0       	rjmp	.+136    	; 0x545c <malloc+0x124>
    53d4:	fe 01       	movw	r30, r28
    53d6:	e2 0f       	add	r30, r18
    53d8:	f3 1f       	adc	r31, r19
    53da:	81 93       	st	Z+, r24
    53dc:	91 93       	st	Z+, r25
    53de:	22 50       	subi	r18, 0x02	; 2
    53e0:	31 09       	sbc	r19, r1
    53e2:	39 83       	std	Y+1, r19	; 0x01
    53e4:	28 83       	st	Y, r18
    53e6:	3a c0       	rjmp	.+116    	; 0x545c <malloc+0x124>
    53e8:	20 91 e9 09 	lds	r18, 0x09E9	; 0x8009e9 <__brkval>
    53ec:	30 91 ea 09 	lds	r19, 0x09EA	; 0x8009ea <__brkval+0x1>
    53f0:	23 2b       	or	r18, r19
    53f2:	41 f4       	brne	.+16     	; 0x5404 <malloc+0xcc>
    53f4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    53f8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    53fc:	30 93 ea 09 	sts	0x09EA, r19	; 0x8009ea <__brkval+0x1>
    5400:	20 93 e9 09 	sts	0x09E9, r18	; 0x8009e9 <__brkval>
    5404:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5408:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    540c:	21 15       	cp	r18, r1
    540e:	31 05       	cpc	r19, r1
    5410:	41 f4       	brne	.+16     	; 0x5422 <malloc+0xea>
    5412:	2d b7       	in	r18, 0x3d	; 61
    5414:	3e b7       	in	r19, 0x3e	; 62
    5416:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    541a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    541e:	24 1b       	sub	r18, r20
    5420:	35 0b       	sbc	r19, r21
    5422:	e0 91 e9 09 	lds	r30, 0x09E9	; 0x8009e9 <__brkval>
    5426:	f0 91 ea 09 	lds	r31, 0x09EA	; 0x8009ea <__brkval+0x1>
    542a:	e2 17       	cp	r30, r18
    542c:	f3 07       	cpc	r31, r19
    542e:	a0 f4       	brcc	.+40     	; 0x5458 <malloc+0x120>
    5430:	2e 1b       	sub	r18, r30
    5432:	3f 0b       	sbc	r19, r31
    5434:	28 17       	cp	r18, r24
    5436:	39 07       	cpc	r19, r25
    5438:	78 f0       	brcs	.+30     	; 0x5458 <malloc+0x120>
    543a:	ac 01       	movw	r20, r24
    543c:	4e 5f       	subi	r20, 0xFE	; 254
    543e:	5f 4f       	sbci	r21, 0xFF	; 255
    5440:	24 17       	cp	r18, r20
    5442:	35 07       	cpc	r19, r21
    5444:	48 f0       	brcs	.+18     	; 0x5458 <malloc+0x120>
    5446:	4e 0f       	add	r20, r30
    5448:	5f 1f       	adc	r21, r31
    544a:	50 93 ea 09 	sts	0x09EA, r21	; 0x8009ea <__brkval+0x1>
    544e:	40 93 e9 09 	sts	0x09E9, r20	; 0x8009e9 <__brkval>
    5452:	81 93       	st	Z+, r24
    5454:	91 93       	st	Z+, r25
    5456:	02 c0       	rjmp	.+4      	; 0x545c <malloc+0x124>
    5458:	e0 e0       	ldi	r30, 0x00	; 0
    545a:	f0 e0       	ldi	r31, 0x00	; 0
    545c:	cf 01       	movw	r24, r30
    545e:	df 91       	pop	r29
    5460:	cf 91       	pop	r28
    5462:	1f 91       	pop	r17
    5464:	0f 91       	pop	r16
    5466:	08 95       	ret

00005468 <free>:
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	09 f4       	brne	.+2      	; 0x5472 <free+0xa>
    5470:	81 c0       	rjmp	.+258    	; 0x5574 <free+0x10c>
    5472:	fc 01       	movw	r30, r24
    5474:	32 97       	sbiw	r30, 0x02	; 2
    5476:	13 82       	std	Z+3, r1	; 0x03
    5478:	12 82       	std	Z+2, r1	; 0x02
    547a:	a0 91 eb 09 	lds	r26, 0x09EB	; 0x8009eb <__flp>
    547e:	b0 91 ec 09 	lds	r27, 0x09EC	; 0x8009ec <__flp+0x1>
    5482:	10 97       	sbiw	r26, 0x00	; 0
    5484:	81 f4       	brne	.+32     	; 0x54a6 <free+0x3e>
    5486:	20 81       	ld	r18, Z
    5488:	31 81       	ldd	r19, Z+1	; 0x01
    548a:	82 0f       	add	r24, r18
    548c:	93 1f       	adc	r25, r19
    548e:	20 91 e9 09 	lds	r18, 0x09E9	; 0x8009e9 <__brkval>
    5492:	30 91 ea 09 	lds	r19, 0x09EA	; 0x8009ea <__brkval+0x1>
    5496:	28 17       	cp	r18, r24
    5498:	39 07       	cpc	r19, r25
    549a:	51 f5       	brne	.+84     	; 0x54f0 <free+0x88>
    549c:	f0 93 ea 09 	sts	0x09EA, r31	; 0x8009ea <__brkval+0x1>
    54a0:	e0 93 e9 09 	sts	0x09E9, r30	; 0x8009e9 <__brkval>
    54a4:	67 c0       	rjmp	.+206    	; 0x5574 <free+0x10c>
    54a6:	ed 01       	movw	r28, r26
    54a8:	20 e0       	ldi	r18, 0x00	; 0
    54aa:	30 e0       	ldi	r19, 0x00	; 0
    54ac:	ce 17       	cp	r28, r30
    54ae:	df 07       	cpc	r29, r31
    54b0:	40 f4       	brcc	.+16     	; 0x54c2 <free+0x5a>
    54b2:	4a 81       	ldd	r20, Y+2	; 0x02
    54b4:	5b 81       	ldd	r21, Y+3	; 0x03
    54b6:	9e 01       	movw	r18, r28
    54b8:	41 15       	cp	r20, r1
    54ba:	51 05       	cpc	r21, r1
    54bc:	f1 f0       	breq	.+60     	; 0x54fa <free+0x92>
    54be:	ea 01       	movw	r28, r20
    54c0:	f5 cf       	rjmp	.-22     	; 0x54ac <free+0x44>
    54c2:	d3 83       	std	Z+3, r29	; 0x03
    54c4:	c2 83       	std	Z+2, r28	; 0x02
    54c6:	40 81       	ld	r20, Z
    54c8:	51 81       	ldd	r21, Z+1	; 0x01
    54ca:	84 0f       	add	r24, r20
    54cc:	95 1f       	adc	r25, r21
    54ce:	c8 17       	cp	r28, r24
    54d0:	d9 07       	cpc	r29, r25
    54d2:	59 f4       	brne	.+22     	; 0x54ea <free+0x82>
    54d4:	88 81       	ld	r24, Y
    54d6:	99 81       	ldd	r25, Y+1	; 0x01
    54d8:	84 0f       	add	r24, r20
    54da:	95 1f       	adc	r25, r21
    54dc:	02 96       	adiw	r24, 0x02	; 2
    54de:	91 83       	std	Z+1, r25	; 0x01
    54e0:	80 83       	st	Z, r24
    54e2:	8a 81       	ldd	r24, Y+2	; 0x02
    54e4:	9b 81       	ldd	r25, Y+3	; 0x03
    54e6:	93 83       	std	Z+3, r25	; 0x03
    54e8:	82 83       	std	Z+2, r24	; 0x02
    54ea:	21 15       	cp	r18, r1
    54ec:	31 05       	cpc	r19, r1
    54ee:	29 f4       	brne	.+10     	; 0x54fa <free+0x92>
    54f0:	f0 93 ec 09 	sts	0x09EC, r31	; 0x8009ec <__flp+0x1>
    54f4:	e0 93 eb 09 	sts	0x09EB, r30	; 0x8009eb <__flp>
    54f8:	3d c0       	rjmp	.+122    	; 0x5574 <free+0x10c>
    54fa:	e9 01       	movw	r28, r18
    54fc:	fb 83       	std	Y+3, r31	; 0x03
    54fe:	ea 83       	std	Y+2, r30	; 0x02
    5500:	49 91       	ld	r20, Y+
    5502:	59 91       	ld	r21, Y+
    5504:	c4 0f       	add	r28, r20
    5506:	d5 1f       	adc	r29, r21
    5508:	ec 17       	cp	r30, r28
    550a:	fd 07       	cpc	r31, r29
    550c:	61 f4       	brne	.+24     	; 0x5526 <free+0xbe>
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	84 0f       	add	r24, r20
    5514:	95 1f       	adc	r25, r21
    5516:	02 96       	adiw	r24, 0x02	; 2
    5518:	e9 01       	movw	r28, r18
    551a:	99 83       	std	Y+1, r25	; 0x01
    551c:	88 83       	st	Y, r24
    551e:	82 81       	ldd	r24, Z+2	; 0x02
    5520:	93 81       	ldd	r25, Z+3	; 0x03
    5522:	9b 83       	std	Y+3, r25	; 0x03
    5524:	8a 83       	std	Y+2, r24	; 0x02
    5526:	e0 e0       	ldi	r30, 0x00	; 0
    5528:	f0 e0       	ldi	r31, 0x00	; 0
    552a:	12 96       	adiw	r26, 0x02	; 2
    552c:	8d 91       	ld	r24, X+
    552e:	9c 91       	ld	r25, X
    5530:	13 97       	sbiw	r26, 0x03	; 3
    5532:	00 97       	sbiw	r24, 0x00	; 0
    5534:	19 f0       	breq	.+6      	; 0x553c <free+0xd4>
    5536:	fd 01       	movw	r30, r26
    5538:	dc 01       	movw	r26, r24
    553a:	f7 cf       	rjmp	.-18     	; 0x552a <free+0xc2>
    553c:	8d 91       	ld	r24, X+
    553e:	9c 91       	ld	r25, X
    5540:	11 97       	sbiw	r26, 0x01	; 1
    5542:	9d 01       	movw	r18, r26
    5544:	2e 5f       	subi	r18, 0xFE	; 254
    5546:	3f 4f       	sbci	r19, 0xFF	; 255
    5548:	82 0f       	add	r24, r18
    554a:	93 1f       	adc	r25, r19
    554c:	20 91 e9 09 	lds	r18, 0x09E9	; 0x8009e9 <__brkval>
    5550:	30 91 ea 09 	lds	r19, 0x09EA	; 0x8009ea <__brkval+0x1>
    5554:	28 17       	cp	r18, r24
    5556:	39 07       	cpc	r19, r25
    5558:	69 f4       	brne	.+26     	; 0x5574 <free+0x10c>
    555a:	30 97       	sbiw	r30, 0x00	; 0
    555c:	29 f4       	brne	.+10     	; 0x5568 <free+0x100>
    555e:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <__flp+0x1>
    5562:	10 92 eb 09 	sts	0x09EB, r1	; 0x8009eb <__flp>
    5566:	02 c0       	rjmp	.+4      	; 0x556c <free+0x104>
    5568:	13 82       	std	Z+3, r1	; 0x03
    556a:	12 82       	std	Z+2, r1	; 0x02
    556c:	b0 93 ea 09 	sts	0x09EA, r27	; 0x8009ea <__brkval+0x1>
    5570:	a0 93 e9 09 	sts	0x09E9, r26	; 0x8009e9 <__brkval>
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	08 95       	ret

0000557a <abort>:
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	f8 94       	cli
    5580:	35 c2       	rjmp	.+1130   	; 0x59ec <_exit>

00005582 <__ftoa_engine>:
    5582:	28 30       	cpi	r18, 0x08	; 8
    5584:	08 f0       	brcs	.+2      	; 0x5588 <__ftoa_engine+0x6>
    5586:	27 e0       	ldi	r18, 0x07	; 7
    5588:	33 27       	eor	r19, r19
    558a:	da 01       	movw	r26, r20
    558c:	99 0f       	add	r25, r25
    558e:	31 1d       	adc	r19, r1
    5590:	87 fd       	sbrc	r24, 7
    5592:	91 60       	ori	r25, 0x01	; 1
    5594:	00 96       	adiw	r24, 0x00	; 0
    5596:	61 05       	cpc	r22, r1
    5598:	71 05       	cpc	r23, r1
    559a:	39 f4       	brne	.+14     	; 0x55aa <__ftoa_engine+0x28>
    559c:	32 60       	ori	r19, 0x02	; 2
    559e:	2e 5f       	subi	r18, 0xFE	; 254
    55a0:	3d 93       	st	X+, r19
    55a2:	30 e3       	ldi	r19, 0x30	; 48
    55a4:	2a 95       	dec	r18
    55a6:	e1 f7       	brne	.-8      	; 0x55a0 <__ftoa_engine+0x1e>
    55a8:	08 95       	ret
    55aa:	9f 3f       	cpi	r25, 0xFF	; 255
    55ac:	30 f0       	brcs	.+12     	; 0x55ba <__ftoa_engine+0x38>
    55ae:	80 38       	cpi	r24, 0x80	; 128
    55b0:	71 05       	cpc	r23, r1
    55b2:	61 05       	cpc	r22, r1
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <__ftoa_engine+0x36>
    55b6:	3c 5f       	subi	r19, 0xFC	; 252
    55b8:	3c 5f       	subi	r19, 0xFC	; 252
    55ba:	3d 93       	st	X+, r19
    55bc:	91 30       	cpi	r25, 0x01	; 1
    55be:	08 f0       	brcs	.+2      	; 0x55c2 <__ftoa_engine+0x40>
    55c0:	80 68       	ori	r24, 0x80	; 128
    55c2:	91 1d       	adc	r25, r1
    55c4:	df 93       	push	r29
    55c6:	cf 93       	push	r28
    55c8:	1f 93       	push	r17
    55ca:	0f 93       	push	r16
    55cc:	ff 92       	push	r15
    55ce:	ef 92       	push	r14
    55d0:	19 2f       	mov	r17, r25
    55d2:	98 7f       	andi	r25, 0xF8	; 248
    55d4:	96 95       	lsr	r25
    55d6:	e9 2f       	mov	r30, r25
    55d8:	96 95       	lsr	r25
    55da:	96 95       	lsr	r25
    55dc:	e9 0f       	add	r30, r25
    55de:	ff 27       	eor	r31, r31
    55e0:	e4 50       	subi	r30, 0x04	; 4
    55e2:	fe 4f       	sbci	r31, 0xFE	; 254
    55e4:	99 27       	eor	r25, r25
    55e6:	33 27       	eor	r19, r19
    55e8:	ee 24       	eor	r14, r14
    55ea:	ff 24       	eor	r15, r15
    55ec:	a7 01       	movw	r20, r14
    55ee:	e7 01       	movw	r28, r14
    55f0:	05 90       	lpm	r0, Z+
    55f2:	08 94       	sec
    55f4:	07 94       	ror	r0
    55f6:	28 f4       	brcc	.+10     	; 0x5602 <__ftoa_engine+0x80>
    55f8:	36 0f       	add	r19, r22
    55fa:	e7 1e       	adc	r14, r23
    55fc:	f8 1e       	adc	r15, r24
    55fe:	49 1f       	adc	r20, r25
    5600:	51 1d       	adc	r21, r1
    5602:	66 0f       	add	r22, r22
    5604:	77 1f       	adc	r23, r23
    5606:	88 1f       	adc	r24, r24
    5608:	99 1f       	adc	r25, r25
    560a:	06 94       	lsr	r0
    560c:	a1 f7       	brne	.-24     	; 0x55f6 <__ftoa_engine+0x74>
    560e:	05 90       	lpm	r0, Z+
    5610:	07 94       	ror	r0
    5612:	28 f4       	brcc	.+10     	; 0x561e <__ftoa_engine+0x9c>
    5614:	e7 0e       	add	r14, r23
    5616:	f8 1e       	adc	r15, r24
    5618:	49 1f       	adc	r20, r25
    561a:	56 1f       	adc	r21, r22
    561c:	c1 1d       	adc	r28, r1
    561e:	77 0f       	add	r23, r23
    5620:	88 1f       	adc	r24, r24
    5622:	99 1f       	adc	r25, r25
    5624:	66 1f       	adc	r22, r22
    5626:	06 94       	lsr	r0
    5628:	a1 f7       	brne	.-24     	; 0x5612 <__ftoa_engine+0x90>
    562a:	05 90       	lpm	r0, Z+
    562c:	07 94       	ror	r0
    562e:	28 f4       	brcc	.+10     	; 0x563a <__ftoa_engine+0xb8>
    5630:	f8 0e       	add	r15, r24
    5632:	49 1f       	adc	r20, r25
    5634:	56 1f       	adc	r21, r22
    5636:	c7 1f       	adc	r28, r23
    5638:	d1 1d       	adc	r29, r1
    563a:	88 0f       	add	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	66 1f       	adc	r22, r22
    5640:	77 1f       	adc	r23, r23
    5642:	06 94       	lsr	r0
    5644:	a1 f7       	brne	.-24     	; 0x562e <__ftoa_engine+0xac>
    5646:	05 90       	lpm	r0, Z+
    5648:	07 94       	ror	r0
    564a:	20 f4       	brcc	.+8      	; 0x5654 <__ftoa_engine+0xd2>
    564c:	49 0f       	add	r20, r25
    564e:	56 1f       	adc	r21, r22
    5650:	c7 1f       	adc	r28, r23
    5652:	d8 1f       	adc	r29, r24
    5654:	99 0f       	add	r25, r25
    5656:	66 1f       	adc	r22, r22
    5658:	77 1f       	adc	r23, r23
    565a:	88 1f       	adc	r24, r24
    565c:	06 94       	lsr	r0
    565e:	a9 f7       	brne	.-22     	; 0x564a <__ftoa_engine+0xc8>
    5660:	84 91       	lpm	r24, Z
    5662:	10 95       	com	r17
    5664:	17 70       	andi	r17, 0x07	; 7
    5666:	41 f0       	breq	.+16     	; 0x5678 <__ftoa_engine+0xf6>
    5668:	d6 95       	lsr	r29
    566a:	c7 95       	ror	r28
    566c:	57 95       	ror	r21
    566e:	47 95       	ror	r20
    5670:	f7 94       	ror	r15
    5672:	e7 94       	ror	r14
    5674:	1a 95       	dec	r17
    5676:	c1 f7       	brne	.-16     	; 0x5668 <__ftoa_engine+0xe6>
    5678:	e2 ea       	ldi	r30, 0xA2	; 162
    567a:	f1 e0       	ldi	r31, 0x01	; 1
    567c:	68 94       	set
    567e:	15 90       	lpm	r1, Z+
    5680:	15 91       	lpm	r17, Z+
    5682:	35 91       	lpm	r19, Z+
    5684:	65 91       	lpm	r22, Z+
    5686:	95 91       	lpm	r25, Z+
    5688:	05 90       	lpm	r0, Z+
    568a:	7f e2       	ldi	r23, 0x2F	; 47
    568c:	73 95       	inc	r23
    568e:	e1 18       	sub	r14, r1
    5690:	f1 0a       	sbc	r15, r17
    5692:	43 0b       	sbc	r20, r19
    5694:	56 0b       	sbc	r21, r22
    5696:	c9 0b       	sbc	r28, r25
    5698:	d0 09       	sbc	r29, r0
    569a:	c0 f7       	brcc	.-16     	; 0x568c <__ftoa_engine+0x10a>
    569c:	e1 0c       	add	r14, r1
    569e:	f1 1e       	adc	r15, r17
    56a0:	43 1f       	adc	r20, r19
    56a2:	56 1f       	adc	r21, r22
    56a4:	c9 1f       	adc	r28, r25
    56a6:	d0 1d       	adc	r29, r0
    56a8:	7e f4       	brtc	.+30     	; 0x56c8 <__ftoa_engine+0x146>
    56aa:	70 33       	cpi	r23, 0x30	; 48
    56ac:	11 f4       	brne	.+4      	; 0x56b2 <__ftoa_engine+0x130>
    56ae:	8a 95       	dec	r24
    56b0:	e6 cf       	rjmp	.-52     	; 0x567e <__ftoa_engine+0xfc>
    56b2:	e8 94       	clt
    56b4:	01 50       	subi	r16, 0x01	; 1
    56b6:	30 f0       	brcs	.+12     	; 0x56c4 <__ftoa_engine+0x142>
    56b8:	08 0f       	add	r16, r24
    56ba:	0a f4       	brpl	.+2      	; 0x56be <__ftoa_engine+0x13c>
    56bc:	00 27       	eor	r16, r16
    56be:	02 17       	cp	r16, r18
    56c0:	08 f4       	brcc	.+2      	; 0x56c4 <__ftoa_engine+0x142>
    56c2:	20 2f       	mov	r18, r16
    56c4:	23 95       	inc	r18
    56c6:	02 2f       	mov	r16, r18
    56c8:	7a 33       	cpi	r23, 0x3A	; 58
    56ca:	28 f0       	brcs	.+10     	; 0x56d6 <__ftoa_engine+0x154>
    56cc:	79 e3       	ldi	r23, 0x39	; 57
    56ce:	7d 93       	st	X+, r23
    56d0:	2a 95       	dec	r18
    56d2:	e9 f7       	brne	.-6      	; 0x56ce <__ftoa_engine+0x14c>
    56d4:	10 c0       	rjmp	.+32     	; 0x56f6 <__ftoa_engine+0x174>
    56d6:	7d 93       	st	X+, r23
    56d8:	2a 95       	dec	r18
    56da:	89 f6       	brne	.-94     	; 0x567e <__ftoa_engine+0xfc>
    56dc:	06 94       	lsr	r0
    56de:	97 95       	ror	r25
    56e0:	67 95       	ror	r22
    56e2:	37 95       	ror	r19
    56e4:	17 95       	ror	r17
    56e6:	17 94       	ror	r1
    56e8:	e1 18       	sub	r14, r1
    56ea:	f1 0a       	sbc	r15, r17
    56ec:	43 0b       	sbc	r20, r19
    56ee:	56 0b       	sbc	r21, r22
    56f0:	c9 0b       	sbc	r28, r25
    56f2:	d0 09       	sbc	r29, r0
    56f4:	98 f0       	brcs	.+38     	; 0x571c <__ftoa_engine+0x19a>
    56f6:	23 95       	inc	r18
    56f8:	7e 91       	ld	r23, -X
    56fa:	73 95       	inc	r23
    56fc:	7a 33       	cpi	r23, 0x3A	; 58
    56fe:	08 f0       	brcs	.+2      	; 0x5702 <__ftoa_engine+0x180>
    5700:	70 e3       	ldi	r23, 0x30	; 48
    5702:	7c 93       	st	X, r23
    5704:	20 13       	cpse	r18, r16
    5706:	b8 f7       	brcc	.-18     	; 0x56f6 <__ftoa_engine+0x174>
    5708:	7e 91       	ld	r23, -X
    570a:	70 61       	ori	r23, 0x10	; 16
    570c:	7d 93       	st	X+, r23
    570e:	30 f0       	brcs	.+12     	; 0x571c <__ftoa_engine+0x19a>
    5710:	83 95       	inc	r24
    5712:	71 e3       	ldi	r23, 0x31	; 49
    5714:	7d 93       	st	X+, r23
    5716:	70 e3       	ldi	r23, 0x30	; 48
    5718:	2a 95       	dec	r18
    571a:	e1 f7       	brne	.-8      	; 0x5714 <__ftoa_engine+0x192>
    571c:	11 24       	eor	r1, r1
    571e:	ef 90       	pop	r14
    5720:	ff 90       	pop	r15
    5722:	0f 91       	pop	r16
    5724:	1f 91       	pop	r17
    5726:	cf 91       	pop	r28
    5728:	df 91       	pop	r29
    572a:	99 27       	eor	r25, r25
    572c:	87 fd       	sbrc	r24, 7
    572e:	90 95       	com	r25
    5730:	08 95       	ret

00005732 <strnlen_P>:
    5732:	fc 01       	movw	r30, r24
    5734:	05 90       	lpm	r0, Z+
    5736:	61 50       	subi	r22, 0x01	; 1
    5738:	70 40       	sbci	r23, 0x00	; 0
    573a:	01 10       	cpse	r0, r1
    573c:	d8 f7       	brcc	.-10     	; 0x5734 <strnlen_P+0x2>
    573e:	80 95       	com	r24
    5740:	90 95       	com	r25
    5742:	8e 0f       	add	r24, r30
    5744:	9f 1f       	adc	r25, r31
    5746:	08 95       	ret

00005748 <memcpy>:
    5748:	fb 01       	movw	r30, r22
    574a:	dc 01       	movw	r26, r24
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <memcpy+0xa>
    574e:	01 90       	ld	r0, Z+
    5750:	0d 92       	st	X+, r0
    5752:	41 50       	subi	r20, 0x01	; 1
    5754:	50 40       	sbci	r21, 0x00	; 0
    5756:	d8 f7       	brcc	.-10     	; 0x574e <memcpy+0x6>
    5758:	08 95       	ret

0000575a <memset>:
    575a:	dc 01       	movw	r26, r24
    575c:	01 c0       	rjmp	.+2      	; 0x5760 <memset+0x6>
    575e:	6d 93       	st	X+, r22
    5760:	41 50       	subi	r20, 0x01	; 1
    5762:	50 40       	sbci	r21, 0x00	; 0
    5764:	e0 f7       	brcc	.-8      	; 0x575e <memset+0x4>
    5766:	08 95       	ret

00005768 <strcat>:
    5768:	fb 01       	movw	r30, r22
    576a:	dc 01       	movw	r26, r24
    576c:	0d 90       	ld	r0, X+
    576e:	00 20       	and	r0, r0
    5770:	e9 f7       	brne	.-6      	; 0x576c <strcat+0x4>
    5772:	11 97       	sbiw	r26, 0x01	; 1
    5774:	01 90       	ld	r0, Z+
    5776:	0d 92       	st	X+, r0
    5778:	00 20       	and	r0, r0
    577a:	e1 f7       	brne	.-8      	; 0x5774 <strcat+0xc>
    577c:	08 95       	ret

0000577e <strcpy>:
    577e:	fb 01       	movw	r30, r22
    5780:	dc 01       	movw	r26, r24
    5782:	01 90       	ld	r0, Z+
    5784:	0d 92       	st	X+, r0
    5786:	00 20       	and	r0, r0
    5788:	e1 f7       	brne	.-8      	; 0x5782 <strcpy+0x4>
    578a:	08 95       	ret

0000578c <strncasecmp>:
    578c:	fb 01       	movw	r30, r22
    578e:	dc 01       	movw	r26, r24
    5790:	41 50       	subi	r20, 0x01	; 1
    5792:	50 40       	sbci	r21, 0x00	; 0
    5794:	88 f0       	brcs	.+34     	; 0x57b8 <strncasecmp+0x2c>
    5796:	8d 91       	ld	r24, X+
    5798:	81 34       	cpi	r24, 0x41	; 65
    579a:	1c f0       	brlt	.+6      	; 0x57a2 <strncasecmp+0x16>
    579c:	8b 35       	cpi	r24, 0x5B	; 91
    579e:	0c f4       	brge	.+2      	; 0x57a2 <strncasecmp+0x16>
    57a0:	80 5e       	subi	r24, 0xE0	; 224
    57a2:	61 91       	ld	r22, Z+
    57a4:	61 34       	cpi	r22, 0x41	; 65
    57a6:	1c f0       	brlt	.+6      	; 0x57ae <strncasecmp+0x22>
    57a8:	6b 35       	cpi	r22, 0x5B	; 91
    57aa:	0c f4       	brge	.+2      	; 0x57ae <strncasecmp+0x22>
    57ac:	60 5e       	subi	r22, 0xE0	; 224
    57ae:	86 1b       	sub	r24, r22
    57b0:	61 11       	cpse	r22, r1
    57b2:	71 f3       	breq	.-36     	; 0x5790 <strncasecmp+0x4>
    57b4:	99 0b       	sbc	r25, r25
    57b6:	08 95       	ret
    57b8:	88 1b       	sub	r24, r24
    57ba:	fc cf       	rjmp	.-8      	; 0x57b4 <strncasecmp+0x28>

000057bc <strnlen>:
    57bc:	fc 01       	movw	r30, r24
    57be:	61 50       	subi	r22, 0x01	; 1
    57c0:	70 40       	sbci	r23, 0x00	; 0
    57c2:	01 90       	ld	r0, Z+
    57c4:	01 10       	cpse	r0, r1
    57c6:	d8 f7       	brcc	.-10     	; 0x57be <strnlen+0x2>
    57c8:	80 95       	com	r24
    57ca:	90 95       	com	r25
    57cc:	8e 0f       	add	r24, r30
    57ce:	9f 1f       	adc	r25, r31
    57d0:	08 95       	ret

000057d2 <fputc>:
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	fb 01       	movw	r30, r22
    57dc:	23 81       	ldd	r18, Z+3	; 0x03
    57de:	21 fd       	sbrc	r18, 1
    57e0:	03 c0       	rjmp	.+6      	; 0x57e8 <fputc+0x16>
    57e2:	8f ef       	ldi	r24, 0xFF	; 255
    57e4:	9f ef       	ldi	r25, 0xFF	; 255
    57e6:	2c c0       	rjmp	.+88     	; 0x5840 <fputc+0x6e>
    57e8:	22 ff       	sbrs	r18, 2
    57ea:	16 c0       	rjmp	.+44     	; 0x5818 <fputc+0x46>
    57ec:	46 81       	ldd	r20, Z+6	; 0x06
    57ee:	57 81       	ldd	r21, Z+7	; 0x07
    57f0:	24 81       	ldd	r18, Z+4	; 0x04
    57f2:	35 81       	ldd	r19, Z+5	; 0x05
    57f4:	42 17       	cp	r20, r18
    57f6:	53 07       	cpc	r21, r19
    57f8:	44 f4       	brge	.+16     	; 0x580a <fputc+0x38>
    57fa:	a0 81       	ld	r26, Z
    57fc:	b1 81       	ldd	r27, Z+1	; 0x01
    57fe:	9d 01       	movw	r18, r26
    5800:	2f 5f       	subi	r18, 0xFF	; 255
    5802:	3f 4f       	sbci	r19, 0xFF	; 255
    5804:	31 83       	std	Z+1, r19	; 0x01
    5806:	20 83       	st	Z, r18
    5808:	8c 93       	st	X, r24
    580a:	26 81       	ldd	r18, Z+6	; 0x06
    580c:	37 81       	ldd	r19, Z+7	; 0x07
    580e:	2f 5f       	subi	r18, 0xFF	; 255
    5810:	3f 4f       	sbci	r19, 0xFF	; 255
    5812:	37 83       	std	Z+7, r19	; 0x07
    5814:	26 83       	std	Z+6, r18	; 0x06
    5816:	14 c0       	rjmp	.+40     	; 0x5840 <fputc+0x6e>
    5818:	8b 01       	movw	r16, r22
    581a:	ec 01       	movw	r28, r24
    581c:	fb 01       	movw	r30, r22
    581e:	00 84       	ldd	r0, Z+8	; 0x08
    5820:	f1 85       	ldd	r31, Z+9	; 0x09
    5822:	e0 2d       	mov	r30, r0
    5824:	19 95       	eicall
    5826:	89 2b       	or	r24, r25
    5828:	e1 f6       	brne	.-72     	; 0x57e2 <fputc+0x10>
    582a:	d8 01       	movw	r26, r16
    582c:	16 96       	adiw	r26, 0x06	; 6
    582e:	8d 91       	ld	r24, X+
    5830:	9c 91       	ld	r25, X
    5832:	17 97       	sbiw	r26, 0x07	; 7
    5834:	01 96       	adiw	r24, 0x01	; 1
    5836:	17 96       	adiw	r26, 0x07	; 7
    5838:	9c 93       	st	X, r25
    583a:	8e 93       	st	-X, r24
    583c:	16 97       	sbiw	r26, 0x06	; 6
    583e:	ce 01       	movw	r24, r28
    5840:	df 91       	pop	r29
    5842:	cf 91       	pop	r28
    5844:	1f 91       	pop	r17
    5846:	0f 91       	pop	r16
    5848:	08 95       	ret

0000584a <printf>:
    584a:	cf 93       	push	r28
    584c:	df 93       	push	r29
    584e:	cd b7       	in	r28, 0x3d	; 61
    5850:	de b7       	in	r29, 0x3e	; 62
    5852:	ae 01       	movw	r20, r28
    5854:	4a 5f       	subi	r20, 0xFA	; 250
    5856:	5f 4f       	sbci	r21, 0xFF	; 255
    5858:	fa 01       	movw	r30, r20
    585a:	61 91       	ld	r22, Z+
    585c:	71 91       	ld	r23, Z+
    585e:	af 01       	movw	r20, r30
    5860:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <__iob+0x2>
    5864:	90 91 f0 09 	lds	r25, 0x09F0	; 0x8009f0 <__iob+0x3>
    5868:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <vfprintf>
    586c:	df 91       	pop	r29
    586e:	cf 91       	pop	r28
    5870:	08 95       	ret

00005872 <puts>:
    5872:	0f 93       	push	r16
    5874:	1f 93       	push	r17
    5876:	cf 93       	push	r28
    5878:	df 93       	push	r29
    587a:	e0 91 ef 09 	lds	r30, 0x09EF	; 0x8009ef <__iob+0x2>
    587e:	f0 91 f0 09 	lds	r31, 0x09F0	; 0x8009f0 <__iob+0x3>
    5882:	23 81       	ldd	r18, Z+3	; 0x03
    5884:	21 ff       	sbrs	r18, 1
    5886:	1b c0       	rjmp	.+54     	; 0x58be <puts+0x4c>
    5888:	8c 01       	movw	r16, r24
    588a:	d0 e0       	ldi	r29, 0x00	; 0
    588c:	c0 e0       	ldi	r28, 0x00	; 0
    588e:	f8 01       	movw	r30, r16
    5890:	81 91       	ld	r24, Z+
    5892:	8f 01       	movw	r16, r30
    5894:	60 91 ef 09 	lds	r22, 0x09EF	; 0x8009ef <__iob+0x2>
    5898:	70 91 f0 09 	lds	r23, 0x09F0	; 0x8009f0 <__iob+0x3>
    589c:	db 01       	movw	r26, r22
    589e:	18 96       	adiw	r26, 0x08	; 8
    58a0:	ed 91       	ld	r30, X+
    58a2:	fc 91       	ld	r31, X
    58a4:	19 97       	sbiw	r26, 0x09	; 9
    58a6:	88 23       	and	r24, r24
    58a8:	31 f0       	breq	.+12     	; 0x58b6 <puts+0x44>
    58aa:	19 95       	eicall
    58ac:	89 2b       	or	r24, r25
    58ae:	79 f3       	breq	.-34     	; 0x588e <puts+0x1c>
    58b0:	df ef       	ldi	r29, 0xFF	; 255
    58b2:	cf ef       	ldi	r28, 0xFF	; 255
    58b4:	ec cf       	rjmp	.-40     	; 0x588e <puts+0x1c>
    58b6:	8a e0       	ldi	r24, 0x0A	; 10
    58b8:	19 95       	eicall
    58ba:	89 2b       	or	r24, r25
    58bc:	19 f0       	breq	.+6      	; 0x58c4 <puts+0x52>
    58be:	8f ef       	ldi	r24, 0xFF	; 255
    58c0:	9f ef       	ldi	r25, 0xFF	; 255
    58c2:	02 c0       	rjmp	.+4      	; 0x58c8 <puts+0x56>
    58c4:	8d 2f       	mov	r24, r29
    58c6:	9c 2f       	mov	r25, r28
    58c8:	df 91       	pop	r29
    58ca:	cf 91       	pop	r28
    58cc:	1f 91       	pop	r17
    58ce:	0f 91       	pop	r16
    58d0:	08 95       	ret

000058d2 <sprintf>:
    58d2:	0f 93       	push	r16
    58d4:	1f 93       	push	r17
    58d6:	cf 93       	push	r28
    58d8:	df 93       	push	r29
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
    58de:	2e 97       	sbiw	r28, 0x0e	; 14
    58e0:	0f b6       	in	r0, 0x3f	; 63
    58e2:	f8 94       	cli
    58e4:	de bf       	out	0x3e, r29	; 62
    58e6:	0f be       	out	0x3f, r0	; 63
    58e8:	cd bf       	out	0x3d, r28	; 61
    58ea:	0e 89       	ldd	r16, Y+22	; 0x16
    58ec:	1f 89       	ldd	r17, Y+23	; 0x17
    58ee:	86 e0       	ldi	r24, 0x06	; 6
    58f0:	8c 83       	std	Y+4, r24	; 0x04
    58f2:	1a 83       	std	Y+2, r17	; 0x02
    58f4:	09 83       	std	Y+1, r16	; 0x01
    58f6:	8f ef       	ldi	r24, 0xFF	; 255
    58f8:	9f e7       	ldi	r25, 0x7F	; 127
    58fa:	9e 83       	std	Y+6, r25	; 0x06
    58fc:	8d 83       	std	Y+5, r24	; 0x05
    58fe:	ae 01       	movw	r20, r28
    5900:	46 5e       	subi	r20, 0xE6	; 230
    5902:	5f 4f       	sbci	r21, 0xFF	; 255
    5904:	68 8d       	ldd	r22, Y+24	; 0x18
    5906:	79 8d       	ldd	r23, Y+25	; 0x19
    5908:	ce 01       	movw	r24, r28
    590a:	01 96       	adiw	r24, 0x01	; 1
    590c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <vfprintf>
    5910:	ef 81       	ldd	r30, Y+7	; 0x07
    5912:	f8 85       	ldd	r31, Y+8	; 0x08
    5914:	e0 0f       	add	r30, r16
    5916:	f1 1f       	adc	r31, r17
    5918:	10 82       	st	Z, r1
    591a:	2e 96       	adiw	r28, 0x0e	; 14
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	1f 91       	pop	r17
    592c:	0f 91       	pop	r16
    592e:	08 95       	ret

00005930 <__ultoa_invert>:
    5930:	fa 01       	movw	r30, r20
    5932:	aa 27       	eor	r26, r26
    5934:	28 30       	cpi	r18, 0x08	; 8
    5936:	51 f1       	breq	.+84     	; 0x598c <__ultoa_invert+0x5c>
    5938:	20 31       	cpi	r18, 0x10	; 16
    593a:	81 f1       	breq	.+96     	; 0x599c <__ultoa_invert+0x6c>
    593c:	e8 94       	clt
    593e:	6f 93       	push	r22
    5940:	6e 7f       	andi	r22, 0xFE	; 254
    5942:	6e 5f       	subi	r22, 0xFE	; 254
    5944:	7f 4f       	sbci	r23, 0xFF	; 255
    5946:	8f 4f       	sbci	r24, 0xFF	; 255
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	af 4f       	sbci	r26, 0xFF	; 255
    594c:	b1 e0       	ldi	r27, 0x01	; 1
    594e:	3e d0       	rcall	.+124    	; 0x59cc <__ultoa_invert+0x9c>
    5950:	b4 e0       	ldi	r27, 0x04	; 4
    5952:	3c d0       	rcall	.+120    	; 0x59cc <__ultoa_invert+0x9c>
    5954:	67 0f       	add	r22, r23
    5956:	78 1f       	adc	r23, r24
    5958:	89 1f       	adc	r24, r25
    595a:	9a 1f       	adc	r25, r26
    595c:	a1 1d       	adc	r26, r1
    595e:	68 0f       	add	r22, r24
    5960:	79 1f       	adc	r23, r25
    5962:	8a 1f       	adc	r24, r26
    5964:	91 1d       	adc	r25, r1
    5966:	a1 1d       	adc	r26, r1
    5968:	6a 0f       	add	r22, r26
    596a:	71 1d       	adc	r23, r1
    596c:	81 1d       	adc	r24, r1
    596e:	91 1d       	adc	r25, r1
    5970:	a1 1d       	adc	r26, r1
    5972:	20 d0       	rcall	.+64     	; 0x59b4 <__ultoa_invert+0x84>
    5974:	09 f4       	brne	.+2      	; 0x5978 <__ultoa_invert+0x48>
    5976:	68 94       	set
    5978:	3f 91       	pop	r19
    597a:	2a e0       	ldi	r18, 0x0A	; 10
    597c:	26 9f       	mul	r18, r22
    597e:	11 24       	eor	r1, r1
    5980:	30 19       	sub	r19, r0
    5982:	30 5d       	subi	r19, 0xD0	; 208
    5984:	31 93       	st	Z+, r19
    5986:	de f6       	brtc	.-74     	; 0x593e <__ultoa_invert+0xe>
    5988:	cf 01       	movw	r24, r30
    598a:	08 95       	ret
    598c:	46 2f       	mov	r20, r22
    598e:	47 70       	andi	r20, 0x07	; 7
    5990:	40 5d       	subi	r20, 0xD0	; 208
    5992:	41 93       	st	Z+, r20
    5994:	b3 e0       	ldi	r27, 0x03	; 3
    5996:	0f d0       	rcall	.+30     	; 0x59b6 <__ultoa_invert+0x86>
    5998:	c9 f7       	brne	.-14     	; 0x598c <__ultoa_invert+0x5c>
    599a:	f6 cf       	rjmp	.-20     	; 0x5988 <__ultoa_invert+0x58>
    599c:	46 2f       	mov	r20, r22
    599e:	4f 70       	andi	r20, 0x0F	; 15
    59a0:	40 5d       	subi	r20, 0xD0	; 208
    59a2:	4a 33       	cpi	r20, 0x3A	; 58
    59a4:	18 f0       	brcs	.+6      	; 0x59ac <__ultoa_invert+0x7c>
    59a6:	49 5d       	subi	r20, 0xD9	; 217
    59a8:	31 fd       	sbrc	r19, 1
    59aa:	40 52       	subi	r20, 0x20	; 32
    59ac:	41 93       	st	Z+, r20
    59ae:	02 d0       	rcall	.+4      	; 0x59b4 <__ultoa_invert+0x84>
    59b0:	a9 f7       	brne	.-22     	; 0x599c <__ultoa_invert+0x6c>
    59b2:	ea cf       	rjmp	.-44     	; 0x5988 <__ultoa_invert+0x58>
    59b4:	b4 e0       	ldi	r27, 0x04	; 4
    59b6:	a6 95       	lsr	r26
    59b8:	97 95       	ror	r25
    59ba:	87 95       	ror	r24
    59bc:	77 95       	ror	r23
    59be:	67 95       	ror	r22
    59c0:	ba 95       	dec	r27
    59c2:	c9 f7       	brne	.-14     	; 0x59b6 <__ultoa_invert+0x86>
    59c4:	00 97       	sbiw	r24, 0x00	; 0
    59c6:	61 05       	cpc	r22, r1
    59c8:	71 05       	cpc	r23, r1
    59ca:	08 95       	ret
    59cc:	9b 01       	movw	r18, r22
    59ce:	ac 01       	movw	r20, r24
    59d0:	0a 2e       	mov	r0, r26
    59d2:	06 94       	lsr	r0
    59d4:	57 95       	ror	r21
    59d6:	47 95       	ror	r20
    59d8:	37 95       	ror	r19
    59da:	27 95       	ror	r18
    59dc:	ba 95       	dec	r27
    59de:	c9 f7       	brne	.-14     	; 0x59d2 <__ultoa_invert+0xa2>
    59e0:	62 0f       	add	r22, r18
    59e2:	73 1f       	adc	r23, r19
    59e4:	84 1f       	adc	r24, r20
    59e6:	95 1f       	adc	r25, r21
    59e8:	a0 1d       	adc	r26, r0
    59ea:	08 95       	ret

000059ec <_exit>:
    59ec:	f8 94       	cli

000059ee <__stop_program>:
    59ee:	ff cf       	rjmp	.-2      	; 0x59ee <__stop_program>
