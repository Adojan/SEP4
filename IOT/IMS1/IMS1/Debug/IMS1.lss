
IMS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000766  00800200  00005878  0000590c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028d  00800966  00800966  00006072  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000060d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a10  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d452  00000000  00000000  00006b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003386  00000000  00000000  00013f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000615c  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002128  00000000  00000000  0001d454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003dce  00000000  00000000  0001f57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b97a  00000000  00000000  0002334a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a78  00000000  00000000  0002ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c2       	rjmp	.+1292   	; 0x50e <__ctors_end>
       2:	00 00       	nop
       4:	a5 c2       	rjmp	.+1354   	; 0x550 <__bad_interrupt>
       6:	00 00       	nop
       8:	a3 c2       	rjmp	.+1350   	; 0x550 <__bad_interrupt>
       a:	00 00       	nop
       c:	a1 c2       	rjmp	.+1346   	; 0x550 <__bad_interrupt>
       e:	00 00       	nop
      10:	9f c2       	rjmp	.+1342   	; 0x550 <__bad_interrupt>
      12:	00 00       	nop
      14:	9d c2       	rjmp	.+1338   	; 0x550 <__bad_interrupt>
      16:	00 00       	nop
      18:	9b c2       	rjmp	.+1334   	; 0x550 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	99 c2       	rjmp	.+1330   	; 0x550 <__bad_interrupt>
      1e:	00 00       	nop
      20:	97 c2       	rjmp	.+1326   	; 0x550 <__bad_interrupt>
      22:	00 00       	nop
      24:	95 c2       	rjmp	.+1322   	; 0x550 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c2       	rjmp	.+1318   	; 0x550 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	91 c2       	rjmp	.+1314   	; 0x550 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c0 c4       	rjmp	.+2432   	; 0x9b2 <__vector_12>
      32:	00 00       	nop
      34:	8d c2       	rjmp	.+1306   	; 0x550 <__bad_interrupt>
      36:	00 00       	nop
      38:	8b c2       	rjmp	.+1302   	; 0x550 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	89 c2       	rjmp	.+1298   	; 0x550 <__bad_interrupt>
      3e:	00 00       	nop
      40:	87 c2       	rjmp	.+1294   	; 0x550 <__bad_interrupt>
      42:	00 00       	nop
      44:	85 c2       	rjmp	.+1290   	; 0x550 <__bad_interrupt>
      46:	00 00       	nop
      48:	83 c2       	rjmp	.+1286   	; 0x550 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	81 c2       	rjmp	.+1282   	; 0x550 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7f c2       	rjmp	.+1278   	; 0x550 <__bad_interrupt>
      52:	00 00       	nop
      54:	7d c2       	rjmp	.+1274   	; 0x550 <__bad_interrupt>
      56:	00 00       	nop
      58:	7b c2       	rjmp	.+1270   	; 0x550 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	79 c2       	rjmp	.+1266   	; 0x550 <__bad_interrupt>
      5e:	00 00       	nop
      60:	77 c2       	rjmp	.+1262   	; 0x550 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__vector_25>
      68:	0c 94 7b 23 	jmp	0x46f6	; 0x46f6 <__vector_26>
      6c:	71 c2       	rjmp	.+1250   	; 0x550 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6f c2       	rjmp	.+1246   	; 0x550 <__bad_interrupt>
      72:	00 00       	nop
      74:	6d c2       	rjmp	.+1242   	; 0x550 <__bad_interrupt>
      76:	00 00       	nop
      78:	6b c2       	rjmp	.+1238   	; 0x550 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	69 c2       	rjmp	.+1234   	; 0x550 <__bad_interrupt>
      7e:	00 00       	nop
      80:	67 c2       	rjmp	.+1230   	; 0x550 <__bad_interrupt>
      82:	00 00       	nop
      84:	65 c2       	rjmp	.+1226   	; 0x550 <__bad_interrupt>
      86:	00 00       	nop
      88:	63 c2       	rjmp	.+1222   	; 0x550 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	61 c2       	rjmp	.+1218   	; 0x550 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__vector_36>
      94:	0c 94 11 24 	jmp	0x4822	; 0x4822 <__vector_37>
      98:	5b c2       	rjmp	.+1206   	; 0x550 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__vector_39>
      a0:	57 c2       	rjmp	.+1198   	; 0x550 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	55 c2       	rjmp	.+1194   	; 0x550 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	53 c2       	rjmp	.+1190   	; 0x550 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	51 c2       	rjmp	.+1186   	; 0x550 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4f c2       	rjmp	.+1182   	; 0x550 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4d c2       	rjmp	.+1178   	; 0x550 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4b c2       	rjmp	.+1174   	; 0x550 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	49 c2       	rjmp	.+1170   	; 0x550 <__bad_interrupt>
      be:	00 00       	nop
      c0:	47 c2       	rjmp	.+1166   	; 0x550 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	45 c2       	rjmp	.+1162   	; 0x550 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	43 c2       	rjmp	.+1158   	; 0x550 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__vector_51>
      d0:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_52>
      d4:	3d c2       	rjmp	.+1146   	; 0x550 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 eb 24 	jmp	0x49d6	; 0x49d6 <__vector_54>
      dc:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__vector_55>
      e0:	37 c2       	rjmp	.+1134   	; 0x550 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 02       	muls	r17, r22
      e6:	16 02       	muls	r17, r22
      e8:	16 02       	muls	r17, r22
      ea:	45 02       	muls	r20, r21
      ec:	4d 02       	muls	r20, r29
      ee:	5c 02       	muls	r21, r28
      f0:	16 02       	muls	r17, r22
      f2:	16 02       	muls	r17, r22
      f4:	45 02       	muls	r20, r21
      f6:	4d 02       	muls	r20, r29
      f8:	cb 26       	eor	r12, r27
      fa:	3b 27       	eor	r19, r27
      fc:	3b 27       	eor	r19, r27
      fe:	3b 27       	eor	r19, r27
     100:	3b 27       	eor	r19, r27
     102:	3b 27       	eor	r19, r27
     104:	3b 27       	eor	r19, r27
     106:	3b 27       	eor	r19, r27
     108:	cb 26       	eor	r12, r27
     10a:	3b 27       	eor	r19, r27
     10c:	3b 27       	eor	r19, r27
     10e:	3b 27       	eor	r19, r27
     110:	3b 27       	eor	r19, r27
     112:	3b 27       	eor	r19, r27
     114:	3b 27       	eor	r19, r27
     116:	3b 27       	eor	r19, r27
     118:	cd 26       	eor	r12, r29
     11a:	3b 27       	eor	r19, r27
     11c:	3b 27       	eor	r19, r27
     11e:	3b 27       	eor	r19, r27
     120:	3b 27       	eor	r19, r27
     122:	3b 27       	eor	r19, r27
     124:	3b 27       	eor	r19, r27
     126:	3b 27       	eor	r19, r27
     128:	3b 27       	eor	r19, r27
     12a:	3b 27       	eor	r19, r27
     12c:	3b 27       	eor	r19, r27
     12e:	3b 27       	eor	r19, r27
     130:	3b 27       	eor	r19, r27
     132:	3b 27       	eor	r19, r27
     134:	3b 27       	eor	r19, r27
     136:	3b 27       	eor	r19, r27
     138:	cd 26       	eor	r12, r29
     13a:	3b 27       	eor	r19, r27
     13c:	3b 27       	eor	r19, r27
     13e:	3b 27       	eor	r19, r27
     140:	3b 27       	eor	r19, r27
     142:	3b 27       	eor	r19, r27
     144:	3b 27       	eor	r19, r27
     146:	3b 27       	eor	r19, r27
     148:	3b 27       	eor	r19, r27
     14a:	3b 27       	eor	r19, r27
     14c:	3b 27       	eor	r19, r27
     14e:	3b 27       	eor	r19, r27
     150:	3b 27       	eor	r19, r27
     152:	3b 27       	eor	r19, r27
     154:	3b 27       	eor	r19, r27
     156:	3b 27       	eor	r19, r27
     158:	37 27       	eor	r19, r23
     15a:	3b 27       	eor	r19, r27
     15c:	3b 27       	eor	r19, r27
     15e:	3b 27       	eor	r19, r27
     160:	3b 27       	eor	r19, r27
     162:	3b 27       	eor	r19, r27
     164:	3b 27       	eor	r19, r27
     166:	3b 27       	eor	r19, r27
     168:	02 27       	eor	r16, r18
     16a:	3b 27       	eor	r19, r27
     16c:	3b 27       	eor	r19, r27
     16e:	3b 27       	eor	r19, r27
     170:	3b 27       	eor	r19, r27
     172:	3b 27       	eor	r19, r27
     174:	3b 27       	eor	r19, r27
     176:	3b 27       	eor	r19, r27
     178:	3b 27       	eor	r19, r27
     17a:	3b 27       	eor	r19, r27
     17c:	3b 27       	eor	r19, r27
     17e:	3b 27       	eor	r19, r27
     180:	3b 27       	eor	r19, r27
     182:	3b 27       	eor	r19, r27
     184:	3b 27       	eor	r19, r27
     186:	3b 27       	eor	r19, r27
     188:	f6 26       	eor	r15, r22
     18a:	3b 27       	eor	r19, r27
     18c:	3b 27       	eor	r19, r27
     18e:	3b 27       	eor	r19, r27
     190:	3b 27       	eor	r19, r27
     192:	3b 27       	eor	r19, r27
     194:	3b 27       	eor	r19, r27
     196:	3b 27       	eor	r19, r27
     198:	1a 27       	eor	r17, r26

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e e7       	ldi	r16, 0x7E	; 126
     29e:	19 e0       	ldi	r17, 0x09	; 9
     2a0:	0f 2e       	mov	r0, r31
     2a2:	f6 ea       	ldi	r31, 0xA6	; 166
     2a4:	ef 2e       	mov	r14, r31
     2a6:	f9 e0       	ldi	r31, 0x09	; 9
     2a8:	ff 2e       	mov	r15, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <uxDeletedTasksWaitingCleanUp>
     2b0:	88 23       	and	r24, r24
     2b2:	11 f1       	breq	.+68     	; 0x2f8 <prvIdleTask+0x5c>
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	0f 92       	push	r0
     2ba:	d8 01       	movw	r26, r16
     2bc:	15 96       	adiw	r26, 0x05	; 5
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	16 97       	sbiw	r26, 0x06	; 6
     2c4:	c6 81       	ldd	r28, Z+6	; 0x06
     2c6:	d7 81       	ldd	r29, Z+7	; 0x07
     2c8:	ce 01       	movw	r24, r28
     2ca:	02 96       	adiw	r24, 0x02	; 2
     2cc:	d8 d1       	rcall	.+944    	; 0x67e <uxListRemove>
     2ce:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <uxCurrentNumberOfTasks>
     2d2:	81 50       	subi	r24, 0x01	; 1
     2d4:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <uxCurrentNumberOfTasks>
     2d8:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <uxDeletedTasksWaitingCleanUp>
     2dc:	81 50       	subi	r24, 0x01	; 1
     2de:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <uxDeletedTasksWaitingCleanUp>
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	8f 89       	ldd	r24, Y+23	; 0x17
     2e8:	98 8d       	ldd	r25, Y+24	; 0x18
     2ea:	56 d1       	rcall	.+684    	; 0x598 <vPortFree>
     2ec:	ce 01       	movw	r24, r28
     2ee:	54 d1       	rcall	.+680    	; 0x598 <vPortFree>
     2f0:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <uxDeletedTasksWaitingCleanUp>
     2f4:	81 11       	cpse	r24, r1
     2f6:	de cf       	rjmp	.-68     	; 0x2b4 <prvIdleTask+0x18>
     2f8:	f7 01       	movw	r30, r14
     2fa:	80 81       	ld	r24, Z
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	08 f0       	brcs	.+2      	; 0x302 <prvIdleTask+0x66>
     300:	93 d2       	rcall	.+1318   	; 0x828 <vPortYield>
     302:	0e 94 21 13 	call	0x2642	; 0x2642 <vApplicationIdleHook>
     306:	d2 cf       	rjmp	.-92     	; 0x2ac <prvIdleTask+0x10>

00000308 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <prvTimerTask+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <prvTimerTask+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     31a:	44 24       	eor	r4, r4
     31c:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     31e:	e1 2c       	mov	r14, r1
     320:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     322:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     324:	c8 2e       	mov	r12, r24
     326:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     328:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <pxCurrentTimerList>
     32c:	f0 91 d5 09 	lds	r31, 0x09D5	; 0x8009d5 <pxCurrentTimerList+0x1>
     330:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     332:	88 23       	and	r24, r24
     334:	09 f4       	brne	.+2      	; 0x338 <prvTimerTask+0x30>
     336:	d7 c0       	rjmp	.+430    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     338:	05 80       	ldd	r0, Z+5	; 0x05
     33a:	f6 81       	ldd	r31, Z+6	; 0x06
     33c:	e0 2d       	mov	r30, r0
     33e:	a0 80       	ld	r10, Z
     340:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     342:	0e 94 57 0c 	call	0x18ae	; 0x18ae <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     346:	c4 01       	movw	r24, r8
     348:	0e 94 b3 12 	call	0x2566	; 0x2566 <prvSampleTimeNow>
     34c:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	81 11       	cpse	r24, r1
     352:	48 c0       	rjmp	.+144    	; 0x3e4 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     354:	0a 15       	cp	r16, r10
     356:	1b 05       	cpc	r17, r11
     358:	b0 f1       	brcs	.+108    	; 0x3c6 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     35a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     35e:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <pxCurrentTimerList>
     362:	f0 91 d5 09 	lds	r31, 0x09D5	; 0x8009d5 <pxCurrentTimerList+0x1>
     366:	05 80       	ldd	r0, Z+5	; 0x05
     368:	f6 81       	ldd	r31, Z+6	; 0x06
     36a:	e0 2d       	mov	r30, r0
     36c:	66 80       	ldd	r6, Z+6	; 0x06
     36e:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     370:	c3 01       	movw	r24, r6
     372:	02 96       	adiw	r24, 0x02	; 2
     374:	84 d1       	rcall	.+776    	; 0x67e <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     376:	d3 01       	movw	r26, r6
     378:	53 96       	adiw	r26, 0x13	; 19
     37a:	8c 91       	ld	r24, X
     37c:	53 97       	sbiw	r26, 0x13	; 19
     37e:	82 ff       	sbrs	r24, 2
     380:	17 c0       	rjmp	.+46     	; 0x3b0 <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     382:	1c 96       	adiw	r26, 0x0c	; 12
     384:	6d 91       	ld	r22, X+
     386:	7c 91       	ld	r23, X
     388:	1d 97       	sbiw	r26, 0x0d	; 13
     38a:	6a 0d       	add	r22, r10
     38c:	7b 1d       	adc	r23, r11
     38e:	95 01       	movw	r18, r10
     390:	a8 01       	movw	r20, r16
     392:	c3 01       	movw	r24, r6
     394:	0e 94 be 11 	call	0x237c	; 0x237c <prvInsertTimerInActiveList>
     398:	88 23       	and	r24, r24
     39a:	69 f0       	breq	.+26     	; 0x3b6 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     39c:	0e 2d       	mov	r16, r14
     39e:	1f 2d       	mov	r17, r15
     3a0:	2e 2d       	mov	r18, r14
     3a2:	3f 2d       	mov	r19, r15
     3a4:	a5 01       	movw	r20, r10
     3a6:	65 2d       	mov	r22, r5
     3a8:	c3 01       	movw	r24, r6
     3aa:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <xTimerGenericCommand>
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3b0:	8e 7f       	andi	r24, 0xFE	; 254
     3b2:	f3 01       	movw	r30, r6
     3b4:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     3b6:	d3 01       	movw	r26, r6
     3b8:	50 96       	adiw	r26, 0x10	; 16
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	51 97       	sbiw	r26, 0x11	; 17
     3c0:	c3 01       	movw	r24, r6
     3c2:	19 95       	eicall
     3c4:	84 c0       	rjmp	.+264    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     3c6:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     3c8:	b5 01       	movw	r22, r10
     3ca:	60 1b       	sub	r22, r16
     3cc:	71 0b       	sbc	r23, r17
     3ce:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <xTimerQueue>
     3d2:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
     3d6:	5b d6       	rcall	.+3254   	; 0x108e <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     3d8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskResumeAll>
     3dc:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     3de:	77 c0       	rjmp	.+238    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     3e0:	23 d2       	rcall	.+1094   	; 0x828 <vPortYield>
     3e2:	75 c0       	rjmp	.+234    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     3e4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskResumeAll>
     3e8:	72 c0       	rjmp	.+228    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	88 23       	and	r24, r24
     3ee:	0c f4       	brge	.+2      	; 0x3f2 <prvTimerTask+0xea>
     3f0:	6e c0       	rjmp	.+220    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     3f2:	ac 80       	ldd	r10, Y+4	; 0x04
     3f4:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     3f6:	f5 01       	movw	r30, r10
     3f8:	82 85       	ldd	r24, Z+10	; 0x0a
     3fa:	93 85       	ldd	r25, Z+11	; 0x0b
     3fc:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     400:	c5 01       	movw	r24, r10
     402:	02 96       	adiw	r24, 0x02	; 2
     404:	3c d1       	rcall	.+632    	; 0x67e <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     406:	ce 01       	movw	r24, r28
     408:	06 96       	adiw	r24, 0x06	; 6
     40a:	0e 94 b3 12 	call	0x2566	; 0x2566 <prvSampleTimeNow>
     40e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     410:	e9 81       	ldd	r30, Y+1	; 0x01
     412:	0e 2e       	mov	r0, r30
     414:	00 0c       	add	r0, r0
     416:	ff 0b       	sbc	r31, r31
     418:	ea 30       	cpi	r30, 0x0A	; 10
     41a:	f1 05       	cpc	r31, r1
     41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	57 c0       	rjmp	.+174    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     420:	88 27       	eor	r24, r24
     422:	ee 58       	subi	r30, 0x8E	; 142
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	8f 4f       	sbci	r24, 0xFF	; 255
     428:	0c 94 be 28 	jmp	0x517c	; 0x517c <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     42c:	d5 01       	movw	r26, r10
     42e:	53 96       	adiw	r26, 0x13	; 19
     430:	8c 91       	ld	r24, X
     432:	53 97       	sbiw	r26, 0x13	; 19
     434:	81 60       	ori	r24, 0x01	; 1
     436:	53 96       	adiw	r26, 0x13	; 19
     438:	8c 93       	st	X, r24
     43a:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     43c:	2a 81       	ldd	r18, Y+2	; 0x02
     43e:	3b 81       	ldd	r19, Y+3	; 0x03
     440:	1c 96       	adiw	r26, 0x0c	; 12
     442:	6d 91       	ld	r22, X+
     444:	7c 91       	ld	r23, X
     446:	1d 97       	sbiw	r26, 0x0d	; 13
     448:	62 0f       	add	r22, r18
     44a:	73 1f       	adc	r23, r19
     44c:	c5 01       	movw	r24, r10
     44e:	0e 94 be 11 	call	0x237c	; 0x237c <prvInsertTimerInActiveList>
     452:	88 23       	and	r24, r24
     454:	e1 f1       	breq	.+120    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     456:	d5 01       	movw	r26, r10
     458:	50 96       	adiw	r26, 0x10	; 16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	51 97       	sbiw	r26, 0x11	; 17
     460:	c5 01       	movw	r24, r10
     462:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     464:	f5 01       	movw	r30, r10
     466:	83 89       	ldd	r24, Z+19	; 0x13
     468:	82 ff       	sbrs	r24, 2
     46a:	31 c0       	rjmp	.+98     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     46c:	4a 81       	ldd	r20, Y+2	; 0x02
     46e:	5b 81       	ldd	r21, Y+3	; 0x03
     470:	84 85       	ldd	r24, Z+12	; 0x0c
     472:	95 85       	ldd	r25, Z+13	; 0x0d
     474:	48 0f       	add	r20, r24
     476:	59 1f       	adc	r21, r25
     478:	0e 2d       	mov	r16, r14
     47a:	1f 2d       	mov	r17, r15
     47c:	2e 2d       	mov	r18, r14
     47e:	3f 2d       	mov	r19, r15
     480:	65 2d       	mov	r22, r5
     482:	c5 01       	movw	r24, r10
     484:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <xTimerGenericCommand>
     488:	22 c0       	rjmp	.+68     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     48a:	d5 01       	movw	r26, r10
     48c:	53 96       	adiw	r26, 0x13	; 19
     48e:	8c 91       	ld	r24, X
     490:	53 97       	sbiw	r26, 0x13	; 19
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	53 96       	adiw	r26, 0x13	; 19
     496:	8c 93       	st	X, r24
     498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     49a:	f5 01       	movw	r30, r10
     49c:	83 89       	ldd	r24, Z+19	; 0x13
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     4a2:	6a 81       	ldd	r22, Y+2	; 0x02
     4a4:	7b 81       	ldd	r23, Y+3	; 0x03
     4a6:	75 87       	std	Z+13, r23	; 0x0d
     4a8:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     4aa:	64 0f       	add	r22, r20
     4ac:	75 1f       	adc	r23, r21
     4ae:	9a 01       	movw	r18, r20
     4b0:	c5 01       	movw	r24, r10
     4b2:	0e 94 be 11 	call	0x237c	; 0x237c <prvInsertTimerInActiveList>
     4b6:	0b c0       	rjmp	.+22     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     4b8:	d5 01       	movw	r26, r10
     4ba:	53 96       	adiw	r26, 0x13	; 19
     4bc:	8c 91       	ld	r24, X
     4be:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c2:	c5 01       	movw	r24, r10
     4c4:	69 d0       	rcall	.+210    	; 0x598 <vPortFree>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     4c8:	8e 7f       	andi	r24, 0xFE	; 254
     4ca:	f5 01       	movw	r30, r10
     4cc:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     4ce:	4e 2d       	mov	r20, r14
     4d0:	5f 2d       	mov	r21, r15
     4d2:	6c 2d       	mov	r22, r12
     4d4:	7d 2d       	mov	r23, r13
     4d6:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <xTimerQueue>
     4da:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
     4de:	92 d4       	rcall	.+2340   	; 0xe04 <xQueueReceive>
     4e0:	81 11       	cpse	r24, r1
     4e2:	83 cf       	rjmp	.-250    	; 0x3ea <prvTimerTask+0xe2>
     4e4:	21 cf       	rjmp	.-446    	; 0x328 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     4e6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     4ea:	c4 01       	movw	r24, r8
     4ec:	0e 94 b3 12 	call	0x2566	; 0x2566 <prvSampleTimeNow>
     4f0:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	81 11       	cpse	r24, r1
     4f6:	76 cf       	rjmp	.-276    	; 0x3e4 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     4f8:	e0 91 d2 09 	lds	r30, 0x09D2	; 0x8009d2 <pxOverflowTimerList>
     4fc:	f0 91 d3 09 	lds	r31, 0x09D3	; 0x8009d3 <pxOverflowTimerList+0x1>
     500:	80 81       	ld	r24, Z
     502:	44 2d       	mov	r20, r4
     504:	81 11       	cpse	r24, r1
     506:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     508:	ae 2c       	mov	r10, r14
     50a:	bf 2c       	mov	r11, r15
     50c:	5d cf       	rjmp	.-326    	; 0x3c8 <prvTimerTask+0xc0>

0000050e <__ctors_end>:
     50e:	11 24       	eor	r1, r1
     510:	1f be       	out	0x3f, r1	; 63
     512:	cf ef       	ldi	r28, 0xFF	; 255
     514:	d1 e2       	ldi	r29, 0x21	; 33
     516:	de bf       	out	0x3e, r29	; 62
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	0c bf       	out	0x3c, r16	; 60

0000051e <__do_copy_data>:
     51e:	19 e0       	ldi	r17, 0x09	; 9
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	b2 e0       	ldi	r27, 0x02	; 2
     524:	e8 e7       	ldi	r30, 0x78	; 120
     526:	f8 e5       	ldi	r31, 0x58	; 88
     528:	00 e0       	ldi	r16, 0x00	; 0
     52a:	0b bf       	out	0x3b, r16	; 59
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__do_copy_data+0x14>
     52e:	07 90       	elpm	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	a6 36       	cpi	r26, 0x66	; 102
     534:	b1 07       	cpc	r27, r17
     536:	d9 f7       	brne	.-10     	; 0x52e <__do_copy_data+0x10>

00000538 <__do_clear_bss>:
     538:	2b e0       	ldi	r18, 0x0B	; 11
     53a:	a6 e6       	ldi	r26, 0x66	; 102
     53c:	b9 e0       	ldi	r27, 0x09	; 9
     53e:	01 c0       	rjmp	.+2      	; 0x542 <.do_clear_bss_start>

00000540 <.do_clear_bss_loop>:
     540:	1d 92       	st	X+, r1

00000542 <.do_clear_bss_start>:
     542:	a3 3f       	cpi	r26, 0xF3	; 243
     544:	b2 07       	cpc	r27, r18
     546:	e1 f7       	brne	.-8      	; 0x540 <.do_clear_bss_loop>
     548:	0e 94 75 15 	call	0x2aea	; 0x2aea <main>
     54c:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <_exit>

00000550 <__bad_interrupt>:
     550:	57 cd       	rjmp	.-1362   	; 0x0 <__vectors>

00000552 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     552:	e8 e0       	ldi	r30, 0x08	; 8
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	90 81       	ld	r25, Z
     558:	90 7f       	andi	r25, 0xF0	; 240
     55a:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     55c:	90 81       	ld	r25, Z
     55e:	8f 70       	andi	r24, 0x0F	; 15
     560:	98 2b       	or	r25, r24
     562:	90 83       	st	Z, r25
     564:	08 95       	ret

00000566 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     566:	e8 e0       	ldi	r30, 0x08	; 8
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	80 81       	ld	r24, Z
     56c:	80 7f       	andi	r24, 0xF0	; 240
     56e:	80 83       	st	Z, r24
     570:	08 95       	ret

00000572 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     578:	0e 94 57 0c 	call	0x18ae	; 0x18ae <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     57c:	ce 01       	movw	r24, r28
     57e:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <malloc>
     582:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     584:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     588:	20 97       	sbiw	r28, 0x00	; 0
     58a:	11 f4       	brne	.+4      	; 0x590 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     58c:	0e 94 22 13 	call	0x2644	; 0x2644 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     590:	ce 01       	movw	r24, r28
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
    if( pv )
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	41 f0       	breq	.+16     	; 0x5b0 <vPortFree+0x18>
     5a0:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     5a2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <vTaskSuspendAll>
        {
            free( pv );
     5a6:	ce 01       	movw	r24, r28
     5a8:	0e 94 78 29 	call	0x52f0	; 0x52f0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     5ac:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xTaskResumeAll>
    }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5b6:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5b8:	03 96       	adiw	r24, 0x03	; 3
     5ba:	92 83       	std	Z+2, r25	; 0x02
     5bc:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     5be:	2f ef       	ldi	r18, 0xFF	; 255
     5c0:	3f ef       	ldi	r19, 0xFF	; 255
     5c2:	34 83       	std	Z+4, r19	; 0x04
     5c4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5c6:	96 83       	std	Z+6, r25	; 0x06
     5c8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ca:	90 87       	std	Z+8, r25	; 0x08
     5cc:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5ce:	10 82       	st	Z, r1
     5d0:	08 95       	ret

000005d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     5d2:	fc 01       	movw	r30, r24
     5d4:	11 86       	std	Z+9, r1	; 0x09
     5d6:	10 86       	std	Z+8, r1	; 0x08
     5d8:	08 95       	ret

000005da <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	9c 01       	movw	r18, r24
     5e0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     5e2:	dc 01       	movw	r26, r24
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	cd 91       	ld	r28, X+
     5e8:	dc 91       	ld	r29, X
     5ea:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     5ec:	d3 83       	std	Z+3, r29	; 0x03
     5ee:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5f0:	8c 81       	ldd	r24, Y+4	; 0x04
     5f2:	9d 81       	ldd	r25, Y+5	; 0x05
     5f4:	95 83       	std	Z+5, r25	; 0x05
     5f6:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	9d 81       	ldd	r25, Y+5	; 0x05
     5fc:	dc 01       	movw	r26, r24
     5fe:	13 96       	adiw	r26, 0x03	; 3
     600:	7c 93       	st	X, r23
     602:	6e 93       	st	-X, r22
     604:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     606:	7d 83       	std	Y+5, r23	; 0x05
     608:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     60a:	31 87       	std	Z+9, r19	; 0x09
     60c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     60e:	f9 01       	movw	r30, r18
     610:	80 81       	ld	r24, Z
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 83       	st	Z, r24
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     622:	48 81       	ld	r20, Y
     624:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     626:	4f 3f       	cpi	r20, 0xFF	; 255
     628:	2f ef       	ldi	r18, 0xFF	; 255
     62a:	52 07       	cpc	r21, r18
     62c:	21 f4       	brne	.+8      	; 0x636 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     62e:	fc 01       	movw	r30, r24
     630:	a7 81       	ldd	r26, Z+7	; 0x07
     632:	b0 85       	ldd	r27, Z+8	; 0x08
     634:	0d c0       	rjmp	.+26     	; 0x650 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     636:	dc 01       	movw	r26, r24
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	01 c0       	rjmp	.+2      	; 0x63e <vListInsert+0x22>
     63c:	df 01       	movw	r26, r30
     63e:	12 96       	adiw	r26, 0x02	; 2
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	13 97       	sbiw	r26, 0x03	; 3
     646:	20 81       	ld	r18, Z
     648:	31 81       	ldd	r19, Z+1	; 0x01
     64a:	42 17       	cp	r20, r18
     64c:	53 07       	cpc	r21, r19
     64e:	b0 f7       	brcc	.-20     	; 0x63c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	ed 91       	ld	r30, X+
     654:	fc 91       	ld	r31, X
     656:	13 97       	sbiw	r26, 0x03	; 3
     658:	fb 83       	std	Y+3, r31	; 0x03
     65a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     65c:	d5 83       	std	Z+5, r29	; 0x05
     65e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     660:	bd 83       	std	Y+5, r27	; 0x05
     662:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     664:	13 96       	adiw	r26, 0x03	; 3
     666:	dc 93       	st	X, r29
     668:	ce 93       	st	-X, r28
     66a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     66c:	99 87       	std	Y+9, r25	; 0x09
     66e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     670:	fc 01       	movw	r30, r24
     672:	20 81       	ld	r18, Z
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	20 83       	st	Z, r18
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     684:	a0 85       	ldd	r26, Z+8	; 0x08
     686:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     688:	c2 81       	ldd	r28, Z+2	; 0x02
     68a:	d3 81       	ldd	r29, Z+3	; 0x03
     68c:	84 81       	ldd	r24, Z+4	; 0x04
     68e:	95 81       	ldd	r25, Z+5	; 0x05
     690:	9d 83       	std	Y+5, r25	; 0x05
     692:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     694:	c4 81       	ldd	r28, Z+4	; 0x04
     696:	d5 81       	ldd	r29, Z+5	; 0x05
     698:	82 81       	ldd	r24, Z+2	; 0x02
     69a:	93 81       	ldd	r25, Z+3	; 0x03
     69c:	9b 83       	std	Y+3, r25	; 0x03
     69e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6a0:	11 96       	adiw	r26, 0x01	; 1
     6a2:	8d 91       	ld	r24, X+
     6a4:	9c 91       	ld	r25, X
     6a6:	12 97       	sbiw	r26, 0x02	; 2
     6a8:	e8 17       	cp	r30, r24
     6aa:	f9 07       	cpc	r31, r25
     6ac:	31 f4       	brne	.+12     	; 0x6ba <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6ae:	84 81       	ldd	r24, Z+4	; 0x04
     6b0:	95 81       	ldd	r25, Z+5	; 0x05
     6b2:	12 96       	adiw	r26, 0x02	; 2
     6b4:	9c 93       	st	X, r25
     6b6:	8e 93       	st	-X, r24
     6b8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6ba:	11 86       	std	Z+9, r1	; 0x09
     6bc:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     6be:	8c 91       	ld	r24, X
     6c0:	81 50       	subi	r24, 0x01	; 1
     6c2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6c4:	8c 91       	ld	r24, X
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     6cc:	31 e1       	ldi	r19, 0x11	; 17
     6ce:	fc 01       	movw	r30, r24
     6d0:	30 83       	st	Z, r19
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	22 e2       	ldi	r18, 0x22	; 34
     6d6:	20 83       	st	Z, r18
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	a3 e3       	ldi	r26, 0x33	; 51
     6dc:	a0 83       	st	Z, r26
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	60 83       	st	Z, r22
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	70 83       	st	Z, r23
     6e6:	31 97       	sbiw	r30, 0x01	; 1
     6e8:	10 82       	st	Z, r1
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	10 82       	st	Z, r1
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	60 e8       	ldi	r22, 0x80	; 128
     6f2:	60 83       	st	Z, r22
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	10 82       	st	Z, r1
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	10 82       	st	Z, r1
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	10 82       	st	Z, r1
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	62 e0       	ldi	r22, 0x02	; 2
     704:	60 83       	st	Z, r22
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	60 83       	st	Z, r22
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	64 e0       	ldi	r22, 0x04	; 4
     710:	60 83       	st	Z, r22
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	65 e0       	ldi	r22, 0x05	; 5
     716:	60 83       	st	Z, r22
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	66 e0       	ldi	r22, 0x06	; 6
     71c:	60 83       	st	Z, r22
     71e:	31 97       	sbiw	r30, 0x01	; 1
     720:	67 e0       	ldi	r22, 0x07	; 7
     722:	60 83       	st	Z, r22
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	68 e0       	ldi	r22, 0x08	; 8
     728:	60 83       	st	Z, r22
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	69 e0       	ldi	r22, 0x09	; 9
     72e:	60 83       	st	Z, r22
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	60 e1       	ldi	r22, 0x10	; 16
     734:	60 83       	st	Z, r22
     736:	31 97       	sbiw	r30, 0x01	; 1
     738:	30 83       	st	Z, r19
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	32 e1       	ldi	r19, 0x12	; 18
     73e:	30 83       	st	Z, r19
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	33 e1       	ldi	r19, 0x13	; 19
     744:	30 83       	st	Z, r19
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	34 e1       	ldi	r19, 0x14	; 20
     74a:	30 83       	st	Z, r19
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	35 e1       	ldi	r19, 0x15	; 21
     750:	30 83       	st	Z, r19
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	36 e1       	ldi	r19, 0x16	; 22
     756:	30 83       	st	Z, r19
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	37 e1       	ldi	r19, 0x17	; 23
     75c:	30 83       	st	Z, r19
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	38 e1       	ldi	r19, 0x18	; 24
     762:	30 83       	st	Z, r19
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	39 e1       	ldi	r19, 0x19	; 25
     768:	30 83       	st	Z, r19
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	30 e2       	ldi	r19, 0x20	; 32
     76e:	30 83       	st	Z, r19
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	31 e2       	ldi	r19, 0x21	; 33
     774:	30 83       	st	Z, r19
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	20 83       	st	Z, r18
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	23 e2       	ldi	r18, 0x23	; 35
     77e:	20 83       	st	Z, r18
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	40 83       	st	Z, r20
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	50 83       	st	Z, r21
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	26 e2       	ldi	r18, 0x26	; 38
     78c:	20 83       	st	Z, r18
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	27 e2       	ldi	r18, 0x27	; 39
     792:	20 83       	st	Z, r18
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	28 e2       	ldi	r18, 0x28	; 40
     798:	20 83       	st	Z, r18
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	29 e2       	ldi	r18, 0x29	; 41
     79e:	20 83       	st	Z, r18
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	20 e3       	ldi	r18, 0x30	; 48
     7a4:	20 83       	st	Z, r18
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	21 e3       	ldi	r18, 0x31	; 49
     7aa:	20 83       	st	Z, r18
     7ac:	89 97       	sbiw	r24, 0x29	; 41
     7ae:	08 95       	ret

000007b0 <xPortStartScheduler>:
     7b0:	a8 95       	wdr
     7b2:	90 ec       	ldi	r25, 0xC0	; 192
     7b4:	88 e1       	ldi	r24, 0x18	; 24
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	a8 95       	wdr
     7bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7c6:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
     7ca:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
     7ce:	cd 91       	ld	r28, X+
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	dd 91       	ld	r29, X+
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	bf 91       	pop	r27
     7e0:	af 91       	pop	r26
     7e2:	9f 91       	pop	r25
     7e4:	8f 91       	pop	r24
     7e6:	7f 91       	pop	r23
     7e8:	6f 91       	pop	r22
     7ea:	5f 91       	pop	r21
     7ec:	4f 91       	pop	r20
     7ee:	3f 91       	pop	r19
     7f0:	2f 91       	pop	r18
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	7f 90       	pop	r7
     808:	6f 90       	pop	r6
     80a:	5f 90       	pop	r5
     80c:	4f 90       	pop	r4
     80e:	3f 90       	pop	r3
     810:	2f 90       	pop	r2
     812:	1f 90       	pop	r1
     814:	0f 90       	pop	r0
     816:	0c be       	out	0x3c, r0	; 60
     818:	0f 90       	pop	r0
     81a:	0b be       	out	0x3b, r0	; 59
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	08 95       	ret
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	08 95       	ret

00000828 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	0f 92       	push	r0
     830:	0b b6       	in	r0, 0x3b	; 59
     832:	0f 92       	push	r0
     834:	0c b6       	in	r0, 0x3c	; 60
     836:	0f 92       	push	r0
     838:	1f 92       	push	r1
     83a:	11 24       	eor	r1, r1
     83c:	2f 92       	push	r2
     83e:	3f 92       	push	r3
     840:	4f 92       	push	r4
     842:	5f 92       	push	r5
     844:	6f 92       	push	r6
     846:	7f 92       	push	r7
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
     878:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
     87c:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
     880:	0d b6       	in	r0, 0x3d	; 61
     882:	0d 92       	st	X+, r0
     884:	0e b6       	in	r0, 0x3e	; 62
     886:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     888:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     88c:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
     890:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
     894:	cd 91       	ld	r28, X+
     896:	cd bf       	out	0x3d, r28	; 61
     898:	dd 91       	ld	r29, X+
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	1f 90       	pop	r1
     8da:	0f 90       	pop	r0
     8dc:	0c be       	out	0x3c, r0	; 60
     8de:	0f 90       	pop	r0
     8e0:	0b be       	out	0x3b, r0	; 59
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8e8:	08 95       	ret

000008ea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	0f 92       	push	r0
     8f2:	0b b6       	in	r0, 0x3b	; 59
     8f4:	0f 92       	push	r0
     8f6:	0c b6       	in	r0, 0x3c	; 60
     8f8:	0f 92       	push	r0
     8fa:	1f 92       	push	r1
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 92       	push	r2
     900:	3f 92       	push	r3
     902:	4f 92       	push	r4
     904:	5f 92       	push	r5
     906:	6f 92       	push	r6
     908:	7f 92       	push	r7
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ef 93       	push	r30
     938:	ff 93       	push	r31
     93a:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
     93e:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
     942:	0d b6       	in	r0, 0x3d	; 61
     944:	0d 92       	st	X+, r0
     946:	0e b6       	in	r0, 0x3e	; 62
     948:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     94a:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     94c:	c0 d7       	rcall	.+3968   	; 0x18ce <xTaskIncrementTick>
     94e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     950:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     954:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
     958:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
     95c:	cd 91       	ld	r28, X+
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	dd 91       	ld	r29, X+
     962:	de bf       	out	0x3e, r29	; 62
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	1f 90       	pop	r1
     9a2:	0f 90       	pop	r0
     9a4:	0c be       	out	0x3c, r0	; 60
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9b0:	08 95       	ret

000009b2 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     9b2:	9b df       	rcall	.-202    	; 0x8ea <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     9b4:	18 95       	reti

000009b6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	0f 92       	push	r0
     9bc:	fc 01       	movw	r30, r24
     9be:	92 8d       	ldd	r25, Z+26	; 0x1a
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	91 11       	cpse	r25, r1
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	08 95       	ret

000009cc <prvCopyDataToQueue>:
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
     9d6:	04 2f       	mov	r16, r20
     9d8:	1a 8d       	ldd	r17, Y+26	; 0x1a
     9da:	4c 8d       	ldd	r20, Y+28	; 0x1c
     9dc:	41 11       	cpse	r20, r1
     9de:	0c c0       	rjmp	.+24     	; 0x9f8 <prvCopyDataToQueue+0x2c>
     9e0:	88 81       	ld	r24, Y
     9e2:	99 81       	ldd	r25, Y+1	; 0x01
     9e4:	89 2b       	or	r24, r25
     9e6:	09 f0       	breq	.+2      	; 0x9ea <prvCopyDataToQueue+0x1e>
     9e8:	42 c0       	rjmp	.+132    	; 0xa6e <prvCopyDataToQueue+0xa2>
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
     9ec:	9d 81       	ldd	r25, Y+5	; 0x05
     9ee:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskPriorityDisinherit>
     9f2:	1d 82       	std	Y+5, r1	; 0x05
     9f4:	1c 82       	std	Y+4, r1	; 0x04
     9f6:	42 c0       	rjmp	.+132    	; 0xa7c <prvCopyDataToQueue+0xb0>
     9f8:	01 11       	cpse	r16, r1
     9fa:	17 c0       	rjmp	.+46     	; 0xa2a <prvCopyDataToQueue+0x5e>
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	9b 81       	ldd	r25, Y+3	; 0x03
     a02:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <memcpy>
     a06:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	82 0f       	add	r24, r18
     a0e:	91 1d       	adc	r25, r1
     a10:	9b 83       	std	Y+3, r25	; 0x03
     a12:	8a 83       	std	Y+2, r24	; 0x02
     a14:	2c 81       	ldd	r18, Y+4	; 0x04
     a16:	3d 81       	ldd	r19, Y+5	; 0x05
     a18:	82 17       	cp	r24, r18
     a1a:	93 07       	cpc	r25, r19
     a1c:	50 f1       	brcs	.+84     	; 0xa72 <prvCopyDataToQueue+0xa6>
     a1e:	88 81       	ld	r24, Y
     a20:	99 81       	ldd	r25, Y+1	; 0x01
     a22:	9b 83       	std	Y+3, r25	; 0x03
     a24:	8a 83       	std	Y+2, r24	; 0x02
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	29 c0       	rjmp	.+82     	; 0xa7c <prvCopyDataToQueue+0xb0>
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	8e 81       	ldd	r24, Y+6	; 0x06
     a2e:	9f 81       	ldd	r25, Y+7	; 0x07
     a30:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <memcpy>
     a34:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	91 95       	neg	r25
     a3a:	81 95       	neg	r24
     a3c:	91 09       	sbc	r25, r1
     a3e:	2e 81       	ldd	r18, Y+6	; 0x06
     a40:	3f 81       	ldd	r19, Y+7	; 0x07
     a42:	28 0f       	add	r18, r24
     a44:	39 1f       	adc	r19, r25
     a46:	3f 83       	std	Y+7, r19	; 0x07
     a48:	2e 83       	std	Y+6, r18	; 0x06
     a4a:	48 81       	ld	r20, Y
     a4c:	59 81       	ldd	r21, Y+1	; 0x01
     a4e:	24 17       	cp	r18, r20
     a50:	35 07       	cpc	r19, r21
     a52:	30 f4       	brcc	.+12     	; 0xa60 <prvCopyDataToQueue+0x94>
     a54:	2c 81       	ldd	r18, Y+4	; 0x04
     a56:	3d 81       	ldd	r19, Y+5	; 0x05
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	9f 83       	std	Y+7, r25	; 0x07
     a5e:	8e 83       	std	Y+6, r24	; 0x06
     a60:	02 30       	cpi	r16, 0x02	; 2
     a62:	49 f4       	brne	.+18     	; 0xa76 <prvCopyDataToQueue+0xaa>
     a64:	11 23       	and	r17, r17
     a66:	49 f0       	breq	.+18     	; 0xa7a <prvCopyDataToQueue+0xae>
     a68:	11 50       	subi	r17, 0x01	; 1
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <prvCopyDataToQueue+0xb0>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <prvCopyDataToQueue+0xb0>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <prvCopyDataToQueue+0xb0>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <prvCopyDataToQueue+0xb0>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	1f 5f       	subi	r17, 0xFF	; 255
     a7e:	1a 8f       	std	Y+26, r17	; 0x1a
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <prvCopyDataFromQueue>:
     a8a:	fc 01       	movw	r30, r24
     a8c:	44 8d       	ldd	r20, Z+28	; 0x1c
     a8e:	44 23       	and	r20, r20
     a90:	a9 f0       	breq	.+42     	; 0xabc <prvCopyDataFromQueue+0x32>
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	26 81       	ldd	r18, Z+6	; 0x06
     a96:	37 81       	ldd	r19, Z+7	; 0x07
     a98:	24 0f       	add	r18, r20
     a9a:	35 1f       	adc	r19, r21
     a9c:	37 83       	std	Z+7, r19	; 0x07
     a9e:	26 83       	std	Z+6, r18	; 0x06
     aa0:	84 81       	ldd	r24, Z+4	; 0x04
     aa2:	95 81       	ldd	r25, Z+5	; 0x05
     aa4:	28 17       	cp	r18, r24
     aa6:	39 07       	cpc	r19, r25
     aa8:	20 f0       	brcs	.+8      	; 0xab2 <prvCopyDataFromQueue+0x28>
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	97 83       	std	Z+7, r25	; 0x07
     ab0:	86 83       	std	Z+6, r24	; 0x06
     ab2:	cb 01       	movw	r24, r22
     ab4:	66 81       	ldd	r22, Z+6	; 0x06
     ab6:	77 81       	ldd	r23, Z+7	; 0x07
     ab8:	0c 94 e8 2a 	jmp	0x55d0	; 0x55d0 <memcpy>
     abc:	08 95       	ret

00000abe <prvUnlockQueue>:
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	8c 01       	movw	r16, r24
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	0f 92       	push	r0
     ad0:	fc 01       	movw	r30, r24
     ad2:	c6 8d       	ldd	r28, Z+30	; 0x1e
     ad4:	1c 16       	cp	r1, r28
     ad6:	ac f4       	brge	.+42     	; 0xb02 <prvUnlockQueue+0x44>
     ad8:	81 89       	ldd	r24, Z+17	; 0x11
     ada:	81 11       	cpse	r24, r1
     adc:	06 c0       	rjmp	.+12     	; 0xaea <prvUnlockQueue+0x2c>
     ade:	11 c0       	rjmp	.+34     	; 0xb02 <prvUnlockQueue+0x44>
     ae0:	f8 01       	movw	r30, r16
     ae2:	81 89       	ldd	r24, Z+17	; 0x11
     ae4:	81 11       	cpse	r24, r1
     ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <prvUnlockQueue+0x34>
     ae8:	0c c0       	rjmp	.+24     	; 0xb02 <prvUnlockQueue+0x44>
     aea:	78 01       	movw	r14, r16
     aec:	f1 e1       	ldi	r31, 0x11	; 17
     aee:	ef 0e       	add	r14, r31
     af0:	f1 1c       	adc	r15, r1
     af2:	c7 01       	movw	r24, r14
     af4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTaskRemoveFromEventList>
     af8:	81 11       	cpse	r24, r1
     afa:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <vTaskMissedYield>
     afe:	c1 50       	subi	r28, 0x01	; 1
     b00:	79 f7       	brne	.-34     	; 0xae0 <prvUnlockQueue+0x22>
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	f8 01       	movw	r30, r16
     b06:	86 8f       	std	Z+30, r24	; 0x1e
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	0f 92       	push	r0
     b12:	c5 8d       	ldd	r28, Z+29	; 0x1d
     b14:	1c 16       	cp	r1, r28
     b16:	ac f4       	brge	.+42     	; 0xb42 <prvUnlockQueue+0x84>
     b18:	80 85       	ldd	r24, Z+8	; 0x08
     b1a:	81 11       	cpse	r24, r1
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <prvUnlockQueue+0x6c>
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <prvUnlockQueue+0x84>
     b20:	f8 01       	movw	r30, r16
     b22:	80 85       	ldd	r24, Z+8	; 0x08
     b24:	81 11       	cpse	r24, r1
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <prvUnlockQueue+0x74>
     b28:	0c c0       	rjmp	.+24     	; 0xb42 <prvUnlockQueue+0x84>
     b2a:	78 01       	movw	r14, r16
     b2c:	f8 e0       	ldi	r31, 0x08	; 8
     b2e:	ef 0e       	add	r14, r31
     b30:	f1 1c       	adc	r15, r1
     b32:	c7 01       	movw	r24, r14
     b34:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTaskRemoveFromEventList>
     b38:	81 11       	cpse	r24, r1
     b3a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <vTaskMissedYield>
     b3e:	c1 50       	subi	r28, 0x01	; 1
     b40:	79 f7       	brne	.-34     	; 0xb20 <prvUnlockQueue+0x62>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	f8 01       	movw	r30, r16
     b46:	85 8f       	std	Z+29, r24	; 0x1d
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	08 95       	ret

00000b58 <xQueueGenericReset>:
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	0f 92       	push	r0
     b64:	e8 81       	ld	r30, Y
     b66:	f9 81       	ldd	r31, Y+1	; 0x01
     b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b6a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	82 9f       	mul	r24, r18
     b72:	a0 01       	movw	r20, r0
     b74:	83 9f       	mul	r24, r19
     b76:	50 0d       	add	r21, r0
     b78:	92 9f       	mul	r25, r18
     b7a:	50 0d       	add	r21, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	4e 0f       	add	r20, r30
     b80:	5f 1f       	adc	r21, r31
     b82:	5d 83       	std	Y+5, r21	; 0x05
     b84:	4c 83       	std	Y+4, r20	; 0x04
     b86:	1a 8e       	std	Y+26, r1	; 0x1a
     b88:	fb 83       	std	Y+3, r31	; 0x03
     b8a:	ea 83       	std	Y+2, r30	; 0x02
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	82 9f       	mul	r24, r18
     b90:	a0 01       	movw	r20, r0
     b92:	83 9f       	mul	r24, r19
     b94:	50 0d       	add	r21, r0
     b96:	92 9f       	mul	r25, r18
     b98:	50 0d       	add	r21, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	cf 01       	movw	r24, r30
     b9e:	84 0f       	add	r24, r20
     ba0:	95 1f       	adc	r25, r21
     ba2:	9f 83       	std	Y+7, r25	; 0x07
     ba4:	8e 83       	std	Y+6, r24	; 0x06
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	8d 8f       	std	Y+29, r24	; 0x1d
     baa:	8e 8f       	std	Y+30, r24	; 0x1e
     bac:	61 11       	cpse	r22, r1
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <xQueueGenericReset+0x6e>
     bb0:	88 85       	ldd	r24, Y+8	; 0x08
     bb2:	88 23       	and	r24, r24
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <xQueueGenericReset+0x7a>
     bb6:	ce 01       	movw	r24, r28
     bb8:	08 96       	adiw	r24, 0x08	; 8
     bba:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTaskRemoveFromEventList>
     bbe:	88 23       	and	r24, r24
     bc0:	41 f0       	breq	.+16     	; 0xbd2 <xQueueGenericReset+0x7a>
     bc2:	32 de       	rcall	.-924    	; 0x828 <vPortYield>
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <xQueueGenericReset+0x7a>
     bc6:	ce 01       	movw	r24, r28
     bc8:	08 96       	adiw	r24, 0x08	; 8
     bca:	f5 dc       	rcall	.-1558   	; 0x5b6 <vListInitialise>
     bcc:	ce 01       	movw	r24, r28
     bce:	41 96       	adiw	r24, 0x11	; 17
     bd0:	f2 dc       	rcall	.-1564   	; 0x5b6 <vListInitialise>
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <xQueueGenericCreate>:
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	08 2f       	mov	r16, r24
     bea:	16 2f       	mov	r17, r22
     bec:	f4 2e       	mov	r15, r20
     bee:	66 23       	and	r22, r22
     bf0:	b9 f0       	breq	.+46     	; 0xc20 <xQueueGenericCreate+0x42>
     bf2:	86 9f       	mul	r24, r22
     bf4:	c0 01       	movw	r24, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	81 96       	adiw	r24, 0x21	; 33
     bfa:	bb dc       	rcall	.-1674   	; 0x572 <pvPortMalloc>
     bfc:	ec 01       	movw	r28, r24
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	41 f4       	brne	.+16     	; 0xc12 <xQueueGenericCreate+0x34>
     c02:	14 c0       	rjmp	.+40     	; 0xc2c <xQueueGenericCreate+0x4e>
     c04:	0b 8f       	std	Y+27, r16	; 0x1b
     c06:	1c 8f       	std	Y+28, r17	; 0x1c
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	ce 01       	movw	r24, r28
     c0c:	a5 df       	rcall	.-182    	; 0xb58 <xQueueGenericReset>
     c0e:	f8 a2       	std	Y+32, r15	; 0x20
     c10:	0d c0       	rjmp	.+26     	; 0xc2c <xQueueGenericCreate+0x4e>
     c12:	81 96       	adiw	r24, 0x21	; 33
     c14:	99 83       	std	Y+1, r25	; 0x01
     c16:	88 83       	st	Y, r24
     c18:	f5 cf       	rjmp	.-22     	; 0xc04 <xQueueGenericCreate+0x26>
     c1a:	d9 83       	std	Y+1, r29	; 0x01
     c1c:	c8 83       	st	Y, r28
     c1e:	f2 cf       	rjmp	.-28     	; 0xc04 <xQueueGenericCreate+0x26>
     c20:	81 e2       	ldi	r24, 0x21	; 33
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a6 dc       	rcall	.-1716   	; 0x572 <pvPortMalloc>
     c26:	ec 01       	movw	r28, r24
     c28:	89 2b       	or	r24, r25
     c2a:	b9 f7       	brne	.-18     	; 0xc1a <xQueueGenericCreate+0x3c>
     c2c:	ce 01       	movw	r24, r28
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	08 95       	ret

00000c3a <xQueueGenericSend>:
     c3a:	9f 92       	push	r9
     c3c:	af 92       	push	r10
     c3e:	bf 92       	push	r11
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	00 d0       	rcall	.+0      	; 0xc52 <xQueueGenericSend+0x18>
     c52:	1f 92       	push	r1
     c54:	1f 92       	push	r1
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	8c 01       	movw	r16, r24
     c5c:	6b 01       	movw	r12, r22
     c5e:	5d 83       	std	Y+5, r21	; 0x05
     c60:	4c 83       	std	Y+4, r20	; 0x04
     c62:	a2 2e       	mov	r10, r18
     c64:	b1 2c       	mov	r11, r1
     c66:	99 24       	eor	r9, r9
     c68:	93 94       	inc	r9
     c6a:	7c 01       	movw	r14, r24
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	e8 0e       	add	r14, r24
     c70:	f1 1c       	adc	r15, r1
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	0f 92       	push	r0
     c78:	f8 01       	movw	r30, r16
     c7a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c7c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c7e:	98 17       	cp	r25, r24
     c80:	18 f0       	brcs	.+6      	; 0xc88 <xQueueGenericSend+0x4e>
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	af 12       	cpse	r10, r31
     c86:	16 c0       	rjmp	.+44     	; 0xcb4 <xQueueGenericSend+0x7a>
     c88:	4a 2d       	mov	r20, r10
     c8a:	b6 01       	movw	r22, r12
     c8c:	c8 01       	movw	r24, r16
     c8e:	9e de       	rcall	.-708    	; 0x9cc <prvCopyDataToQueue>
     c90:	f8 01       	movw	r30, r16
     c92:	91 89       	ldd	r25, Z+17	; 0x11
     c94:	99 23       	and	r25, r25
     c96:	41 f0       	breq	.+16     	; 0xca8 <xQueueGenericSend+0x6e>
     c98:	c8 01       	movw	r24, r16
     c9a:	41 96       	adiw	r24, 0x11	; 17
     c9c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTaskRemoveFromEventList>
     ca0:	88 23       	and	r24, r24
     ca2:	21 f0       	breq	.+8      	; 0xcac <xQueueGenericSend+0x72>
     ca4:	c1 dd       	rcall	.-1150   	; 0x828 <vPortYield>
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <xQueueGenericSend+0x72>
     ca8:	81 11       	cpse	r24, r1
     caa:	be dd       	rcall	.-1156   	; 0x828 <vPortYield>
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	47 c0       	rjmp	.+142    	; 0xd42 <xQueueGenericSend+0x108>
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	9d 81       	ldd	r25, Y+5	; 0x05
     cb8:	89 2b       	or	r24, r25
     cba:	21 f4       	brne	.+8      	; 0xcc4 <xQueueGenericSend+0x8a>
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	3f c0       	rjmp	.+126    	; 0xd42 <xQueueGenericSend+0x108>
     cc4:	b1 10       	cpse	r11, r1
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <xQueueGenericSend+0x98>
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <vTaskInternalSetTimeOutState>
     cd0:	b9 2c       	mov	r11, r9
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	eb d5       	rcall	.+3030   	; 0x18ae <vTaskSuspendAll>
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	0f 92       	push	r0
     cde:	f8 01       	movw	r30, r16
     ce0:	85 8d       	ldd	r24, Z+29	; 0x1d
     ce2:	8f 3f       	cpi	r24, 0xFF	; 255
     ce4:	09 f4       	brne	.+2      	; 0xce8 <xQueueGenericSend+0xae>
     ce6:	15 8e       	std	Z+29, r1	; 0x1d
     ce8:	f8 01       	movw	r30, r16
     cea:	86 8d       	ldd	r24, Z+30	; 0x1e
     cec:	8f 3f       	cpi	r24, 0xFF	; 255
     cee:	09 f4       	brne	.+2      	; 0xcf2 <xQueueGenericSend+0xb8>
     cf0:	16 8e       	std	Z+30, r1	; 0x1e
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	be 01       	movw	r22, r28
     cf8:	6c 5f       	subi	r22, 0xFC	; 252
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <xTaskCheckForTimeOut>
     d04:	81 11       	cpse	r24, r1
     d06:	19 c0       	rjmp	.+50     	; 0xd3a <xQueueGenericSend+0x100>
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	0f 92       	push	r0
     d0e:	f8 01       	movw	r30, r16
     d10:	92 8d       	ldd	r25, Z+26	; 0x1a
     d12:	83 8d       	ldd	r24, Z+27	; 0x1b
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	98 13       	cpse	r25, r24
     d1a:	0b c0       	rjmp	.+22     	; 0xd32 <xQueueGenericSend+0xf8>
     d1c:	6c 81       	ldd	r22, Y+4	; 0x04
     d1e:	7d 81       	ldd	r23, Y+5	; 0x05
     d20:	c7 01       	movw	r24, r14
     d22:	ab d7       	rcall	.+3926   	; 0x1c7a <vTaskPlaceOnEventList>
     d24:	c8 01       	movw	r24, r16
     d26:	cb de       	rcall	.-618    	; 0xabe <prvUnlockQueue>
     d28:	8c d6       	rcall	.+3352   	; 0x1a42 <xTaskResumeAll>
     d2a:	81 11       	cpse	r24, r1
     d2c:	a2 cf       	rjmp	.-188    	; 0xc72 <xQueueGenericSend+0x38>
     d2e:	7c dd       	rcall	.-1288   	; 0x828 <vPortYield>
     d30:	a0 cf       	rjmp	.-192    	; 0xc72 <xQueueGenericSend+0x38>
     d32:	c8 01       	movw	r24, r16
     d34:	c4 de       	rcall	.-632    	; 0xabe <prvUnlockQueue>
     d36:	85 d6       	rcall	.+3338   	; 0x1a42 <xTaskResumeAll>
     d38:	9c cf       	rjmp	.-200    	; 0xc72 <xQueueGenericSend+0x38>
     d3a:	c8 01       	movw	r24, r16
     d3c:	c0 de       	rcall	.-640    	; 0xabe <prvUnlockQueue>
     d3e:	81 d6       	rcall	.+3330   	; 0x1a42 <xTaskResumeAll>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	af 90       	pop	r10
     d60:	9f 90       	pop	r9
     d62:	08 95       	ret

00000d64 <xQueueCreateMutex>:
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	48 2f       	mov	r20, r24
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	37 df       	rcall	.-402    	; 0xbde <xQueueGenericCreate>
     d70:	ec 01       	movw	r28, r24
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	59 f0       	breq	.+22     	; 0xd8c <xQueueCreateMutex+0x28>
     d76:	1d 82       	std	Y+5, r1	; 0x05
     d78:	1c 82       	std	Y+4, r1	; 0x04
     d7a:	19 82       	std	Y+1, r1	; 0x01
     d7c:	18 82       	st	Y, r1
     d7e:	1e 82       	std	Y+6, r1	; 0x06
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	57 df       	rcall	.-338    	; 0xc3a <xQueueGenericSend>
     d8c:	ce 01       	movw	r24, r28
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <xQueueGenericSendFromISR>:
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	8a 01       	movw	r16, r20
     da2:	fc 01       	movw	r30, r24
     da4:	52 8d       	ldd	r21, Z+26	; 0x1a
     da6:	33 8d       	ldd	r19, Z+27	; 0x1b
     da8:	53 17       	cp	r21, r19
     daa:	10 f0       	brcs	.+4      	; 0xdb0 <xQueueGenericSendFromISR+0x1c>
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	e1 f4       	brne	.+56     	; 0xde8 <xQueueGenericSendFromISR+0x54>
     db0:	42 2f       	mov	r20, r18
     db2:	78 01       	movw	r14, r16
     db4:	ec 01       	movw	r28, r24
     db6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     db8:	09 de       	rcall	.-1006   	; 0x9cc <prvCopyDataToQueue>
     dba:	1f 3f       	cpi	r17, 0xFF	; 255
     dbc:	79 f4       	brne	.+30     	; 0xddc <xQueueGenericSendFromISR+0x48>
     dbe:	89 89       	ldd	r24, Y+17	; 0x11
     dc0:	88 23       	and	r24, r24
     dc2:	a1 f0       	breq	.+40     	; 0xdec <xQueueGenericSendFromISR+0x58>
     dc4:	ce 01       	movw	r24, r28
     dc6:	41 96       	adiw	r24, 0x11	; 17
     dc8:	81 d7       	rcall	.+3842   	; 0x1ccc <xTaskRemoveFromEventList>
     dca:	88 23       	and	r24, r24
     dcc:	89 f0       	breq	.+34     	; 0xdf0 <xQueueGenericSendFromISR+0x5c>
     dce:	e1 14       	cp	r14, r1
     dd0:	f1 04       	cpc	r15, r1
     dd2:	81 f0       	breq	.+32     	; 0xdf4 <xQueueGenericSendFromISR+0x60>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	f7 01       	movw	r30, r14
     dd8:	80 83       	st	Z, r24
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <xQueueGenericSendFromISR+0x62>
     ddc:	ff 24       	eor	r15, r15
     dde:	f3 94       	inc	r15
     de0:	f1 0e       	add	r15, r17
     de2:	fe 8e       	std	Y+30, r15	; 0x1e
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <xQueueGenericSendFromISR+0x62>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <xQueueGenericSendFromISR+0x62>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <xQueueGenericSendFromISR+0x62>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <xQueueGenericSendFromISR+0x62>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	08 95       	ret

00000e04 <xQueueReceive>:
     e04:	9f 92       	push	r9
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <xQueueReceive+0x18>
     e1c:	1f 92       	push	r1
     e1e:	1f 92       	push	r1
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	8c 01       	movw	r16, r24
     e26:	5b 01       	movw	r10, r22
     e28:	5d 83       	std	Y+5, r21	; 0x05
     e2a:	4c 83       	std	Y+4, r20	; 0x04
     e2c:	e1 2c       	mov	r14, r1
     e2e:	99 24       	eor	r9, r9
     e30:	93 94       	inc	r9
     e32:	6c 01       	movw	r12, r24
     e34:	81 e1       	ldi	r24, 0x11	; 17
     e36:	c8 0e       	add	r12, r24
     e38:	d1 1c       	adc	r13, r1
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	0f 92       	push	r0
     e40:	f8 01       	movw	r30, r16
     e42:	f2 8c       	ldd	r15, Z+26	; 0x1a
     e44:	ff 20       	and	r15, r15
     e46:	91 f0       	breq	.+36     	; 0xe6c <xQueueReceive+0x68>
     e48:	b5 01       	movw	r22, r10
     e4a:	c8 01       	movw	r24, r16
     e4c:	1e de       	rcall	.-964    	; 0xa8a <prvCopyDataFromQueue>
     e4e:	fa 94       	dec	r15
     e50:	f8 01       	movw	r30, r16
     e52:	f2 8e       	std	Z+26, r15	; 0x1a
     e54:	80 85       	ldd	r24, Z+8	; 0x08
     e56:	88 23       	and	r24, r24
     e58:	29 f0       	breq	.+10     	; 0xe64 <xQueueReceive+0x60>
     e5a:	c8 01       	movw	r24, r16
     e5c:	08 96       	adiw	r24, 0x08	; 8
     e5e:	36 d7       	rcall	.+3692   	; 0x1ccc <xTaskRemoveFromEventList>
     e60:	81 11       	cpse	r24, r1
     e62:	e2 dc       	rcall	.-1596   	; 0x828 <vPortYield>
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	44 c0       	rjmp	.+136    	; 0xef4 <xQueueReceive+0xf0>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	89 2b       	or	r24, r25
     e72:	21 f4       	brne	.+8      	; 0xe7c <xQueueReceive+0x78>
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	3c c0       	rjmp	.+120    	; 0xef4 <xQueueReceive+0xf0>
     e7c:	e1 10       	cpse	r14, r1
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <xQueueReceive+0x84>
     e80:	ce 01       	movw	r24, r28
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	6b d7       	rcall	.+3798   	; 0x1d5c <vTaskInternalSetTimeOutState>
     e86:	e9 2c       	mov	r14, r9
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	10 d5       	rcall	.+2592   	; 0x18ae <vTaskSuspendAll>
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	0f 92       	push	r0
     e94:	f8 01       	movw	r30, r16
     e96:	85 8d       	ldd	r24, Z+29	; 0x1d
     e98:	8f 3f       	cpi	r24, 0xFF	; 255
     e9a:	09 f4       	brne	.+2      	; 0xe9e <xQueueReceive+0x9a>
     e9c:	15 8e       	std	Z+29, r1	; 0x1d
     e9e:	f8 01       	movw	r30, r16
     ea0:	86 8d       	ldd	r24, Z+30	; 0x1e
     ea2:	8f 3f       	cpi	r24, 0xFF	; 255
     ea4:	09 f4       	brne	.+2      	; 0xea8 <xQueueReceive+0xa4>
     ea6:	16 8e       	std	Z+30, r1	; 0x1e
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	be 01       	movw	r22, r28
     eae:	6c 5f       	subi	r22, 0xFC	; 252
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	5d d7       	rcall	.+3770   	; 0x1d72 <xTaskCheckForTimeOut>
     eb8:	81 11       	cpse	r24, r1
     eba:	13 c0       	rjmp	.+38     	; 0xee2 <xQueueReceive+0xde>
     ebc:	c8 01       	movw	r24, r16
     ebe:	7b dd       	rcall	.-1290   	; 0x9b6 <prvIsQueueEmpty>
     ec0:	88 23       	and	r24, r24
     ec2:	59 f0       	breq	.+22     	; 0xeda <xQueueReceive+0xd6>
     ec4:	6c 81       	ldd	r22, Y+4	; 0x04
     ec6:	7d 81       	ldd	r23, Y+5	; 0x05
     ec8:	c6 01       	movw	r24, r12
     eca:	d7 d6       	rcall	.+3502   	; 0x1c7a <vTaskPlaceOnEventList>
     ecc:	c8 01       	movw	r24, r16
     ece:	f7 dd       	rcall	.-1042   	; 0xabe <prvUnlockQueue>
     ed0:	b8 d5       	rcall	.+2928   	; 0x1a42 <xTaskResumeAll>
     ed2:	81 11       	cpse	r24, r1
     ed4:	b2 cf       	rjmp	.-156    	; 0xe3a <xQueueReceive+0x36>
     ed6:	a8 dc       	rcall	.-1712   	; 0x828 <vPortYield>
     ed8:	b0 cf       	rjmp	.-160    	; 0xe3a <xQueueReceive+0x36>
     eda:	c8 01       	movw	r24, r16
     edc:	f0 dd       	rcall	.-1056   	; 0xabe <prvUnlockQueue>
     ede:	b1 d5       	rcall	.+2914   	; 0x1a42 <xTaskResumeAll>
     ee0:	ac cf       	rjmp	.-168    	; 0xe3a <xQueueReceive+0x36>
     ee2:	c8 01       	movw	r24, r16
     ee4:	ec dd       	rcall	.-1064   	; 0xabe <prvUnlockQueue>
     ee6:	ad d5       	rcall	.+2906   	; 0x1a42 <xTaskResumeAll>
     ee8:	c8 01       	movw	r24, r16
     eea:	65 dd       	rcall	.-1334   	; 0x9b6 <prvIsQueueEmpty>
     eec:	88 23       	and	r24, r24
     eee:	09 f4       	brne	.+2      	; 0xef2 <xQueueReceive+0xee>
     ef0:	a4 cf       	rjmp	.-184    	; 0xe3a <xQueueReceive+0x36>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	08 95       	ret

00000f16 <xQueueSemaphoreTake>:
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	00 d0       	rcall	.+0      	; 0xf2a <xQueueSemaphoreTake+0x14>
     f2a:	1f 92       	push	r1
     f2c:	1f 92       	push	r1
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8c 01       	movw	r16, r24
     f34:	7d 83       	std	Y+5, r23	; 0x05
     f36:	6c 83       	std	Y+4, r22	; 0x04
     f38:	b1 2c       	mov	r11, r1
     f3a:	d1 2c       	mov	r13, r1
     f3c:	cc 24       	eor	r12, r12
     f3e:	c3 94       	inc	r12
     f40:	7c 01       	movw	r14, r24
     f42:	81 e1       	ldi	r24, 0x11	; 17
     f44:	e8 0e       	add	r14, r24
     f46:	f1 1c       	adc	r15, r1
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	0f 92       	push	r0
     f4e:	d8 01       	movw	r26, r16
     f50:	5a 96       	adiw	r26, 0x1a	; 26
     f52:	8c 91       	ld	r24, X
     f54:	5a 97       	sbiw	r26, 0x1a	; 26
     f56:	88 23       	and	r24, r24
     f58:	d9 f0       	breq	.+54     	; 0xf90 <xQueueSemaphoreTake+0x7a>
     f5a:	81 50       	subi	r24, 0x01	; 1
     f5c:	5a 96       	adiw	r26, 0x1a	; 26
     f5e:	8c 93       	st	X, r24
     f60:	5a 97       	sbiw	r26, 0x1a	; 26
     f62:	8d 91       	ld	r24, X+
     f64:	9c 91       	ld	r25, X
     f66:	89 2b       	or	r24, r25
     f68:	29 f4       	brne	.+10     	; 0xf74 <xQueueSemaphoreTake+0x5e>
     f6a:	0e 94 07 10 	call	0x200e	; 0x200e <pvTaskIncrementMutexHeldCount>
     f6e:	f8 01       	movw	r30, r16
     f70:	95 83       	std	Z+5, r25	; 0x05
     f72:	84 83       	std	Z+4, r24	; 0x04
     f74:	d8 01       	movw	r26, r16
     f76:	18 96       	adiw	r26, 0x08	; 8
     f78:	8c 91       	ld	r24, X
     f7a:	88 23       	and	r24, r24
     f7c:	29 f0       	breq	.+10     	; 0xf88 <xQueueSemaphoreTake+0x72>
     f7e:	c8 01       	movw	r24, r16
     f80:	08 96       	adiw	r24, 0x08	; 8
     f82:	a4 d6       	rcall	.+3400   	; 0x1ccc <xTaskRemoveFromEventList>
     f84:	81 11       	cpse	r24, r1
     f86:	50 dc       	rcall	.-1888   	; 0x828 <vPortYield>
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	70 c0       	rjmp	.+224    	; 0x1070 <xQueueSemaphoreTake+0x15a>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	89 2b       	or	r24, r25
     f96:	21 f4       	brne	.+8      	; 0xfa0 <xQueueSemaphoreTake+0x8a>
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	68 c0       	rjmp	.+208    	; 0x1070 <xQueueSemaphoreTake+0x15a>
     fa0:	d1 10       	cpse	r13, r1
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <xQueueSemaphoreTake+0x96>
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	d9 d6       	rcall	.+3506   	; 0x1d5c <vTaskInternalSetTimeOutState>
     faa:	dc 2c       	mov	r13, r12
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	7e d4       	rcall	.+2300   	; 0x18ae <vTaskSuspendAll>
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
     fb8:	f8 01       	movw	r30, r16
     fba:	85 8d       	ldd	r24, Z+29	; 0x1d
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <xQueueSemaphoreTake+0xac>
     fc0:	15 8e       	std	Z+29, r1	; 0x1d
     fc2:	d8 01       	movw	r26, r16
     fc4:	5e 96       	adiw	r26, 0x1e	; 30
     fc6:	8c 91       	ld	r24, X
     fc8:	5e 97       	sbiw	r26, 0x1e	; 30
     fca:	8f 3f       	cpi	r24, 0xFF	; 255
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <xQueueSemaphoreTake+0xbc>
     fce:	5e 96       	adiw	r26, 0x1e	; 30
     fd0:	1c 92       	st	X, r1
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	be 01       	movw	r22, r28
     fd8:	6c 5f       	subi	r22, 0xFC	; 252
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	c8 d6       	rcall	.+3472   	; 0x1d72 <xTaskCheckForTimeOut>
     fe2:	81 11       	cpse	r24, r1
     fe4:	21 c0       	rjmp	.+66     	; 0x1028 <xQueueSemaphoreTake+0x112>
     fe6:	c8 01       	movw	r24, r16
     fe8:	e6 dc       	rcall	.-1588   	; 0x9b6 <prvIsQueueEmpty>
     fea:	88 23       	and	r24, r24
     fec:	c9 f0       	breq	.+50     	; 0x1020 <xQueueSemaphoreTake+0x10a>
     fee:	f8 01       	movw	r30, r16
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	89 2b       	or	r24, r25
     ff6:	49 f4       	brne	.+18     	; 0x100a <xQueueSemaphoreTake+0xf4>
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	0f 92       	push	r0
     ffe:	84 81       	ldd	r24, Z+4	; 0x04
    1000:	95 81       	ldd	r25, Z+5	; 0x05
    1002:	03 d7       	rcall	.+3590   	; 0x1e0a <xTaskPriorityInherit>
    1004:	b8 2e       	mov	r11, r24
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	6c 81       	ldd	r22, Y+4	; 0x04
    100c:	7d 81       	ldd	r23, Y+5	; 0x05
    100e:	c7 01       	movw	r24, r14
    1010:	34 d6       	rcall	.+3176   	; 0x1c7a <vTaskPlaceOnEventList>
    1012:	c8 01       	movw	r24, r16
    1014:	54 dd       	rcall	.-1368   	; 0xabe <prvUnlockQueue>
    1016:	15 d5       	rcall	.+2602   	; 0x1a42 <xTaskResumeAll>
    1018:	81 11       	cpse	r24, r1
    101a:	96 cf       	rjmp	.-212    	; 0xf48 <xQueueSemaphoreTake+0x32>
    101c:	05 dc       	rcall	.-2038   	; 0x828 <vPortYield>
    101e:	94 cf       	rjmp	.-216    	; 0xf48 <xQueueSemaphoreTake+0x32>
    1020:	c8 01       	movw	r24, r16
    1022:	4d dd       	rcall	.-1382   	; 0xabe <prvUnlockQueue>
    1024:	0e d5       	rcall	.+2588   	; 0x1a42 <xTaskResumeAll>
    1026:	90 cf       	rjmp	.-224    	; 0xf48 <xQueueSemaphoreTake+0x32>
    1028:	c8 01       	movw	r24, r16
    102a:	49 dd       	rcall	.-1390   	; 0xabe <prvUnlockQueue>
    102c:	0a d5       	rcall	.+2580   	; 0x1a42 <xTaskResumeAll>
    102e:	c8 01       	movw	r24, r16
    1030:	c2 dc       	rcall	.-1660   	; 0x9b6 <prvIsQueueEmpty>
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <xQueueSemaphoreTake+0x122>
    1036:	88 cf       	rjmp	.-240    	; 0xf48 <xQueueSemaphoreTake+0x32>
    1038:	bb 20       	and	r11, r11
    103a:	c9 f0       	breq	.+50     	; 0x106e <xQueueSemaphoreTake+0x158>
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	0f 92       	push	r0
    1042:	f8 01       	movw	r30, r16
    1044:	81 89       	ldd	r24, Z+17	; 0x11
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <xQueueSemaphoreTake+0x142>
    104a:	06 88       	ldd	r0, Z+22	; 0x16
    104c:	f7 89       	ldd	r31, Z+23	; 0x17
    104e:	e0 2d       	mov	r30, r0
    1050:	80 81       	ld	r24, Z
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	68 1b       	sub	r22, r24
    1056:	01 c0       	rjmp	.+2      	; 0x105a <xQueueSemaphoreTake+0x144>
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	d8 01       	movw	r26, r16
    105c:	14 96       	adiw	r26, 0x04	; 4
    105e:	8d 91       	ld	r24, X+
    1060:	9c 91       	ld	r25, X
    1062:	15 97       	sbiw	r26, 0x05	; 5
    1064:	84 d7       	rcall	.+3848   	; 0x1f6e <vTaskPriorityDisinheritAfterTimeout>
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <xQueueSemaphoreTake+0x15a>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	cf 90       	pop	r12
    108a:	bf 90       	pop	r11
    108c:	08 95       	ret

0000108e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	0f 92       	push	r0
    109a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    109c:	8f 3f       	cpi	r24, 0xFF	; 255
    109e:	09 f4       	brne	.+2      	; 0x10a2 <vQueueWaitForMessageRestricted+0x14>
    10a0:	1d 8e       	std	Y+29, r1	; 0x1d
    10a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a4:	8f 3f       	cpi	r24, 0xFF	; 255
    10a6:	09 f4       	brne	.+2      	; 0x10aa <vQueueWaitForMessageRestricted+0x1c>
    10a8:	1e 8e       	std	Y+30, r1	; 0x1e
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    10ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10b0:	81 11       	cpse	r24, r1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    10b4:	ce 01       	movw	r24, r28
    10b6:	41 96       	adiw	r24, 0x11	; 17
    10b8:	f1 d5       	rcall	.+3042   	; 0x1c9c <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    10ba:	ce 01       	movw	r24, r28
    10bc:	00 dd       	rcall	.-1536   	; 0xabe <prvUnlockQueue>
    }
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    10c4:	fc 01       	movw	r30, r24
    10c6:	44 81       	ldd	r20, Z+4	; 0x04
    10c8:	55 81       	ldd	r21, Z+5	; 0x05
    10ca:	22 81       	ldd	r18, Z+2	; 0x02
    10cc:	33 81       	ldd	r19, Z+3	; 0x03
    10ce:	24 0f       	add	r18, r20
    10d0:	35 1f       	adc	r19, r21
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	b9 01       	movw	r22, r18
    10d8:	68 1b       	sub	r22, r24
    10da:	79 0b       	sbc	r23, r25
    10dc:	cb 01       	movw	r24, r22
    10de:	64 17       	cp	r22, r20
    10e0:	75 07       	cpc	r23, r21
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <prvBytesInBuffer+0x24>
    10e4:	84 1b       	sub	r24, r20
    10e6:	95 0b       	sbc	r25, r21
    10e8:	08 95       	ret

000010ea <prvWriteBytesToBuffer>:
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	6c 01       	movw	r12, r24
    1100:	5b 01       	movw	r10, r22
    1102:	7a 01       	movw	r14, r20
    1104:	fc 01       	movw	r30, r24
    1106:	c2 81       	ldd	r28, Z+2	; 0x02
    1108:	d3 81       	ldd	r29, Z+3	; 0x03
    110a:	04 81       	ldd	r16, Z+4	; 0x04
    110c:	15 81       	ldd	r17, Z+5	; 0x05
    110e:	0c 1b       	sub	r16, r28
    1110:	1d 0b       	sbc	r17, r29
    1112:	40 17       	cp	r20, r16
    1114:	51 07       	cpc	r21, r17
    1116:	08 f4       	brcc	.+2      	; 0x111a <prvWriteBytesToBuffer+0x30>
    1118:	8a 01       	movw	r16, r20
    111a:	f6 01       	movw	r30, r12
    111c:	84 85       	ldd	r24, Z+12	; 0x0c
    111e:	95 85       	ldd	r25, Z+13	; 0x0d
    1120:	a8 01       	movw	r20, r16
    1122:	b5 01       	movw	r22, r10
    1124:	8c 0f       	add	r24, r28
    1126:	9d 1f       	adc	r25, r29
    1128:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <memcpy>
    112c:	0e 15       	cp	r16, r14
    112e:	1f 05       	cpc	r17, r15
    1130:	58 f4       	brcc	.+22     	; 0x1148 <prvWriteBytesToBuffer+0x5e>
    1132:	a7 01       	movw	r20, r14
    1134:	40 1b       	sub	r20, r16
    1136:	51 0b       	sbc	r21, r17
    1138:	b5 01       	movw	r22, r10
    113a:	60 0f       	add	r22, r16
    113c:	71 1f       	adc	r23, r17
    113e:	f6 01       	movw	r30, r12
    1140:	84 85       	ldd	r24, Z+12	; 0x0c
    1142:	95 85       	ldd	r25, Z+13	; 0x0d
    1144:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <memcpy>
    1148:	ce 01       	movw	r24, r28
    114a:	8e 0d       	add	r24, r14
    114c:	9f 1d       	adc	r25, r15
    114e:	f6 01       	movw	r30, r12
    1150:	24 81       	ldd	r18, Z+4	; 0x04
    1152:	35 81       	ldd	r19, Z+5	; 0x05
    1154:	82 17       	cp	r24, r18
    1156:	93 07       	cpc	r25, r19
    1158:	10 f0       	brcs	.+4      	; 0x115e <prvWriteBytesToBuffer+0x74>
    115a:	82 1b       	sub	r24, r18
    115c:	93 0b       	sbc	r25, r19
    115e:	f6 01       	movw	r30, r12
    1160:	93 83       	std	Z+3, r25	; 0x03
    1162:	82 83       	std	Z+2, r24	; 0x02
    1164:	c7 01       	movw	r24, r14
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	af 90       	pop	r10
    117a:	08 95       	ret

0000117c <prvWriteMessageToBuffer>:
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	1f 92       	push	r1
    118e:	1f 92       	push	r1
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	5a 83       	std	Y+2, r21	; 0x02
    1196:	49 83       	std	Y+1, r20	; 0x01
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	c9 f0       	breq	.+50     	; 0x11d0 <prvWriteMessageToBuffer+0x54>
    119e:	6b 01       	movw	r12, r22
    11a0:	7c 01       	movw	r14, r24
    11a2:	fc 01       	movw	r30, r24
    11a4:	86 85       	ldd	r24, Z+14	; 0x0e
    11a6:	80 fd       	sbrc	r24, 0
    11a8:	08 c0       	rjmp	.+16     	; 0x11ba <prvWriteMessageToBuffer+0x3e>
    11aa:	ca 01       	movw	r24, r20
    11ac:	24 17       	cp	r18, r20
    11ae:	35 07       	cpc	r19, r21
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <prvWriteMessageToBuffer+0x38>
    11b2:	c9 01       	movw	r24, r18
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	11 c0       	rjmp	.+34     	; 0x11dc <prvWriteMessageToBuffer+0x60>
    11ba:	20 17       	cp	r18, r16
    11bc:	31 07       	cpc	r19, r17
    11be:	58 f0       	brcs	.+22     	; 0x11d6 <prvWriteMessageToBuffer+0x5a>
    11c0:	42 e0       	ldi	r20, 0x02	; 2
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	be 01       	movw	r22, r28
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	c7 01       	movw	r24, r14
    11cc:	8e df       	rcall	.-228    	; 0x10ea <prvWriteBytesToBuffer>
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <prvWriteMessageToBuffer+0x60>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <prvWriteMessageToBuffer+0x6a>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <prvWriteMessageToBuffer+0x6a>
    11dc:	49 81       	ldd	r20, Y+1	; 0x01
    11de:	5a 81       	ldd	r21, Y+2	; 0x02
    11e0:	b6 01       	movw	r22, r12
    11e2:	c7 01       	movw	r24, r14
    11e4:	82 df       	rcall	.-252    	; 0x10ea <prvWriteBytesToBuffer>
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	08 95       	ret

000011fc <prvReadBytesFromBuffer>:
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	7c 01       	movw	r14, r24
    1212:	5b 01       	movw	r10, r22
    1214:	e9 01       	movw	r28, r18
    1216:	42 17       	cp	r20, r18
    1218:	53 07       	cpc	r21, r19
    121a:	08 f4       	brcc	.+2      	; 0x121e <prvReadBytesFromBuffer+0x22>
    121c:	ea 01       	movw	r28, r20
    121e:	20 97       	sbiw	r28, 0x00	; 0
    1220:	79 f1       	breq	.+94     	; 0x1280 <prvReadBytesFromBuffer+0x84>
    1222:	f7 01       	movw	r30, r14
    1224:	00 81       	ld	r16, Z
    1226:	11 81       	ldd	r17, Z+1	; 0x01
    1228:	c4 80       	ldd	r12, Z+4	; 0x04
    122a:	d5 80       	ldd	r13, Z+5	; 0x05
    122c:	c0 1a       	sub	r12, r16
    122e:	d1 0a       	sbc	r13, r17
    1230:	cc 15       	cp	r28, r12
    1232:	dd 05       	cpc	r29, r13
    1234:	08 f4       	brcc	.+2      	; 0x1238 <prvReadBytesFromBuffer+0x3c>
    1236:	6e 01       	movw	r12, r28
    1238:	f7 01       	movw	r30, r14
    123a:	64 85       	ldd	r22, Z+12	; 0x0c
    123c:	75 85       	ldd	r23, Z+13	; 0x0d
    123e:	60 0f       	add	r22, r16
    1240:	71 1f       	adc	r23, r17
    1242:	a6 01       	movw	r20, r12
    1244:	c5 01       	movw	r24, r10
    1246:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <memcpy>
    124a:	cc 16       	cp	r12, r28
    124c:	dd 06       	cpc	r13, r29
    124e:	58 f4       	brcc	.+22     	; 0x1266 <prvReadBytesFromBuffer+0x6a>
    1250:	ae 01       	movw	r20, r28
    1252:	4c 19       	sub	r20, r12
    1254:	5d 09       	sbc	r21, r13
    1256:	f7 01       	movw	r30, r14
    1258:	64 85       	ldd	r22, Z+12	; 0x0c
    125a:	75 85       	ldd	r23, Z+13	; 0x0d
    125c:	c5 01       	movw	r24, r10
    125e:	8c 0d       	add	r24, r12
    1260:	9d 1d       	adc	r25, r13
    1262:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <memcpy>
    1266:	0c 0f       	add	r16, r28
    1268:	1d 1f       	adc	r17, r29
    126a:	f7 01       	movw	r30, r14
    126c:	84 81       	ldd	r24, Z+4	; 0x04
    126e:	95 81       	ldd	r25, Z+5	; 0x05
    1270:	08 17       	cp	r16, r24
    1272:	19 07       	cpc	r17, r25
    1274:	10 f0       	brcs	.+4      	; 0x127a <prvReadBytesFromBuffer+0x7e>
    1276:	08 1b       	sub	r16, r24
    1278:	19 0b       	sbc	r17, r25
    127a:	f7 01       	movw	r30, r14
    127c:	11 83       	std	Z+1, r17	; 0x01
    127e:	00 83       	st	Z, r16
    1280:	ce 01       	movw	r24, r28
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	08 95       	ret

00001298 <xStreamBufferGenericCreate>:
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	eb 01       	movw	r28, r22
    12a4:	11 e0       	ldi	r17, 0x01	; 1
    12a6:	41 30       	cpi	r20, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <xStreamBufferGenericCreate+0x14>
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	20 97       	sbiw	r28, 0x00	; 0
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <xStreamBufferGenericCreate+0x1c>
    12b0:	c1 e0       	ldi	r28, 0x01	; 1
    12b2:	d0 e0       	ldi	r29, 0x00	; 0
    12b4:	7c 01       	movw	r14, r24
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	e2 1a       	sub	r14, r18
    12ba:	f2 0a       	sbc	r15, r18
    12bc:	41 96       	adiw	r24, 0x11	; 17
    12be:	59 d9       	rcall	.-3406   	; 0x572 <pvPortMalloc>
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <xStreamBufferGenericCreate+0x4c>
    12c4:	20 e1       	ldi	r18, 0x10	; 16
    12c6:	fc 01       	movw	r30, r24
    12c8:	11 92       	st	Z+, r1
    12ca:	2a 95       	dec	r18
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <xStreamBufferGenericCreate+0x30>
    12ce:	9c 01       	movw	r18, r24
    12d0:	20 5f       	subi	r18, 0xF0	; 240
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	fc 01       	movw	r30, r24
    12d6:	35 87       	std	Z+13, r19	; 0x0d
    12d8:	24 87       	std	Z+12, r18	; 0x0c
    12da:	f5 82       	std	Z+5, r15	; 0x05
    12dc:	e4 82       	std	Z+4, r14	; 0x04
    12de:	d7 83       	std	Z+7, r29	; 0x07
    12e0:	c6 83       	std	Z+6, r28	; 0x06
    12e2:	16 87       	std	Z+14, r17	; 0x0e
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	08 95       	ret

000012f0 <xStreamBufferReset>:
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	fc 01       	movw	r30, r24
    12f6:	27 85       	ldd	r18, Z+15	; 0x0f
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	0f 92       	push	r0
    12fe:	80 85       	ldd	r24, Z+8	; 0x08
    1300:	91 85       	ldd	r25, Z+9	; 0x09
    1302:	89 2b       	or	r24, r25
    1304:	d1 f4       	brne	.+52     	; 0x133a <xStreamBufferReset+0x4a>
    1306:	82 85       	ldd	r24, Z+10	; 0x0a
    1308:	93 85       	ldd	r25, Z+11	; 0x0b
    130a:	89 2b       	or	r24, r25
    130c:	c1 f4       	brne	.+48     	; 0x133e <xStreamBufferReset+0x4e>
    130e:	86 85       	ldd	r24, Z+14	; 0x0e
    1310:	46 81       	ldd	r20, Z+6	; 0x06
    1312:	57 81       	ldd	r21, Z+7	; 0x07
    1314:	64 81       	ldd	r22, Z+4	; 0x04
    1316:	75 81       	ldd	r23, Z+5	; 0x05
    1318:	a4 85       	ldd	r26, Z+12	; 0x0c
    131a:	b5 85       	ldd	r27, Z+13	; 0x0d
    131c:	90 e1       	ldi	r25, 0x10	; 16
    131e:	ef 01       	movw	r28, r30
    1320:	19 92       	st	Y+, r1
    1322:	9a 95       	dec	r25
    1324:	e9 f7       	brne	.-6      	; 0x1320 <xStreamBufferReset+0x30>
    1326:	b5 87       	std	Z+13, r27	; 0x0d
    1328:	a4 87       	std	Z+12, r26	; 0x0c
    132a:	75 83       	std	Z+5, r23	; 0x05
    132c:	64 83       	std	Z+4, r22	; 0x04
    132e:	57 83       	std	Z+7, r21	; 0x07
    1330:	46 83       	std	Z+6, r20	; 0x06
    1332:	86 87       	std	Z+14, r24	; 0x0e
    1334:	27 87       	std	Z+15, r18	; 0x0f
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <xStreamBufferReset+0x50>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <xStreamBufferReset+0x50>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <xStreamBufferSpacesAvailable>:
    134a:	fc 01       	movw	r30, r24
    134c:	24 81       	ldd	r18, Z+4	; 0x04
    134e:	35 81       	ldd	r19, Z+5	; 0x05
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	42 81       	ldd	r20, Z+2	; 0x02
    1356:	53 81       	ldd	r21, Z+3	; 0x03
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	84 1b       	sub	r24, r20
    1360:	95 0b       	sbc	r25, r21
    1362:	82 17       	cp	r24, r18
    1364:	93 07       	cpc	r25, r19
    1366:	10 f0       	brcs	.+4      	; 0x136c <xStreamBufferSpacesAvailable+0x22>
    1368:	82 1b       	sub	r24, r18
    136a:	93 0b       	sbc	r25, r19
    136c:	08 95       	ret

0000136e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
    1384:	5b 01       	movw	r10, r22
    1386:	6a 01       	movw	r12, r20
    1388:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    138a:	8e 85       	ldd	r24, Y+14	; 0x0e
    138c:	80 ff       	sbrs	r24, 0
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1390:	8a 01       	movw	r16, r20
    1392:	0e 5f       	subi	r16, 0xFE	; 254
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	01 c0       	rjmp	.+2      	; 0x139a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1398:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    139a:	ce 01       	movw	r24, r28
    139c:	d6 df       	rcall	.-84     	; 0x134a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    139e:	9c 01       	movw	r18, r24
    13a0:	a6 01       	movw	r20, r12
    13a2:	b5 01       	movw	r22, r10
    13a4:	ce 01       	movw	r24, r28
    13a6:	ea de       	rcall	.-556    	; 0x117c <prvWriteMessageToBuffer>
    13a8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    13aa:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13ac:	b1 f0       	breq	.+44     	; 0x13da <xStreamBufferSendFromISR+0x6c>
    13ae:	ce 01       	movw	r24, r28
    13b0:	89 de       	rcall	.-750    	; 0x10c4 <prvBytesInBuffer>
    13b2:	2e 81       	ldd	r18, Y+6	; 0x06
    13b4:	3f 81       	ldd	r19, Y+7	; 0x07
    13b6:	82 17       	cp	r24, r18
    13b8:	93 07       	cpc	r25, r19
    13ba:	78 f0       	brcs	.+30     	; 0x13da <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    13bc:	88 85       	ldd	r24, Y+8	; 0x08
    13be:	99 85       	ldd	r25, Y+9	; 0x09
    13c0:	89 2b       	or	r24, r25
    13c2:	59 f0       	breq	.+22     	; 0x13da <xStreamBufferSendFromISR+0x6c>
    13c4:	88 85       	ldd	r24, Y+8	; 0x08
    13c6:	99 85       	ldd	r25, Y+9	; 0x09
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	10 e0       	ldi	r17, 0x00	; 0
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	ba 01       	movw	r22, r20
    13d4:	2f d7       	rcall	.+3678   	; 0x2234 <xTaskGenericNotifyFromISR>
    13d6:	19 86       	std	Y+9, r1	; 0x09
    13d8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    13da:	c6 01       	movw	r24, r12
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	08 95       	ret

000013f2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    13f2:	6f 92       	push	r6
    13f4:	7f 92       	push	r7
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	1f 92       	push	r1
    1410:	1f 92       	push	r1
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	6c 01       	movw	r12, r24
    1418:	3b 01       	movw	r6, r22
    141a:	4a 01       	movw	r8, r20
    141c:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    141e:	fc 01       	movw	r30, r24
    1420:	86 85       	ldd	r24, Z+14	; 0x0e
    1422:	80 fd       	sbrc	r24, 0
    1424:	03 c0       	rjmp	.+6      	; 0x142c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1426:	a1 2c       	mov	r10, r1
    1428:	b1 2c       	mov	r11, r1
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    142c:	68 94       	set
    142e:	aa 24       	eor	r10, r10
    1430:	a1 f8       	bld	r10, 1
    1432:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1434:	e1 14       	cp	r14, r1
    1436:	f1 04       	cpc	r15, r1
    1438:	29 f1       	breq	.+74     	; 0x1484 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1440:	c6 01       	movw	r24, r12
    1442:	40 de       	rcall	.-896    	; 0x10c4 <prvBytesInBuffer>
    1444:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1446:	a8 16       	cp	r10, r24
    1448:	b9 06       	cpc	r11, r25
    144a:	38 f0       	brcs	.+14     	; 0x145a <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1450:	81 d7       	rcall	.+3842   	; 0x2354 <xTaskNotifyStateClear>
    1452:	c8 d4       	rcall	.+2448   	; 0x1de4 <xTaskGetCurrentTaskHandle>
    1454:	f6 01       	movw	r30, r12
    1456:	91 87       	std	Z+9, r25	; 0x09
    1458:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    145e:	a0 16       	cp	r10, r16
    1460:	b1 06       	cpc	r11, r17
    1462:	b0 f0       	brcs	.+44     	; 0x1490 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1464:	00 e0       	ldi	r16, 0x00	; 0
    1466:	10 e0       	ldi	r17, 0x00	; 0
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	a9 01       	movw	r20, r18
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	cb 01       	movw	r24, r22
    1474:	de d5       	rcall	.+3004   	; 0x2032 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1476:	f6 01       	movw	r30, r12
    1478:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    147a:	10 86       	std	Z+8, r1	; 0x08
    147c:	c6 01       	movw	r24, r12
    147e:	22 de       	rcall	.-956    	; 0x10c4 <prvBytesInBuffer>
    1480:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1482:	03 c0       	rjmp	.+6      	; 0x148a <xStreamBufferReceive+0x98>
    1484:	c6 01       	movw	r24, r12
    1486:	1e de       	rcall	.-964    	; 0x10c4 <prvBytesInBuffer>
    1488:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    148a:	a0 16       	cp	r10, r16
    148c:	b1 06       	cpc	r11, r17
    148e:	b8 f5       	brcc	.+110    	; 0x14fe <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1490:	a1 14       	cp	r10, r1
    1492:	b1 04       	cpc	r11, r1
    1494:	c1 f0       	breq	.+48     	; 0x14c6 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1496:	f6 01       	movw	r30, r12
    1498:	e0 80       	ld	r14, Z
    149a:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    149c:	98 01       	movw	r18, r16
    149e:	a5 01       	movw	r20, r10
    14a0:	be 01       	movw	r22, r28
    14a2:	6f 5f       	subi	r22, 0xFF	; 255
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	c6 01       	movw	r24, r12
    14a8:	a9 de       	rcall	.-686    	; 0x11fc <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    14ae:	0a 19       	sub	r16, r10
    14b0:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    14b2:	88 16       	cp	r8, r24
    14b4:	99 06       	cpc	r9, r25
    14b6:	30 f4       	brcc	.+12     	; 0x14c4 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    14b8:	f6 01       	movw	r30, r12
    14ba:	f1 82       	std	Z+1, r15	; 0x01
    14bc:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    14be:	81 2c       	mov	r8, r1
    14c0:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    14c4:	4c 01       	movw	r8, r24
    14c6:	98 01       	movw	r18, r16
    14c8:	a4 01       	movw	r20, r8
    14ca:	b3 01       	movw	r22, r6
    14cc:	c6 01       	movw	r24, r12
    14ce:	96 de       	rcall	.-724    	; 0x11fc <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    14d0:	7c 01       	movw	r14, r24
    14d2:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    14d4:	b1 f0       	breq	.+44     	; 0x1502 <xStreamBufferReceive+0x110>
    14d6:	eb d1       	rcall	.+982    	; 0x18ae <vTaskSuspendAll>
    14d8:	f6 01       	movw	r30, r12
    14da:	82 85       	ldd	r24, Z+10	; 0x0a
    14dc:	93 85       	ldd	r25, Z+11	; 0x0b
    14de:	89 2b       	or	r24, r25
    14e0:	61 f0       	breq	.+24     	; 0x14fa <xStreamBufferReceive+0x108>
    14e2:	82 85       	ldd	r24, Z+10	; 0x0a
    14e4:	93 85       	ldd	r25, Z+11	; 0x0b
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	ba 01       	movw	r22, r20
    14f2:	22 d6       	rcall	.+3140   	; 0x2138 <xTaskGenericNotify>
    14f4:	f6 01       	movw	r30, r12
    14f6:	13 86       	std	Z+11, r1	; 0x0b
    14f8:	12 86       	std	Z+10, r1	; 0x0a
    14fa:	a3 d2       	rcall	.+1350   	; 0x1a42 <xTaskResumeAll>
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    14fe:	e1 2c       	mov	r14, r1
    1500:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1502:	c7 01       	movw	r24, r14
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
    151c:	9f 90       	pop	r9
    151e:	8f 90       	pop	r8
    1520:	7f 90       	pop	r7
    1522:	6f 90       	pop	r6
    1524:	08 95       	ret

00001526 <prvResetNextTaskUnblockTime>:
    1526:	e0 91 92 09 	lds	r30, 0x0992	; 0x800992 <pxDelayedTaskList>
    152a:	f0 91 93 09 	lds	r31, 0x0993	; 0x800993 <pxDelayedTaskList+0x1>
    152e:	80 81       	ld	r24, Z
    1530:	81 11       	cpse	r24, r1
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <prvResetNextTaskUnblockTime+0x1c>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	90 93 6a 09 	sts	0x096A, r25	; 0x80096a <xNextTaskUnblockTime+0x1>
    153c:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <xNextTaskUnblockTime>
    1540:	08 95       	ret
    1542:	e0 91 92 09 	lds	r30, 0x0992	; 0x800992 <pxDelayedTaskList>
    1546:	f0 91 93 09 	lds	r31, 0x0993	; 0x800993 <pxDelayedTaskList+0x1>
    154a:	05 80       	ldd	r0, Z+5	; 0x05
    154c:	f6 81       	ldd	r31, Z+6	; 0x06
    154e:	e0 2d       	mov	r30, r0
    1550:	06 80       	ldd	r0, Z+6	; 0x06
    1552:	f7 81       	ldd	r31, Z+7	; 0x07
    1554:	e0 2d       	mov	r30, r0
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	90 93 6a 09 	sts	0x096A, r25	; 0x80096a <xNextTaskUnblockTime+0x1>
    155e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <xNextTaskUnblockTime>
    1562:	08 95       	ret

00001564 <prvAddCurrentTaskToDelayedList>:
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	ec 01       	movw	r28, r24
    1570:	f6 2e       	mov	r15, r22
    1572:	00 91 71 09 	lds	r16, 0x0971	; 0x800971 <xTickCount>
    1576:	10 91 72 09 	lds	r17, 0x0972	; 0x800972 <xTickCount+0x1>
    157a:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    157e:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1582:	02 96       	adiw	r24, 0x02	; 2
    1584:	7c d8       	rcall	.-3848   	; 0x67e <uxListRemove>
    1586:	cf 3f       	cpi	r28, 0xFF	; 255
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	d8 07       	cpc	r29, r24
    158c:	61 f4       	brne	.+24     	; 0x15a6 <prvAddCurrentTaskToDelayedList+0x42>
    158e:	ff 20       	and	r15, r15
    1590:	51 f0       	breq	.+20     	; 0x15a6 <prvAddCurrentTaskToDelayedList+0x42>
    1592:	60 91 ca 09 	lds	r22, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1596:	70 91 cb 09 	lds	r23, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	84 e7       	ldi	r24, 0x74	; 116
    15a0:	99 e0       	ldi	r25, 0x09	; 9
    15a2:	1b d8       	rcall	.-4042   	; 0x5da <vListInsertEnd>
    15a4:	2d c0       	rjmp	.+90     	; 0x1600 <prvAddCurrentTaskToDelayedList+0x9c>
    15a6:	c0 0f       	add	r28, r16
    15a8:	d1 1f       	adc	r29, r17
    15aa:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    15ae:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    15b2:	d3 83       	std	Z+3, r29	; 0x03
    15b4:	c2 83       	std	Z+2, r28	; 0x02
    15b6:	c0 17       	cp	r28, r16
    15b8:	d1 07       	cpc	r29, r17
    15ba:	60 f4       	brcc	.+24     	; 0x15d4 <prvAddCurrentTaskToDelayedList+0x70>
    15bc:	60 91 ca 09 	lds	r22, 0x09CA	; 0x8009ca <pxCurrentTCB>
    15c0:	70 91 cb 09 	lds	r23, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    15c4:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <pxOverflowDelayedTaskList>
    15c8:	90 91 91 09 	lds	r25, 0x0991	; 0x800991 <pxOverflowDelayedTaskList+0x1>
    15cc:	6e 5f       	subi	r22, 0xFE	; 254
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	25 d8       	rcall	.-4022   	; 0x61c <vListInsert>
    15d2:	16 c0       	rjmp	.+44     	; 0x1600 <prvAddCurrentTaskToDelayedList+0x9c>
    15d4:	60 91 ca 09 	lds	r22, 0x09CA	; 0x8009ca <pxCurrentTCB>
    15d8:	70 91 cb 09 	lds	r23, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    15dc:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <pxDelayedTaskList>
    15e0:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <pxDelayedTaskList+0x1>
    15e4:	6e 5f       	subi	r22, 0xFE	; 254
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	19 d8       	rcall	.-4046   	; 0x61c <vListInsert>
    15ea:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <xNextTaskUnblockTime>
    15ee:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <xNextTaskUnblockTime+0x1>
    15f2:	c8 17       	cp	r28, r24
    15f4:	d9 07       	cpc	r29, r25
    15f6:	20 f4       	brcc	.+8      	; 0x1600 <prvAddCurrentTaskToDelayedList+0x9c>
    15f8:	d0 93 6a 09 	sts	0x096A, r29	; 0x80096a <xNextTaskUnblockTime+0x1>
    15fc:	c0 93 69 09 	sts	0x0969, r28	; 0x800969 <xNextTaskUnblockTime>
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	08 95       	ret

0000160c <xTaskCreate>:
    160c:	4f 92       	push	r4
    160e:	5f 92       	push	r5
    1610:	6f 92       	push	r6
    1612:	7f 92       	push	r7
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	4c 01       	movw	r8, r24
    162c:	6b 01       	movw	r12, r22
    162e:	5a 01       	movw	r10, r20
    1630:	29 01       	movw	r4, r18
    1632:	ca 01       	movw	r24, r20
    1634:	0e 94 b9 02 	call	0x572	; 0x572 <pvPortMalloc>
    1638:	3c 01       	movw	r6, r24
    163a:	89 2b       	or	r24, r25
    163c:	09 f4       	brne	.+2      	; 0x1640 <xTaskCreate+0x34>
    163e:	f3 c0       	rjmp	.+486    	; 0x1826 <xTaskCreate+0x21a>
    1640:	8c e2       	ldi	r24, 0x2C	; 44
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 b9 02 	call	0x572	; 0x572 <pvPortMalloc>
    1648:	ec 01       	movw	r28, r24
    164a:	89 2b       	or	r24, r25
    164c:	99 f0       	breq	.+38     	; 0x1674 <xTaskCreate+0x68>
    164e:	78 8e       	std	Y+24, r7	; 0x18
    1650:	6f 8a       	std	Y+23, r6	; 0x17
    1652:	a5 01       	movw	r20, r10
    1654:	65 ea       	ldi	r22, 0xA5	; 165
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	c3 01       	movw	r24, r6
    165a:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <memset>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	a8 1a       	sub	r10, r24
    1662:	b1 08       	sbc	r11, r1
    1664:	8f 89       	ldd	r24, Y+23	; 0x17
    1666:	98 8d       	ldd	r25, Y+24	; 0x18
    1668:	a8 0e       	add	r10, r24
    166a:	b9 1e       	adc	r11, r25
    166c:	c1 14       	cp	r12, r1
    166e:	d1 04       	cpc	r13, r1
    1670:	29 f4       	brne	.+10     	; 0x167c <xTaskCreate+0x70>
    1672:	20 c0       	rjmp	.+64     	; 0x16b4 <xTaskCreate+0xa8>
    1674:	c3 01       	movw	r24, r6
    1676:	0e 94 cc 02 	call	0x598	; 0x598 <vPortFree>
    167a:	d5 c0       	rjmp	.+426    	; 0x1826 <xTaskCreate+0x21a>
    167c:	d6 01       	movw	r26, r12
    167e:	8c 91       	ld	r24, X
    1680:	89 8f       	std	Y+25, r24	; 0x19
    1682:	8c 91       	ld	r24, X
    1684:	88 23       	and	r24, r24
    1686:	a1 f0       	breq	.+40     	; 0x16b0 <xTaskCreate+0xa4>
    1688:	ae 01       	movw	r20, r28
    168a:	46 5e       	subi	r20, 0xE6	; 230
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	f6 01       	movw	r30, r12
    1690:	31 96       	adiw	r30, 0x01	; 1
    1692:	b8 e0       	ldi	r27, 0x08	; 8
    1694:	cb 0e       	add	r12, r27
    1696:	d1 1c       	adc	r13, r1
    1698:	cf 01       	movw	r24, r30
    169a:	21 91       	ld	r18, Z+
    169c:	da 01       	movw	r26, r20
    169e:	2d 93       	st	X+, r18
    16a0:	ad 01       	movw	r20, r26
    16a2:	dc 01       	movw	r26, r24
    16a4:	8c 91       	ld	r24, X
    16a6:	88 23       	and	r24, r24
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <xTaskCreate+0xa4>
    16aa:	ec 15       	cp	r30, r12
    16ac:	fd 05       	cpc	r31, r13
    16ae:	a1 f7       	brne	.-24     	; 0x1698 <xTaskCreate+0x8c>
    16b0:	18 a2       	std	Y+32, r1	; 0x20
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <xTaskCreate+0xaa>
    16b4:	19 8e       	std	Y+25, r1	; 0x19
    16b6:	04 30       	cpi	r16, 0x04	; 4
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <xTaskCreate+0xb0>
    16ba:	03 e0       	ldi	r16, 0x03	; 3
    16bc:	0e 8b       	std	Y+22, r16	; 0x16
    16be:	0b a3       	std	Y+35, r16	; 0x23
    16c0:	1c a2       	std	Y+36, r1	; 0x24
    16c2:	6e 01       	movw	r12, r28
    16c4:	b2 e0       	ldi	r27, 0x02	; 2
    16c6:	cb 0e       	add	r12, r27
    16c8:	d1 1c       	adc	r13, r1
    16ca:	c6 01       	movw	r24, r12
    16cc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInitialiseItem>
    16d0:	ce 01       	movw	r24, r28
    16d2:	0c 96       	adiw	r24, 0x0c	; 12
    16d4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInitialiseItem>
    16d8:	d9 87       	std	Y+9, r29	; 0x09
    16da:	c8 87       	std	Y+8, r28	; 0x08
    16dc:	84 e0       	ldi	r24, 0x04	; 4
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	80 1b       	sub	r24, r16
    16e2:	91 09       	sbc	r25, r1
    16e4:	9d 87       	std	Y+13, r25	; 0x0d
    16e6:	8c 87       	std	Y+12, r24	; 0x0c
    16e8:	db 8b       	std	Y+19, r29	; 0x13
    16ea:	ca 8b       	std	Y+18, r28	; 0x12
    16ec:	1e a2       	std	Y+38, r1	; 0x26
    16ee:	1d a2       	std	Y+37, r1	; 0x25
    16f0:	1f a2       	std	Y+39, r1	; 0x27
    16f2:	18 a6       	std	Y+40, r1	; 0x28
    16f4:	19 a6       	std	Y+41, r1	; 0x29
    16f6:	1a a6       	std	Y+42, r1	; 0x2a
    16f8:	1b a6       	std	Y+43, r1	; 0x2b
    16fa:	a2 01       	movw	r20, r4
    16fc:	b4 01       	movw	r22, r8
    16fe:	c5 01       	movw	r24, r10
    1700:	0e 94 66 03 	call	0x6cc	; 0x6cc <pxPortInitialiseStack>
    1704:	99 83       	std	Y+1, r25	; 0x01
    1706:	88 83       	st	Y, r24
    1708:	e1 14       	cp	r14, r1
    170a:	f1 04       	cpc	r15, r1
    170c:	19 f0       	breq	.+6      	; 0x1714 <xTaskCreate+0x108>
    170e:	f7 01       	movw	r30, r14
    1710:	d1 83       	std	Z+1, r29	; 0x01
    1712:	c0 83       	st	Z, r28
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	0f 92       	push	r0
    171a:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <uxCurrentNumberOfTasks>
    171e:	8f 5f       	subi	r24, 0xFF	; 255
    1720:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <uxCurrentNumberOfTasks>
    1724:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1728:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    172c:	89 2b       	or	r24, r25
    172e:	d1 f5       	brne	.+116    	; 0x17a4 <xTaskCreate+0x198>
    1730:	d0 93 cb 09 	sts	0x09CB, r29	; 0x8009cb <pxCurrentTCB+0x1>
    1734:	c0 93 ca 09 	sts	0x09CA, r28	; 0x8009ca <pxCurrentTCB>
    1738:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <uxCurrentNumberOfTasks>
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	09 f0       	breq	.+2      	; 0x1742 <xTaskCreate+0x136>
    1740:	41 c0       	rjmp	.+130    	; 0x17c4 <xTaskCreate+0x1b8>
    1742:	86 ea       	ldi	r24, 0xA6	; 166
    1744:	99 e0       	ldi	r25, 0x09	; 9
    1746:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    174a:	8f ea       	ldi	r24, 0xAF	; 175
    174c:	99 e0       	ldi	r25, 0x09	; 9
    174e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    1752:	88 eb       	ldi	r24, 0xB8	; 184
    1754:	99 e0       	ldi	r25, 0x09	; 9
    1756:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    175a:	81 ec       	ldi	r24, 0xC1	; 193
    175c:	99 e0       	ldi	r25, 0x09	; 9
    175e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    1762:	8d e9       	ldi	r24, 0x9D	; 157
    1764:	99 e0       	ldi	r25, 0x09	; 9
    1766:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    176a:	84 e9       	ldi	r24, 0x94	; 148
    176c:	99 e0       	ldi	r25, 0x09	; 9
    176e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    1772:	87 e8       	ldi	r24, 0x87	; 135
    1774:	99 e0       	ldi	r25, 0x09	; 9
    1776:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    177a:	8e e7       	ldi	r24, 0x7E	; 126
    177c:	99 e0       	ldi	r25, 0x09	; 9
    177e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    1782:	84 e7       	ldi	r24, 0x74	; 116
    1784:	99 e0       	ldi	r25, 0x09	; 9
    1786:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
    178a:	8d e9       	ldi	r24, 0x9D	; 157
    178c:	99 e0       	ldi	r25, 0x09	; 9
    178e:	90 93 93 09 	sts	0x0993, r25	; 0x800993 <pxDelayedTaskList+0x1>
    1792:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <pxDelayedTaskList>
    1796:	84 e9       	ldi	r24, 0x94	; 148
    1798:	99 e0       	ldi	r25, 0x09	; 9
    179a:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <pxOverflowDelayedTaskList+0x1>
    179e:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <pxOverflowDelayedTaskList>
    17a2:	10 c0       	rjmp	.+32     	; 0x17c4 <xTaskCreate+0x1b8>
    17a4:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <xSchedulerRunning>
    17a8:	81 11       	cpse	r24, r1
    17aa:	0c c0       	rjmp	.+24     	; 0x17c4 <xTaskCreate+0x1b8>
    17ac:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    17b0:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    17b4:	96 89       	ldd	r25, Z+22	; 0x16
    17b6:	8e 89       	ldd	r24, Y+22	; 0x16
    17b8:	89 17       	cp	r24, r25
    17ba:	20 f0       	brcs	.+8      	; 0x17c4 <xTaskCreate+0x1b8>
    17bc:	d0 93 cb 09 	sts	0x09CB, r29	; 0x8009cb <pxCurrentTCB+0x1>
    17c0:	c0 93 ca 09 	sts	0x09CA, r28	; 0x8009ca <pxCurrentTCB>
    17c4:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <uxTaskNumber>
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <uxTaskNumber>
    17ce:	89 a3       	std	Y+33, r24	; 0x21
    17d0:	8e 89       	ldd	r24, Y+22	; 0x16
    17d2:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    17d6:	98 17       	cp	r25, r24
    17d8:	10 f4       	brcc	.+4      	; 0x17de <xTaskCreate+0x1d2>
    17da:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c 01       	movw	r18, r24
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	82 0f       	add	r24, r18
    17f0:	93 1f       	adc	r25, r19
    17f2:	b6 01       	movw	r22, r12
    17f4:	8a 55       	subi	r24, 0x5A	; 90
    17f6:	96 4f       	sbci	r25, 0xF6	; 246
    17f8:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <xSchedulerRunning>
    1804:	88 23       	and	r24, r24
    1806:	59 f0       	breq	.+22     	; 0x181e <xTaskCreate+0x212>
    1808:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    180c:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1810:	96 89       	ldd	r25, Z+22	; 0x16
    1812:	8e 89       	ldd	r24, Y+22	; 0x16
    1814:	98 17       	cp	r25, r24
    1816:	28 f4       	brcc	.+10     	; 0x1822 <xTaskCreate+0x216>
    1818:	07 d8       	rcall	.-4082   	; 0x828 <vPortYield>
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <xTaskCreate+0x21c>
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <xTaskCreate+0x21c>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <xTaskCreate+0x21c>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	9f 90       	pop	r9
    183c:	8f 90       	pop	r8
    183e:	7f 90       	pop	r7
    1840:	6f 90       	pop	r6
    1842:	5f 90       	pop	r5
    1844:	4f 90       	pop	r4
    1846:	08 95       	ret

00001848 <vTaskStartScheduler>:
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	0f 2e       	mov	r0, r31
    1850:	f7 e6       	ldi	r31, 0x67	; 103
    1852:	ef 2e       	mov	r14, r31
    1854:	f9 e0       	ldi	r31, 0x09	; 9
    1856:	ff 2e       	mov	r15, r31
    1858:	f0 2d       	mov	r31, r0
    185a:	00 e0       	ldi	r16, 0x00	; 0
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 ec       	ldi	r20, 0xC0	; 192
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	62 e7       	ldi	r22, 0x72	; 114
    1866:	72 e0       	ldi	r23, 0x02	; 2
    1868:	8e e4       	ldi	r24, 0x4E	; 78
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	cf de       	rcall	.-610    	; 0x160c <xTaskCreate>
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	d1 f4       	brne	.+52     	; 0x18a6 <vTaskStartScheduler+0x5e>
    1872:	dc d5       	rcall	.+3000   	; 0x242c <xTimerCreateTimerTask>
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	b9 f4       	brne	.+46     	; 0x18a6 <vTaskStartScheduler+0x5e>
    1878:	f8 94       	cli
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	9f ef       	ldi	r25, 0xFF	; 255
    187e:	90 93 6a 09 	sts	0x096A, r25	; 0x80096a <xNextTaskUnblockTime+0x1>
    1882:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <xNextTaskUnblockTime>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <xSchedulerRunning>
    188c:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <xTickCount+0x1>
    1890:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <xTickCount>
    1894:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1898:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    189c:	85 a1       	ldd	r24, Z+37	; 0x25
    189e:	0e 94 a9 02 	call	0x552	; 0x552 <task_switch_in>
    18a2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <xPortStartScheduler>
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	08 95       	ret

000018ae <vTaskSuspendAll>:
    18ae:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <__data_end>
    18b8:	08 95       	ret

000018ba <xTaskGetTickCount>:
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	0f 92       	push	r0
    18c0:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <xTickCount>
    18c4:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <xTickCount+0x1>
    18c8:	0f 90       	pop	r0
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	08 95       	ret

000018ce <xTaskIncrementTick>:
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    18e2:	81 11       	cpse	r24, r1
    18e4:	98 c0       	rjmp	.+304    	; 0x1a16 <xTaskIncrementTick+0x148>
    18e6:	e0 90 71 09 	lds	r14, 0x0971	; 0x800971 <xTickCount>
    18ea:	f0 90 72 09 	lds	r15, 0x0972	; 0x800972 <xTickCount+0x1>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	e8 1a       	sub	r14, r24
    18f2:	f8 0a       	sbc	r15, r24
    18f4:	f0 92 72 09 	sts	0x0972, r15	; 0x800972 <xTickCount+0x1>
    18f8:	e0 92 71 09 	sts	0x0971, r14	; 0x800971 <xTickCount>
    18fc:	e1 14       	cp	r14, r1
    18fe:	f1 04       	cpc	r15, r1
    1900:	b1 f4       	brne	.+44     	; 0x192e <xTaskIncrementTick+0x60>
    1902:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <pxDelayedTaskList>
    1906:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <pxDelayedTaskList+0x1>
    190a:	20 91 90 09 	lds	r18, 0x0990	; 0x800990 <pxOverflowDelayedTaskList>
    190e:	30 91 91 09 	lds	r19, 0x0991	; 0x800991 <pxOverflowDelayedTaskList+0x1>
    1912:	30 93 93 09 	sts	0x0993, r19	; 0x800993 <pxDelayedTaskList+0x1>
    1916:	20 93 92 09 	sts	0x0992, r18	; 0x800992 <pxDelayedTaskList>
    191a:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <pxOverflowDelayedTaskList+0x1>
    191e:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <pxOverflowDelayedTaskList>
    1922:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <xNumOfOverflows>
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xNumOfOverflows>
    192c:	fc dd       	rcall	.-1032   	; 0x1526 <prvResetNextTaskUnblockTime>
    192e:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <xNextTaskUnblockTime>
    1932:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <xNextTaskUnblockTime+0x1>
    1936:	e8 16       	cp	r14, r24
    1938:	f9 06       	cpc	r15, r25
    193a:	10 f4       	brcc	.+4      	; 0x1940 <xTaskIncrementTick+0x72>
    193c:	d1 2c       	mov	r13, r1
    193e:	53 c0       	rjmp	.+166    	; 0x19e6 <xTaskIncrementTick+0x118>
    1940:	d1 2c       	mov	r13, r1
    1942:	cc 24       	eor	r12, r12
    1944:	c3 94       	inc	r12
    1946:	e0 91 92 09 	lds	r30, 0x0992	; 0x800992 <pxDelayedTaskList>
    194a:	f0 91 93 09 	lds	r31, 0x0993	; 0x800993 <pxDelayedTaskList+0x1>
    194e:	80 81       	ld	r24, Z
    1950:	81 11       	cpse	r24, r1
    1952:	07 c0       	rjmp	.+14     	; 0x1962 <xTaskIncrementTick+0x94>
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	9f ef       	ldi	r25, 0xFF	; 255
    1958:	90 93 6a 09 	sts	0x096A, r25	; 0x80096a <xNextTaskUnblockTime+0x1>
    195c:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <xNextTaskUnblockTime>
    1960:	42 c0       	rjmp	.+132    	; 0x19e6 <xTaskIncrementTick+0x118>
    1962:	e0 91 92 09 	lds	r30, 0x0992	; 0x800992 <pxDelayedTaskList>
    1966:	f0 91 93 09 	lds	r31, 0x0993	; 0x800993 <pxDelayedTaskList+0x1>
    196a:	05 80       	ldd	r0, Z+5	; 0x05
    196c:	f6 81       	ldd	r31, Z+6	; 0x06
    196e:	e0 2d       	mov	r30, r0
    1970:	c6 81       	ldd	r28, Z+6	; 0x06
    1972:	d7 81       	ldd	r29, Z+7	; 0x07
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	e8 16       	cp	r14, r24
    197a:	f9 06       	cpc	r15, r25
    197c:	28 f4       	brcc	.+10     	; 0x1988 <xTaskIncrementTick+0xba>
    197e:	90 93 6a 09 	sts	0x096A, r25	; 0x80096a <xNextTaskUnblockTime+0x1>
    1982:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <xNextTaskUnblockTime>
    1986:	2f c0       	rjmp	.+94     	; 0x19e6 <xTaskIncrementTick+0x118>
    1988:	8e 01       	movw	r16, r28
    198a:	0e 5f       	subi	r16, 0xFE	; 254
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	c8 01       	movw	r24, r16
    1990:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1994:	8c 89       	ldd	r24, Y+20	; 0x14
    1996:	9d 89       	ldd	r25, Y+21	; 0x15
    1998:	89 2b       	or	r24, r25
    199a:	21 f0       	breq	.+8      	; 0x19a4 <xTaskIncrementTick+0xd6>
    199c:	ce 01       	movw	r24, r28
    199e:	0c 96       	adiw	r24, 0x0c	; 12
    19a0:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    19a4:	8e 89       	ldd	r24, Y+22	; 0x16
    19a6:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    19aa:	98 17       	cp	r25, r24
    19ac:	10 f4       	brcc	.+4      	; 0x19b2 <xTaskIncrementTick+0xe4>
    19ae:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9c 01       	movw	r18, r24
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	b8 01       	movw	r22, r16
    19c8:	8a 55       	subi	r24, 0x5A	; 90
    19ca:	96 4f       	sbci	r25, 0xF6	; 246
    19cc:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    19d0:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    19d4:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    19d8:	9e 89       	ldd	r25, Y+22	; 0x16
    19da:	86 89       	ldd	r24, Z+22	; 0x16
    19dc:	98 17       	cp	r25, r24
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <xTaskIncrementTick+0x114>
    19e0:	b2 cf       	rjmp	.-156    	; 0x1946 <xTaskIncrementTick+0x78>
    19e2:	dc 2c       	mov	r13, r12
    19e4:	b0 cf       	rjmp	.-160    	; 0x1946 <xTaskIncrementTick+0x78>
    19e6:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    19ea:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    19ee:	86 89       	ldd	r24, Z+22	; 0x16
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	8e 0f       	add	r24, r30
    1a02:	9f 1f       	adc	r25, r31
    1a04:	fc 01       	movw	r30, r24
    1a06:	ea 55       	subi	r30, 0x5A	; 90
    1a08:	f6 4f       	sbci	r31, 0xF6	; 246
    1a0a:	80 81       	ld	r24, Z
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	48 f0       	brcs	.+18     	; 0x1a22 <xTaskIncrementTick+0x154>
    1a10:	dd 24       	eor	r13, r13
    1a12:	d3 94       	inc	r13
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <xTaskIncrementTick+0x154>
    1a16:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <uxPendedTicks>
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <uxPendedTicks>
    1a20:	d1 2c       	mov	r13, r1
    1a22:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <xYieldPending>
    1a26:	88 23       	and	r24, r24
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <xTaskIncrementTick+0x160>
    1a2a:	dd 24       	eor	r13, r13
    1a2c:	d3 94       	inc	r13
    1a2e:	8d 2d       	mov	r24, r13
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	08 95       	ret

00001a42 <xTaskResumeAll>:
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	0f 92       	push	r0
    1a56:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    1a5a:	81 50       	subi	r24, 0x01	; 1
    1a5c:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <__data_end>
    1a60:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    1a64:	81 11       	cpse	r24, r1
    1a66:	5d c0       	rjmp	.+186    	; 0x1b22 <xTaskResumeAll+0xe0>
    1a68:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <uxCurrentNumberOfTasks>
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	33 c0       	rjmp	.+102    	; 0x1ad6 <xTaskResumeAll+0x94>
    1a70:	5b c0       	rjmp	.+182    	; 0x1b28 <xTaskResumeAll+0xe6>
    1a72:	d7 01       	movw	r26, r14
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	16 97       	sbiw	r26, 0x06	; 6
    1a7c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a7e:	d7 81       	ldd	r29, Z+7	; 0x07
    1a80:	ce 01       	movw	r24, r28
    1a82:	0c 96       	adiw	r24, 0x0c	; 12
    1a84:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1a88:	8e 01       	movw	r16, r28
    1a8a:	0e 5f       	subi	r16, 0xFE	; 254
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	c8 01       	movw	r24, r16
    1a90:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1a94:	8e 89       	ldd	r24, Y+22	; 0x16
    1a96:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    1a9a:	98 17       	cp	r25, r24
    1a9c:	10 f4       	brcc	.+4      	; 0x1aa2 <xTaskResumeAll+0x60>
    1a9e:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 01       	movw	r18, r24
    1aa6:	22 0f       	add	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	22 0f       	add	r18, r18
    1aac:	33 1f       	adc	r19, r19
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	82 0f       	add	r24, r18
    1ab4:	93 1f       	adc	r25, r19
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	8a 55       	subi	r24, 0x5A	; 90
    1aba:	96 4f       	sbci	r25, 0xF6	; 246
    1abc:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    1ac0:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1ac4:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    1aca:	86 89       	ldd	r24, Z+22	; 0x16
    1acc:	98 17       	cp	r25, r24
    1ace:	68 f0       	brcs	.+26     	; 0x1aea <xTaskResumeAll+0xa8>
    1ad0:	d0 92 6d 09 	sts	0x096D, r13	; 0x80096d <xYieldPending>
    1ad4:	0a c0       	rjmp	.+20     	; 0x1aea <xTaskResumeAll+0xa8>
    1ad6:	c0 e0       	ldi	r28, 0x00	; 0
    1ad8:	d0 e0       	ldi	r29, 0x00	; 0
    1ada:	0f 2e       	mov	r0, r31
    1adc:	f7 e8       	ldi	r31, 0x87	; 135
    1ade:	ef 2e       	mov	r14, r31
    1ae0:	f9 e0       	ldi	r31, 0x09	; 9
    1ae2:	ff 2e       	mov	r15, r31
    1ae4:	f0 2d       	mov	r31, r0
    1ae6:	dd 24       	eor	r13, r13
    1ae8:	d3 94       	inc	r13
    1aea:	f7 01       	movw	r30, r14
    1aec:	80 81       	ld	r24, Z
    1aee:	81 11       	cpse	r24, r1
    1af0:	c0 cf       	rjmp	.-128    	; 0x1a72 <xTaskResumeAll+0x30>
    1af2:	cd 2b       	or	r28, r29
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <xTaskResumeAll+0xb6>
    1af6:	17 dd       	rcall	.-1490   	; 0x1526 <prvResetNextTaskUnblockTime>
    1af8:	c0 91 6e 09 	lds	r28, 0x096E	; 0x80096e <uxPendedTicks>
    1afc:	cc 23       	and	r28, r28
    1afe:	49 f0       	breq	.+18     	; 0x1b12 <xTaskResumeAll+0xd0>
    1b00:	d1 e0       	ldi	r29, 0x01	; 1
    1b02:	e5 de       	rcall	.-566    	; 0x18ce <xTaskIncrementTick>
    1b04:	81 11       	cpse	r24, r1
    1b06:	d0 93 6d 09 	sts	0x096D, r29	; 0x80096d <xYieldPending>
    1b0a:	c1 50       	subi	r28, 0x01	; 1
    1b0c:	d1 f7       	brne	.-12     	; 0x1b02 <xTaskResumeAll+0xc0>
    1b0e:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <uxPendedTicks>
    1b12:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <xYieldPending>
    1b16:	88 23       	and	r24, r24
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <xTaskResumeAll+0xe4>
    1b1a:	0e 94 14 04 	call	0x828	; 0x828 <vPortYield>
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <xTaskResumeAll+0xe6>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <xTaskResumeAll+0xe6>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	08 95       	ret

00001b3c <vTaskDelay>:
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	ec 01       	movw	r28, r24
    1b42:	89 2b       	or	r24, r25
    1b44:	39 f0       	breq	.+14     	; 0x1b54 <vTaskDelay+0x18>
    1b46:	b3 de       	rcall	.-666    	; 0x18ae <vTaskSuspendAll>
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0b dd       	rcall	.-1514   	; 0x1564 <prvAddCurrentTaskToDelayedList>
    1b4e:	79 df       	rcall	.-270    	; 0x1a42 <xTaskResumeAll>
    1b50:	81 11       	cpse	r24, r1
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vTaskDelay+0x1c>
    1b54:	0e 94 14 04 	call	0x828	; 0x828 <vPortYield>
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <vTaskSwitchContext>:
    1b5e:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    1b62:	88 23       	and	r24, r24
    1b64:	21 f0       	breq	.+8      	; 0x1b6e <vTaskSwitchContext+0x10>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <xYieldPending>
    1b6c:	08 95       	ret
    1b6e:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <xYieldPending>
    1b72:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1b76:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1b7a:	85 a1       	ldd	r24, Z+37	; 0x25
    1b7c:	0e 94 b3 02 	call	0x566	; 0x566 <task_switch_out>
    1b80:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1b84:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1b88:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1b8c:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1b90:	2d 91       	ld	r18, X+
    1b92:	3c 91       	ld	r19, X
    1b94:	87 89       	ldd	r24, Z+23	; 0x17
    1b96:	90 8d       	ldd	r25, Z+24	; 0x18
    1b98:	82 17       	cp	r24, r18
    1b9a:	93 07       	cpc	r25, r19
    1b9c:	58 f0       	brcs	.+22     	; 0x1bb4 <vTaskSwitchContext+0x56>
    1b9e:	60 91 ca 09 	lds	r22, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1ba2:	70 91 cb 09 	lds	r23, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1ba6:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1baa:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1bae:	67 5e       	subi	r22, 0xE7	; 231
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	55 d5       	rcall	.+2730   	; 0x265e <vApplicationStackOverflowHook>
    1bb4:	20 91 70 09 	lds	r18, 0x0970	; 0x800970 <uxTopReadyPriority>
    1bb8:	82 2f       	mov	r24, r18
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	e8 0f       	add	r30, r24
    1bcc:	f9 1f       	adc	r31, r25
    1bce:	ea 55       	subi	r30, 0x5A	; 90
    1bd0:	f6 4f       	sbci	r31, 0xF6	; 246
    1bd2:	30 81       	ld	r19, Z
    1bd4:	31 11       	cpse	r19, r1
    1bd6:	11 c0       	rjmp	.+34     	; 0x1bfa <vTaskSwitchContext+0x9c>
    1bd8:	21 50       	subi	r18, 0x01	; 1
    1bda:	82 2f       	mov	r24, r18
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	fc 01       	movw	r30, r24
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	e8 0f       	add	r30, r24
    1bee:	f9 1f       	adc	r31, r25
    1bf0:	ea 55       	subi	r30, 0x5A	; 90
    1bf2:	f6 4f       	sbci	r31, 0xF6	; 246
    1bf4:	30 81       	ld	r19, Z
    1bf6:	33 23       	and	r19, r19
    1bf8:	79 f3       	breq	.-34     	; 0x1bd8 <vTaskSwitchContext+0x7a>
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	44 0f       	add	r20, r20
    1bfe:	55 1f       	adc	r21, r21
    1c00:	44 0f       	add	r20, r20
    1c02:	55 1f       	adc	r21, r21
    1c04:	44 0f       	add	r20, r20
    1c06:	55 1f       	adc	r21, r21
    1c08:	48 0f       	add	r20, r24
    1c0a:	59 1f       	adc	r21, r25
    1c0c:	da 01       	movw	r26, r20
    1c0e:	aa 55       	subi	r26, 0x5A	; 90
    1c10:	b6 4f       	sbci	r27, 0xF6	; 246
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	ed 91       	ld	r30, X+
    1c16:	fc 91       	ld	r31, X
    1c18:	12 97       	sbiw	r26, 0x02	; 2
    1c1a:	02 80       	ldd	r0, Z+2	; 0x02
    1c1c:	f3 81       	ldd	r31, Z+3	; 0x03
    1c1e:	e0 2d       	mov	r30, r0
    1c20:	12 96       	adiw	r26, 0x02	; 2
    1c22:	fc 93       	st	X, r31
    1c24:	ee 93       	st	-X, r30
    1c26:	11 97       	sbiw	r26, 0x01	; 1
    1c28:	47 55       	subi	r20, 0x57	; 87
    1c2a:	56 4f       	sbci	r21, 0xF6	; 246
    1c2c:	e4 17       	cp	r30, r20
    1c2e:	f5 07       	cpc	r31, r21
    1c30:	29 f4       	brne	.+10     	; 0x1c3c <vTaskSwitchContext+0xde>
    1c32:	42 81       	ldd	r20, Z+2	; 0x02
    1c34:	53 81       	ldd	r21, Z+3	; 0x03
    1c36:	fd 01       	movw	r30, r26
    1c38:	52 83       	std	Z+2, r21	; 0x02
    1c3a:	41 83       	std	Z+1, r20	; 0x01
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	8e 0f       	add	r24, r30
    1c4c:	9f 1f       	adc	r25, r31
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ea 55       	subi	r30, 0x5A	; 90
    1c52:	f6 4f       	sbci	r31, 0xF6	; 246
    1c54:	01 80       	ldd	r0, Z+1	; 0x01
    1c56:	f2 81       	ldd	r31, Z+2	; 0x02
    1c58:	e0 2d       	mov	r30, r0
    1c5a:	86 81       	ldd	r24, Z+6	; 0x06
    1c5c:	97 81       	ldd	r25, Z+7	; 0x07
    1c5e:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <pxCurrentTCB+0x1>
    1c62:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <pxCurrentTCB>
    1c66:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <uxTopReadyPriority>
    1c6a:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1c6e:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1c72:	85 a1       	ldd	r24, Z+37	; 0x25
    1c74:	0c 94 a9 02 	jmp	0x552	; 0x552 <task_switch_in>
    1c78:	08 95       	ret

00001c7a <vTaskPlaceOnEventList>:
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	eb 01       	movw	r28, r22
    1c80:	60 91 ca 09 	lds	r22, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1c84:	70 91 cb 09 	lds	r23, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1c88:	64 5f       	subi	r22, 0xF4	; 244
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	ce 01       	movw	r24, r28
    1c94:	67 dc       	rcall	.-1842   	; 0x1564 <prvAddCurrentTaskToDelayedList>
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <vTaskPlaceOnEventListRestricted>:
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	8b 01       	movw	r16, r22
    1ca4:	c4 2f       	mov	r28, r20
    1ca6:	60 91 ca 09 	lds	r22, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1caa:	70 91 cb 09 	lds	r23, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1cae:	64 5f       	subi	r22, 0xF4	; 244
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    1cb6:	cc 23       	and	r28, r28
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <vTaskPlaceOnEventListRestricted+0x22>
    1cba:	0f ef       	ldi	r16, 0xFF	; 255
    1cbc:	1f ef       	ldi	r17, 0xFF	; 255
    1cbe:	6c 2f       	mov	r22, r28
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	50 dc       	rcall	.-1888   	; 0x1564 <prvAddCurrentTaskToDelayedList>
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	08 95       	ret

00001ccc <xTaskRemoveFromEventList>:
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	15 96       	adiw	r26, 0x05	; 5
    1cd8:	ed 91       	ld	r30, X+
    1cda:	fc 91       	ld	r31, X
    1cdc:	16 97       	sbiw	r26, 0x06	; 6
    1cde:	c6 81       	ldd	r28, Z+6	; 0x06
    1ce0:	d7 81       	ldd	r29, Z+7	; 0x07
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	04 5f       	subi	r16, 0xF4	; 244
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	c8 01       	movw	r24, r16
    1cea:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1cee:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	1c c0       	rjmp	.+56     	; 0x1d2e <xTaskRemoveFromEventList+0x62>
    1cf6:	0a 50       	subi	r16, 0x0A	; 10
    1cf8:	11 09       	sbc	r17, r1
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1d00:	8e 89       	ldd	r24, Y+22	; 0x16
    1d02:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    1d06:	98 17       	cp	r25, r24
    1d08:	10 f4       	brcc	.+4      	; 0x1d0e <xTaskRemoveFromEventList+0x42>
    1d0a:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 01       	movw	r18, r24
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	b8 01       	movw	r22, r16
    1d24:	8a 55       	subi	r24, 0x5A	; 90
    1d26:	96 4f       	sbci	r25, 0xF6	; 246
    1d28:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <xTaskRemoveFromEventList+0x6c>
    1d2e:	b8 01       	movw	r22, r16
    1d30:	87 e8       	ldi	r24, 0x87	; 135
    1d32:	99 e0       	ldi	r25, 0x09	; 9
    1d34:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    1d38:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1d3c:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1d40:	9e 89       	ldd	r25, Y+22	; 0x16
    1d42:	86 89       	ldd	r24, Z+22	; 0x16
    1d44:	89 17       	cp	r24, r25
    1d46:	20 f4       	brcc	.+8      	; 0x1d50 <xTaskRemoveFromEventList+0x84>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <xYieldPending>
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <xTaskRemoveFromEventList+0x86>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	08 95       	ret

00001d5c <vTaskInternalSetTimeOutState>:
    1d5c:	20 91 6c 09 	lds	r18, 0x096C	; 0x80096c <xNumOfOverflows>
    1d60:	fc 01       	movw	r30, r24
    1d62:	20 83       	st	Z, r18
    1d64:	20 91 71 09 	lds	r18, 0x0971	; 0x800971 <xTickCount>
    1d68:	30 91 72 09 	lds	r19, 0x0972	; 0x800972 <xTickCount+0x1>
    1d6c:	32 83       	std	Z+2, r19	; 0x02
    1d6e:	21 83       	std	Z+1, r18	; 0x01
    1d70:	08 95       	ret

00001d72 <xTaskCheckForTimeOut>:
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	0f 92       	push	r0
    1d7c:	20 91 71 09 	lds	r18, 0x0971	; 0x800971 <xTickCount>
    1d80:	30 91 72 09 	lds	r19, 0x0972	; 0x800972 <xTickCount+0x1>
    1d84:	db 01       	movw	r26, r22
    1d86:	4d 91       	ld	r20, X+
    1d88:	5c 91       	ld	r21, X
    1d8a:	4f 3f       	cpi	r20, 0xFF	; 255
    1d8c:	bf ef       	ldi	r27, 0xFF	; 255
    1d8e:	5b 07       	cpc	r21, r27
    1d90:	e9 f0       	breq	.+58     	; 0x1dcc <xTaskCheckForTimeOut+0x5a>
    1d92:	ec 01       	movw	r28, r24
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	a0 91 6c 09 	lds	r26, 0x096C	; 0x80096c <xNumOfOverflows>
    1d9c:	b8 81       	ld	r27, Y
    1d9e:	ba 17       	cp	r27, r26
    1da0:	19 f0       	breq	.+6      	; 0x1da8 <xTaskCheckForTimeOut+0x36>
    1da2:	2e 17       	cp	r18, r30
    1da4:	3f 07       	cpc	r19, r31
    1da6:	a0 f4       	brcc	.+40     	; 0x1dd0 <xTaskCheckForTimeOut+0x5e>
    1da8:	2e 1b       	sub	r18, r30
    1daa:	3f 0b       	sbc	r19, r31
    1dac:	24 17       	cp	r18, r20
    1dae:	35 07       	cpc	r19, r21
    1db0:	40 f4       	brcc	.+16     	; 0x1dc2 <xTaskCheckForTimeOut+0x50>
    1db2:	fb 01       	movw	r30, r22
    1db4:	42 1b       	sub	r20, r18
    1db6:	53 0b       	sbc	r21, r19
    1db8:	51 83       	std	Z+1, r21	; 0x01
    1dba:	40 83       	st	Z, r20
    1dbc:	cf df       	rcall	.-98     	; 0x1d5c <vTaskInternalSetTimeOutState>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	08 c0       	rjmp	.+16     	; 0x1dd2 <xTaskCheckForTimeOut+0x60>
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	11 82       	std	Z+1, r1	; 0x01
    1dc6:	10 82       	st	Z, r1
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <xTaskCheckForTimeOut+0x60>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <xTaskCheckForTimeOut+0x60>
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <vTaskMissedYield>:
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <xYieldPending>
    1de2:	08 95       	ret

00001de4 <xTaskGetCurrentTaskHandle>:
    1de4:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1de8:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1dec:	08 95       	ret

00001dee <xTaskGetSchedulerState>:
    1dee:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <xSchedulerRunning>
    1df2:	88 23       	and	r24, r24
    1df4:	31 f0       	breq	.+12     	; 0x1e02 <xTaskGetSchedulerState+0x14>
    1df6:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    1dfa:	88 23       	and	r24, r24
    1dfc:	21 f0       	breq	.+8      	; 0x1e06 <xTaskGetSchedulerState+0x18>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	08 95       	ret
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	08 95       	ret
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	08 95       	ret

00001e0a <xTaskPriorityInherit>:
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	fc 01       	movw	r30, r24
    1e14:	89 2b       	or	r24, r25
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <xTaskPriorityInherit+0x10>
    1e18:	64 c0       	rjmp	.+200    	; 0x1ee2 <xTaskPriorityInherit+0xd8>
    1e1a:	26 89       	ldd	r18, Z+22	; 0x16
    1e1c:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1e20:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1e24:	56 96       	adiw	r26, 0x16	; 22
    1e26:	8c 91       	ld	r24, X
    1e28:	28 17       	cp	r18, r24
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <xTaskPriorityInherit+0x24>
    1e2c:	4e c0       	rjmp	.+156    	; 0x1eca <xTaskPriorityInherit+0xc0>
    1e2e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e30:	95 85       	ldd	r25, Z+13	; 0x0d
    1e32:	99 23       	and	r25, r25
    1e34:	64 f0       	brlt	.+24     	; 0x1e4e <xTaskPriorityInherit+0x44>
    1e36:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1e3a:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1e3e:	56 96       	adiw	r26, 0x16	; 22
    1e40:	3c 91       	ld	r19, X
    1e42:	84 e0       	ldi	r24, 0x04	; 4
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	83 1b       	sub	r24, r19
    1e48:	91 09       	sbc	r25, r1
    1e4a:	95 87       	std	Z+13, r25	; 0x0d
    1e4c:	84 87       	std	Z+12, r24	; 0x0c
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	c9 01       	movw	r24, r18
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	28 0f       	add	r18, r24
    1e60:	39 1f       	adc	r19, r25
    1e62:	2a 55       	subi	r18, 0x5A	; 90
    1e64:	36 4f       	sbci	r19, 0xF6	; 246
    1e66:	82 85       	ldd	r24, Z+10	; 0x0a
    1e68:	93 85       	ldd	r25, Z+11	; 0x0b
    1e6a:	82 17       	cp	r24, r18
    1e6c:	93 07       	cpc	r25, r19
    1e6e:	21 f5       	brne	.+72     	; 0x1eb8 <xTaskPriorityInherit+0xae>
    1e70:	8f 01       	movw	r16, r30
    1e72:	ef 01       	movw	r28, r30
    1e74:	22 96       	adiw	r28, 0x02	; 2
    1e76:	ce 01       	movw	r24, r28
    1e78:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1e7c:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1e80:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1e84:	86 89       	ldd	r24, Z+22	; 0x16
    1e86:	f8 01       	movw	r30, r16
    1e88:	86 8b       	std	Z+22, r24	; 0x16
    1e8a:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    1e8e:	98 17       	cp	r25, r24
    1e90:	10 f4       	brcc	.+4      	; 0x1e96 <xTaskPriorityInherit+0x8c>
    1e92:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 01       	movw	r18, r24
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	22 0f       	add	r18, r18
    1ea4:	33 1f       	adc	r19, r19
    1ea6:	82 0f       	add	r24, r18
    1ea8:	93 1f       	adc	r25, r19
    1eaa:	be 01       	movw	r22, r28
    1eac:	8a 55       	subi	r24, 0x5A	; 90
    1eae:	96 4f       	sbci	r25, 0xF6	; 246
    1eb0:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	16 c0       	rjmp	.+44     	; 0x1ee4 <xTaskPriorityInherit+0xda>
    1eb8:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1ebc:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1ec0:	56 96       	adiw	r26, 0x16	; 22
    1ec2:	8c 91       	ld	r24, X
    1ec4:	86 8b       	std	Z+22, r24	; 0x16
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	0d c0       	rjmp	.+26     	; 0x1ee4 <xTaskPriorityInherit+0xda>
    1eca:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <pxCurrentTCB>
    1ece:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	23 a1       	ldd	r18, Z+35	; 0x23
    1ed6:	56 96       	adiw	r26, 0x16	; 22
    1ed8:	9c 91       	ld	r25, X
    1eda:	29 17       	cp	r18, r25
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <xTaskPriorityInherit+0xda>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <xTaskPriorityInherit+0xda>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <xTaskPriorityDisinherit>:
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	89 2b       	or	r24, r25
    1efa:	79 f1       	breq	.+94     	; 0x1f5a <xTaskPriorityDisinherit+0x6c>
    1efc:	84 a1       	ldd	r24, Z+36	; 0x24
    1efe:	81 50       	subi	r24, 0x01	; 1
    1f00:	84 a3       	std	Z+36, r24	; 0x24
    1f02:	26 89       	ldd	r18, Z+22	; 0x16
    1f04:	93 a1       	ldd	r25, Z+35	; 0x23
    1f06:	29 17       	cp	r18, r25
    1f08:	51 f1       	breq	.+84     	; 0x1f5e <xTaskPriorityDisinherit+0x70>
    1f0a:	81 11       	cpse	r24, r1
    1f0c:	2a c0       	rjmp	.+84     	; 0x1f62 <xTaskPriorityDisinherit+0x74>
    1f0e:	ef 01       	movw	r28, r30
    1f10:	8f 01       	movw	r16, r30
    1f12:	0e 5f       	subi	r16, 0xFE	; 254
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	c8 01       	movw	r24, r16
    1f18:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1f1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1f1e:	8e 8b       	std	Y+22, r24	; 0x16
    1f20:	24 e0       	ldi	r18, 0x04	; 4
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	28 1b       	sub	r18, r24
    1f26:	31 09       	sbc	r19, r1
    1f28:	3d 87       	std	Y+13, r19	; 0x0d
    1f2a:	2c 87       	std	Y+12, r18	; 0x0c
    1f2c:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    1f30:	98 17       	cp	r25, r24
    1f32:	10 f4       	brcc	.+4      	; 0x1f38 <xTaskPriorityDisinherit+0x4a>
    1f34:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 01       	movw	r18, r24
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	22 0f       	add	r18, r18
    1f46:	33 1f       	adc	r19, r19
    1f48:	82 0f       	add	r24, r18
    1f4a:	93 1f       	adc	r25, r19
    1f4c:	b8 01       	movw	r22, r16
    1f4e:	8a 55       	subi	r24, 0x5A	; 90
    1f50:	96 4f       	sbci	r25, 0xF6	; 246
    1f52:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	05 c0       	rjmp	.+10     	; 0x1f64 <xTaskPriorityDisinherit+0x76>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <xTaskPriorityDisinherit+0x76>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <xTaskPriorityDisinherit+0x76>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <vTaskPriorityDisinheritAfterTimeout>:
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	fc 01       	movw	r30, r24
    1f78:	89 2b       	or	r24, r25
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <vTaskPriorityDisinheritAfterTimeout+0x10>
    1f7c:	43 c0       	rjmp	.+134    	; 0x2004 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1f7e:	93 a1       	ldd	r25, Z+35	; 0x23
    1f80:	96 17       	cp	r25, r22
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1f84:	96 2f       	mov	r25, r22
    1f86:	86 89       	ldd	r24, Z+22	; 0x16
    1f88:	89 17       	cp	r24, r25
    1f8a:	e1 f1       	breq	.+120    	; 0x2004 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1f8c:	24 a1       	ldd	r18, Z+36	; 0x24
    1f8e:	21 30       	cpi	r18, 0x01	; 1
    1f90:	c9 f5       	brne	.+114    	; 0x2004 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1f92:	96 8b       	std	Z+22, r25	; 0x16
    1f94:	24 85       	ldd	r18, Z+12	; 0x0c
    1f96:	35 85       	ldd	r19, Z+13	; 0x0d
    1f98:	33 23       	and	r19, r19
    1f9a:	34 f0       	brlt	.+12     	; 0x1fa8 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1f9c:	24 e0       	ldi	r18, 0x04	; 4
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	29 1b       	sub	r18, r25
    1fa2:	31 09       	sbc	r19, r1
    1fa4:	35 87       	std	Z+13, r19	; 0x0d
    1fa6:	24 87       	std	Z+12, r18	; 0x0c
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9c 01       	movw	r18, r24
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	22 0f       	add	r18, r18
    1fb2:	33 1f       	adc	r19, r19
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	8a 55       	subi	r24, 0x5A	; 90
    1fbe:	96 4f       	sbci	r25, 0xF6	; 246
    1fc0:	22 85       	ldd	r18, Z+10	; 0x0a
    1fc2:	33 85       	ldd	r19, Z+11	; 0x0b
    1fc4:	28 17       	cp	r18, r24
    1fc6:	39 07       	cpc	r19, r25
    1fc8:	e9 f4       	brne	.+58     	; 0x2004 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1fca:	ef 01       	movw	r28, r30
    1fcc:	8f 01       	movw	r16, r30
    1fce:	0e 5f       	subi	r16, 0xFE	; 254
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	c8 01       	movw	r24, r16
    1fd4:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    1fd8:	8e 89       	ldd	r24, Y+22	; 0x16
    1fda:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    1fde:	98 17       	cp	r25, r24
    1fe0:	10 f4       	brcc	.+4      	; 0x1fe6 <vTaskPriorityDisinheritAfterTimeout+0x78>
    1fe2:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 01       	movw	r18, r24
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	22 0f       	add	r18, r18
    1ff0:	33 1f       	adc	r19, r19
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	82 0f       	add	r24, r18
    1ff8:	93 1f       	adc	r25, r19
    1ffa:	b8 01       	movw	r22, r16
    1ffc:	8a 55       	subi	r24, 0x5A	; 90
    1ffe:	96 4f       	sbci	r25, 0xF6	; 246
    2000:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <pvTaskIncrementMutexHeldCount>:
    200e:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    2012:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    2016:	89 2b       	or	r24, r25
    2018:	39 f0       	breq	.+14     	; 0x2028 <pvTaskIncrementMutexHeldCount+0x1a>
    201a:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    201e:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    2022:	84 a1       	ldd	r24, Z+36	; 0x24
    2024:	8f 5f       	subi	r24, 0xFF	; 255
    2026:	84 a3       	std	Z+36, r24	; 0x24
    2028:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    202c:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    2030:	08 95       	ret

00002032 <xTaskNotifyWait>:
    2032:	4f 92       	push	r4
    2034:	5f 92       	push	r5
    2036:	6f 92       	push	r6
    2038:	7f 92       	push	r7
    203a:	8f 92       	push	r8
    203c:	9f 92       	push	r9
    203e:	af 92       	push	r10
    2040:	bf 92       	push	r11
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	49 01       	movw	r8, r18
    204c:	5a 01       	movw	r10, r20
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	0f 92       	push	r0
    2054:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    2058:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    205c:	23 a5       	ldd	r18, Z+43	; 0x2b
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	21 f1       	breq	.+72     	; 0x20aa <xTaskNotifyWait+0x78>
    2062:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    2066:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    206a:	47 a0       	ldd	r4, Z+39	; 0x27
    206c:	50 a4       	ldd	r5, Z+40	; 0x28
    206e:	61 a4       	ldd	r6, Z+41	; 0x29
    2070:	72 a4       	ldd	r7, Z+42	; 0x2a
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	80 95       	com	r24
    2078:	90 95       	com	r25
    207a:	a0 95       	com	r26
    207c:	b0 95       	com	r27
    207e:	84 21       	and	r24, r4
    2080:	95 21       	and	r25, r5
    2082:	a6 21       	and	r26, r6
    2084:	b7 21       	and	r27, r7
    2086:	87 a3       	std	Z+39, r24	; 0x27
    2088:	90 a7       	std	Z+40, r25	; 0x28
    208a:	a1 a7       	std	Z+41, r26	; 0x29
    208c:	b2 a7       	std	Z+42, r27	; 0x2a
    208e:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    2092:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	83 a7       	std	Z+43, r24	; 0x2b
    209a:	e1 14       	cp	r14, r1
    209c:	f1 04       	cpc	r15, r1
    209e:	29 f0       	breq	.+10     	; 0x20aa <xTaskNotifyWait+0x78>
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	c7 01       	movw	r24, r14
    20a4:	5f da       	rcall	.-2882   	; 0x1564 <prvAddCurrentTaskToDelayedList>
    20a6:	0e 94 14 04 	call	0x828	; 0x828 <vPortYield>
    20aa:	0f 90       	pop	r0
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	0f 92       	push	r0
    20b4:	01 15       	cp	r16, r1
    20b6:	11 05       	cpc	r17, r1
    20b8:	69 f0       	breq	.+26     	; 0x20d4 <xTaskNotifyWait+0xa2>
    20ba:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    20be:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    20c2:	87 a1       	ldd	r24, Z+39	; 0x27
    20c4:	90 a5       	ldd	r25, Z+40	; 0x28
    20c6:	a1 a5       	ldd	r26, Z+41	; 0x29
    20c8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    20ca:	f8 01       	movw	r30, r16
    20cc:	80 83       	st	Z, r24
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	a2 83       	std	Z+2, r26	; 0x02
    20d2:	b3 83       	std	Z+3, r27	; 0x03
    20d4:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    20d8:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    20dc:	83 a5       	ldd	r24, Z+43	; 0x2b
    20de:	82 30       	cpi	r24, 0x02	; 2
    20e0:	b1 f4       	brne	.+44     	; 0x210e <xTaskNotifyWait+0xdc>
    20e2:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    20e6:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    20ea:	87 a1       	ldd	r24, Z+39	; 0x27
    20ec:	90 a5       	ldd	r25, Z+40	; 0x28
    20ee:	a1 a5       	ldd	r26, Z+41	; 0x29
    20f0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    20f2:	80 94       	com	r8
    20f4:	90 94       	com	r9
    20f6:	a0 94       	com	r10
    20f8:	b0 94       	com	r11
    20fa:	88 22       	and	r8, r24
    20fc:	99 22       	and	r9, r25
    20fe:	aa 22       	and	r10, r26
    2100:	bb 22       	and	r11, r27
    2102:	87 a2       	std	Z+39, r8	; 0x27
    2104:	90 a6       	std	Z+40, r9	; 0x28
    2106:	a1 a6       	std	Z+41, r10	; 0x29
    2108:	b2 a6       	std	Z+42, r11	; 0x2a
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <xTaskNotifyWait+0xde>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    2114:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    2118:	13 a6       	std	Z+43, r1	; 0x2b
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
    212e:	7f 90       	pop	r7
    2130:	6f 90       	pop	r6
    2132:	5f 90       	pop	r5
    2134:	4f 90       	pop	r4
    2136:	08 95       	ret

00002138 <xTaskGenericNotify>:
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	fc 01       	movw	r30, r24
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	0f 92       	push	r0
    2148:	01 15       	cp	r16, r1
    214a:	11 05       	cpc	r17, r1
    214c:	49 f0       	breq	.+18     	; 0x2160 <xTaskGenericNotify+0x28>
    214e:	87 a1       	ldd	r24, Z+39	; 0x27
    2150:	90 a5       	ldd	r25, Z+40	; 0x28
    2152:	a1 a5       	ldd	r26, Z+41	; 0x29
    2154:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2156:	e8 01       	movw	r28, r16
    2158:	88 83       	st	Y, r24
    215a:	99 83       	std	Y+1, r25	; 0x01
    215c:	aa 83       	std	Y+2, r26	; 0x02
    215e:	bb 83       	std	Y+3, r27	; 0x03
    2160:	83 a5       	ldd	r24, Z+43	; 0x2b
    2162:	92 e0       	ldi	r25, 0x02	; 2
    2164:	93 a7       	std	Z+43, r25	; 0x2b
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	b1 f0       	breq	.+44     	; 0x2196 <xTaskGenericNotify+0x5e>
    216a:	18 f4       	brcc	.+6      	; 0x2172 <xTaskGenericNotify+0x3a>
    216c:	21 30       	cpi	r18, 0x01	; 1
    216e:	31 f0       	breq	.+12     	; 0x217c <xTaskGenericNotify+0x44>
    2170:	2a c0       	rjmp	.+84     	; 0x21c6 <xTaskGenericNotify+0x8e>
    2172:	23 30       	cpi	r18, 0x03	; 3
    2174:	e9 f0       	breq	.+58     	; 0x21b0 <xTaskGenericNotify+0x78>
    2176:	24 30       	cpi	r18, 0x04	; 4
    2178:	01 f1       	breq	.+64     	; 0x21ba <xTaskGenericNotify+0x82>
    217a:	25 c0       	rjmp	.+74     	; 0x21c6 <xTaskGenericNotify+0x8e>
    217c:	07 a1       	ldd	r16, Z+39	; 0x27
    217e:	10 a5       	ldd	r17, Z+40	; 0x28
    2180:	21 a5       	ldd	r18, Z+41	; 0x29
    2182:	32 a5       	ldd	r19, Z+42	; 0x2a
    2184:	40 2b       	or	r20, r16
    2186:	51 2b       	or	r21, r17
    2188:	62 2b       	or	r22, r18
    218a:	73 2b       	or	r23, r19
    218c:	47 a3       	std	Z+39, r20	; 0x27
    218e:	50 a7       	std	Z+40, r21	; 0x28
    2190:	61 a7       	std	Z+41, r22	; 0x29
    2192:	72 a7       	std	Z+42, r23	; 0x2a
    2194:	18 c0       	rjmp	.+48     	; 0x21c6 <xTaskGenericNotify+0x8e>
    2196:	47 a1       	ldd	r20, Z+39	; 0x27
    2198:	50 a5       	ldd	r21, Z+40	; 0x28
    219a:	61 a5       	ldd	r22, Z+41	; 0x29
    219c:	72 a5       	ldd	r23, Z+42	; 0x2a
    219e:	4f 5f       	subi	r20, 0xFF	; 255
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	6f 4f       	sbci	r22, 0xFF	; 255
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	47 a3       	std	Z+39, r20	; 0x27
    21a8:	50 a7       	std	Z+40, r21	; 0x28
    21aa:	61 a7       	std	Z+41, r22	; 0x29
    21ac:	72 a7       	std	Z+42, r23	; 0x2a
    21ae:	0b c0       	rjmp	.+22     	; 0x21c6 <xTaskGenericNotify+0x8e>
    21b0:	47 a3       	std	Z+39, r20	; 0x27
    21b2:	50 a7       	std	Z+40, r21	; 0x28
    21b4:	61 a7       	std	Z+41, r22	; 0x29
    21b6:	72 a7       	std	Z+42, r23	; 0x2a
    21b8:	06 c0       	rjmp	.+12     	; 0x21c6 <xTaskGenericNotify+0x8e>
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	79 f1       	breq	.+94     	; 0x221c <__stack+0x1d>
    21be:	47 a3       	std	Z+39, r20	; 0x27
    21c0:	50 a7       	std	Z+40, r21	; 0x28
    21c2:	61 a7       	std	Z+41, r22	; 0x29
    21c4:	72 a7       	std	Z+42, r23	; 0x2a
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	59 f5       	brne	.+86     	; 0x2220 <__stack+0x21>
    21ca:	ef 01       	movw	r28, r30
    21cc:	8f 01       	movw	r16, r30
    21ce:	0e 5f       	subi	r16, 0xFE	; 254
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	c8 01       	movw	r24, r16
    21d4:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    21d8:	8e 89       	ldd	r24, Y+22	; 0x16
    21da:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    21de:	98 17       	cp	r25, r24
    21e0:	10 f4       	brcc	.+4      	; 0x21e6 <xTaskGenericNotify+0xae>
    21e2:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 01       	movw	r18, r24
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	82 0f       	add	r24, r18
    21f8:	93 1f       	adc	r25, r19
    21fa:	b8 01       	movw	r22, r16
    21fc:	8a 55       	subi	r24, 0x5A	; 90
    21fe:	96 4f       	sbci	r25, 0xF6	; 246
    2200:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    2204:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    2208:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    220c:	9e 89       	ldd	r25, Y+22	; 0x16
    220e:	86 89       	ldd	r24, Z+22	; 0x16
    2210:	89 17       	cp	r24, r25
    2212:	40 f4       	brcc	.+16     	; 0x2224 <__stack+0x25>
    2214:	0e 94 14 04 	call	0x828	; 0x828 <vPortYield>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <__stack+0x27>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	03 c0       	rjmp	.+6      	; 0x2226 <__stack+0x27>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <__stack+0x27>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	0f 90       	pop	r0
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	08 95       	ret

00002234 <xTaskGenericNotifyFromISR>:
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	fc 01       	movw	r30, r24
    2242:	01 15       	cp	r16, r1
    2244:	11 05       	cpc	r17, r1
    2246:	49 f0       	breq	.+18     	; 0x225a <xTaskGenericNotifyFromISR+0x26>
    2248:	87 a1       	ldd	r24, Z+39	; 0x27
    224a:	90 a5       	ldd	r25, Z+40	; 0x28
    224c:	a1 a5       	ldd	r26, Z+41	; 0x29
    224e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2250:	e8 01       	movw	r28, r16
    2252:	88 83       	st	Y, r24
    2254:	99 83       	std	Y+1, r25	; 0x01
    2256:	aa 83       	std	Y+2, r26	; 0x02
    2258:	bb 83       	std	Y+3, r27	; 0x03
    225a:	83 a5       	ldd	r24, Z+43	; 0x2b
    225c:	92 e0       	ldi	r25, 0x02	; 2
    225e:	93 a7       	std	Z+43, r25	; 0x2b
    2260:	22 30       	cpi	r18, 0x02	; 2
    2262:	b1 f0       	breq	.+44     	; 0x2290 <xTaskGenericNotifyFromISR+0x5c>
    2264:	18 f4       	brcc	.+6      	; 0x226c <xTaskGenericNotifyFromISR+0x38>
    2266:	21 30       	cpi	r18, 0x01	; 1
    2268:	31 f0       	breq	.+12     	; 0x2276 <xTaskGenericNotifyFromISR+0x42>
    226a:	2b c0       	rjmp	.+86     	; 0x22c2 <xTaskGenericNotifyFromISR+0x8e>
    226c:	23 30       	cpi	r18, 0x03	; 3
    226e:	e9 f0       	breq	.+58     	; 0x22aa <xTaskGenericNotifyFromISR+0x76>
    2270:	24 30       	cpi	r18, 0x04	; 4
    2272:	01 f1       	breq	.+64     	; 0x22b4 <xTaskGenericNotifyFromISR+0x80>
    2274:	26 c0       	rjmp	.+76     	; 0x22c2 <xTaskGenericNotifyFromISR+0x8e>
    2276:	07 a1       	ldd	r16, Z+39	; 0x27
    2278:	10 a5       	ldd	r17, Z+40	; 0x28
    227a:	21 a5       	ldd	r18, Z+41	; 0x29
    227c:	32 a5       	ldd	r19, Z+42	; 0x2a
    227e:	40 2b       	or	r20, r16
    2280:	51 2b       	or	r21, r17
    2282:	62 2b       	or	r22, r18
    2284:	73 2b       	or	r23, r19
    2286:	47 a3       	std	Z+39, r20	; 0x27
    2288:	50 a7       	std	Z+40, r21	; 0x28
    228a:	61 a7       	std	Z+41, r22	; 0x29
    228c:	72 a7       	std	Z+42, r23	; 0x2a
    228e:	19 c0       	rjmp	.+50     	; 0x22c2 <xTaskGenericNotifyFromISR+0x8e>
    2290:	47 a1       	ldd	r20, Z+39	; 0x27
    2292:	50 a5       	ldd	r21, Z+40	; 0x28
    2294:	61 a5       	ldd	r22, Z+41	; 0x29
    2296:	72 a5       	ldd	r23, Z+42	; 0x2a
    2298:	4f 5f       	subi	r20, 0xFF	; 255
    229a:	5f 4f       	sbci	r21, 0xFF	; 255
    229c:	6f 4f       	sbci	r22, 0xFF	; 255
    229e:	7f 4f       	sbci	r23, 0xFF	; 255
    22a0:	47 a3       	std	Z+39, r20	; 0x27
    22a2:	50 a7       	std	Z+40, r21	; 0x28
    22a4:	61 a7       	std	Z+41, r22	; 0x29
    22a6:	72 a7       	std	Z+42, r23	; 0x2a
    22a8:	0c c0       	rjmp	.+24     	; 0x22c2 <xTaskGenericNotifyFromISR+0x8e>
    22aa:	47 a3       	std	Z+39, r20	; 0x27
    22ac:	50 a7       	std	Z+40, r21	; 0x28
    22ae:	61 a7       	std	Z+41, r22	; 0x29
    22b0:	72 a7       	std	Z+42, r23	; 0x2a
    22b2:	07 c0       	rjmp	.+14     	; 0x22c2 <xTaskGenericNotifyFromISR+0x8e>
    22b4:	82 30       	cpi	r24, 0x02	; 2
    22b6:	09 f4       	brne	.+2      	; 0x22ba <xTaskGenericNotifyFromISR+0x86>
    22b8:	41 c0       	rjmp	.+130    	; 0x233c <xTaskGenericNotifyFromISR+0x108>
    22ba:	47 a3       	std	Z+39, r20	; 0x27
    22bc:	50 a7       	std	Z+40, r21	; 0x28
    22be:	61 a7       	std	Z+41, r22	; 0x29
    22c0:	72 a7       	std	Z+42, r23	; 0x2a
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	e9 f5       	brne	.+122    	; 0x2340 <xTaskGenericNotifyFromISR+0x10c>
    22c6:	ef 01       	movw	r28, r30
    22c8:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    22cc:	81 11       	cpse	r24, r1
    22ce:	1d c0       	rjmp	.+58     	; 0x230a <xTaskGenericNotifyFromISR+0xd6>
    22d0:	8f 01       	movw	r16, r30
    22d2:	0e 5f       	subi	r16, 0xFE	; 254
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	c8 01       	movw	r24, r16
    22d8:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
    22dc:	8e 89       	ldd	r24, Y+22	; 0x16
    22de:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <uxTopReadyPriority>
    22e2:	98 17       	cp	r25, r24
    22e4:	10 f4       	brcc	.+4      	; 0x22ea <xTaskGenericNotifyFromISR+0xb6>
    22e6:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <uxTopReadyPriority>
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9c 01       	movw	r18, r24
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	82 0f       	add	r24, r18
    22fc:	93 1f       	adc	r25, r19
    22fe:	b8 01       	movw	r22, r16
    2300:	8a 55       	subi	r24, 0x5A	; 90
    2302:	96 4f       	sbci	r25, 0xF6	; 246
    2304:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    2308:	07 c0       	rjmp	.+14     	; 0x2318 <xTaskGenericNotifyFromISR+0xe4>
    230a:	bf 01       	movw	r22, r30
    230c:	64 5f       	subi	r22, 0xF4	; 244
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	87 e8       	ldi	r24, 0x87	; 135
    2312:	99 e0       	ldi	r25, 0x09	; 9
    2314:	0e 94 ed 02 	call	0x5da	; 0x5da <vListInsertEnd>
    2318:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <pxCurrentTCB>
    231c:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>
    2320:	9e 89       	ldd	r25, Y+22	; 0x16
    2322:	86 89       	ldd	r24, Z+22	; 0x16
    2324:	89 17       	cp	r24, r25
    2326:	70 f4       	brcc	.+28     	; 0x2344 <xTaskGenericNotifyFromISR+0x110>
    2328:	e1 14       	cp	r14, r1
    232a:	f1 04       	cpc	r15, r1
    232c:	19 f0       	breq	.+6      	; 0x2334 <xTaskGenericNotifyFromISR+0x100>
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	f7 01       	movw	r30, r14
    2332:	80 83       	st	Z, r24
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <xYieldPending>
    233a:	05 c0       	rjmp	.+10     	; 0x2346 <xTaskGenericNotifyFromISR+0x112>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <xTaskGenericNotifyFromISR+0x112>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <xTaskGenericNotifyFromISR+0x112>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	08 95       	ret

00002354 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	21 f4       	brne	.+8      	; 0x2360 <xTaskNotifyStateClear+0xc>
    2358:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <pxCurrentTCB>
    235c:	90 91 cb 09 	lds	r25, 0x09CB	; 0x8009cb <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2366:	fc 01       	movw	r30, r24
    2368:	23 a5       	ldd	r18, Z+43	; 0x2b
    236a:	22 30       	cpi	r18, 0x02	; 2
    236c:	19 f4       	brne	.+6      	; 0x2374 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    236e:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2374:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    237a:	08 95       	ret

0000237c <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    237c:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    237e:	73 83       	std	Z+3, r23	; 0x03
    2380:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2382:	91 87       	std	Z+9, r25	; 0x09
    2384:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    2386:	46 17       	cp	r20, r22
    2388:	57 07       	cpc	r21, r23
    238a:	90 f0       	brcs	.+36     	; 0x23b0 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    238c:	42 1b       	sub	r20, r18
    238e:	53 0b       	sbc	r21, r19
    2390:	84 85       	ldd	r24, Z+12	; 0x0c
    2392:	95 85       	ldd	r25, Z+13	; 0x0d
    2394:	48 17       	cp	r20, r24
    2396:	59 07       	cpc	r21, r25
    2398:	e0 f4       	brcc	.+56     	; 0x23d2 <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    239a:	bf 01       	movw	r22, r30
    239c:	6e 5f       	subi	r22, 0xFE	; 254
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <pxOverflowTimerList>
    23a4:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <pxOverflowTimerList+0x1>
    23a8:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    23b0:	42 17       	cp	r20, r18
    23b2:	53 07       	cpc	r21, r19
    23b4:	18 f4       	brcc	.+6      	; 0x23bc <prvInsertTimerInActiveList+0x40>
    23b6:	62 17       	cp	r22, r18
    23b8:	73 07       	cpc	r23, r19
    23ba:	68 f4       	brcc	.+26     	; 0x23d6 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    23bc:	bf 01       	movw	r22, r30
    23be:	6e 5f       	subi	r22, 0xFE	; 254
    23c0:	7f 4f       	sbci	r23, 0xFF	; 255
    23c2:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <pxCurrentTimerList>
    23c6:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <pxCurrentTimerList+0x1>
    23ca:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    23d8:	08 95       	ret

000023da <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    23e0:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <xTimerQueue>
    23e4:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
    23e8:	89 2b       	or	r24, r25
    23ea:	e9 f4       	brne	.+58     	; 0x2426 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    23ec:	8f ed       	ldi	r24, 0xDF	; 223
    23ee:	99 e0       	ldi	r25, 0x09	; 9
    23f0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    23f4:	86 ed       	ldi	r24, 0xD6	; 214
    23f6:	99 e0       	ldi	r25, 0x09	; 9
    23f8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    23fc:	8f ed       	ldi	r24, 0xDF	; 223
    23fe:	99 e0       	ldi	r25, 0x09	; 9
    2400:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <pxCurrentTimerList+0x1>
    2404:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2408:	86 ed       	ldi	r24, 0xD6	; 214
    240a:	99 e0       	ldi	r25, 0x09	; 9
    240c:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <pxOverflowTimerList+0x1>
    2410:	80 93 d2 09 	sts	0x09D2, r24	; 0x8009d2 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	65 e0       	ldi	r22, 0x05	; 5
    2418:	8a e0       	ldi	r24, 0x0A	; 10
    241a:	0e 94 ef 05 	call	0xbde	; 0xbde <xQueueGenericCreate>
    241e:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <xTimerQueue+0x1>
    2422:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    2426:	0f 90       	pop	r0
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	08 95       	ret

0000242c <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    242c:	ef 92       	push	r14
    242e:	ff 92       	push	r15
    2430:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    2432:	d3 df       	rcall	.-90     	; 0x23da <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    2434:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <xTimerQueue>
    2438:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
    243c:	89 2b       	or	r24, r25
    243e:	89 f0       	breq	.+34     	; 0x2462 <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    2440:	0f 2e       	mov	r0, r31
    2442:	fe ec       	ldi	r31, 0xCE	; 206
    2444:	ef 2e       	mov	r14, r31
    2446:	f9 e0       	ldi	r31, 0x09	; 9
    2448:	ff 2e       	mov	r15, r31
    244a:	f0 2d       	mov	r31, r0
    244c:	03 e0       	ldi	r16, 0x03	; 3
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	45 e5       	ldi	r20, 0x55	; 85
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	67 e7       	ldi	r22, 0x77	; 119
    2458:	72 e0       	ldi	r23, 0x02	; 2
    245a:	84 e8       	ldi	r24, 0x84	; 132
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	d6 d8       	rcall	.-3668   	; 0x160c <xTaskCreate>
    2460:	01 c0       	rjmp	.+2      	; 0x2464 <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    2462:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    2464:	0f 91       	pop	r16
    2466:	ff 90       	pop	r15
    2468:	ef 90       	pop	r14
    246a:	08 95       	ret

0000246c <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    246c:	8f 92       	push	r8
    246e:	9f 92       	push	r9
    2470:	af 92       	push	r10
    2472:	bf 92       	push	r11
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	4c 01       	movw	r8, r24
    2484:	5b 01       	movw	r10, r22
    2486:	f4 2e       	mov	r15, r20
    2488:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    248a:	84 e1       	ldi	r24, 0x14	; 20
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 b9 02 	call	0x572	; 0x572 <pvPortMalloc>
    2492:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    2494:	89 2b       	or	r24, r25
    2496:	99 f0       	breq	.+38     	; 0x24be <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    2498:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    249a:	9f df       	rcall	.-194    	; 0x23da <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    249c:	99 82       	std	Y+1, r9	; 0x01
    249e:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    24a0:	bd 86       	std	Y+13, r11	; 0x0d
    24a2:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    24a4:	df 86       	std	Y+15, r13	; 0x0f
    24a6:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    24a8:	19 8b       	std	Y+17, r17	; 0x11
    24aa:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    24ac:	ce 01       	movw	r24, r28
    24ae:	02 96       	adiw	r24, 0x02	; 2
    24b0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    24b4:	ff 20       	and	r15, r15
    24b6:	19 f0       	breq	.+6      	; 0x24be <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	84 60       	ori	r24, 0x04	; 4
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    24be:	ce 01       	movw	r24, r28
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	9f 90       	pop	r9
    24d4:	8f 90       	pop	r8
    24d6:	08 95       	ret

000024d8 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <xTimerGenericCommand+0xa>
    24e2:	1f 92       	push	r1
    24e4:	1f 92       	push	r1
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    24ea:	e0 91 d0 09 	lds	r30, 0x09D0	; 0x8009d0 <xTimerQueue>
    24ee:	f0 91 d1 09 	lds	r31, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
    24f2:	30 97       	sbiw	r30, 0x00	; 0
    24f4:	69 f1       	breq	.+90     	; 0x2550 <xTimerGenericCommand+0x78>
    24f6:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    24f8:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    24fa:	5b 83       	std	Y+3, r21	; 0x03
    24fc:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    24fe:	9d 83       	std	Y+5, r25	; 0x05
    2500:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2502:	66 30       	cpi	r22, 0x06	; 6
    2504:	e4 f4       	brge	.+56     	; 0x253e <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2506:	73 dc       	rcall	.-1818   	; 0x1dee <xTaskGetSchedulerState>
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	61 f4       	brne	.+24     	; 0x2524 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	a8 01       	movw	r20, r16
    2510:	be 01       	movw	r22, r28
    2512:	6f 5f       	subi	r22, 0xFF	; 255
    2514:	7f 4f       	sbci	r23, 0xFF	; 255
    2516:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <xTimerQueue>
    251a:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
    251e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xQueueGenericSend>
    2522:	17 c0       	rjmp	.+46     	; 0x2552 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	be 01       	movw	r22, r28
    252c:	6f 5f       	subi	r22, 0xFF	; 255
    252e:	7f 4f       	sbci	r23, 0xFF	; 255
    2530:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <xTimerQueue>
    2534:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <xTimerQueue+0x1>
    2538:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xQueueGenericSend>
    253c:	0a c0       	rjmp	.+20     	; 0x2552 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	ad 01       	movw	r20, r26
    2542:	be 01       	movw	r22, r28
    2544:	6f 5f       	subi	r22, 0xFF	; 255
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	cf 01       	movw	r24, r30
    254a:	0e 94 ca 06 	call	0xd94	; 0xd94 <xQueueGenericSendFromISR>
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2550:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	08 95       	ret

00002566 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2566:	af 92       	push	r10
    2568:	bf 92       	push	r11
    256a:	cf 92       	push	r12
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    257c:	9e d9       	rcall	.-3268   	; 0x18ba <xTaskGetTickCount>
    257e:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2580:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <xLastTime.2432>
    2584:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <xLastTime.2432+0x1>
    2588:	e8 16       	cp	r14, r24
    258a:	f9 06       	cpc	r15, r25
    258c:	08 f0       	brcs	.+2      	; 0x2590 <prvSampleTimeNow+0x2a>
    258e:	47 c0       	rjmp	.+142    	; 0x261e <prvSampleTimeNow+0xb8>
    2590:	2f c0       	rjmp	.+94     	; 0x25f0 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2592:	05 80       	ldd	r0, Z+5	; 0x05
    2594:	f6 81       	ldd	r31, Z+6	; 0x06
    2596:	e0 2d       	mov	r30, r0
    2598:	a0 80       	ld	r10, Z
    259a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    259c:	c6 81       	ldd	r28, Z+6	; 0x06
    259e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25a0:	8e 01       	movw	r16, r28
    25a2:	0e 5f       	subi	r16, 0xFE	; 254
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	c8 01       	movw	r24, r16
    25a8:	0e 94 3f 03 	call	0x67e	; 0x67e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25ac:	e8 89       	ldd	r30, Y+16	; 0x10
    25ae:	f9 89       	ldd	r31, Y+17	; 0x11
    25b0:	ce 01       	movw	r24, r28
    25b2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	82 ff       	sbrs	r24, 2
    25b8:	1b c0       	rjmp	.+54     	; 0x25f0 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    25ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    25bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    25be:	8a 0d       	add	r24, r10
    25c0:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    25c2:	a8 16       	cp	r10, r24
    25c4:	b9 06       	cpc	r11, r25
    25c6:	60 f4       	brcc	.+24     	; 0x25e0 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    25c8:	9b 83       	std	Y+3, r25	; 0x03
    25ca:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    25cc:	d9 87       	std	Y+9, r29	; 0x09
    25ce:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    25d0:	b8 01       	movw	r22, r16
    25d2:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <pxCurrentTimerList>
    25d6:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <pxCurrentTimerList+0x1>
    25da:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    25e0:	00 e0       	ldi	r16, 0x00	; 0
    25e2:	10 e0       	ldi	r17, 0x00	; 0
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	a5 01       	movw	r20, r10
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	ce 01       	movw	r24, r28
    25ee:	74 df       	rcall	.-280    	; 0x24d8 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25f0:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <pxCurrentTimerList>
    25f4:	f0 91 d5 09 	lds	r31, 0x09D5	; 0x8009d5 <pxCurrentTimerList+0x1>
    25f8:	80 81       	ld	r24, Z
    25fa:	81 11       	cpse	r24, r1
    25fc:	ca cf       	rjmp	.-108    	; 0x2592 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    25fe:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <pxOverflowTimerList>
    2602:	90 91 d3 09 	lds	r25, 0x09D3	; 0x8009d3 <pxOverflowTimerList+0x1>
    2606:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <pxCurrentTimerList+0x1>
    260a:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    260e:	f0 93 d3 09 	sts	0x09D3, r31	; 0x8009d3 <pxOverflowTimerList+0x1>
    2612:	e0 93 d2 09 	sts	0x09D2, r30	; 0x8009d2 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	f6 01       	movw	r30, r12
    261a:	80 83       	st	Z, r24
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    261e:	f6 01       	movw	r30, r12
    2620:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2622:	f0 92 cd 09 	sts	0x09CD, r15	; 0x8009cd <xLastTime.2432+0x1>
    2626:	e0 92 cc 09 	sts	0x09CC, r14	; 0x8009cc <xLastTime.2432>

    return xTimeNow;
}
    262a:	c7 01       	movw	r24, r14
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	cf 90       	pop	r12
    263c:	bf 90       	pop	r11
    263e:	af 90       	pop	r10
    2640:	08 95       	ret

00002642 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2642:	08 95       	ret

00002644 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2644:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2646:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2648:	2f ef       	ldi	r18, 0xFF	; 255
    264a:	80 e7       	ldi	r24, 0x70	; 112
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	21 50       	subi	r18, 0x01	; 1
    2650:	80 40       	sbci	r24, 0x00	; 0
    2652:	90 40       	sbci	r25, 0x00	; 0
    2654:	e1 f7       	brne	.-8      	; 0x264e <vApplicationMallocFailedHook+0xa>
    2656:	00 c0       	rjmp	.+0      	; 0x2658 <vApplicationMallocFailedHook+0x14>
    2658:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    265a:	1f 9a       	sbi	0x03, 7	; 3
    265c:	f5 cf       	rjmp	.-22     	; 0x2648 <vApplicationMallocFailedHook+0x4>

0000265e <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    265e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2660:	2f 9a       	sbi	0x05, 7	; 5
    2662:	2f ef       	ldi	r18, 0xFF	; 255
    2664:	87 ea       	ldi	r24, 0xA7	; 167
    2666:	91 e6       	ldi	r25, 0x61	; 97
    2668:	21 50       	subi	r18, 0x01	; 1
    266a:	80 40       	sbci	r24, 0x00	; 0
    266c:	90 40       	sbci	r25, 0x00	; 0
    266e:	e1 f7       	brne	.-8      	; 0x2668 <vApplicationStackOverflowHook+0xa>
    2670:	00 c0       	rjmp	.+0      	; 0x2672 <vApplicationStackOverflowHook+0x14>
    2672:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2674:	1f 9a       	sbi	0x03, 7	; 3
    2676:	f5 cf       	rjmp	.-22     	; 0x2662 <vApplicationStackOverflowHook+0x4>

00002678 <my_co2_call_back>:
    2678:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <co2_ppm>
    267c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <co2_ppm+0x1>
    2680:	9f 93       	push	r25
    2682:	8f 93       	push	r24
    2684:	8f e7       	ldi	r24, 0x7F	; 127
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	9f 93       	push	r25
    268a:	8f 93       	push	r24
    268c:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	08 95       	ret

0000269a <vTimerCallback1>:
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <xSemaphore1>
    26a8:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <xSemaphore1+0x1>
    26ac:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <xQueueGenericSend>
    26b0:	08 95       	ret

000026b2 <get_CO2_task>:
    26b2:	68 ee       	ldi	r22, 0xE8	; 232
    26b4:	73 e0       	ldi	r23, 0x03	; 3
    26b6:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <xSemaphore1>
    26ba:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <xSemaphore1+0x1>
    26be:	0e 94 8b 07 	call	0xf16	; 0xf16 <xQueueSemaphoreTake>
    26c2:	fb d8       	rcall	.-3594   	; 0x18ba <xTaskGetTickCount>
    26c4:	08 ee       	ldi	r16, 0xE8	; 232
    26c6:	13 e0       	ldi	r17, 0x03	; 3
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	ac 01       	movw	r20, r24
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	80 91 d1 0b 	lds	r24, 0x0BD1	; 0x800bd1 <xTimer1>
    26d4:	90 91 d2 0b 	lds	r25, 0x0BD2	; 0x800bd2 <xTimer1+0x1>
    26d8:	ff de       	rcall	.-514    	; 0x24d8 <xTimerGenericCommand>
    26da:	0e 94 c0 21 	call	0x4380	; 0x4380 <mh_z19_take_meassuring>
    26de:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <rc>
    26e2:	81 11       	cpse	r24, r1
    26e4:	e6 cf       	rjmp	.-52     	; 0x26b2 <get_CO2_task>
    26e6:	80 91 c9 0b 	lds	r24, 0x0BC9	; 0x800bc9 <ppm>
    26ea:	90 91 ca 0b 	lds	r25, 0x0BCA	; 0x800bca <ppm+0x1>
    26ee:	0e 94 ef 21 	call	0x43de	; 0x43de <mh_z19_get_co2_ppm>
    26f2:	df cf       	rjmp	.-66     	; 0x26b2 <get_CO2_task>

000026f4 <get_T_and_H_task>:
    26f4:	c0 e0       	ldi	r28, 0x00	; 0
    26f6:	d0 e0       	ldi	r29, 0x00	; 0
    26f8:	0f 2e       	mov	r0, r31
    26fa:	fc e8       	ldi	r31, 0x8C	; 140
    26fc:	ef 2e       	mov	r14, r31
    26fe:	f2 e0       	ldi	r31, 0x02	; 2
    2700:	ff 2e       	mov	r15, r31
    2702:	f0 2d       	mov	r31, r0
    2704:	68 ee       	ldi	r22, 0xE8	; 232
    2706:	73 e0       	ldi	r23, 0x03	; 3
    2708:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <xSemaphore1>
    270c:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <xSemaphore1+0x1>
    2710:	0e 94 8b 07 	call	0xf16	; 0xf16 <xQueueSemaphoreTake>
    2714:	d2 d8       	rcall	.-3676   	; 0x18ba <xTaskGetTickCount>
    2716:	04 e6       	ldi	r16, 0x64	; 100
    2718:	10 e0       	ldi	r17, 0x00	; 0
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	ac 01       	movw	r20, r24
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	80 91 d1 0b 	lds	r24, 0x0BD1	; 0x800bd1 <xTimer1>
    2726:	90 91 d2 0b 	lds	r25, 0x0BD2	; 0x800bd2 <xTimer1+0x1>
    272a:	d6 de       	rcall	.-596    	; 0x24d8 <xTimerGenericCommand>
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	05 da       	rcall	.-3062   	; 0x1b3c <vTaskDelay>
    2732:	67 d7       	rcall	.+3790   	; 0x3602 <hih8120Wakeup>
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	01 da       	rcall	.-3070   	; 0x1b3c <vTaskDelay>
    273a:	78 d7       	rcall	.+3824   	; 0x362c <hih8120Meassure>
    273c:	88 23       	and	r24, r24
    273e:	21 f0       	breq	.+8      	; 0x2748 <get_T_and_H_task+0x54>
    2740:	80 e2       	ldi	r24, 0x20	; 32
    2742:	99 e0       	ldi	r25, 0x09	; 9
    2744:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	f7 d9       	rcall	.-3090   	; 0x1b3c <vTaskDelay>
    274e:	93 d7       	rcall	.+3878   	; 0x3676 <hih8120GetTemperature>
    2750:	60 93 c5 0b 	sts	0x0BC5, r22	; 0x800bc5 <temperature>
    2754:	70 93 c6 0b 	sts	0x0BC6, r23	; 0x800bc6 <temperature+0x1>
    2758:	80 93 c7 0b 	sts	0x0BC7, r24	; 0x800bc7 <temperature+0x2>
    275c:	90 93 c8 0b 	sts	0x0BC8, r25	; 0x800bc8 <temperature+0x3>
    2760:	76 d7       	rcall	.+3820   	; 0x364e <hih8120GetHumidity>
    2762:	26 2f       	mov	r18, r22
    2764:	37 2f       	mov	r19, r23
    2766:	46 2f       	mov	r20, r22
    2768:	57 2f       	mov	r21, r23
    276a:	68 2f       	mov	r22, r24
    276c:	79 2f       	mov	r23, r25
    276e:	40 93 cb 0b 	sts	0x0BCB, r20	; 0x800bcb <humidity>
    2772:	50 93 cc 0b 	sts	0x0BCC, r21	; 0x800bcc <humidity+0x1>
    2776:	60 93 cd 0b 	sts	0x0BCD, r22	; 0x800bcd <humidity+0x2>
    277a:	70 93 ce 0b 	sts	0x0BCE, r23	; 0x800bce <humidity+0x3>
    277e:	9f 93       	push	r25
    2780:	8f 93       	push	r24
    2782:	3f 93       	push	r19
    2784:	2f 93       	push	r18
    2786:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <temperature+0x3>
    278a:	8f 93       	push	r24
    278c:	80 91 c7 0b 	lds	r24, 0x0BC7	; 0x800bc7 <temperature+0x2>
    2790:	8f 93       	push	r24
    2792:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <temperature+0x1>
    2796:	8f 93       	push	r24
    2798:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <temperature>
    279c:	8f 93       	push	r24
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	ff 92       	push	r15
    27a4:	ef 92       	push	r14
    27a6:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    27aa:	21 96       	adiw	r28, 0x01	; 1
    27ac:	8d b7       	in	r24, 0x3d	; 61
    27ae:	9e b7       	in	r25, 0x3e	; 62
    27b0:	0c 96       	adiw	r24, 0x0c	; 12
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	9e bf       	out	0x3e, r25	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	8d bf       	out	0x3d, r24	; 61
    27bc:	a3 cf       	rjmp	.-186    	; 0x2704 <get_T_and_H_task+0x10>

000027be <lora_handler_task>:
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	60 e1       	ldi	r22, 0x10	; 16
    27cc:	77 e2       	ldi	r23, 0x27	; 39
    27ce:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <xSemaphore1>
    27d2:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <xSemaphore1+0x1>
    27d6:	0e 94 8b 07 	call	0xf16	; 0xf16 <xQueueSemaphoreTake>
    27da:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <send_status>
    27de:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <send_status+0x1>
    27e2:	80 e1       	ldi	r24, 0x10	; 16
    27e4:	97 e2       	ldi	r25, 0x27	; 39
    27e6:	28 9f       	mul	r18, r24
    27e8:	80 01       	movw	r16, r0
    27ea:	29 9f       	mul	r18, r25
    27ec:	10 0d       	add	r17, r0
    27ee:	38 9f       	mul	r19, r24
    27f0:	10 0d       	add	r17, r0
    27f2:	11 24       	eor	r1, r1
    27f4:	62 d8       	rcall	.-3900   	; 0x18ba <xTaskGetTickCount>
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	ac 01       	movw	r20, r24
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	80 91 d1 0b 	lds	r24, 0x0BD1	; 0x800bd1 <xTimer1>
    2802:	90 91 d2 0b 	lds	r25, 0x0BD2	; 0x800bd2 <xTimer1+0x1>
    2806:	68 de       	rcall	.-816    	; 0x24d8 <xTimerGenericCommand>
    2808:	87 ec       	ldi	r24, 0xC7	; 199
    280a:	92 e0       	ldi	r25, 0x02	; 2
    280c:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
    2810:	8f e5       	ldi	r24, 0x5F	; 95
    2812:	9a ee       	ldi	r25, 0xEA	; 234
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <lora_handler_task+0x56>
    2818:	00 c0       	rjmp	.+0      	; 0x281a <lora_handler_task+0x5c>
    281a:	00 00       	nop
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <lora_driver_reset_rn2483>
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	8a d9       	rcall	.-3308   	; 0x1b3c <vTaskDelay>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <lora_driver_reset_rn2483>
    282e:	86 e9       	ldi	r24, 0x96	; 150
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	84 d9       	rcall	.-3320   	; 0x1b3c <vTaskDelay>
    2834:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <lora_driver_flush_buffers>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <led_slow_blink>
    283e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <lora_driver_rn2483_factory_reset>
    2842:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    2846:	9f 93       	push	r25
    2848:	8f 93       	push	r24
    284a:	83 ef       	ldi	r24, 0xF3	; 243
    284c:	92 e0       	ldi	r25, 0x02	; 2
    284e:	9f 93       	push	r25
    2850:	8f 93       	push	r24
    2852:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    2856:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <lora_driver_configure_to_eu868>
    285a:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    285e:	9f 93       	push	r25
    2860:	8f 93       	push	r24
    2862:	86 e0       	ldi	r24, 0x06	; 6
    2864:	93 e0       	ldi	r25, 0x03	; 3
    2866:	9f 93       	push	r25
    2868:	8f 93       	push	r24
    286a:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    286e:	8e ef       	ldi	r24, 0xFE	; 254
    2870:	99 e0       	ldi	r25, 0x09	; 9
    2872:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <lora_driver_get_rn2483_hweui>
    2876:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    287a:	ce ef       	ldi	r28, 0xFE	; 254
    287c:	d9 e0       	ldi	r29, 0x09	; 9
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	9f 93       	push	r25
    2884:	8f 93       	push	r24
    2886:	8f e1       	ldi	r24, 0x1F	; 31
    2888:	93 e0       	ldi	r25, 0x03	; 3
    288a:	9f 93       	push	r25
    288c:	8f 93       	push	r24
    288e:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    2892:	ce 01       	movw	r24, r28
    2894:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <lora_driver_set_device_identifier>
    2898:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    289c:	9f 93       	push	r25
    289e:	8f 93       	push	r24
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	83 e3       	ldi	r24, 0x33	; 51
    28a6:	93 e0       	ldi	r25, 0x03	; 3
    28a8:	9f 93       	push	r25
    28aa:	8f 93       	push	r24
    28ac:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    28b0:	ae 01       	movw	r20, r28
    28b2:	68 e4       	ldi	r22, 0x48	; 72
    28b4:	73 e0       	ldi	r23, 0x03	; 3
    28b6:	89 e6       	ldi	r24, 0x69	; 105
    28b8:	93 e0       	ldi	r25, 0x03	; 3
    28ba:	0e 94 48 20 	call	0x4090	; 0x4090 <lora_driver_set_otaa_identity>
    28be:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    28c2:	9f 93       	push	r25
    28c4:	8f 93       	push	r24
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	88 e4       	ldi	r24, 0x48	; 72
    28cc:	93 e0       	ldi	r25, 0x03	; 3
    28ce:	9f 93       	push	r25
    28d0:	8f 93       	push	r24
    28d2:	89 e6       	ldi	r24, 0x69	; 105
    28d4:	93 e0       	ldi	r25, 0x03	; 3
    28d6:	9f 93       	push	r25
    28d8:	8f 93       	push	r24
    28da:	8a e7       	ldi	r24, 0x7A	; 122
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	9f 93       	push	r25
    28e0:	8f 93       	push	r24
    28e2:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    28e6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <lora_driver_save_mac>
    28ea:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    28ee:	9f 93       	push	r25
    28f0:	8f 93       	push	r24
    28f2:	80 eb       	ldi	r24, 0xB0	; 176
    28f4:	93 e0       	ldi	r25, 0x03	; 3
    28f6:	9f 93       	push	r25
    28f8:	8f 93       	push	r24
    28fa:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    28fe:	8d b7       	in	r24, 0x3d	; 61
    2900:	9e b7       	in	r25, 0x3e	; 62
    2902:	82 96       	adiw	r24, 0x22	; 34
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	9e bf       	out	0x3e, r25	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	8d bf       	out	0x3d, r24	; 61
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <lora_driver_set_adaptive_data_rate>
    2914:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    2918:	9f 93       	push	r25
    291a:	8f 93       	push	r24
    291c:	8f eb       	ldi	r24, 0xBF	; 191
    291e:	93 e0       	ldi	r25, 0x03	; 3
    2920:	9f 93       	push	r25
    2922:	8f 93       	push	r24
    2924:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	c4 e6       	ldi	r28, 0x64	; 100
    2932:	d0 e0       	ldi	r29, 0x00	; 0
    2934:	0f 2e       	mov	r0, r31
    2936:	f0 ee       	ldi	r31, 0xE0	; 224
    2938:	ef 2e       	mov	r14, r31
    293a:	f3 e0       	ldi	r31, 0x03	; 3
    293c:	ff 2e       	mov	r15, r31
    293e:	f0 2d       	mov	r31, r0
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <lora_driver_join>
    2946:	18 2f       	mov	r17, r24
    2948:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    294c:	9f 93       	push	r25
    294e:	8f 93       	push	r24
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	ff 92       	push	r15
    2956:	ef 92       	push	r14
    2958:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	18 30       	cpi	r17, 0x08	; 8
    296a:	49 f0       	breq	.+18     	; 0x297e <lora_handler_task+0x1c0>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <led_long_puls>
    2972:	8f e2       	ldi	r24, 0x2F	; 47
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	e2 d8       	rcall	.-3644   	; 0x1b3c <vTaskDelay>
    2978:	21 97       	sbiw	r28, 0x01	; 1
    297a:	11 f7       	brne	.-60     	; 0x2940 <lora_handler_task+0x182>
    297c:	88 c0       	rjmp	.+272    	; 0x2a8e <lora_handler_task+0x2d0>
    297e:	88 e0       	ldi	r24, 0x08	; 8
    2980:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    2984:	9f 93       	push	r25
    2986:	8f 93       	push	r24
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	94 e0       	ldi	r25, 0x04	; 4
    298c:	9f 93       	push	r25
    298e:	8f 93       	push	r24
    2990:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	fc d7       	rcall	.+4088   	; 0x3990 <led_led_on>
    2998:	87 e1       	ldi	r24, 0x17	; 23
    299a:	94 e0       	ldi	r25, 0x04	; 4
    299c:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
    29a0:	8f e2       	ldi	r24, 0x2F	; 47
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	cb d8       	rcall	.-3690   	; 0x1b3c <vTaskDelay>
    29a6:	e8 ee       	ldi	r30, 0xE8	; 232
    29a8:	f9 e0       	ldi	r31, 0x09	; 9
    29aa:	86 e0       	ldi	r24, 0x06	; 6
    29ac:	81 83       	std	Z+1, r24	; 0x01
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	80 83       	st	Z, r24
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <send_status>
    29be:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <send_status+0x1>
    29c2:	89 2b       	or	r24, r25
    29c4:	21 f4       	brne	.+8      	; 0x29ce <lora_handler_task+0x210>
    29c6:	68 c0       	rjmp	.+208    	; 0x2a98 <lora_handler_task+0x2da>
    29c8:	0e 94 14 04 	call	0x828	; 0x828 <vPortYield>
    29cc:	fd cf       	rjmp	.-6      	; 0x29c8 <lora_handler_task+0x20a>
    29ce:	c8 ee       	ldi	r28, 0xE8	; 232
    29d0:	d9 e0       	ldi	r29, 0x09	; 9
    29d2:	0f 2e       	mov	r0, r31
    29d4:	f1 e2       	ldi	r31, 0x21	; 33
    29d6:	ef 2e       	mov	r14, r31
    29d8:	f4 e0       	ldi	r31, 0x04	; 4
    29da:	ff 2e       	mov	r15, r31
    29dc:	f0 2d       	mov	r31, r0
    29de:	8c e0       	ldi	r24, 0x0C	; 12
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	ac d8       	rcall	.-3752   	; 0x1b3c <vTaskDelay>
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	48 ec       	ldi	r20, 0xC8	; 200
    29ea:	52 e4       	ldi	r21, 0x42	; 66
    29ec:	60 91 cb 0b 	lds	r22, 0x0BCB	; 0x800bcb <humidity>
    29f0:	70 91 cc 0b 	lds	r23, 0x0BCC	; 0x800bcc <humidity+0x1>
    29f4:	80 91 cd 0b 	lds	r24, 0x0BCD	; 0x800bcd <humidity+0x2>
    29f8:	90 91 ce 0b 	lds	r25, 0x0BCE	; 0x800bce <humidity+0x3>
    29fc:	11 d1       	rcall	.+546    	; 0x2c20 <__mulsf3>
    29fe:	73 d1       	rcall	.+742    	; 0x2ce6 <round>
    2a00:	ba d0       	rcall	.+372    	; 0x2b76 <__fixunssfsi>
    2a02:	16 2f       	mov	r17, r22
    2a04:	07 2f       	mov	r16, r23
    2a06:	60 93 c1 0b 	sts	0x0BC1, r22	; 0x800bc1 <hum>
    2a0a:	70 93 c2 0b 	sts	0x0BC2, r23	; 0x800bc2 <hum+0x1>
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	48 ec       	ldi	r20, 0xC8	; 200
    2a14:	52 e4       	ldi	r21, 0x42	; 66
    2a16:	60 91 c5 0b 	lds	r22, 0x0BC5	; 0x800bc5 <temperature>
    2a1a:	70 91 c6 0b 	lds	r23, 0x0BC6	; 0x800bc6 <temperature+0x1>
    2a1e:	80 91 c7 0b 	lds	r24, 0x0BC7	; 0x800bc7 <temperature+0x2>
    2a22:	90 91 c8 0b 	lds	r25, 0x0BC8	; 0x800bc8 <temperature+0x3>
    2a26:	fc d0       	rcall	.+504    	; 0x2c20 <__mulsf3>
    2a28:	5e d1       	rcall	.+700    	; 0x2ce6 <round>
    2a2a:	a5 d0       	rcall	.+330    	; 0x2b76 <__fixunssfsi>
    2a2c:	60 93 c3 0b 	sts	0x0BC3, r22	; 0x800bc3 <temp>
    2a30:	70 93 c4 0b 	sts	0x0BC4, r23	; 0x800bc4 <temp+0x1>
    2a34:	0a 83       	std	Y+2, r16	; 0x02
    2a36:	1b 83       	std	Y+3, r17	; 0x03
    2a38:	7c 83       	std	Y+4, r23	; 0x04
    2a3a:	6d 83       	std	Y+5, r22	; 0x05
    2a3c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <co2_ppm>
    2a40:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <co2_ppm+0x1>
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8f 83       	std	Y+7, r24	; 0x07
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	d2 d7       	rcall	.+4004   	; 0x39f0 <led_short_puls>
    2a4c:	be 01       	movw	r22, r28
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <lora_driver_sent_upload_message>
    2a54:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_map_return_code_to_text>
    2a58:	9f 93       	push	r25
    2a5a:	8f 93       	push	r24
    2a5c:	ff 92       	push	r15
    2a5e:	ef 92       	push	r14
    2a60:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <printf>
    2a64:	8f ef       	ldi	r24, 0xFF	; 255
    2a66:	9b e7       	ldi	r25, 0x7B	; 123
    2a68:	22 e9       	ldi	r18, 0x92	; 146
    2a6a:	81 50       	subi	r24, 0x01	; 1
    2a6c:	90 40       	sbci	r25, 0x00	; 0
    2a6e:	20 40       	sbci	r18, 0x00	; 0
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <lora_handler_task+0x2ac>
    2a72:	00 c0       	rjmp	.+0      	; 0x2a74 <lora_handler_task+0x2b6>
    2a74:	00 00       	nop
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <send_status>
    2a82:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <send_status+0x1>
    2a86:	89 2b       	or	r24, r25
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <lora_handler_task+0x2ce>
    2a8a:	a9 cf       	rjmp	.-174    	; 0x29de <lora_handler_task+0x220>
    2a8c:	05 c0       	rjmp	.+10     	; 0x2a98 <lora_handler_task+0x2da>
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	8e d7       	rcall	.+3868   	; 0x39ae <led_led_off>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	56 d7       	rcall	.+3756   	; 0x3942 <led_fast_blink>
    2a96:	98 cf       	rjmp	.-208    	; 0x29c8 <lora_handler_task+0x20a>
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	08 95       	ret

00002aa6 <init_T_H_sens>:
    2aa6:	95 d5       	rcall	.+2858   	; 0x35d2 <hih8120Create>
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <init_T_H_sens+0xe>
    2aac:	86 e3       	ldi	r24, 0x36	; 54
    2aae:	94 e0       	ldi	r25, 0x04	; 4
    2ab0:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <puts>
    2ab4:	08 95       	ret

00002ab6 <init_CO2_sens>:
    2ab6:	6c e3       	ldi	r22, 0x3C	; 60
    2ab8:	73 e1       	ldi	r23, 0x13	; 19
    2aba:	83 e0       	ldi	r24, 0x03	; 3
    2abc:	0c 94 92 21 	jmp	0x4324	; 0x4324 <mh_z19_create>
    2ac0:	08 95       	ret

00002ac2 <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
	xTaskCreate(
    2ac8:	e1 2c       	mov	r14, r1
    2aca:	f1 2c       	mov	r15, r1
    2acc:	08 2f       	mov	r16, r24
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	48 e8       	ldi	r20, 0x88	; 136
    2ad4:	51 e0       	ldi	r21, 0x01	; 1
    2ad6:	69 e5       	ldi	r22, 0x59	; 89
    2ad8:	76 e0       	ldi	r23, 0x06	; 6
    2ada:	8f ed       	ldi	r24, 0xDF	; 223
    2adc:	93 e1       	ldi	r25, 0x13	; 19
    2ade:	0e 94 06 0b 	call	0x160c	; 0x160c <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    2ae2:	0f 91       	pop	r16
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	08 95       	ret

00002aea <main>:
/************************************************************************/
/* Start of main                                                        */
/************************************************************************/
int main(void)
{	
	xTimer1=xTimerCreate("Timer 1 ", (1000/portTICK_PERIOD_MS),pdTRUE,(void*)0,vTimerCallback1);
    2aea:	0d e4       	ldi	r16, 0x4D	; 77
    2aec:	13 e1       	ldi	r17, 0x13	; 19
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	6e e3       	ldi	r22, 0x3E	; 62
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	80 e6       	ldi	r24, 0x60	; 96
    2afa:	96 e0       	ldi	r25, 0x06	; 6
    2afc:	b7 dc       	rcall	.-1682   	; 0x246c <xTimerCreate>
    2afe:	90 93 d2 0b 	sts	0x0BD2, r25	; 0x800bd2 <xTimer1+0x1>
    2b02:	80 93 d1 0b 	sts	0x0BD1, r24	; 0x800bd1 <xTimer1>
	xSemaphore1=xSemaphoreCreateMutex();
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	0e 94 b2 06 	call	0xd64	; 0xd64 <xQueueCreateMutex>
    2b0c:	90 93 d0 0b 	sts	0x0BD0, r25	; 0x800bd0 <xSemaphore1+0x1>
    2b10:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <xSemaphore1>
	stdioCreate(0);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <stdioCreate>
	sei();
	init_T_H_sens();
    2b1a:	78 94       	sei
	init_CO2_sens();
    2b1c:	c4 df       	rcall	.-120    	; 0x2aa6 <init_T_H_sens>
    2b1e:	cb df       	rcall	.-106    	; 0x2ab6 <init_CO2_sens>
	xTaskCreate(get_CO2_task, "Measure CO2 ", configMINIMAL_STACK_SIZE, NULL, task1_TASK_PRIORITY, &x1Handle);
    2b20:	0f 2e       	mov	r0, r31
    2b22:	f4 e6       	ldi	r31, 0x64	; 100
    2b24:	ef 2e       	mov	r14, r31
    2b26:	fa e0       	ldi	r31, 0x0A	; 10
    2b28:	ff 2e       	mov	r15, r31
    2b2a:	f0 2d       	mov	r31, r0
    2b2c:	05 e0       	ldi	r16, 0x05	; 5
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 ec       	ldi	r20, 0xC0	; 192
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	69 e6       	ldi	r22, 0x69	; 105
    2b38:	76 e0       	ldi	r23, 0x06	; 6
    2b3a:	89 e5       	ldi	r24, 0x59	; 89
    2b3c:	93 e1       	ldi	r25, 0x13	; 19
    2b3e:	0e 94 06 0b 	call	0x160c	; 0x160c <xTaskCreate>
	xTaskCreate(get_T_and_H_task, "Measure Temp and Humidity", configMINIMAL_STACK_SIZE, NULL, task2_TASK_PRIORITY, &x2Handle);
    2b42:	0f 2e       	mov	r0, r31
    2b44:	f2 e6       	ldi	r31, 0x62	; 98
    2b46:	ef 2e       	mov	r14, r31
    2b48:	fa e0       	ldi	r31, 0x0A	; 10
    2b4a:	ff 2e       	mov	r15, r31
    2b4c:	f0 2d       	mov	r31, r0
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 ec       	ldi	r20, 0xC0	; 192
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	66 e7       	ldi	r22, 0x76	; 118
    2b58:	76 e0       	ldi	r23, 0x06	; 6
    2b5a:	8a e7       	ldi	r24, 0x7A	; 122
    2b5c:	93 e1       	ldi	r25, 0x13	; 19
    2b5e:	0e 94 06 0b 	call	0x160c	; 0x160c <xTaskCreate>
	//xTaskCreate(get_Light_Intensity_task, "Measure light intensity", configMINIMAL_STACK_SIZE,NULL,task3_TASK_PRIORITY,&x3Handle);
	//xTaskCreate(prepare_telegram_task, "Prepare telegram", configMINIMAL_STACK_SIZE,NULL,task3_TASK_PRIORITY,&x4Handle);
	//xTaskCreate(send_telegram_task, "Send telegram", configMINIMAL_STACK_SIZE,NULL,task3_TASK_PRIORITY,&x5Handle);
	//xTaskCreate(LoRa_Task, "initLORA", configMINIMAL_STACK_SIZE,NULL,task6_TASK_PRIORITY,&x6Handle);
	
	hal_create(LED_TASK_PRIORITY);
    2b62:	87 e0       	ldi	r24, 0x07	; 7
    2b64:	d7 d4       	rcall	.+2478   	; 0x3514 <hal_create>
	lora_driver_create(ser_USART1);
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <lora_driver_create>
	lora_handler_create(3);
    2b6c:	83 e0       	ldi	r24, 0x03	; 3
    2b6e:	a9 df       	rcall	.-174    	; 0x2ac2 <lora_handler_create>
	//init_Lux_sens();
	//init_LoRa_module();
	
	
	//puts("Program Stared");
	vTaskStartScheduler();
    2b70:	0e 94 24 0c 	call	0x1848	; 0x1848 <vTaskStartScheduler>
    2b74:	ff cf       	rjmp	.-2      	; 0x2b74 <main+0x8a>

00002b76 <__fixunssfsi>:
    2b76:	33 d0       	rcall	.+102    	; 0x2bde <__fp_splitA>
    2b78:	88 f0       	brcs	.+34     	; 0x2b9c <__fixunssfsi+0x26>
    2b7a:	9f 57       	subi	r25, 0x7F	; 127
    2b7c:	90 f0       	brcs	.+36     	; 0x2ba2 <__fixunssfsi+0x2c>
    2b7e:	b9 2f       	mov	r27, r25
    2b80:	99 27       	eor	r25, r25
    2b82:	b7 51       	subi	r27, 0x17	; 23
    2b84:	a0 f0       	brcs	.+40     	; 0x2bae <__fixunssfsi+0x38>
    2b86:	d1 f0       	breq	.+52     	; 0x2bbc <__fixunssfsi+0x46>
    2b88:	66 0f       	add	r22, r22
    2b8a:	77 1f       	adc	r23, r23
    2b8c:	88 1f       	adc	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	1a f0       	brmi	.+6      	; 0x2b98 <__fixunssfsi+0x22>
    2b92:	ba 95       	dec	r27
    2b94:	c9 f7       	brne	.-14     	; 0x2b88 <__fixunssfsi+0x12>
    2b96:	12 c0       	rjmp	.+36     	; 0x2bbc <__fixunssfsi+0x46>
    2b98:	b1 30       	cpi	r27, 0x01	; 1
    2b9a:	81 f0       	breq	.+32     	; 0x2bbc <__fixunssfsi+0x46>
    2b9c:	3a d0       	rcall	.+116    	; 0x2c12 <__fp_zero>
    2b9e:	b1 e0       	ldi	r27, 0x01	; 1
    2ba0:	08 95       	ret
    2ba2:	37 c0       	rjmp	.+110    	; 0x2c12 <__fp_zero>
    2ba4:	67 2f       	mov	r22, r23
    2ba6:	78 2f       	mov	r23, r24
    2ba8:	88 27       	eor	r24, r24
    2baa:	b8 5f       	subi	r27, 0xF8	; 248
    2bac:	39 f0       	breq	.+14     	; 0x2bbc <__fixunssfsi+0x46>
    2bae:	b9 3f       	cpi	r27, 0xF9	; 249
    2bb0:	cc f3       	brlt	.-14     	; 0x2ba4 <__fixunssfsi+0x2e>
    2bb2:	86 95       	lsr	r24
    2bb4:	77 95       	ror	r23
    2bb6:	67 95       	ror	r22
    2bb8:	b3 95       	inc	r27
    2bba:	d9 f7       	brne	.-10     	; 0x2bb2 <__fixunssfsi+0x3c>
    2bbc:	3e f4       	brtc	.+14     	; 0x2bcc <__fixunssfsi+0x56>
    2bbe:	90 95       	com	r25
    2bc0:	80 95       	com	r24
    2bc2:	70 95       	com	r23
    2bc4:	61 95       	neg	r22
    2bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	08 95       	ret

00002bce <__fp_split3>:
    2bce:	57 fd       	sbrc	r21, 7
    2bd0:	90 58       	subi	r25, 0x80	; 128
    2bd2:	44 0f       	add	r20, r20
    2bd4:	55 1f       	adc	r21, r21
    2bd6:	59 f0       	breq	.+22     	; 0x2bee <__fp_splitA+0x10>
    2bd8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <__fp_splitA+0x1a>
    2bdc:	47 95       	ror	r20

00002bde <__fp_splitA>:
    2bde:	88 0f       	add	r24, r24
    2be0:	97 fb       	bst	r25, 7
    2be2:	99 1f       	adc	r25, r25
    2be4:	61 f0       	breq	.+24     	; 0x2bfe <__fp_splitA+0x20>
    2be6:	9f 3f       	cpi	r25, 0xFF	; 255
    2be8:	79 f0       	breq	.+30     	; 0x2c08 <__fp_splitA+0x2a>
    2bea:	87 95       	ror	r24
    2bec:	08 95       	ret
    2bee:	12 16       	cp	r1, r18
    2bf0:	13 06       	cpc	r1, r19
    2bf2:	14 06       	cpc	r1, r20
    2bf4:	55 1f       	adc	r21, r21
    2bf6:	f2 cf       	rjmp	.-28     	; 0x2bdc <__fp_split3+0xe>
    2bf8:	46 95       	lsr	r20
    2bfa:	f1 df       	rcall	.-30     	; 0x2bde <__fp_splitA>
    2bfc:	08 c0       	rjmp	.+16     	; 0x2c0e <__fp_splitA+0x30>
    2bfe:	16 16       	cp	r1, r22
    2c00:	17 06       	cpc	r1, r23
    2c02:	18 06       	cpc	r1, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	f1 cf       	rjmp	.-30     	; 0x2bea <__fp_splitA+0xc>
    2c08:	86 95       	lsr	r24
    2c0a:	71 05       	cpc	r23, r1
    2c0c:	61 05       	cpc	r22, r1
    2c0e:	08 94       	sec
    2c10:	08 95       	ret

00002c12 <__fp_zero>:
    2c12:	e8 94       	clt

00002c14 <__fp_szero>:
    2c14:	bb 27       	eor	r27, r27
    2c16:	66 27       	eor	r22, r22
    2c18:	77 27       	eor	r23, r23
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	97 f9       	bld	r25, 7
    2c1e:	08 95       	ret

00002c20 <__mulsf3>:
    2c20:	0b d0       	rcall	.+22     	; 0x2c38 <__mulsf3x>
    2c22:	c1 c0       	rjmp	.+386    	; 0x2da6 <__fp_round>
    2c24:	b2 d0       	rcall	.+356    	; 0x2d8a <__fp_pscA>
    2c26:	28 f0       	brcs	.+10     	; 0x2c32 <__mulsf3+0x12>
    2c28:	b7 d0       	rcall	.+366    	; 0x2d98 <__fp_pscB>
    2c2a:	18 f0       	brcs	.+6      	; 0x2c32 <__mulsf3+0x12>
    2c2c:	95 23       	and	r25, r21
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <__mulsf3+0x12>
    2c30:	7a c0       	rjmp	.+244    	; 0x2d26 <__fp_inf>
    2c32:	a8 c0       	rjmp	.+336    	; 0x2d84 <__fp_nan>
    2c34:	11 24       	eor	r1, r1
    2c36:	ee cf       	rjmp	.-36     	; 0x2c14 <__fp_szero>

00002c38 <__mulsf3x>:
    2c38:	ca df       	rcall	.-108    	; 0x2bce <__fp_split3>
    2c3a:	a0 f3       	brcs	.-24     	; 0x2c24 <__mulsf3+0x4>

00002c3c <__mulsf3_pse>:
    2c3c:	95 9f       	mul	r25, r21
    2c3e:	d1 f3       	breq	.-12     	; 0x2c34 <__mulsf3+0x14>
    2c40:	95 0f       	add	r25, r21
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	55 1f       	adc	r21, r21
    2c46:	62 9f       	mul	r22, r18
    2c48:	f0 01       	movw	r30, r0
    2c4a:	72 9f       	mul	r23, r18
    2c4c:	bb 27       	eor	r27, r27
    2c4e:	f0 0d       	add	r31, r0
    2c50:	b1 1d       	adc	r27, r1
    2c52:	63 9f       	mul	r22, r19
    2c54:	aa 27       	eor	r26, r26
    2c56:	f0 0d       	add	r31, r0
    2c58:	b1 1d       	adc	r27, r1
    2c5a:	aa 1f       	adc	r26, r26
    2c5c:	64 9f       	mul	r22, r20
    2c5e:	66 27       	eor	r22, r22
    2c60:	b0 0d       	add	r27, r0
    2c62:	a1 1d       	adc	r26, r1
    2c64:	66 1f       	adc	r22, r22
    2c66:	82 9f       	mul	r24, r18
    2c68:	22 27       	eor	r18, r18
    2c6a:	b0 0d       	add	r27, r0
    2c6c:	a1 1d       	adc	r26, r1
    2c6e:	62 1f       	adc	r22, r18
    2c70:	73 9f       	mul	r23, r19
    2c72:	b0 0d       	add	r27, r0
    2c74:	a1 1d       	adc	r26, r1
    2c76:	62 1f       	adc	r22, r18
    2c78:	83 9f       	mul	r24, r19
    2c7a:	a0 0d       	add	r26, r0
    2c7c:	61 1d       	adc	r22, r1
    2c7e:	22 1f       	adc	r18, r18
    2c80:	74 9f       	mul	r23, r20
    2c82:	33 27       	eor	r19, r19
    2c84:	a0 0d       	add	r26, r0
    2c86:	61 1d       	adc	r22, r1
    2c88:	23 1f       	adc	r18, r19
    2c8a:	84 9f       	mul	r24, r20
    2c8c:	60 0d       	add	r22, r0
    2c8e:	21 1d       	adc	r18, r1
    2c90:	82 2f       	mov	r24, r18
    2c92:	76 2f       	mov	r23, r22
    2c94:	6a 2f       	mov	r22, r26
    2c96:	11 24       	eor	r1, r1
    2c98:	9f 57       	subi	r25, 0x7F	; 127
    2c9a:	50 40       	sbci	r21, 0x00	; 0
    2c9c:	8a f0       	brmi	.+34     	; 0x2cc0 <__mulsf3_pse+0x84>
    2c9e:	e1 f0       	breq	.+56     	; 0x2cd8 <__mulsf3_pse+0x9c>
    2ca0:	88 23       	and	r24, r24
    2ca2:	4a f0       	brmi	.+18     	; 0x2cb6 <__mulsf3_pse+0x7a>
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	66 1f       	adc	r22, r22
    2cac:	77 1f       	adc	r23, r23
    2cae:	88 1f       	adc	r24, r24
    2cb0:	91 50       	subi	r25, 0x01	; 1
    2cb2:	50 40       	sbci	r21, 0x00	; 0
    2cb4:	a9 f7       	brne	.-22     	; 0x2ca0 <__mulsf3_pse+0x64>
    2cb6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cb8:	51 05       	cpc	r21, r1
    2cba:	70 f0       	brcs	.+28     	; 0x2cd8 <__mulsf3_pse+0x9c>
    2cbc:	34 c0       	rjmp	.+104    	; 0x2d26 <__fp_inf>
    2cbe:	aa cf       	rjmp	.-172    	; 0x2c14 <__fp_szero>
    2cc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2cc2:	ec f3       	brlt	.-6      	; 0x2cbe <__mulsf3_pse+0x82>
    2cc4:	98 3e       	cpi	r25, 0xE8	; 232
    2cc6:	dc f3       	brlt	.-10     	; 0x2cbe <__mulsf3_pse+0x82>
    2cc8:	86 95       	lsr	r24
    2cca:	77 95       	ror	r23
    2ccc:	67 95       	ror	r22
    2cce:	b7 95       	ror	r27
    2cd0:	f7 95       	ror	r31
    2cd2:	e7 95       	ror	r30
    2cd4:	9f 5f       	subi	r25, 0xFF	; 255
    2cd6:	c1 f7       	brne	.-16     	; 0x2cc8 <__mulsf3_pse+0x8c>
    2cd8:	fe 2b       	or	r31, r30
    2cda:	88 0f       	add	r24, r24
    2cdc:	91 1d       	adc	r25, r1
    2cde:	96 95       	lsr	r25
    2ce0:	87 95       	ror	r24
    2ce2:	97 f9       	bld	r25, 7
    2ce4:	08 95       	ret

00002ce6 <round>:
    2ce6:	7b df       	rcall	.-266    	; 0x2bde <__fp_splitA>
    2ce8:	e0 f0       	brcs	.+56     	; 0x2d22 <round+0x3c>
    2cea:	9e 37       	cpi	r25, 0x7E	; 126
    2cec:	d8 f0       	brcs	.+54     	; 0x2d24 <round+0x3e>
    2cee:	96 39       	cpi	r25, 0x96	; 150
    2cf0:	b8 f4       	brcc	.+46     	; 0x2d20 <round+0x3a>
    2cf2:	9e 38       	cpi	r25, 0x8E	; 142
    2cf4:	48 f4       	brcc	.+18     	; 0x2d08 <round+0x22>
    2cf6:	67 2f       	mov	r22, r23
    2cf8:	78 2f       	mov	r23, r24
    2cfa:	88 27       	eor	r24, r24
    2cfc:	98 5f       	subi	r25, 0xF8	; 248
    2cfe:	f9 cf       	rjmp	.-14     	; 0x2cf2 <round+0xc>
    2d00:	86 95       	lsr	r24
    2d02:	77 95       	ror	r23
    2d04:	67 95       	ror	r22
    2d06:	93 95       	inc	r25
    2d08:	95 39       	cpi	r25, 0x95	; 149
    2d0a:	d0 f3       	brcs	.-12     	; 0x2d00 <round+0x1a>
    2d0c:	b6 2f       	mov	r27, r22
    2d0e:	b1 70       	andi	r27, 0x01	; 1
    2d10:	6b 0f       	add	r22, r27
    2d12:	71 1d       	adc	r23, r1
    2d14:	81 1d       	adc	r24, r1
    2d16:	20 f4       	brcc	.+8      	; 0x2d20 <round+0x3a>
    2d18:	87 95       	ror	r24
    2d1a:	77 95       	ror	r23
    2d1c:	67 95       	ror	r22
    2d1e:	93 95       	inc	r25
    2d20:	08 c0       	rjmp	.+16     	; 0x2d32 <__fp_mintl>
    2d22:	22 c0       	rjmp	.+68     	; 0x2d68 <__fp_mpack>
    2d24:	77 cf       	rjmp	.-274    	; 0x2c14 <__fp_szero>

00002d26 <__fp_inf>:
    2d26:	97 f9       	bld	r25, 7
    2d28:	9f 67       	ori	r25, 0x7F	; 127
    2d2a:	80 e8       	ldi	r24, 0x80	; 128
    2d2c:	70 e0       	ldi	r23, 0x00	; 0
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	08 95       	ret

00002d32 <__fp_mintl>:
    2d32:	88 23       	and	r24, r24
    2d34:	71 f4       	brne	.+28     	; 0x2d52 <__fp_mintl+0x20>
    2d36:	77 23       	and	r23, r23
    2d38:	21 f0       	breq	.+8      	; 0x2d42 <__fp_mintl+0x10>
    2d3a:	98 50       	subi	r25, 0x08	; 8
    2d3c:	87 2b       	or	r24, r23
    2d3e:	76 2f       	mov	r23, r22
    2d40:	07 c0       	rjmp	.+14     	; 0x2d50 <__fp_mintl+0x1e>
    2d42:	66 23       	and	r22, r22
    2d44:	11 f4       	brne	.+4      	; 0x2d4a <__fp_mintl+0x18>
    2d46:	99 27       	eor	r25, r25
    2d48:	0d c0       	rjmp	.+26     	; 0x2d64 <__fp_mintl+0x32>
    2d4a:	90 51       	subi	r25, 0x10	; 16
    2d4c:	86 2b       	or	r24, r22
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	2a f0       	brmi	.+10     	; 0x2d5e <__fp_mintl+0x2c>
    2d54:	9a 95       	dec	r25
    2d56:	66 0f       	add	r22, r22
    2d58:	77 1f       	adc	r23, r23
    2d5a:	88 1f       	adc	r24, r24
    2d5c:	da f7       	brpl	.-10     	; 0x2d54 <__fp_mintl+0x22>
    2d5e:	88 0f       	add	r24, r24
    2d60:	96 95       	lsr	r25
    2d62:	87 95       	ror	r24
    2d64:	97 f9       	bld	r25, 7
    2d66:	08 95       	ret

00002d68 <__fp_mpack>:
    2d68:	9f 3f       	cpi	r25, 0xFF	; 255
    2d6a:	31 f0       	breq	.+12     	; 0x2d78 <__fp_mpack_finite+0xc>

00002d6c <__fp_mpack_finite>:
    2d6c:	91 50       	subi	r25, 0x01	; 1
    2d6e:	20 f4       	brcc	.+8      	; 0x2d78 <__fp_mpack_finite+0xc>
    2d70:	87 95       	ror	r24
    2d72:	77 95       	ror	r23
    2d74:	67 95       	ror	r22
    2d76:	b7 95       	ror	r27
    2d78:	88 0f       	add	r24, r24
    2d7a:	91 1d       	adc	r25, r1
    2d7c:	96 95       	lsr	r25
    2d7e:	87 95       	ror	r24
    2d80:	97 f9       	bld	r25, 7
    2d82:	08 95       	ret

00002d84 <__fp_nan>:
    2d84:	9f ef       	ldi	r25, 0xFF	; 255
    2d86:	80 ec       	ldi	r24, 0xC0	; 192
    2d88:	08 95       	ret

00002d8a <__fp_pscA>:
    2d8a:	00 24       	eor	r0, r0
    2d8c:	0a 94       	dec	r0
    2d8e:	16 16       	cp	r1, r22
    2d90:	17 06       	cpc	r1, r23
    2d92:	18 06       	cpc	r1, r24
    2d94:	09 06       	cpc	r0, r25
    2d96:	08 95       	ret

00002d98 <__fp_pscB>:
    2d98:	00 24       	eor	r0, r0
    2d9a:	0a 94       	dec	r0
    2d9c:	12 16       	cp	r1, r18
    2d9e:	13 06       	cpc	r1, r19
    2da0:	14 06       	cpc	r1, r20
    2da2:	05 06       	cpc	r0, r21
    2da4:	08 95       	ret

00002da6 <__fp_round>:
    2da6:	09 2e       	mov	r0, r25
    2da8:	03 94       	inc	r0
    2daa:	00 0c       	add	r0, r0
    2dac:	11 f4       	brne	.+4      	; 0x2db2 <__fp_round+0xc>
    2dae:	88 23       	and	r24, r24
    2db0:	52 f0       	brmi	.+20     	; 0x2dc6 <__fp_round+0x20>
    2db2:	bb 0f       	add	r27, r27
    2db4:	40 f4       	brcc	.+16     	; 0x2dc6 <__fp_round+0x20>
    2db6:	bf 2b       	or	r27, r31
    2db8:	11 f4       	brne	.+4      	; 0x2dbe <__fp_round+0x18>
    2dba:	60 ff       	sbrs	r22, 0
    2dbc:	04 c0       	rjmp	.+8      	; 0x2dc6 <__fp_round+0x20>
    2dbe:	6f 5f       	subi	r22, 0xFF	; 255
    2dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc6:	08 95       	ret

00002dc8 <vfprintf>:
    2dc8:	2f 92       	push	r2
    2dca:	3f 92       	push	r3
    2dcc:	4f 92       	push	r4
    2dce:	5f 92       	push	r5
    2dd0:	6f 92       	push	r6
    2dd2:	7f 92       	push	r7
    2dd4:	8f 92       	push	r8
    2dd6:	9f 92       	push	r9
    2dd8:	af 92       	push	r10
    2dda:	bf 92       	push	r11
    2ddc:	cf 92       	push	r12
    2dde:	df 92       	push	r13
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	60 97       	sbiw	r28, 0x10	; 16
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	7c 01       	movw	r14, r24
    2dfe:	1b 01       	movw	r2, r22
    2e00:	6a 01       	movw	r12, r20
    2e02:	fc 01       	movw	r30, r24
    2e04:	17 82       	std	Z+7, r1	; 0x07
    2e06:	16 82       	std	Z+6, r1	; 0x06
    2e08:	83 81       	ldd	r24, Z+3	; 0x03
    2e0a:	81 ff       	sbrs	r24, 1
    2e0c:	44 c3       	rjmp	.+1672   	; 0x3496 <vfprintf+0x6ce>
    2e0e:	9e 01       	movw	r18, r28
    2e10:	2f 5f       	subi	r18, 0xFF	; 255
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	39 01       	movw	r6, r18
    2e16:	f7 01       	movw	r30, r14
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	f1 01       	movw	r30, r2
    2e1c:	93 fd       	sbrc	r25, 3
    2e1e:	85 91       	lpm	r24, Z+
    2e20:	93 ff       	sbrs	r25, 3
    2e22:	81 91       	ld	r24, Z+
    2e24:	1f 01       	movw	r2, r30
    2e26:	88 23       	and	r24, r24
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <vfprintf+0x64>
    2e2a:	31 c3       	rjmp	.+1634   	; 0x348e <vfprintf+0x6c6>
    2e2c:	85 32       	cpi	r24, 0x25	; 37
    2e2e:	39 f4       	brne	.+14     	; 0x2e3e <vfprintf+0x76>
    2e30:	93 fd       	sbrc	r25, 3
    2e32:	85 91       	lpm	r24, Z+
    2e34:	93 ff       	sbrs	r25, 3
    2e36:	81 91       	ld	r24, Z+
    2e38:	1f 01       	movw	r2, r30
    2e3a:	85 32       	cpi	r24, 0x25	; 37
    2e3c:	39 f4       	brne	.+14     	; 0x2e4c <vfprintf+0x84>
    2e3e:	b7 01       	movw	r22, r14
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    2e46:	56 01       	movw	r10, r12
    2e48:	65 01       	movw	r12, r10
    2e4a:	e5 cf       	rjmp	.-54     	; 0x2e16 <vfprintf+0x4e>
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	51 2c       	mov	r5, r1
    2e50:	91 2c       	mov	r9, r1
    2e52:	ff e1       	ldi	r31, 0x1F	; 31
    2e54:	f9 15       	cp	r31, r9
    2e56:	d8 f0       	brcs	.+54     	; 0x2e8e <vfprintf+0xc6>
    2e58:	8b 32       	cpi	r24, 0x2B	; 43
    2e5a:	79 f0       	breq	.+30     	; 0x2e7a <vfprintf+0xb2>
    2e5c:	38 f4       	brcc	.+14     	; 0x2e6c <vfprintf+0xa4>
    2e5e:	80 32       	cpi	r24, 0x20	; 32
    2e60:	79 f0       	breq	.+30     	; 0x2e80 <vfprintf+0xb8>
    2e62:	83 32       	cpi	r24, 0x23	; 35
    2e64:	a1 f4       	brne	.+40     	; 0x2e8e <vfprintf+0xc6>
    2e66:	f9 2d       	mov	r31, r9
    2e68:	f0 61       	ori	r31, 0x10	; 16
    2e6a:	2e c0       	rjmp	.+92     	; 0x2ec8 <vfprintf+0x100>
    2e6c:	8d 32       	cpi	r24, 0x2D	; 45
    2e6e:	61 f0       	breq	.+24     	; 0x2e88 <vfprintf+0xc0>
    2e70:	80 33       	cpi	r24, 0x30	; 48
    2e72:	69 f4       	brne	.+26     	; 0x2e8e <vfprintf+0xc6>
    2e74:	29 2d       	mov	r18, r9
    2e76:	21 60       	ori	r18, 0x01	; 1
    2e78:	2d c0       	rjmp	.+90     	; 0x2ed4 <vfprintf+0x10c>
    2e7a:	39 2d       	mov	r19, r9
    2e7c:	32 60       	ori	r19, 0x02	; 2
    2e7e:	93 2e       	mov	r9, r19
    2e80:	89 2d       	mov	r24, r9
    2e82:	84 60       	ori	r24, 0x04	; 4
    2e84:	98 2e       	mov	r9, r24
    2e86:	2a c0       	rjmp	.+84     	; 0x2edc <vfprintf+0x114>
    2e88:	e9 2d       	mov	r30, r9
    2e8a:	e8 60       	ori	r30, 0x08	; 8
    2e8c:	15 c0       	rjmp	.+42     	; 0x2eb8 <vfprintf+0xf0>
    2e8e:	97 fc       	sbrc	r9, 7
    2e90:	2d c0       	rjmp	.+90     	; 0x2eec <vfprintf+0x124>
    2e92:	20 ed       	ldi	r18, 0xD0	; 208
    2e94:	28 0f       	add	r18, r24
    2e96:	2a 30       	cpi	r18, 0x0A	; 10
    2e98:	88 f4       	brcc	.+34     	; 0x2ebc <vfprintf+0xf4>
    2e9a:	96 fe       	sbrs	r9, 6
    2e9c:	06 c0       	rjmp	.+12     	; 0x2eaa <vfprintf+0xe2>
    2e9e:	3a e0       	ldi	r19, 0x0A	; 10
    2ea0:	13 9f       	mul	r17, r19
    2ea2:	20 0d       	add	r18, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	12 2f       	mov	r17, r18
    2ea8:	19 c0       	rjmp	.+50     	; 0x2edc <vfprintf+0x114>
    2eaa:	8a e0       	ldi	r24, 0x0A	; 10
    2eac:	58 9e       	mul	r5, r24
    2eae:	20 0d       	add	r18, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	52 2e       	mov	r5, r18
    2eb4:	e9 2d       	mov	r30, r9
    2eb6:	e0 62       	ori	r30, 0x20	; 32
    2eb8:	9e 2e       	mov	r9, r30
    2eba:	10 c0       	rjmp	.+32     	; 0x2edc <vfprintf+0x114>
    2ebc:	8e 32       	cpi	r24, 0x2E	; 46
    2ebe:	31 f4       	brne	.+12     	; 0x2ecc <vfprintf+0x104>
    2ec0:	96 fc       	sbrc	r9, 6
    2ec2:	e5 c2       	rjmp	.+1482   	; 0x348e <vfprintf+0x6c6>
    2ec4:	f9 2d       	mov	r31, r9
    2ec6:	f0 64       	ori	r31, 0x40	; 64
    2ec8:	9f 2e       	mov	r9, r31
    2eca:	08 c0       	rjmp	.+16     	; 0x2edc <vfprintf+0x114>
    2ecc:	8c 36       	cpi	r24, 0x6C	; 108
    2ece:	21 f4       	brne	.+8      	; 0x2ed8 <vfprintf+0x110>
    2ed0:	29 2d       	mov	r18, r9
    2ed2:	20 68       	ori	r18, 0x80	; 128
    2ed4:	92 2e       	mov	r9, r18
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <vfprintf+0x114>
    2ed8:	88 36       	cpi	r24, 0x68	; 104
    2eda:	41 f4       	brne	.+16     	; 0x2eec <vfprintf+0x124>
    2edc:	f1 01       	movw	r30, r2
    2ede:	93 fd       	sbrc	r25, 3
    2ee0:	85 91       	lpm	r24, Z+
    2ee2:	93 ff       	sbrs	r25, 3
    2ee4:	81 91       	ld	r24, Z+
    2ee6:	1f 01       	movw	r2, r30
    2ee8:	81 11       	cpse	r24, r1
    2eea:	b3 cf       	rjmp	.-154    	; 0x2e52 <vfprintf+0x8a>
    2eec:	9b eb       	ldi	r25, 0xBB	; 187
    2eee:	98 0f       	add	r25, r24
    2ef0:	93 30       	cpi	r25, 0x03	; 3
    2ef2:	20 f4       	brcc	.+8      	; 0x2efc <vfprintf+0x134>
    2ef4:	99 2d       	mov	r25, r9
    2ef6:	90 61       	ori	r25, 0x10	; 16
    2ef8:	80 5e       	subi	r24, 0xE0	; 224
    2efa:	07 c0       	rjmp	.+14     	; 0x2f0a <vfprintf+0x142>
    2efc:	9b e9       	ldi	r25, 0x9B	; 155
    2efe:	98 0f       	add	r25, r24
    2f00:	93 30       	cpi	r25, 0x03	; 3
    2f02:	08 f0       	brcs	.+2      	; 0x2f06 <vfprintf+0x13e>
    2f04:	66 c1       	rjmp	.+716    	; 0x31d2 <vfprintf+0x40a>
    2f06:	99 2d       	mov	r25, r9
    2f08:	9f 7e       	andi	r25, 0xEF	; 239
    2f0a:	96 ff       	sbrs	r25, 6
    2f0c:	16 e0       	ldi	r17, 0x06	; 6
    2f0e:	9f 73       	andi	r25, 0x3F	; 63
    2f10:	99 2e       	mov	r9, r25
    2f12:	85 36       	cpi	r24, 0x65	; 101
    2f14:	19 f4       	brne	.+6      	; 0x2f1c <vfprintf+0x154>
    2f16:	90 64       	ori	r25, 0x40	; 64
    2f18:	99 2e       	mov	r9, r25
    2f1a:	08 c0       	rjmp	.+16     	; 0x2f2c <vfprintf+0x164>
    2f1c:	86 36       	cpi	r24, 0x66	; 102
    2f1e:	21 f4       	brne	.+8      	; 0x2f28 <vfprintf+0x160>
    2f20:	39 2f       	mov	r19, r25
    2f22:	30 68       	ori	r19, 0x80	; 128
    2f24:	93 2e       	mov	r9, r19
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <vfprintf+0x164>
    2f28:	11 11       	cpse	r17, r1
    2f2a:	11 50       	subi	r17, 0x01	; 1
    2f2c:	97 fe       	sbrs	r9, 7
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <vfprintf+0x176>
    2f30:	1c 33       	cpi	r17, 0x3C	; 60
    2f32:	50 f4       	brcc	.+20     	; 0x2f48 <vfprintf+0x180>
    2f34:	44 24       	eor	r4, r4
    2f36:	43 94       	inc	r4
    2f38:	41 0e       	add	r4, r17
    2f3a:	27 e0       	ldi	r18, 0x07	; 7
    2f3c:	0b c0       	rjmp	.+22     	; 0x2f54 <vfprintf+0x18c>
    2f3e:	18 30       	cpi	r17, 0x08	; 8
    2f40:	38 f0       	brcs	.+14     	; 0x2f50 <vfprintf+0x188>
    2f42:	27 e0       	ldi	r18, 0x07	; 7
    2f44:	17 e0       	ldi	r17, 0x07	; 7
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <vfprintf+0x18a>
    2f48:	27 e0       	ldi	r18, 0x07	; 7
    2f4a:	9c e3       	ldi	r25, 0x3C	; 60
    2f4c:	49 2e       	mov	r4, r25
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <vfprintf+0x18c>
    2f50:	21 2f       	mov	r18, r17
    2f52:	41 2c       	mov	r4, r1
    2f54:	56 01       	movw	r10, r12
    2f56:	84 e0       	ldi	r24, 0x04	; 4
    2f58:	a8 0e       	add	r10, r24
    2f5a:	b1 1c       	adc	r11, r1
    2f5c:	f6 01       	movw	r30, r12
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	04 2d       	mov	r16, r4
    2f68:	a3 01       	movw	r20, r6
    2f6a:	0e 94 05 2a 	call	0x540a	; 0x540a <__ftoa_engine>
    2f6e:	6c 01       	movw	r12, r24
    2f70:	f9 81       	ldd	r31, Y+1	; 0x01
    2f72:	fc 87       	std	Y+12, r31	; 0x0c
    2f74:	f0 ff       	sbrs	r31, 0
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <vfprintf+0x1b4>
    2f78:	f3 ff       	sbrs	r31, 3
    2f7a:	06 c0       	rjmp	.+12     	; 0x2f88 <vfprintf+0x1c0>
    2f7c:	91 fc       	sbrc	r9, 1
    2f7e:	06 c0       	rjmp	.+12     	; 0x2f8c <vfprintf+0x1c4>
    2f80:	92 fe       	sbrs	r9, 2
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <vfprintf+0x1c8>
    2f84:	00 e2       	ldi	r16, 0x20	; 32
    2f86:	05 c0       	rjmp	.+10     	; 0x2f92 <vfprintf+0x1ca>
    2f88:	0d e2       	ldi	r16, 0x2D	; 45
    2f8a:	03 c0       	rjmp	.+6      	; 0x2f92 <vfprintf+0x1ca>
    2f8c:	0b e2       	ldi	r16, 0x2B	; 43
    2f8e:	01 c0       	rjmp	.+2      	; 0x2f92 <vfprintf+0x1ca>
    2f90:	00 e0       	ldi	r16, 0x00	; 0
    2f92:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f94:	8c 70       	andi	r24, 0x0C	; 12
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <vfprintf+0x1d6>
    2f98:	01 11       	cpse	r16, r1
    2f9a:	5a c2       	rjmp	.+1204   	; 0x3450 <vfprintf+0x688>
    2f9c:	9b c2       	rjmp	.+1334   	; 0x34d4 <vfprintf+0x70c>
    2f9e:	97 fe       	sbrs	r9, 7
    2fa0:	10 c0       	rjmp	.+32     	; 0x2fc2 <vfprintf+0x1fa>
    2fa2:	4c 0c       	add	r4, r12
    2fa4:	fc 85       	ldd	r31, Y+12	; 0x0c
    2fa6:	f4 ff       	sbrs	r31, 4
    2fa8:	04 c0       	rjmp	.+8      	; 0x2fb2 <vfprintf+0x1ea>
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	81 33       	cpi	r24, 0x31	; 49
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <vfprintf+0x1ea>
    2fb0:	4a 94       	dec	r4
    2fb2:	14 14       	cp	r1, r4
    2fb4:	74 f5       	brge	.+92     	; 0x3012 <vfprintf+0x24a>
    2fb6:	28 e0       	ldi	r18, 0x08	; 8
    2fb8:	24 15       	cp	r18, r4
    2fba:	78 f5       	brcc	.+94     	; 0x301a <vfprintf+0x252>
    2fbc:	88 e0       	ldi	r24, 0x08	; 8
    2fbe:	48 2e       	mov	r4, r24
    2fc0:	2c c0       	rjmp	.+88     	; 0x301a <vfprintf+0x252>
    2fc2:	96 fc       	sbrc	r9, 6
    2fc4:	2a c0       	rjmp	.+84     	; 0x301a <vfprintf+0x252>
    2fc6:	81 2f       	mov	r24, r17
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	8c 15       	cp	r24, r12
    2fcc:	9d 05       	cpc	r25, r13
    2fce:	9c f0       	brlt	.+38     	; 0x2ff6 <vfprintf+0x22e>
    2fd0:	3c ef       	ldi	r19, 0xFC	; 252
    2fd2:	c3 16       	cp	r12, r19
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	d3 06       	cpc	r13, r19
    2fd8:	74 f0       	brlt	.+28     	; 0x2ff6 <vfprintf+0x22e>
    2fda:	89 2d       	mov	r24, r9
    2fdc:	80 68       	ori	r24, 0x80	; 128
    2fde:	98 2e       	mov	r9, r24
    2fe0:	0a c0       	rjmp	.+20     	; 0x2ff6 <vfprintf+0x22e>
    2fe2:	e2 e0       	ldi	r30, 0x02	; 2
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	ec 0f       	add	r30, r28
    2fe8:	fd 1f       	adc	r31, r29
    2fea:	e1 0f       	add	r30, r17
    2fec:	f1 1d       	adc	r31, r1
    2fee:	80 81       	ld	r24, Z
    2ff0:	80 33       	cpi	r24, 0x30	; 48
    2ff2:	19 f4       	brne	.+6      	; 0x2ffa <vfprintf+0x232>
    2ff4:	11 50       	subi	r17, 0x01	; 1
    2ff6:	11 11       	cpse	r17, r1
    2ff8:	f4 cf       	rjmp	.-24     	; 0x2fe2 <vfprintf+0x21a>
    2ffa:	97 fe       	sbrs	r9, 7
    2ffc:	0e c0       	rjmp	.+28     	; 0x301a <vfprintf+0x252>
    2ffe:	44 24       	eor	r4, r4
    3000:	43 94       	inc	r4
    3002:	41 0e       	add	r4, r17
    3004:	81 2f       	mov	r24, r17
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	c8 16       	cp	r12, r24
    300a:	d9 06       	cpc	r13, r25
    300c:	2c f4       	brge	.+10     	; 0x3018 <vfprintf+0x250>
    300e:	1c 19       	sub	r17, r12
    3010:	04 c0       	rjmp	.+8      	; 0x301a <vfprintf+0x252>
    3012:	44 24       	eor	r4, r4
    3014:	43 94       	inc	r4
    3016:	01 c0       	rjmp	.+2      	; 0x301a <vfprintf+0x252>
    3018:	10 e0       	ldi	r17, 0x00	; 0
    301a:	97 fe       	sbrs	r9, 7
    301c:	06 c0       	rjmp	.+12     	; 0x302a <vfprintf+0x262>
    301e:	1c 14       	cp	r1, r12
    3020:	1d 04       	cpc	r1, r13
    3022:	34 f4       	brge	.+12     	; 0x3030 <vfprintf+0x268>
    3024:	c6 01       	movw	r24, r12
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	05 c0       	rjmp	.+10     	; 0x3034 <vfprintf+0x26c>
    302a:	85 e0       	ldi	r24, 0x05	; 5
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <vfprintf+0x26c>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	01 11       	cpse	r16, r1
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	11 23       	and	r17, r17
    303a:	31 f0       	breq	.+12     	; 0x3048 <vfprintf+0x280>
    303c:	21 2f       	mov	r18, r17
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	2f 5f       	subi	r18, 0xFF	; 255
    3042:	3f 4f       	sbci	r19, 0xFF	; 255
    3044:	82 0f       	add	r24, r18
    3046:	93 1f       	adc	r25, r19
    3048:	25 2d       	mov	r18, r5
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	82 17       	cp	r24, r18
    304e:	93 07       	cpc	r25, r19
    3050:	14 f4       	brge	.+4      	; 0x3056 <vfprintf+0x28e>
    3052:	58 1a       	sub	r5, r24
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <vfprintf+0x290>
    3056:	51 2c       	mov	r5, r1
    3058:	89 2d       	mov	r24, r9
    305a:	89 70       	andi	r24, 0x09	; 9
    305c:	49 f4       	brne	.+18     	; 0x3070 <vfprintf+0x2a8>
    305e:	55 20       	and	r5, r5
    3060:	39 f0       	breq	.+14     	; 0x3070 <vfprintf+0x2a8>
    3062:	b7 01       	movw	r22, r14
    3064:	80 e2       	ldi	r24, 0x20	; 32
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    306c:	5a 94       	dec	r5
    306e:	f7 cf       	rjmp	.-18     	; 0x305e <vfprintf+0x296>
    3070:	00 23       	and	r16, r16
    3072:	29 f0       	breq	.+10     	; 0x307e <vfprintf+0x2b6>
    3074:	b7 01       	movw	r22, r14
    3076:	80 2f       	mov	r24, r16
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    307e:	93 fc       	sbrc	r9, 3
    3080:	09 c0       	rjmp	.+18     	; 0x3094 <vfprintf+0x2cc>
    3082:	55 20       	and	r5, r5
    3084:	39 f0       	breq	.+14     	; 0x3094 <vfprintf+0x2cc>
    3086:	b7 01       	movw	r22, r14
    3088:	80 e3       	ldi	r24, 0x30	; 48
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3090:	5a 94       	dec	r5
    3092:	f7 cf       	rjmp	.-18     	; 0x3082 <vfprintf+0x2ba>
    3094:	97 fe       	sbrs	r9, 7
    3096:	4c c0       	rjmp	.+152    	; 0x3130 <vfprintf+0x368>
    3098:	46 01       	movw	r8, r12
    309a:	d7 fe       	sbrs	r13, 7
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <vfprintf+0x2da>
    309e:	81 2c       	mov	r8, r1
    30a0:	91 2c       	mov	r9, r1
    30a2:	c6 01       	movw	r24, r12
    30a4:	88 19       	sub	r24, r8
    30a6:	99 09       	sbc	r25, r9
    30a8:	f3 01       	movw	r30, r6
    30aa:	e8 0f       	add	r30, r24
    30ac:	f9 1f       	adc	r31, r25
    30ae:	fe 87       	std	Y+14, r31	; 0x0e
    30b0:	ed 87       	std	Y+13, r30	; 0x0d
    30b2:	96 01       	movw	r18, r12
    30b4:	24 19       	sub	r18, r4
    30b6:	31 09       	sbc	r19, r1
    30b8:	38 8b       	std	Y+16, r19	; 0x10
    30ba:	2f 87       	std	Y+15, r18	; 0x0f
    30bc:	01 2f       	mov	r16, r17
    30be:	10 e0       	ldi	r17, 0x00	; 0
    30c0:	11 95       	neg	r17
    30c2:	01 95       	neg	r16
    30c4:	11 09       	sbc	r17, r1
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	83 16       	cp	r8, r19
    30ca:	93 06       	cpc	r9, r19
    30cc:	29 f4       	brne	.+10     	; 0x30d8 <vfprintf+0x310>
    30ce:	b7 01       	movw	r22, r14
    30d0:	8e e2       	ldi	r24, 0x2E	; 46
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    30d8:	c8 14       	cp	r12, r8
    30da:	d9 04       	cpc	r13, r9
    30dc:	4c f0       	brlt	.+18     	; 0x30f0 <vfprintf+0x328>
    30de:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e0:	98 89       	ldd	r25, Y+16	; 0x10
    30e2:	88 15       	cp	r24, r8
    30e4:	99 05       	cpc	r25, r9
    30e6:	24 f4       	brge	.+8      	; 0x30f0 <vfprintf+0x328>
    30e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    30ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    30ec:	81 81       	ldd	r24, Z+1	; 0x01
    30ee:	01 c0       	rjmp	.+2      	; 0x30f2 <vfprintf+0x32a>
    30f0:	80 e3       	ldi	r24, 0x30	; 48
    30f2:	f1 e0       	ldi	r31, 0x01	; 1
    30f4:	8f 1a       	sub	r8, r31
    30f6:	91 08       	sbc	r9, r1
    30f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    30fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    30fc:	2f 5f       	subi	r18, 0xFF	; 255
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	3e 87       	std	Y+14, r19	; 0x0e
    3102:	2d 87       	std	Y+13, r18	; 0x0d
    3104:	80 16       	cp	r8, r16
    3106:	91 06       	cpc	r9, r17
    3108:	2c f0       	brlt	.+10     	; 0x3114 <vfprintf+0x34c>
    310a:	b7 01       	movw	r22, r14
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3112:	d9 cf       	rjmp	.-78     	; 0x30c6 <vfprintf+0x2fe>
    3114:	c8 14       	cp	r12, r8
    3116:	d9 04       	cpc	r13, r9
    3118:	41 f4       	brne	.+16     	; 0x312a <vfprintf+0x362>
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	96 33       	cpi	r25, 0x36	; 54
    311e:	20 f4       	brcc	.+8      	; 0x3128 <vfprintf+0x360>
    3120:	95 33       	cpi	r25, 0x35	; 53
    3122:	19 f4       	brne	.+6      	; 0x312a <vfprintf+0x362>
    3124:	3c 85       	ldd	r19, Y+12	; 0x0c
    3126:	34 ff       	sbrs	r19, 4
    3128:	81 e3       	ldi	r24, 0x31	; 49
    312a:	b7 01       	movw	r22, r14
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	4e c0       	rjmp	.+156    	; 0x31cc <vfprintf+0x404>
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	81 33       	cpi	r24, 0x31	; 49
    3134:	19 f0       	breq	.+6      	; 0x313c <vfprintf+0x374>
    3136:	9c 85       	ldd	r25, Y+12	; 0x0c
    3138:	9f 7e       	andi	r25, 0xEF	; 239
    313a:	9c 87       	std	Y+12, r25	; 0x0c
    313c:	b7 01       	movw	r22, r14
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3144:	11 11       	cpse	r17, r1
    3146:	05 c0       	rjmp	.+10     	; 0x3152 <vfprintf+0x38a>
    3148:	94 fc       	sbrc	r9, 4
    314a:	18 c0       	rjmp	.+48     	; 0x317c <vfprintf+0x3b4>
    314c:	85 e6       	ldi	r24, 0x65	; 101
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	17 c0       	rjmp	.+46     	; 0x3180 <vfprintf+0x3b8>
    3152:	b7 01       	movw	r22, r14
    3154:	8e e2       	ldi	r24, 0x2E	; 46
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    315c:	1e 5f       	subi	r17, 0xFE	; 254
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	01 e0       	ldi	r16, 0x01	; 1
    3162:	08 0f       	add	r16, r24
    3164:	f3 01       	movw	r30, r6
    3166:	e8 0f       	add	r30, r24
    3168:	f1 1d       	adc	r31, r1
    316a:	80 81       	ld	r24, Z
    316c:	b7 01       	movw	r22, r14
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3174:	80 2f       	mov	r24, r16
    3176:	01 13       	cpse	r16, r17
    3178:	f3 cf       	rjmp	.-26     	; 0x3160 <vfprintf+0x398>
    317a:	e6 cf       	rjmp	.-52     	; 0x3148 <vfprintf+0x380>
    317c:	85 e4       	ldi	r24, 0x45	; 69
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	b7 01       	movw	r22, r14
    3182:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3186:	d7 fc       	sbrc	r13, 7
    3188:	06 c0       	rjmp	.+12     	; 0x3196 <vfprintf+0x3ce>
    318a:	c1 14       	cp	r12, r1
    318c:	d1 04       	cpc	r13, r1
    318e:	41 f4       	brne	.+16     	; 0x31a0 <vfprintf+0x3d8>
    3190:	ec 85       	ldd	r30, Y+12	; 0x0c
    3192:	e4 ff       	sbrs	r30, 4
    3194:	05 c0       	rjmp	.+10     	; 0x31a0 <vfprintf+0x3d8>
    3196:	d1 94       	neg	r13
    3198:	c1 94       	neg	r12
    319a:	d1 08       	sbc	r13, r1
    319c:	8d e2       	ldi	r24, 0x2D	; 45
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <vfprintf+0x3da>
    31a0:	8b e2       	ldi	r24, 0x2B	; 43
    31a2:	b7 01       	movw	r22, r14
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    31aa:	80 e3       	ldi	r24, 0x30	; 48
    31ac:	2a e0       	ldi	r18, 0x0A	; 10
    31ae:	c2 16       	cp	r12, r18
    31b0:	d1 04       	cpc	r13, r1
    31b2:	2c f0       	brlt	.+10     	; 0x31be <vfprintf+0x3f6>
    31b4:	8f 5f       	subi	r24, 0xFF	; 255
    31b6:	fa e0       	ldi	r31, 0x0A	; 10
    31b8:	cf 1a       	sub	r12, r31
    31ba:	d1 08       	sbc	r13, r1
    31bc:	f7 cf       	rjmp	.-18     	; 0x31ac <vfprintf+0x3e4>
    31be:	b7 01       	movw	r22, r14
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    31c6:	b7 01       	movw	r22, r14
    31c8:	c6 01       	movw	r24, r12
    31ca:	c0 96       	adiw	r24, 0x30	; 48
    31cc:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    31d0:	54 c1       	rjmp	.+680    	; 0x347a <vfprintf+0x6b2>
    31d2:	83 36       	cpi	r24, 0x63	; 99
    31d4:	31 f0       	breq	.+12     	; 0x31e2 <vfprintf+0x41a>
    31d6:	83 37       	cpi	r24, 0x73	; 115
    31d8:	79 f0       	breq	.+30     	; 0x31f8 <vfprintf+0x430>
    31da:	83 35       	cpi	r24, 0x53	; 83
    31dc:	09 f0       	breq	.+2      	; 0x31e0 <vfprintf+0x418>
    31de:	56 c0       	rjmp	.+172    	; 0x328c <vfprintf+0x4c4>
    31e0:	20 c0       	rjmp	.+64     	; 0x3222 <vfprintf+0x45a>
    31e2:	56 01       	movw	r10, r12
    31e4:	32 e0       	ldi	r19, 0x02	; 2
    31e6:	a3 0e       	add	r10, r19
    31e8:	b1 1c       	adc	r11, r1
    31ea:	f6 01       	movw	r30, r12
    31ec:	80 81       	ld	r24, Z
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	01 e0       	ldi	r16, 0x01	; 1
    31f2:	10 e0       	ldi	r17, 0x00	; 0
    31f4:	63 01       	movw	r12, r6
    31f6:	12 c0       	rjmp	.+36     	; 0x321c <vfprintf+0x454>
    31f8:	56 01       	movw	r10, r12
    31fa:	f2 e0       	ldi	r31, 0x02	; 2
    31fc:	af 0e       	add	r10, r31
    31fe:	b1 1c       	adc	r11, r1
    3200:	f6 01       	movw	r30, r12
    3202:	c0 80       	ld	r12, Z
    3204:	d1 80       	ldd	r13, Z+1	; 0x01
    3206:	96 fe       	sbrs	r9, 6
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <vfprintf+0x448>
    320a:	61 2f       	mov	r22, r17
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <vfprintf+0x44c>
    3210:	6f ef       	ldi	r22, 0xFF	; 255
    3212:	7f ef       	ldi	r23, 0xFF	; 255
    3214:	c6 01       	movw	r24, r12
    3216:	0e 94 22 2b 	call	0x5644	; 0x5644 <strnlen>
    321a:	8c 01       	movw	r16, r24
    321c:	f9 2d       	mov	r31, r9
    321e:	ff 77       	andi	r31, 0x7F	; 127
    3220:	14 c0       	rjmp	.+40     	; 0x324a <vfprintf+0x482>
    3222:	56 01       	movw	r10, r12
    3224:	22 e0       	ldi	r18, 0x02	; 2
    3226:	a2 0e       	add	r10, r18
    3228:	b1 1c       	adc	r11, r1
    322a:	f6 01       	movw	r30, r12
    322c:	c0 80       	ld	r12, Z
    322e:	d1 80       	ldd	r13, Z+1	; 0x01
    3230:	96 fe       	sbrs	r9, 6
    3232:	03 c0       	rjmp	.+6      	; 0x323a <vfprintf+0x472>
    3234:	61 2f       	mov	r22, r17
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	02 c0       	rjmp	.+4      	; 0x323e <vfprintf+0x476>
    323a:	6f ef       	ldi	r22, 0xFF	; 255
    323c:	7f ef       	ldi	r23, 0xFF	; 255
    323e:	c6 01       	movw	r24, r12
    3240:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <strnlen_P>
    3244:	8c 01       	movw	r16, r24
    3246:	f9 2d       	mov	r31, r9
    3248:	f0 68       	ori	r31, 0x80	; 128
    324a:	9f 2e       	mov	r9, r31
    324c:	f3 fd       	sbrc	r31, 3
    324e:	1a c0       	rjmp	.+52     	; 0x3284 <vfprintf+0x4bc>
    3250:	85 2d       	mov	r24, r5
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	08 17       	cp	r16, r24
    3256:	19 07       	cpc	r17, r25
    3258:	a8 f4       	brcc	.+42     	; 0x3284 <vfprintf+0x4bc>
    325a:	b7 01       	movw	r22, r14
    325c:	80 e2       	ldi	r24, 0x20	; 32
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3264:	5a 94       	dec	r5
    3266:	f4 cf       	rjmp	.-24     	; 0x3250 <vfprintf+0x488>
    3268:	f6 01       	movw	r30, r12
    326a:	97 fc       	sbrc	r9, 7
    326c:	85 91       	lpm	r24, Z+
    326e:	97 fe       	sbrs	r9, 7
    3270:	81 91       	ld	r24, Z+
    3272:	6f 01       	movw	r12, r30
    3274:	b7 01       	movw	r22, r14
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    327c:	51 10       	cpse	r5, r1
    327e:	5a 94       	dec	r5
    3280:	01 50       	subi	r16, 0x01	; 1
    3282:	11 09       	sbc	r17, r1
    3284:	01 15       	cp	r16, r1
    3286:	11 05       	cpc	r17, r1
    3288:	79 f7       	brne	.-34     	; 0x3268 <vfprintf+0x4a0>
    328a:	f7 c0       	rjmp	.+494    	; 0x347a <vfprintf+0x6b2>
    328c:	84 36       	cpi	r24, 0x64	; 100
    328e:	11 f0       	breq	.+4      	; 0x3294 <vfprintf+0x4cc>
    3290:	89 36       	cpi	r24, 0x69	; 105
    3292:	61 f5       	brne	.+88     	; 0x32ec <vfprintf+0x524>
    3294:	56 01       	movw	r10, r12
    3296:	97 fe       	sbrs	r9, 7
    3298:	09 c0       	rjmp	.+18     	; 0x32ac <vfprintf+0x4e4>
    329a:	24 e0       	ldi	r18, 0x04	; 4
    329c:	a2 0e       	add	r10, r18
    329e:	b1 1c       	adc	r11, r1
    32a0:	f6 01       	movw	r30, r12
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	0a c0       	rjmp	.+20     	; 0x32c0 <vfprintf+0x4f8>
    32ac:	f2 e0       	ldi	r31, 0x02	; 2
    32ae:	af 0e       	add	r10, r31
    32b0:	b1 1c       	adc	r11, r1
    32b2:	f6 01       	movw	r30, r12
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	07 2e       	mov	r0, r23
    32ba:	00 0c       	add	r0, r0
    32bc:	88 0b       	sbc	r24, r24
    32be:	99 0b       	sbc	r25, r25
    32c0:	f9 2d       	mov	r31, r9
    32c2:	ff 76       	andi	r31, 0x6F	; 111
    32c4:	9f 2e       	mov	r9, r31
    32c6:	97 ff       	sbrs	r25, 7
    32c8:	09 c0       	rjmp	.+18     	; 0x32dc <vfprintf+0x514>
    32ca:	90 95       	com	r25
    32cc:	80 95       	com	r24
    32ce:	70 95       	com	r23
    32d0:	61 95       	neg	r22
    32d2:	7f 4f       	sbci	r23, 0xFF	; 255
    32d4:	8f 4f       	sbci	r24, 0xFF	; 255
    32d6:	9f 4f       	sbci	r25, 0xFF	; 255
    32d8:	f0 68       	ori	r31, 0x80	; 128
    32da:	9f 2e       	mov	r9, r31
    32dc:	2a e0       	ldi	r18, 0x0A	; 10
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	a3 01       	movw	r20, r6
    32e2:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__ultoa_invert>
    32e6:	c8 2e       	mov	r12, r24
    32e8:	c6 18       	sub	r12, r6
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <vfprintf+0x5a2>
    32ec:	09 2d       	mov	r16, r9
    32ee:	85 37       	cpi	r24, 0x75	; 117
    32f0:	21 f4       	brne	.+8      	; 0x32fa <vfprintf+0x532>
    32f2:	0f 7e       	andi	r16, 0xEF	; 239
    32f4:	2a e0       	ldi	r18, 0x0A	; 10
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	1d c0       	rjmp	.+58     	; 0x3334 <vfprintf+0x56c>
    32fa:	09 7f       	andi	r16, 0xF9	; 249
    32fc:	8f 36       	cpi	r24, 0x6F	; 111
    32fe:	91 f0       	breq	.+36     	; 0x3324 <vfprintf+0x55c>
    3300:	18 f4       	brcc	.+6      	; 0x3308 <vfprintf+0x540>
    3302:	88 35       	cpi	r24, 0x58	; 88
    3304:	59 f0       	breq	.+22     	; 0x331c <vfprintf+0x554>
    3306:	c3 c0       	rjmp	.+390    	; 0x348e <vfprintf+0x6c6>
    3308:	80 37       	cpi	r24, 0x70	; 112
    330a:	19 f0       	breq	.+6      	; 0x3312 <vfprintf+0x54a>
    330c:	88 37       	cpi	r24, 0x78	; 120
    330e:	11 f0       	breq	.+4      	; 0x3314 <vfprintf+0x54c>
    3310:	be c0       	rjmp	.+380    	; 0x348e <vfprintf+0x6c6>
    3312:	00 61       	ori	r16, 0x10	; 16
    3314:	04 ff       	sbrs	r16, 4
    3316:	09 c0       	rjmp	.+18     	; 0x332a <vfprintf+0x562>
    3318:	04 60       	ori	r16, 0x04	; 4
    331a:	07 c0       	rjmp	.+14     	; 0x332a <vfprintf+0x562>
    331c:	94 fe       	sbrs	r9, 4
    331e:	08 c0       	rjmp	.+16     	; 0x3330 <vfprintf+0x568>
    3320:	06 60       	ori	r16, 0x06	; 6
    3322:	06 c0       	rjmp	.+12     	; 0x3330 <vfprintf+0x568>
    3324:	28 e0       	ldi	r18, 0x08	; 8
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	05 c0       	rjmp	.+10     	; 0x3334 <vfprintf+0x56c>
    332a:	20 e1       	ldi	r18, 0x10	; 16
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <vfprintf+0x56c>
    3330:	20 e1       	ldi	r18, 0x10	; 16
    3332:	32 e0       	ldi	r19, 0x02	; 2
    3334:	56 01       	movw	r10, r12
    3336:	07 ff       	sbrs	r16, 7
    3338:	09 c0       	rjmp	.+18     	; 0x334c <vfprintf+0x584>
    333a:	84 e0       	ldi	r24, 0x04	; 4
    333c:	a8 0e       	add	r10, r24
    333e:	b1 1c       	adc	r11, r1
    3340:	f6 01       	movw	r30, r12
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	08 c0       	rjmp	.+16     	; 0x335c <vfprintf+0x594>
    334c:	f2 e0       	ldi	r31, 0x02	; 2
    334e:	af 0e       	add	r10, r31
    3350:	b1 1c       	adc	r11, r1
    3352:	f6 01       	movw	r30, r12
    3354:	60 81       	ld	r22, Z
    3356:	71 81       	ldd	r23, Z+1	; 0x01
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	a3 01       	movw	r20, r6
    335e:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__ultoa_invert>
    3362:	c8 2e       	mov	r12, r24
    3364:	c6 18       	sub	r12, r6
    3366:	0f 77       	andi	r16, 0x7F	; 127
    3368:	90 2e       	mov	r9, r16
    336a:	96 fe       	sbrs	r9, 6
    336c:	0b c0       	rjmp	.+22     	; 0x3384 <vfprintf+0x5bc>
    336e:	09 2d       	mov	r16, r9
    3370:	0e 7f       	andi	r16, 0xFE	; 254
    3372:	c1 16       	cp	r12, r17
    3374:	50 f4       	brcc	.+20     	; 0x338a <vfprintf+0x5c2>
    3376:	94 fe       	sbrs	r9, 4
    3378:	0a c0       	rjmp	.+20     	; 0x338e <vfprintf+0x5c6>
    337a:	92 fc       	sbrc	r9, 2
    337c:	08 c0       	rjmp	.+16     	; 0x338e <vfprintf+0x5c6>
    337e:	09 2d       	mov	r16, r9
    3380:	0e 7e       	andi	r16, 0xEE	; 238
    3382:	05 c0       	rjmp	.+10     	; 0x338e <vfprintf+0x5c6>
    3384:	dc 2c       	mov	r13, r12
    3386:	09 2d       	mov	r16, r9
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <vfprintf+0x5c8>
    338a:	dc 2c       	mov	r13, r12
    338c:	01 c0       	rjmp	.+2      	; 0x3390 <vfprintf+0x5c8>
    338e:	d1 2e       	mov	r13, r17
    3390:	04 ff       	sbrs	r16, 4
    3392:	0d c0       	rjmp	.+26     	; 0x33ae <vfprintf+0x5e6>
    3394:	fe 01       	movw	r30, r28
    3396:	ec 0d       	add	r30, r12
    3398:	f1 1d       	adc	r31, r1
    339a:	80 81       	ld	r24, Z
    339c:	80 33       	cpi	r24, 0x30	; 48
    339e:	11 f4       	brne	.+4      	; 0x33a4 <vfprintf+0x5dc>
    33a0:	09 7e       	andi	r16, 0xE9	; 233
    33a2:	09 c0       	rjmp	.+18     	; 0x33b6 <vfprintf+0x5ee>
    33a4:	02 ff       	sbrs	r16, 2
    33a6:	06 c0       	rjmp	.+12     	; 0x33b4 <vfprintf+0x5ec>
    33a8:	d3 94       	inc	r13
    33aa:	d3 94       	inc	r13
    33ac:	04 c0       	rjmp	.+8      	; 0x33b6 <vfprintf+0x5ee>
    33ae:	80 2f       	mov	r24, r16
    33b0:	86 78       	andi	r24, 0x86	; 134
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <vfprintf+0x5ee>
    33b4:	d3 94       	inc	r13
    33b6:	03 fd       	sbrc	r16, 3
    33b8:	11 c0       	rjmp	.+34     	; 0x33dc <vfprintf+0x614>
    33ba:	00 ff       	sbrs	r16, 0
    33bc:	06 c0       	rjmp	.+12     	; 0x33ca <vfprintf+0x602>
    33be:	1c 2d       	mov	r17, r12
    33c0:	d5 14       	cp	r13, r5
    33c2:	80 f4       	brcc	.+32     	; 0x33e4 <vfprintf+0x61c>
    33c4:	15 0d       	add	r17, r5
    33c6:	1d 19       	sub	r17, r13
    33c8:	0d c0       	rjmp	.+26     	; 0x33e4 <vfprintf+0x61c>
    33ca:	d5 14       	cp	r13, r5
    33cc:	58 f4       	brcc	.+22     	; 0x33e4 <vfprintf+0x61c>
    33ce:	b7 01       	movw	r22, r14
    33d0:	80 e2       	ldi	r24, 0x20	; 32
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    33d8:	d3 94       	inc	r13
    33da:	f7 cf       	rjmp	.-18     	; 0x33ca <vfprintf+0x602>
    33dc:	d5 14       	cp	r13, r5
    33de:	10 f4       	brcc	.+4      	; 0x33e4 <vfprintf+0x61c>
    33e0:	5d 18       	sub	r5, r13
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <vfprintf+0x61e>
    33e4:	51 2c       	mov	r5, r1
    33e6:	04 ff       	sbrs	r16, 4
    33e8:	10 c0       	rjmp	.+32     	; 0x340a <vfprintf+0x642>
    33ea:	b7 01       	movw	r22, r14
    33ec:	80 e3       	ldi	r24, 0x30	; 48
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    33f4:	02 ff       	sbrs	r16, 2
    33f6:	17 c0       	rjmp	.+46     	; 0x3426 <vfprintf+0x65e>
    33f8:	01 fd       	sbrc	r16, 1
    33fa:	03 c0       	rjmp	.+6      	; 0x3402 <vfprintf+0x63a>
    33fc:	88 e7       	ldi	r24, 0x78	; 120
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <vfprintf+0x63e>
    3402:	88 e5       	ldi	r24, 0x58	; 88
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	b7 01       	movw	r22, r14
    3408:	0c c0       	rjmp	.+24     	; 0x3422 <vfprintf+0x65a>
    340a:	80 2f       	mov	r24, r16
    340c:	86 78       	andi	r24, 0x86	; 134
    340e:	59 f0       	breq	.+22     	; 0x3426 <vfprintf+0x65e>
    3410:	01 ff       	sbrs	r16, 1
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <vfprintf+0x650>
    3414:	8b e2       	ldi	r24, 0x2B	; 43
    3416:	01 c0       	rjmp	.+2      	; 0x341a <vfprintf+0x652>
    3418:	80 e2       	ldi	r24, 0x20	; 32
    341a:	07 fd       	sbrc	r16, 7
    341c:	8d e2       	ldi	r24, 0x2D	; 45
    341e:	b7 01       	movw	r22, r14
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3426:	c1 16       	cp	r12, r17
    3428:	38 f4       	brcc	.+14     	; 0x3438 <vfprintf+0x670>
    342a:	b7 01       	movw	r22, r14
    342c:	80 e3       	ldi	r24, 0x30	; 48
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    3434:	11 50       	subi	r17, 0x01	; 1
    3436:	f7 cf       	rjmp	.-18     	; 0x3426 <vfprintf+0x65e>
    3438:	ca 94       	dec	r12
    343a:	f3 01       	movw	r30, r6
    343c:	ec 0d       	add	r30, r12
    343e:	f1 1d       	adc	r31, r1
    3440:	80 81       	ld	r24, Z
    3442:	b7 01       	movw	r22, r14
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    344a:	c1 10       	cpse	r12, r1
    344c:	f5 cf       	rjmp	.-22     	; 0x3438 <vfprintf+0x670>
    344e:	15 c0       	rjmp	.+42     	; 0x347a <vfprintf+0x6b2>
    3450:	f4 e0       	ldi	r31, 0x04	; 4
    3452:	f5 15       	cp	r31, r5
    3454:	60 f5       	brcc	.+88     	; 0x34ae <vfprintf+0x6e6>
    3456:	84 e0       	ldi	r24, 0x04	; 4
    3458:	58 1a       	sub	r5, r24
    345a:	93 fe       	sbrs	r9, 3
    345c:	1f c0       	rjmp	.+62     	; 0x349c <vfprintf+0x6d4>
    345e:	01 11       	cpse	r16, r1
    3460:	27 c0       	rjmp	.+78     	; 0x34b0 <vfprintf+0x6e8>
    3462:	2c 85       	ldd	r18, Y+12	; 0x0c
    3464:	23 ff       	sbrs	r18, 3
    3466:	2a c0       	rjmp	.+84     	; 0x34bc <vfprintf+0x6f4>
    3468:	0a e9       	ldi	r16, 0x9A	; 154
    346a:	11 e0       	ldi	r17, 0x01	; 1
    346c:	39 2d       	mov	r19, r9
    346e:	30 71       	andi	r19, 0x10	; 16
    3470:	93 2e       	mov	r9, r19
    3472:	f8 01       	movw	r30, r16
    3474:	84 91       	lpm	r24, Z
    3476:	81 11       	cpse	r24, r1
    3478:	24 c0       	rjmp	.+72     	; 0x34c2 <vfprintf+0x6fa>
    347a:	55 20       	and	r5, r5
    347c:	09 f4       	brne	.+2      	; 0x3480 <vfprintf+0x6b8>
    347e:	e4 cc       	rjmp	.-1592   	; 0x2e48 <vfprintf+0x80>
    3480:	b7 01       	movw	r22, r14
    3482:	80 e2       	ldi	r24, 0x20	; 32
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    348a:	5a 94       	dec	r5
    348c:	f6 cf       	rjmp	.-20     	; 0x347a <vfprintf+0x6b2>
    348e:	f7 01       	movw	r30, r14
    3490:	86 81       	ldd	r24, Z+6	; 0x06
    3492:	97 81       	ldd	r25, Z+7	; 0x07
    3494:	26 c0       	rjmp	.+76     	; 0x34e2 <vfprintf+0x71a>
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	9f ef       	ldi	r25, 0xFF	; 255
    349a:	23 c0       	rjmp	.+70     	; 0x34e2 <vfprintf+0x71a>
    349c:	b7 01       	movw	r22, r14
    349e:	80 e2       	ldi	r24, 0x20	; 32
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    34a6:	5a 94       	dec	r5
    34a8:	51 10       	cpse	r5, r1
    34aa:	f8 cf       	rjmp	.-16     	; 0x349c <vfprintf+0x6d4>
    34ac:	d8 cf       	rjmp	.-80     	; 0x345e <vfprintf+0x696>
    34ae:	51 2c       	mov	r5, r1
    34b0:	b7 01       	movw	r22, r14
    34b2:	80 2f       	mov	r24, r16
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    34ba:	d3 cf       	rjmp	.-90     	; 0x3462 <vfprintf+0x69a>
    34bc:	0e e9       	ldi	r16, 0x9E	; 158
    34be:	11 e0       	ldi	r17, 0x01	; 1
    34c0:	d5 cf       	rjmp	.-86     	; 0x346c <vfprintf+0x6a4>
    34c2:	91 10       	cpse	r9, r1
    34c4:	80 52       	subi	r24, 0x20	; 32
    34c6:	b7 01       	movw	r22, r14
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 2d 2b 	call	0x565a	; 0x565a <fputc>
    34ce:	0f 5f       	subi	r16, 0xFF	; 255
    34d0:	1f 4f       	sbci	r17, 0xFF	; 255
    34d2:	cf cf       	rjmp	.-98     	; 0x3472 <vfprintf+0x6aa>
    34d4:	23 e0       	ldi	r18, 0x03	; 3
    34d6:	25 15       	cp	r18, r5
    34d8:	10 f4       	brcc	.+4      	; 0x34de <vfprintf+0x716>
    34da:	83 e0       	ldi	r24, 0x03	; 3
    34dc:	bd cf       	rjmp	.-134    	; 0x3458 <vfprintf+0x690>
    34de:	51 2c       	mov	r5, r1
    34e0:	c0 cf       	rjmp	.-128    	; 0x3462 <vfprintf+0x69a>
    34e2:	60 96       	adiw	r28, 0x10	; 16
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	bf 90       	pop	r11
    3500:	af 90       	pop	r10
    3502:	9f 90       	pop	r9
    3504:	8f 90       	pop	r8
    3506:	7f 90       	pop	r7
    3508:	6f 90       	pop	r6
    350a:	5f 90       	pop	r5
    350c:	4f 90       	pop	r4
    350e:	3f 90       	pop	r3
    3510:	2f 90       	pop	r2
    3512:	08 95       	ret

00003514 <hal_create>:
    3514:	e3 ed       	ldi	r30, 0xD3	; 211
    3516:	fb e0       	ldi	r31, 0x0B	; 11
    3518:	2a ee       	ldi	r18, 0xEA	; 234
    351a:	30 e2       	ldi	r19, 0x20	; 32
    351c:	31 83       	std	Z+1, r19	; 0x01
    351e:	20 83       	st	Z, r18
    3520:	2d ee       	ldi	r18, 0xED	; 237
    3522:	30 e2       	ldi	r19, 0x20	; 32
    3524:	33 83       	std	Z+3, r19	; 0x03
    3526:	22 83       	std	Z+2, r18	; 0x02
    3528:	28 ef       	ldi	r18, 0xF8	; 248
    352a:	30 e2       	ldi	r19, 0x20	; 32
    352c:	35 83       	std	Z+5, r19	; 0x05
    352e:	24 83       	std	Z+4, r18	; 0x04
    3530:	2c ef       	ldi	r18, 0xFC	; 252
    3532:	30 e2       	ldi	r19, 0x20	; 32
    3534:	37 83       	std	Z+7, r19	; 0x07
    3536:	26 83       	std	Z+6, r18	; 0x06
    3538:	22 e0       	ldi	r18, 0x02	; 2
    353a:	31 e2       	ldi	r19, 0x21	; 33
    353c:	31 87       	std	Z+9, r19	; 0x09
    353e:	20 87       	std	Z+8, r18	; 0x08
    3540:	2e e0       	ldi	r18, 0x0E	; 14
    3542:	31 e2       	ldi	r19, 0x21	; 33
    3544:	33 87       	std	Z+11, r19	; 0x0b
    3546:	22 87       	std	Z+10, r18	; 0x0a
    3548:	23 e1       	ldi	r18, 0x13	; 19
    354a:	31 e2       	ldi	r19, 0x21	; 33
    354c:	35 87       	std	Z+13, r19	; 0x0d
    354e:	24 87       	std	Z+12, r18	; 0x0c
    3550:	2f e1       	ldi	r18, 0x1F	; 31
    3552:	31 e2       	ldi	r19, 0x21	; 33
    3554:	37 87       	std	Z+15, r19	; 0x0f
    3556:	26 87       	std	Z+14, r18	; 0x0e
    3558:	2f ef       	ldi	r18, 0xFF	; 255
    355a:	30 e2       	ldi	r19, 0x20	; 32
    355c:	31 8b       	std	Z+17, r19	; 0x11
    355e:	20 8b       	std	Z+16, r18	; 0x10
    3560:	24 e2       	ldi	r18, 0x24	; 36
    3562:	31 e2       	ldi	r19, 0x21	; 33
    3564:	33 8b       	std	Z+19, r19	; 0x13
    3566:	22 8b       	std	Z+18, r18	; 0x12
    3568:	21 e3       	ldi	r18, 0x31	; 49
    356a:	31 e2       	ldi	r19, 0x21	; 33
    356c:	35 8b       	std	Z+21, r19	; 0x15
    356e:	24 8b       	std	Z+20, r18	; 0x14
    3570:	68 2f       	mov	r22, r24
    3572:	cf 01       	movw	r24, r30
    3574:	3a c1       	rjmp	.+628    	; 0x37ea <led_create>
    3576:	08 95       	ret

00003578 <_hihTwiCallback>:
    3578:	65 30       	cpi	r22, 0x05	; 5
    357a:	f1 f4       	brne	.+60     	; 0x35b8 <_hihTwiCallback+0x40>
    357c:	fa 01       	movw	r30, r20
    357e:	80 81       	ld	r24, Z
    3580:	8f 73       	andi	r24, 0x3F	; 63
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	98 2f       	mov	r25, r24
    3586:	88 27       	eor	r24, r24
    3588:	21 81       	ldd	r18, Z+1	; 0x01
    358a:	82 2b       	or	r24, r18
    358c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3590:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	f0 e4       	ldi	r31, 0x40	; 64
    3598:	8f 9f       	mul	r24, r31
    359a:	c0 01       	movw	r24, r0
    359c:	11 24       	eor	r1, r1
    359e:	fa 01       	movw	r30, r20
    35a0:	23 81       	ldd	r18, Z+3	; 0x03
    35a2:	26 95       	lsr	r18
    35a4:	26 95       	lsr	r18
    35a6:	82 2b       	or	r24, r18
    35a8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    35ac:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <_measuringIsReady>
    35b6:	08 95       	ret
    35b8:	64 30       	cpi	r22, 0x04	; 4
    35ba:	51 f0       	breq	.+20     	; 0x35d0 <_hihTwiCallback+0x58>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e4       	ldi	r25, 0x40	; 64
    35c0:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    35c4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    35c8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    35cc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    35d0:	08 95       	ret

000035d2 <hih8120Create>:
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	0c eb       	ldi	r16, 0xBC	; 188
    35d8:	1a e1       	ldi	r17, 0x1A	; 26
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	34 e2       	ldi	r19, 0x24	; 36
    35de:	44 ef       	ldi	r20, 0xF4	; 244
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	60 e0       	ldi	r22, 0x00	; 0
    35e4:	87 e2       	ldi	r24, 0x27	; 39
    35e6:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <twiCreate>
    35ea:	90 93 68 0a 	sts	0x0A68, r25	; 0x800a68 <_hih8120Handler+0x1>
    35ee:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <_hih8120Handler>
    35f2:	21 e0       	ldi	r18, 0x01	; 1
    35f4:	89 2b       	or	r24, r25
    35f6:	09 f0       	breq	.+2      	; 0x35fa <hih8120Create+0x28>
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	82 2f       	mov	r24, r18
    35fc:	1f 91       	pop	r17
    35fe:	0f 91       	pop	r16
    3600:	08 95       	ret

00003602 <hih8120Wakeup>:
    3602:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <_hih8120Handler>
    3606:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <_hih8120Handler+0x1>
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	59 f0       	breq	.+22     	; 0x3624 <hih8120Wakeup+0x22>
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	70 e0       	ldi	r23, 0x00	; 0
    3614:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <twiTransmit>
    3618:	84 30       	cpi	r24, 0x04	; 4
    361a:	31 f4       	brne	.+12     	; 0x3628 <hih8120Wakeup+0x26>
    361c:	10 92 66 0a 	sts	0x0A66, r1	; 0x800a66 <_measuringIsReady>
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	08 95       	ret
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	08 95       	ret
    3628:	83 e0       	ldi	r24, 0x03	; 3
    362a:	08 95       	ret

0000362c <hih8120Meassure>:
    362c:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <_hih8120Handler>
    3630:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <_hih8120Handler+0x1>
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	39 f0       	breq	.+14     	; 0x3646 <hih8120Meassure+0x1a>
    3638:	64 e0       	ldi	r22, 0x04	; 4
    363a:	0e 94 76 26 	call	0x4cec	; 0x4cec <twiReceive>
    363e:	85 30       	cpi	r24, 0x05	; 5
    3640:	21 f0       	breq	.+8      	; 0x364a <hih8120Meassure+0x1e>
    3642:	83 e0       	ldi	r24, 0x03	; 3
    3644:	08 95       	ret
    3646:	82 e0       	ldi	r24, 0x02	; 2
    3648:	08 95       	ret
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	08 95       	ret

0000364e <hih8120GetHumidity>:
    364e:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    3652:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 5f 28 	call	0x50be	; 0x50be <__floatunsisf>
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	48 ec       	ldi	r20, 0xC8	; 200
    3664:	52 e4       	ldi	r21, 0x42	; 66
    3666:	dc da       	rcall	.-2632   	; 0x2c20 <__mulsf3>
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	38 ef       	ldi	r19, 0xF8	; 248
    366c:	4f e7       	ldi	r20, 0x7F	; 127
    366e:	56 e4       	ldi	r21, 0x46	; 70
    3670:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__divsf3>
    3674:	08 95       	ret

00003676 <hih8120GetTemperature>:
    3676:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    367a:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	0e 94 5f 28 	call	0x50be	; 0x50be <__floatunsisf>
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	45 e2       	ldi	r20, 0x25	; 37
    368c:	53 e4       	ldi	r21, 0x43	; 67
    368e:	c8 da       	rcall	.-2672   	; 0x2c20 <__mulsf3>
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	38 ef       	ldi	r19, 0xF8	; 248
    3694:	4f e7       	ldi	r20, 0x7F	; 127
    3696:	56 e4       	ldi	r21, 0x46	; 70
    3698:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__divsf3>
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	52 e4       	ldi	r21, 0x42	; 66
    36a4:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <__subsf3>
    36a8:	08 95       	ret

000036aa <_turn_off>:
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	fc 01       	movw	r30, r24
    36b2:	ee 0f       	add	r30, r30
    36b4:	ff 1f       	adc	r31, r31
    36b6:	e8 0f       	add	r30, r24
    36b8:	f9 1f       	adc	r31, r25
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	e7 59       	subi	r30, 0x97	; 151
    36c0:	f5 4f       	sbci	r31, 0xF5	; 245
    36c2:	23 81       	ldd	r18, Z+3	; 0x03
    36c4:	21 11       	cpse	r18, r1
    36c6:	0a c0       	rjmp	.+20     	; 0x36dc <_turn_off+0x32>
    36c8:	ef 01       	movw	r28, r30
    36ca:	e0 91 db 0b 	lds	r30, 0x0BDB	; 0x800bdb <register_access+0x8>
    36ce:	f0 91 dc 0b 	lds	r31, 0x0BDC	; 0x800bdc <register_access+0x9>
    36d2:	6a 81       	ldd	r22, Y+2	; 0x02
    36d4:	88 81       	ld	r24, Y
    36d6:	99 81       	ldd	r25, Y+1	; 0x01
    36d8:	19 95       	eicall
    36da:	12 c0       	rjmp	.+36     	; 0x3700 <_turn_off+0x56>
    36dc:	dc 01       	movw	r26, r24
    36de:	aa 0f       	add	r26, r26
    36e0:	bb 1f       	adc	r27, r27
    36e2:	ed 01       	movw	r28, r26
    36e4:	c8 0f       	add	r28, r24
    36e6:	d9 1f       	adc	r29, r25
    36e8:	cc 0f       	add	r28, r28
    36ea:	dd 1f       	adc	r29, r29
    36ec:	c7 59       	subi	r28, 0x97	; 151
    36ee:	d5 4f       	sbci	r29, 0xF5	; 245
    36f0:	e0 91 e5 0b 	lds	r30, 0x0BE5	; 0x800be5 <register_access+0x12>
    36f4:	f0 91 e6 0b 	lds	r31, 0x0BE6	; 0x800be6 <register_access+0x13>
    36f8:	6a 81       	ldd	r22, Y+2	; 0x02
    36fa:	88 81       	ld	r24, Y
    36fc:	99 81       	ldd	r25, Y+1	; 0x01
    36fe:	19 95       	eicall
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	08 95       	ret

00003706 <_turn_on>:
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	fc 01       	movw	r30, r24
    370e:	ee 0f       	add	r30, r30
    3710:	ff 1f       	adc	r31, r31
    3712:	e8 0f       	add	r30, r24
    3714:	f9 1f       	adc	r31, r25
    3716:	ee 0f       	add	r30, r30
    3718:	ff 1f       	adc	r31, r31
    371a:	e7 59       	subi	r30, 0x97	; 151
    371c:	f5 4f       	sbci	r31, 0xF5	; 245
    371e:	23 81       	ldd	r18, Z+3	; 0x03
    3720:	21 11       	cpse	r18, r1
    3722:	0a c0       	rjmp	.+20     	; 0x3738 <_turn_on+0x32>
    3724:	ef 01       	movw	r28, r30
    3726:	e0 91 e5 0b 	lds	r30, 0x0BE5	; 0x800be5 <register_access+0x12>
    372a:	f0 91 e6 0b 	lds	r31, 0x0BE6	; 0x800be6 <register_access+0x13>
    372e:	6a 81       	ldd	r22, Y+2	; 0x02
    3730:	88 81       	ld	r24, Y
    3732:	99 81       	ldd	r25, Y+1	; 0x01
    3734:	19 95       	eicall
    3736:	12 c0       	rjmp	.+36     	; 0x375c <_turn_on+0x56>
    3738:	dc 01       	movw	r26, r24
    373a:	aa 0f       	add	r26, r26
    373c:	bb 1f       	adc	r27, r27
    373e:	ed 01       	movw	r28, r26
    3740:	c8 0f       	add	r28, r24
    3742:	d9 1f       	adc	r29, r25
    3744:	cc 0f       	add	r28, r28
    3746:	dd 1f       	adc	r29, r29
    3748:	c7 59       	subi	r28, 0x97	; 151
    374a:	d5 4f       	sbci	r29, 0xF5	; 245
    374c:	e0 91 db 0b 	lds	r30, 0x0BDB	; 0x800bdb <register_access+0x8>
    3750:	f0 91 dc 0b 	lds	r31, 0x0BDC	; 0x800bdc <register_access+0x9>
    3754:	6a 81       	ldd	r22, Y+2	; 0x02
    3756:	88 81       	ld	r24, Y
    3758:	99 81       	ldd	r25, Y+1	; 0x01
    375a:	19 95       	eicall
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	08 95       	ret

00003762 <_hal_led_task>:
    3762:	80 e9       	ldi	r24, 0x90	; 144
    3764:	96 e0       	ldi	r25, 0x06	; 6
    3766:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
    376a:	0f 2e       	mov	r0, r31
    376c:	f3 ed       	ldi	r31, 0xD3	; 211
    376e:	cf 2e       	mov	r12, r31
    3770:	fb e0       	ldi	r31, 0x0B	; 11
    3772:	df 2e       	mov	r13, r31
    3774:	f0 2d       	mov	r31, r0
    3776:	04 e0       	ldi	r16, 0x04	; 4
    3778:	c9 e6       	ldi	r28, 0x69	; 105
    377a:	da e0       	ldi	r29, 0x0A	; 10
    377c:	10 e0       	ldi	r17, 0x00	; 0
    377e:	8c 81       	ldd	r24, Y+4	; 0x04
    3780:	81 30       	cpi	r24, 0x01	; 1
    3782:	69 f0       	breq	.+26     	; 0x379e <_hal_led_task+0x3c>
    3784:	e8 f0       	brcs	.+58     	; 0x37c0 <_hal_led_task+0x5e>
    3786:	82 30       	cpi	r24, 0x02	; 2
    3788:	39 f5       	brne	.+78     	; 0x37d8 <_hal_led_task+0x76>
    378a:	d6 01       	movw	r26, r12
    378c:	1c 96       	adiw	r26, 0x0c	; 12
    378e:	ed 91       	ld	r30, X+
    3790:	fc 91       	ld	r31, X
    3792:	1d 97       	sbiw	r26, 0x0d	; 13
    3794:	6a 81       	ldd	r22, Y+2	; 0x02
    3796:	88 81       	ld	r24, Y
    3798:	99 81       	ldd	r25, Y+1	; 0x01
    379a:	19 95       	eicall
    379c:	1d c0       	rjmp	.+58     	; 0x37d8 <_hal_led_task+0x76>
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	8f 5f       	subi	r24, 0xFF	; 255
    37a2:	8a 30       	cpi	r24, 0x0A	; 10
    37a4:	10 f4       	brcc	.+4      	; 0x37aa <_hal_led_task+0x48>
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	17 c0       	rjmp	.+46     	; 0x37d8 <_hal_led_task+0x76>
    37aa:	1d 82       	std	Y+5, r1	; 0x05
    37ac:	d6 01       	movw	r26, r12
    37ae:	1c 96       	adiw	r26, 0x0c	; 12
    37b0:	ed 91       	ld	r30, X+
    37b2:	fc 91       	ld	r31, X
    37b4:	1d 97       	sbiw	r26, 0x0d	; 13
    37b6:	6a 81       	ldd	r22, Y+2	; 0x02
    37b8:	88 81       	ld	r24, Y
    37ba:	99 81       	ldd	r25, Y+1	; 0x01
    37bc:	19 95       	eicall
    37be:	0c c0       	rjmp	.+24     	; 0x37d8 <_hal_led_task+0x76>
    37c0:	8d 81       	ldd	r24, Y+5	; 0x05
    37c2:	88 23       	and	r24, r24
    37c4:	31 f0       	breq	.+12     	; 0x37d2 <_hal_led_task+0x70>
    37c6:	81 2f       	mov	r24, r17
    37c8:	9e df       	rcall	.-196    	; 0x3706 <_turn_on>
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	81 50       	subi	r24, 0x01	; 1
    37ce:	8d 83       	std	Y+5, r24	; 0x05
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <_hal_led_task+0x76>
    37d2:	0c 83       	std	Y+4, r16	; 0x04
    37d4:	81 2f       	mov	r24, r17
    37d6:	69 df       	rcall	.-302    	; 0x36aa <_turn_off>
    37d8:	1f 5f       	subi	r17, 0xFF	; 255
    37da:	26 96       	adiw	r28, 0x06	; 6
    37dc:	14 30       	cpi	r17, 0x04	; 4
    37de:	79 f6       	brne	.-98     	; 0x377e <_hal_led_task+0x1c>
    37e0:	85 e0       	ldi	r24, 0x05	; 5
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vTaskDelay>
    37e8:	c7 cf       	rjmp	.-114    	; 0x3778 <_hal_led_task+0x16>

000037ea <led_create>:
    37ea:	cf 92       	push	r12
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	06 2f       	mov	r16, r22
    37fc:	0f 2e       	mov	r0, r31
    37fe:	f3 ed       	ldi	r31, 0xD3	; 211
    3800:	ef 2e       	mov	r14, r31
    3802:	fb e0       	ldi	r31, 0x0B	; 11
    3804:	ff 2e       	mov	r15, r31
    3806:	f0 2d       	mov	r31, r0
    3808:	d7 01       	movw	r26, r14
    380a:	18 96       	adiw	r26, 0x08	; 8
    380c:	ed 91       	ld	r30, X+
    380e:	fc 91       	ld	r31, X
    3810:	19 97       	sbiw	r26, 0x09	; 9
    3812:	66 e0       	ldi	r22, 0x06	; 6
    3814:	87 e2       	ldi	r24, 0x27	; 39
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	19 95       	eicall
    381a:	c9 e6       	ldi	r28, 0x69	; 105
    381c:	da e0       	ldi	r29, 0x0A	; 10
    381e:	0f 2e       	mov	r0, r31
    3820:	f8 e2       	ldi	r31, 0x28	; 40
    3822:	cf 2e       	mov	r12, r31
    3824:	d1 2c       	mov	r13, r1
    3826:	f0 2d       	mov	r31, r0
    3828:	d9 82       	std	Y+1, r13	; 0x01
    382a:	c8 82       	st	Y, r12
    382c:	86 e0       	ldi	r24, 0x06	; 6
    382e:	8a 83       	std	Y+2, r24	; 0x02
    3830:	1b 82       	std	Y+3, r1	; 0x03
    3832:	14 e0       	ldi	r17, 0x04	; 4
    3834:	1c 83       	std	Y+4, r17	; 0x04
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	38 df       	rcall	.-400    	; 0x36aa <_turn_off>
    383a:	d7 01       	movw	r26, r14
    383c:	18 96       	adiw	r26, 0x08	; 8
    383e:	ed 91       	ld	r30, X+
    3840:	fc 91       	ld	r31, X
    3842:	19 97       	sbiw	r26, 0x09	; 9
    3844:	67 e0       	ldi	r22, 0x07	; 7
    3846:	87 e2       	ldi	r24, 0x27	; 39
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	19 95       	eicall
    384c:	df 82       	std	Y+7, r13	; 0x07
    384e:	ce 82       	std	Y+6, r12	; 0x06
    3850:	87 e0       	ldi	r24, 0x07	; 7
    3852:	88 87       	std	Y+8, r24	; 0x08
    3854:	19 86       	std	Y+9, r1	; 0x09
    3856:	1a 87       	std	Y+10, r17	; 0x0a
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	27 df       	rcall	.-434    	; 0x36aa <_turn_off>
    385c:	d7 01       	movw	r26, r14
    385e:	18 96       	adiw	r26, 0x08	; 8
    3860:	ed 91       	ld	r30, X+
    3862:	fc 91       	ld	r31, X
    3864:	19 97       	sbiw	r26, 0x09	; 9
    3866:	65 e0       	ldi	r22, 0x05	; 5
    3868:	83 e3       	ldi	r24, 0x33	; 51
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	19 95       	eicall
    386e:	d7 01       	movw	r26, r14
    3870:	18 96       	adiw	r26, 0x08	; 8
    3872:	ed 91       	ld	r30, X+
    3874:	fc 91       	ld	r31, X
    3876:	19 97       	sbiw	r26, 0x09	; 9
    3878:	61 e0       	ldi	r22, 0x01	; 1
    387a:	84 e3       	ldi	r24, 0x34	; 52
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	19 95       	eicall
    3880:	84 e3       	ldi	r24, 0x34	; 52
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9d 87       	std	Y+13, r25	; 0x0d
    3886:	8c 87       	std	Y+12, r24	; 0x0c
    3888:	85 e0       	ldi	r24, 0x05	; 5
    388a:	8e 87       	std	Y+14, r24	; 0x0e
    388c:	1f 86       	std	Y+15, r1	; 0x0f
    388e:	18 8b       	std	Y+16, r17	; 0x10
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	0b df       	rcall	.-490    	; 0x36aa <_turn_off>
    3894:	d7 01       	movw	r26, r14
    3896:	18 96       	adiw	r26, 0x08	; 8
    3898:	ed 91       	ld	r30, X+
    389a:	fc 91       	ld	r31, X
    389c:	19 97       	sbiw	r26, 0x09	; 9
    389e:	64 e0       	ldi	r22, 0x04	; 4
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	91 e0       	ldi	r25, 0x01	; 1
    38a4:	19 95       	eicall
    38a6:	d7 01       	movw	r26, r14
    38a8:	18 96       	adiw	r26, 0x08	; 8
    38aa:	ed 91       	ld	r30, X+
    38ac:	fc 91       	ld	r31, X
    38ae:	19 97       	sbiw	r26, 0x09	; 9
    38b0:	61 e0       	ldi	r22, 0x01	; 1
    38b2:	82 e0       	ldi	r24, 0x02	; 2
    38b4:	91 e0       	ldi	r25, 0x01	; 1
    38b6:	19 95       	eicall
    38b8:	82 e0       	ldi	r24, 0x02	; 2
    38ba:	91 e0       	ldi	r25, 0x01	; 1
    38bc:	9b 8b       	std	Y+19, r25	; 0x13
    38be:	8a 8b       	std	Y+18, r24	; 0x12
    38c0:	1c 8b       	std	Y+20, r17	; 0x14
    38c2:	1d 8a       	std	Y+21, r1	; 0x15
    38c4:	1e 8b       	std	Y+22, r17	; 0x16
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	f0 de       	rcall	.-544    	; 0x36aa <_turn_off>
    38ca:	e1 2c       	mov	r14, r1
    38cc:	f1 2c       	mov	r15, r1
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 ec       	ldi	r20, 0xC0	; 192
    38d4:	50 e0       	ldi	r21, 0x00	; 0
    38d6:	67 ea       	ldi	r22, 0xA7	; 167
    38d8:	76 e0       	ldi	r23, 0x06	; 6
    38da:	81 eb       	ldi	r24, 0xB1	; 177
    38dc:	9b e1       	ldi	r25, 0x1B	; 27
    38de:	0e 94 06 0b 	call	0x160c	; 0x160c <xTaskCreate>
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	ff 90       	pop	r15
    38ec:	ef 90       	pop	r14
    38ee:	df 90       	pop	r13
    38f0:	cf 90       	pop	r12
    38f2:	08 95       	ret

000038f4 <led_slow_blink>:
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	c8 2f       	mov	r28, r24
    38fe:	d0 e0       	ldi	r29, 0x00	; 0
    3900:	8e 01       	movw	r16, r28
    3902:	00 0f       	add	r16, r16
    3904:	11 1f       	adc	r17, r17
    3906:	d8 01       	movw	r26, r16
    3908:	ac 0f       	add	r26, r28
    390a:	bd 1f       	adc	r27, r29
    390c:	aa 0f       	add	r26, r26
    390e:	bb 1f       	adc	r27, r27
    3910:	a7 59       	subi	r26, 0x97	; 151
    3912:	b5 4f       	sbci	r27, 0xF5	; 245
    3914:	e0 91 df 0b 	lds	r30, 0x0BDF	; 0x800bdf <register_access+0xc>
    3918:	f0 91 e0 0b 	lds	r31, 0x0BE0	; 0x800be0 <register_access+0xd>
    391c:	12 96       	adiw	r26, 0x02	; 2
    391e:	6c 91       	ld	r22, X
    3920:	12 97       	sbiw	r26, 0x02	; 2
    3922:	8d 91       	ld	r24, X+
    3924:	9c 91       	ld	r25, X
    3926:	19 95       	eicall
    3928:	c0 0f       	add	r28, r16
    392a:	d1 1f       	adc	r29, r17
    392c:	cc 0f       	add	r28, r28
    392e:	dd 1f       	adc	r29, r29
    3930:	c7 59       	subi	r28, 0x97	; 151
    3932:	d5 4f       	sbci	r29, 0xF5	; 245
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	8c 83       	std	Y+4, r24	; 0x04
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    3940:	08 95       	ret

00003942 <led_fast_blink>:
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	c8 2f       	mov	r28, r24
    394c:	d0 e0       	ldi	r29, 0x00	; 0
    394e:	8e 01       	movw	r16, r28
    3950:	00 0f       	add	r16, r16
    3952:	11 1f       	adc	r17, r17
    3954:	d8 01       	movw	r26, r16
    3956:	ac 0f       	add	r26, r28
    3958:	bd 1f       	adc	r27, r29
    395a:	aa 0f       	add	r26, r26
    395c:	bb 1f       	adc	r27, r27
    395e:	a7 59       	subi	r26, 0x97	; 151
    3960:	b5 4f       	sbci	r27, 0xF5	; 245
    3962:	e0 91 df 0b 	lds	r30, 0x0BDF	; 0x800bdf <register_access+0xc>
    3966:	f0 91 e0 0b 	lds	r31, 0x0BE0	; 0x800be0 <register_access+0xd>
    396a:	12 96       	adiw	r26, 0x02	; 2
    396c:	6c 91       	ld	r22, X
    396e:	12 97       	sbiw	r26, 0x02	; 2
    3970:	8d 91       	ld	r24, X+
    3972:	9c 91       	ld	r25, X
    3974:	19 95       	eicall
    3976:	c0 0f       	add	r28, r16
    3978:	d1 1f       	adc	r29, r17
    397a:	cc 0f       	add	r28, r28
    397c:	dd 1f       	adc	r29, r29
    397e:	c7 59       	subi	r28, 0x97	; 151
    3980:	d5 4f       	sbci	r29, 0xF5	; 245
    3982:	82 e0       	ldi	r24, 0x02	; 2
    3984:	8c 83       	std	Y+4, r24	; 0x04
    3986:	df 91       	pop	r29
    3988:	cf 91       	pop	r28
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	08 95       	ret

00003990 <led_led_on>:
    3990:	28 2f       	mov	r18, r24
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	f9 01       	movw	r30, r18
    3996:	ee 0f       	add	r30, r30
    3998:	ff 1f       	adc	r31, r31
    399a:	e2 0f       	add	r30, r18
    399c:	f3 1f       	adc	r31, r19
    399e:	ee 0f       	add	r30, r30
    39a0:	ff 1f       	adc	r31, r31
    39a2:	e7 59       	subi	r30, 0x97	; 151
    39a4:	f5 4f       	sbci	r31, 0xF5	; 245
    39a6:	93 e0       	ldi	r25, 0x03	; 3
    39a8:	94 83       	std	Z+4, r25	; 0x04
    39aa:	ad ce       	rjmp	.-678    	; 0x3706 <_turn_on>
    39ac:	08 95       	ret

000039ae <led_led_off>:
    39ae:	28 2f       	mov	r18, r24
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	f9 01       	movw	r30, r18
    39b4:	ee 0f       	add	r30, r30
    39b6:	ff 1f       	adc	r31, r31
    39b8:	e2 0f       	add	r30, r18
    39ba:	f3 1f       	adc	r31, r19
    39bc:	ee 0f       	add	r30, r30
    39be:	ff 1f       	adc	r31, r31
    39c0:	e7 59       	subi	r30, 0x97	; 151
    39c2:	f5 4f       	sbci	r31, 0xF5	; 245
    39c4:	94 e0       	ldi	r25, 0x04	; 4
    39c6:	94 83       	std	Z+4, r25	; 0x04
    39c8:	70 ce       	rjmp	.-800    	; 0x36aa <_turn_off>
    39ca:	08 95       	ret

000039cc <led_long_puls>:
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	fc 01       	movw	r30, r24
    39d0:	ee 0f       	add	r30, r30
    39d2:	ff 1f       	adc	r31, r31
    39d4:	df 01       	movw	r26, r30
    39d6:	a8 0f       	add	r26, r24
    39d8:	b9 1f       	adc	r27, r25
    39da:	aa 0f       	add	r26, r26
    39dc:	bb 1f       	adc	r27, r27
    39de:	a7 59       	subi	r26, 0x97	; 151
    39e0:	b5 4f       	sbci	r27, 0xF5	; 245
    39e2:	24 e0       	ldi	r18, 0x04	; 4
    39e4:	15 96       	adiw	r26, 0x05	; 5
    39e6:	2c 93       	st	X, r18
    39e8:	15 97       	sbiw	r26, 0x05	; 5
    39ea:	fd 01       	movw	r30, r26
    39ec:	14 82       	std	Z+4, r1	; 0x04
    39ee:	08 95       	ret

000039f0 <led_short_puls>:
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	fc 01       	movw	r30, r24
    39f4:	ee 0f       	add	r30, r30
    39f6:	ff 1f       	adc	r31, r31
    39f8:	df 01       	movw	r26, r30
    39fa:	a8 0f       	add	r26, r24
    39fc:	b9 1f       	adc	r27, r25
    39fe:	aa 0f       	add	r26, r26
    3a00:	bb 1f       	adc	r27, r27
    3a02:	a7 59       	subi	r26, 0x97	; 151
    3a04:	b5 4f       	sbci	r27, 0xF5	; 245
    3a06:	21 e0       	ldi	r18, 0x01	; 1
    3a08:	15 96       	adiw	r26, 0x05	; 5
    3a0a:	2c 93       	st	X, r18
    3a0c:	15 97       	sbiw	r26, 0x05	; 5
    3a0e:	fd 01       	movw	r30, r26
    3a10:	14 82       	std	Z+4, r1	; 0x04
    3a12:	08 95       	ret

00003a14 <_serial_call_back>:
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	1f 92       	push	r1
    3a1e:	1f 92       	push	r1
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	8c 01       	movw	r16, r24
    3a26:	19 82       	std	Y+1, r1	; 0x01
    3a28:	2d c0       	rjmp	.+90     	; 0x3a84 <_serial_call_back+0x70>
    3a2a:	e0 91 e5 0a 	lds	r30, 0x0AE5	; 0x800ae5 <rec_buf_inp.2926>
    3a2e:	ec 32       	cpi	r30, 0x2C	; 44
    3a30:	50 f4       	brcc	.+20     	; 0x3a46 <_serial_call_back+0x32>
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	8e 0f       	add	r24, r30
    3a36:	80 93 e5 0a 	sts	0x0AE5, r24	; 0x800ae5 <rec_buf_inp.2926>
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	eb 5e       	subi	r30, 0xEB	; 235
    3a3e:	f4 4f       	sbci	r31, 0xF4	; 244
    3a40:	8a 81       	ldd	r24, Y+2	; 0x02
    3a42:	80 83       	st	Z, r24
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <_serial_call_back+0x36>
    3a46:	10 92 e5 0a 	sts	0x0AE5, r1	; 0x800ae5 <rec_buf_inp.2926>
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	8a 30       	cpi	r24, 0x0A	; 10
    3a4e:	d1 f4       	brne	.+52     	; 0x3a84 <_serial_call_back+0x70>
    3a50:	40 91 e5 0a 	lds	r20, 0x0AE5	; 0x800ae5 <rec_buf_inp.2926>
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	fa 01       	movw	r30, r20
    3a58:	ed 5e       	subi	r30, 0xED	; 237
    3a5a:	f4 4f       	sbci	r31, 0xF4	; 244
    3a5c:	10 82       	st	Z, r1
    3a5e:	41 50       	subi	r20, 0x01	; 1
    3a60:	51 09       	sbc	r21, r1
    3a62:	9e 01       	movw	r18, r28
    3a64:	2f 5f       	subi	r18, 0xFF	; 255
    3a66:	3f 4f       	sbci	r19, 0xFF	; 255
    3a68:	65 e1       	ldi	r22, 0x15	; 21
    3a6a:	7b e0       	ldi	r23, 0x0B	; 11
    3a6c:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <_reply_buffer_handle>
    3a70:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <_reply_buffer_handle+0x1>
    3a74:	0e 94 b7 09 	call	0x136e	; 0x136e <xStreamBufferSendFromISR>
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	81 11       	cpse	r24, r1
    3a7c:	0e 94 14 04 	call	0x828	; 0x828 <vPortYield>
    3a80:	10 92 e5 0a 	sts	0x0AE5, r1	; 0x800ae5 <rec_buf_inp.2926>
    3a84:	be 01       	movw	r22, r28
    3a86:	6e 5f       	subi	r22, 0xFE	; 254
    3a88:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8a:	c8 01       	movw	r24, r16
    3a8c:	c6 d5       	rcall	.+2956   	; 0x461a <serial_get_byte>
    3a8e:	88 23       	and	r24, r24
    3a90:	61 f2       	breq	.-104    	; 0x3a2a <_serial_call_back+0x16>
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	08 95       	ret

00003aa0 <_upload_message>:
    3aa0:	0f 93       	push	r16
    3aa2:	1f 93       	push	r17
    3aa4:	cf 93       	push	r28
    3aa6:	df 93       	push	r29
    3aa8:	8c 01       	movw	r16, r24
    3aaa:	eb 01       	movw	r28, r22
    3aac:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <_reply_buffer_handle>
    3ab0:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <_reply_buffer_handle+0x1>
    3ab4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <xStreamBufferReset>
    3ab8:	b8 01       	movw	r22, r16
    3aba:	81 e8       	ldi	r24, 0x81	; 129
    3abc:	9a e0       	ldi	r25, 0x0A	; 10
    3abe:	0e 94 03 2b 	call	0x5606	; 0x5606 <strcpy>
    3ac2:	20 97       	sbiw	r28, 0x00	; 0
    3ac4:	79 f0       	breq	.+30     	; 0x3ae4 <_upload_message+0x44>
    3ac6:	e1 e8       	ldi	r30, 0x81	; 129
    3ac8:	fa e0       	ldi	r31, 0x0A	; 10
    3aca:	01 90       	ld	r0, Z+
    3acc:	00 20       	and	r0, r0
    3ace:	e9 f7       	brne	.-6      	; 0x3aca <_upload_message+0x2a>
    3ad0:	31 97       	sbiw	r30, 0x01	; 1
    3ad2:	80 e2       	ldi	r24, 0x20	; 32
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	91 83       	std	Z+1, r25	; 0x01
    3ad8:	80 83       	st	Z, r24
    3ada:	be 01       	movw	r22, r28
    3adc:	81 e8       	ldi	r24, 0x81	; 129
    3ade:	9a e0       	ldi	r25, 0x0A	; 10
    3ae0:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <strcat>
    3ae4:	e1 e8       	ldi	r30, 0x81	; 129
    3ae6:	fa e0       	ldi	r31, 0x0A	; 10
    3ae8:	df 01       	movw	r26, r30
    3aea:	0d 90       	ld	r0, X+
    3aec:	00 20       	and	r0, r0
    3aee:	e9 f7       	brne	.-6      	; 0x3aea <_upload_message+0x4a>
    3af0:	11 97       	sbiw	r26, 0x01	; 1
    3af2:	8d e0       	ldi	r24, 0x0D	; 13
    3af4:	9a e0       	ldi	r25, 0x0A	; 10
    3af6:	11 96       	adiw	r26, 0x01	; 1
    3af8:	9c 93       	st	X, r25
    3afa:	8e 93       	st	-X, r24
    3afc:	12 96       	adiw	r26, 0x02	; 2
    3afe:	1c 92       	st	X, r1
    3b00:	01 90       	ld	r0, Z+
    3b02:	00 20       	and	r0, r0
    3b04:	e9 f7       	brne	.-6      	; 0x3b00 <_upload_message+0x60>
    3b06:	31 97       	sbiw	r30, 0x01	; 1
    3b08:	e1 58       	subi	r30, 0x81	; 129
    3b0a:	fa 40       	sbci	r31, 0x0A	; 10
    3b0c:	ae 2f       	mov	r26, r30
    3b0e:	81 e8       	ldi	r24, 0x81	; 129
    3b10:	9a e0       	ldi	r25, 0x0A	; 10
    3b12:	ac 01       	movw	r20, r24
    3b14:	6a 2f       	mov	r22, r26
    3b16:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <_rn2483_serial>
    3b1a:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <_rn2483_serial+0x1>
    3b1e:	2d d5       	rcall	.+2650   	; 0x457a <serial_send_bytes>
    3b20:	81 11       	cpse	r24, r1
    3b22:	0f c0       	rjmp	.+30     	; 0x3b42 <_upload_message+0xa2>
    3b24:	28 e2       	ldi	r18, 0x28	; 40
    3b26:	35 e0       	ldi	r19, 0x05	; 5
    3b28:	4d e2       	ldi	r20, 0x2D	; 45
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	6f e6       	ldi	r22, 0x6F	; 111
    3b2e:	7b e0       	ldi	r23, 0x0B	; 11
    3b30:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <_reply_buffer_handle>
    3b34:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <_reply_buffer_handle+0x1>
    3b38:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xStreamBufferReceive>
    3b3c:	8f e6       	ldi	r24, 0x6F	; 111
    3b3e:	9b e0       	ldi	r25, 0x0B	; 11
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <_upload_message+0xa6>
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <_reply2return_code>:
    3b50:	af 92       	push	r10
    3b52:	bf 92       	push	r11
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	6c 01       	movw	r12, r24
    3b66:	fc 01       	movw	r30, r24
    3b68:	01 90       	ld	r0, Z+
    3b6a:	00 20       	and	r0, r0
    3b6c:	e9 f7       	brne	.-6      	; 0x3b68 <_reply2return_code+0x18>
    3b6e:	31 97       	sbiw	r30, 0x01	; 1
    3b70:	7f 01       	movw	r14, r30
    3b72:	e8 1a       	sub	r14, r24
    3b74:	f9 0a       	sbc	r15, r25
    3b76:	03 e3       	ldi	r16, 0x33	; 51
    3b78:	19 e0       	ldi	r17, 0x09	; 9
    3b7a:	c0 e0       	ldi	r28, 0x00	; 0
    3b7c:	d0 e0       	ldi	r29, 0x00	; 0
    3b7e:	f8 01       	movw	r30, r16
    3b80:	60 81       	ld	r22, Z
    3b82:	71 81       	ldd	r23, Z+1	; 0x01
    3b84:	a7 01       	movw	r20, r14
    3b86:	c6 01       	movw	r24, r12
    3b88:	0e 94 0a 2b 	call	0x5614	; 0x5614 <strncasecmp>
    3b8c:	89 2b       	or	r24, r25
    3b8e:	49 f4       	brne	.+18     	; 0x3ba2 <_reply2return_code+0x52>
    3b90:	fe 01       	movw	r30, r28
    3b92:	ee 0f       	add	r30, r30
    3b94:	ff 1f       	adc	r31, r31
    3b96:	ec 0f       	add	r30, r28
    3b98:	fd 1f       	adc	r31, r29
    3b9a:	ee 5c       	subi	r30, 0xCE	; 206
    3b9c:	f6 4f       	sbci	r31, 0xF6	; 246
    3b9e:	80 81       	ld	r24, Z
    3ba0:	07 c0       	rjmp	.+14     	; 0x3bb0 <_reply2return_code+0x60>
    3ba2:	21 96       	adiw	r28, 0x01	; 1
    3ba4:	0d 5f       	subi	r16, 0xFD	; 253
    3ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba8:	c1 31       	cpi	r28, 0x11	; 17
    3baa:	d1 05       	cpc	r29, r1
    3bac:	41 f7       	brne	.-48     	; 0x3b7e <_reply2return_code+0x2e>
    3bae:	80 e1       	ldi	r24, 0x10	; 16
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	ff 90       	pop	r15
    3bba:	ef 90       	pop	r14
    3bbc:	df 90       	pop	r13
    3bbe:	cf 90       	pop	r12
    3bc0:	bf 90       	pop	r11
    3bc2:	af 90       	pop	r10
    3bc4:	08 95       	ret

00003bc6 <_upload_message_rc>:
    3bc6:	6c df       	rcall	.-296    	; 0x3aa0 <_upload_message>
    3bc8:	c3 cf       	rjmp	.-122    	; 0x3b50 <_reply2return_code>
    3bca:	08 95       	ret

00003bcc <lora_driver_flush_buffers>:
    3bcc:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <_reply_buffer_handle>
    3bd0:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <_reply_buffer_handle+0x1>
    3bd4:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <xStreamBufferReset>
    3bd8:	08 95       	ret

00003bda <lora_driver_create>:
    3bda:	8f 92       	push	r8
    3bdc:	9f 92       	push	r9
    3bde:	af 92       	push	r10
    3be0:	cf 92       	push	r12
    3be2:	ef 92       	push	r14
    3be4:	0f 93       	push	r16
    3be6:	cf 93       	push	r28
    3be8:	c8 2f       	mov	r28, r24
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 4c 09 	call	0x1298	; 0x1298 <xStreamBufferGenericCreate>
    3bf8:	90 93 e7 0a 	sts	0x0AE7, r25	; 0x800ae7 <_reply_buffer_handle+0x1>
    3bfc:	80 93 e6 0a 	sts	0x0AE6, r24	; 0x800ae6 <_reply_buffer_handle>
    3c00:	0f 2e       	mov	r0, r31
    3c02:	fa e0       	ldi	r31, 0x0A	; 10
    3c04:	8f 2e       	mov	r8, r31
    3c06:	fd e1       	ldi	r31, 0x1D	; 29
    3c08:	9f 2e       	mov	r9, r31
    3c0a:	f0 2d       	mov	r31, r0
    3c0c:	68 94       	set
    3c0e:	aa 24       	eor	r10, r10
    3c10:	a6 f8       	bld	r10, 6
    3c12:	68 94       	set
    3c14:	cc 24       	eor	r12, r12
    3c16:	c6 f8       	bld	r12, 6
    3c18:	e1 2c       	mov	r14, r1
    3c1a:	00 e0       	ldi	r16, 0x00	; 0
    3c1c:	23 e0       	ldi	r18, 0x03	; 3
    3c1e:	40 e0       	ldi	r20, 0x00	; 0
    3c20:	51 ee       	ldi	r21, 0xE1	; 225
    3c22:	60 e0       	ldi	r22, 0x00	; 0
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	8c 2f       	mov	r24, r28
    3c28:	eb d3       	rcall	.+2006   	; 0x4400 <serial_new_instance>
    3c2a:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <_rn2483_serial+0x1>
    3c2e:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <_rn2483_serial>
    3c32:	e0 91 db 0b 	lds	r30, 0x0BDB	; 0x800bdb <register_access+0x8>
    3c36:	f0 91 dc 0b 	lds	r31, 0x0BDC	; 0x800bdc <register_access+0x9>
    3c3a:	64 e0       	ldi	r22, 0x04	; 4
    3c3c:	87 e0       	ldi	r24, 0x07	; 7
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	19 95       	eicall
    3c42:	cf 91       	pop	r28
    3c44:	0f 91       	pop	r16
    3c46:	ef 90       	pop	r14
    3c48:	cf 90       	pop	r12
    3c4a:	af 90       	pop	r10
    3c4c:	9f 90       	pop	r9
    3c4e:	8f 90       	pop	r8
    3c50:	08 95       	ret

00003c52 <lora_driver_reset_rn2483>:
    3c52:	88 23       	and	r24, r24
    3c54:	49 f0       	breq	.+18     	; 0x3c68 <lora_driver_reset_rn2483+0x16>
    3c56:	e0 91 e5 0b 	lds	r30, 0x0BE5	; 0x800be5 <register_access+0x12>
    3c5a:	f0 91 e6 0b 	lds	r31, 0x0BE6	; 0x800be6 <register_access+0x13>
    3c5e:	64 e0       	ldi	r22, 0x04	; 4
    3c60:	88 e0       	ldi	r24, 0x08	; 8
    3c62:	91 e0       	ldi	r25, 0x01	; 1
    3c64:	19 95       	eicall
    3c66:	08 95       	ret
    3c68:	e0 91 db 0b 	lds	r30, 0x0BDB	; 0x800bdb <register_access+0x8>
    3c6c:	f0 91 dc 0b 	lds	r31, 0x0BDC	; 0x800bdc <register_access+0x9>
    3c70:	64 e0       	ldi	r22, 0x04	; 4
    3c72:	88 e0       	ldi	r24, 0x08	; 8
    3c74:	91 e0       	ldi	r25, 0x01	; 1
    3c76:	19 95       	eicall
    3c78:	08 95       	ret

00003c7a <lora_driver_rn2483_factory_reset>:
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	70 e0       	ldi	r23, 0x00	; 0
    3c7e:	8e ec       	ldi	r24, 0xCE	; 206
    3c80:	96 e0       	ldi	r25, 0x06	; 6
    3c82:	0e df       	rcall	.-484    	; 0x3aa0 <_upload_message>
    3c84:	ef e6       	ldi	r30, 0x6F	; 111
    3c86:	fb e0       	ldi	r31, 0x0B	; 11
    3c88:	01 90       	ld	r0, Z+
    3c8a:	00 20       	and	r0, r0
    3c8c:	e9 f7       	brne	.-6      	; 0x3c88 <lora_driver_rn2483_factory_reset+0xe>
    3c8e:	31 97       	sbiw	r30, 0x01	; 1
    3c90:	ef 56       	subi	r30, 0x6F	; 111
    3c92:	fb 40       	sbci	r31, 0x0B	; 11
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	75 97       	sbiw	r30, 0x15	; 21
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <lora_driver_rn2483_factory_reset+0x22>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	08 95       	ret

00003c9e <lora_driver_get_rn2483_hweui>:
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	ec 01       	movw	r28, r24
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	8f ed       	ldi	r24, 0xDF	; 223
    3caa:	96 e0       	ldi	r25, 0x06	; 6
    3cac:	f9 de       	rcall	.-526    	; 0x3aa0 <_upload_message>
    3cae:	ef e6       	ldi	r30, 0x6F	; 111
    3cb0:	fb e0       	ldi	r31, 0x0B	; 11
    3cb2:	01 90       	ld	r0, Z+
    3cb4:	00 20       	and	r0, r0
    3cb6:	e9 f7       	brne	.-6      	; 0x3cb2 <lora_driver_get_rn2483_hweui+0x14>
    3cb8:	e0 58       	subi	r30, 0x80	; 128
    3cba:	fb 40       	sbci	r31, 0x0B	; 11
    3cbc:	39 f4       	brne	.+14     	; 0x3ccc <lora_driver_get_rn2483_hweui+0x2e>
    3cbe:	6f e6       	ldi	r22, 0x6F	; 111
    3cc0:	7b e0       	ldi	r23, 0x0B	; 11
    3cc2:	ce 01       	movw	r24, r28
    3cc4:	0e 94 03 2b 	call	0x5606	; 0x5606 <strcpy>
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	02 c0       	rjmp	.+4      	; 0x3cd0 <lora_driver_get_rn2483_hweui+0x32>
    3ccc:	18 82       	st	Y, r1
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	08 95       	ret

00003cd6 <lora_driver_set_device_identifier>:
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	01 90       	ld	r0, Z+
    3cda:	00 20       	and	r0, r0
    3cdc:	e9 f7       	brne	.-6      	; 0x3cd8 <lora_driver_set_device_identifier+0x2>
    3cde:	9f 01       	movw	r18, r30
    3ce0:	21 51       	subi	r18, 0x11	; 17
    3ce2:	31 09       	sbc	r19, r1
    3ce4:	28 17       	cp	r18, r24
    3ce6:	39 07       	cpc	r19, r25
    3ce8:	29 f4       	brne	.+10     	; 0x3cf4 <lora_driver_set_device_identifier+0x1e>
    3cea:	bc 01       	movw	r22, r24
    3cec:	8d e0       	ldi	r24, 0x0D	; 13
    3cee:	97 e0       	ldi	r25, 0x07	; 7
    3cf0:	6a cf       	rjmp	.-300    	; 0x3bc6 <_upload_message_rc>
    3cf2:	08 95       	ret
    3cf4:	89 e0       	ldi	r24, 0x09	; 9
    3cf6:	08 95       	ret

00003cf8 <lora_driver_set_application_identifier>:
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	01 90       	ld	r0, Z+
    3cfc:	00 20       	and	r0, r0
    3cfe:	e9 f7       	brne	.-6      	; 0x3cfa <lora_driver_set_application_identifier+0x2>
    3d00:	9f 01       	movw	r18, r30
    3d02:	21 51       	subi	r18, 0x11	; 17
    3d04:	31 09       	sbc	r19, r1
    3d06:	28 17       	cp	r18, r24
    3d08:	39 07       	cpc	r19, r25
    3d0a:	29 f4       	brne	.+10     	; 0x3d16 <lora_driver_set_application_identifier+0x1e>
    3d0c:	bc 01       	movw	r22, r24
    3d0e:	8c e1       	ldi	r24, 0x1C	; 28
    3d10:	97 e0       	ldi	r25, 0x07	; 7
    3d12:	59 cf       	rjmp	.-334    	; 0x3bc6 <_upload_message_rc>
    3d14:	08 95       	ret
    3d16:	89 e0       	ldi	r24, 0x09	; 9
    3d18:	08 95       	ret

00003d1a <lora_driver_set_application_key>:
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	01 90       	ld	r0, Z+
    3d1e:	00 20       	and	r0, r0
    3d20:	e9 f7       	brne	.-6      	; 0x3d1c <lora_driver_set_application_key+0x2>
    3d22:	9f 01       	movw	r18, r30
    3d24:	21 52       	subi	r18, 0x21	; 33
    3d26:	31 09       	sbc	r19, r1
    3d28:	28 17       	cp	r18, r24
    3d2a:	39 07       	cpc	r19, r25
    3d2c:	29 f4       	brne	.+10     	; 0x3d38 <lora_driver_set_application_key+0x1e>
    3d2e:	bc 01       	movw	r22, r24
    3d30:	8b e2       	ldi	r24, 0x2B	; 43
    3d32:	97 e0       	ldi	r25, 0x07	; 7
    3d34:	48 cf       	rjmp	.-368    	; 0x3bc6 <_upload_message_rc>
    3d36:	08 95       	ret
    3d38:	89 e0       	ldi	r24, 0x09	; 9
    3d3a:	08 95       	ret

00003d3c <lora_driver_save_mac>:
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	8a e6       	ldi	r24, 0x6A	; 106
    3d42:	97 e0       	ldi	r25, 0x07	; 7
    3d44:	40 cf       	rjmp	.-384    	; 0x3bc6 <_upload_message_rc>
    3d46:	08 95       	ret

00003d48 <lora_driver_join>:
    3d48:	e8 2f       	mov	r30, r24
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	ee 0f       	add	r30, r30
    3d4e:	ff 1f       	adc	r31, r31
    3d50:	e2 5d       	subi	r30, 0xD2	; 210
    3d52:	f6 4f       	sbci	r31, 0xF6	; 246
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	83 e7       	ldi	r24, 0x73	; 115
    3d5a:	97 e0       	ldi	r25, 0x07	; 7
    3d5c:	34 df       	rcall	.-408    	; 0x3bc6 <_upload_message_rc>
    3d5e:	81 11       	cpse	r24, r1
    3d60:	12 c0       	rjmp	.+36     	; 0x3d86 <lora_driver_join+0x3e>
    3d62:	28 e2       	ldi	r18, 0x28	; 40
    3d64:	35 e0       	ldi	r19, 0x05	; 5
    3d66:	4d e2       	ldi	r20, 0x2D	; 45
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	6f e6       	ldi	r22, 0x6F	; 111
    3d6c:	7b e0       	ldi	r23, 0x0B	; 11
    3d6e:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <_reply_buffer_handle>
    3d72:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <_reply_buffer_handle+0x1>
    3d76:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xStreamBufferReceive>
    3d7a:	88 23       	and	r24, r24
    3d7c:	21 f0       	breq	.+8      	; 0x3d86 <lora_driver_join+0x3e>
    3d7e:	8f e6       	ldi	r24, 0x6F	; 111
    3d80:	9b e0       	ldi	r25, 0x0B	; 11
    3d82:	e6 ce       	rjmp	.-564    	; 0x3b50 <_reply2return_code>
    3d84:	08 95       	ret
    3d86:	8f e6       	ldi	r24, 0x6F	; 111
    3d88:	9b e0       	ldi	r25, 0x0B	; 11
    3d8a:	e2 ce       	rjmp	.-572    	; 0x3b50 <_reply2return_code>
    3d8c:	08 95       	ret

00003d8e <lora_driver_sent_upload_message>:
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	1f 92       	push	r1
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	db 01       	movw	r26, r22
    3d9a:	11 96       	adiw	r26, 0x01	; 1
    3d9c:	9c 91       	ld	r25, X
    3d9e:	11 97       	sbiw	r26, 0x01	; 1
    3da0:	95 31       	cpi	r25, 0x15	; 21
    3da2:	08 f0       	brcs	.+2      	; 0x3da6 <lora_driver_sent_upload_message+0x18>
    3da4:	87 c0       	rjmp	.+270    	; 0x3eb4 <lora_driver_sent_upload_message+0x126>
    3da6:	99 23       	and	r25, r25
    3da8:	81 f1       	breq	.+96     	; 0x3e0a <lora_driver_sent_upload_message+0x7c>
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	70 e0       	ldi	r23, 0x00	; 0
    3dae:	27 2f       	mov	r18, r23
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	46 2f       	mov	r20, r22
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	fd 01       	movw	r30, r26
    3db8:	e4 0f       	add	r30, r20
    3dba:	f5 1f       	adc	r31, r21
    3dbc:	92 81       	ldd	r25, Z+2	; 0x02
    3dbe:	92 95       	swap	r25
    3dc0:	9f 70       	andi	r25, 0x0F	; 15
    3dc2:	9a 30       	cpi	r25, 0x0A	; 10
    3dc4:	10 f0       	brcs	.+4      	; 0x3dca <lora_driver_sent_upload_message+0x3c>
    3dc6:	99 5c       	subi	r25, 0xC9	; 201
    3dc8:	01 c0       	rjmp	.+2      	; 0x3dcc <lora_driver_sent_upload_message+0x3e>
    3dca:	90 5d       	subi	r25, 0xD0	; 208
    3dcc:	f9 01       	movw	r30, r18
    3dce:	e0 50       	subi	r30, 0x00	; 0
    3dd0:	f5 4f       	sbci	r31, 0xF5	; 245
    3dd2:	90 83       	st	Z, r25
    3dd4:	2f 5f       	subi	r18, 0xFF	; 255
    3dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd8:	fd 01       	movw	r30, r26
    3dda:	e4 0f       	add	r30, r20
    3ddc:	f5 1f       	adc	r31, r21
    3dde:	92 81       	ldd	r25, Z+2	; 0x02
    3de0:	9f 70       	andi	r25, 0x0F	; 15
    3de2:	49 2f       	mov	r20, r25
    3de4:	50 e0       	ldi	r21, 0x00	; 0
    3de6:	4a 30       	cpi	r20, 0x0A	; 10
    3de8:	51 05       	cpc	r21, r1
    3dea:	14 f0       	brlt	.+4      	; 0x3df0 <lora_driver_sent_upload_message+0x62>
    3dec:	99 5c       	subi	r25, 0xC9	; 201
    3dee:	01 c0       	rjmp	.+2      	; 0x3df2 <lora_driver_sent_upload_message+0x64>
    3df0:	90 5d       	subi	r25, 0xD0	; 208
    3df2:	f9 01       	movw	r30, r18
    3df4:	e0 50       	subi	r30, 0x00	; 0
    3df6:	f5 4f       	sbci	r31, 0xF5	; 245
    3df8:	90 83       	st	Z, r25
    3dfa:	7e 5f       	subi	r23, 0xFE	; 254
    3dfc:	6f 5f       	subi	r22, 0xFF	; 255
    3dfe:	11 96       	adiw	r26, 0x01	; 1
    3e00:	9c 91       	ld	r25, X
    3e02:	11 97       	sbiw	r26, 0x01	; 1
    3e04:	69 17       	cp	r22, r25
    3e06:	98 f2       	brcs	.-90     	; 0x3dae <lora_driver_sent_upload_message+0x20>
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <lora_driver_sent_upload_message+0x7e>
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	e7 2f       	mov	r30, r23
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	e0 50       	subi	r30, 0x00	; 0
    3e12:	f5 4f       	sbci	r31, 0xF5	; 245
    3e14:	10 82       	st	Z, r1
    3e16:	4c 91       	ld	r20, X
    3e18:	81 11       	cpse	r24, r1
    3e1a:	03 c0       	rjmp	.+6      	; 0x3e22 <lora_driver_sent_upload_message+0x94>
    3e1c:	8c e7       	ldi	r24, 0x7C	; 124
    3e1e:	97 e0       	ldi	r25, 0x07	; 7
    3e20:	02 c0       	rjmp	.+4      	; 0x3e26 <lora_driver_sent_upload_message+0x98>
    3e22:	8e e7       	ldi	r24, 0x7E	; 126
    3e24:	97 e0       	ldi	r25, 0x07	; 7
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	3b e0       	ldi	r19, 0x0B	; 11
    3e2a:	3f 93       	push	r19
    3e2c:	2f 93       	push	r18
    3e2e:	1f 92       	push	r1
    3e30:	4f 93       	push	r20
    3e32:	9f 93       	push	r25
    3e34:	8f 93       	push	r24
    3e36:	82 e8       	ldi	r24, 0x82	; 130
    3e38:	97 e0       	ldi	r25, 0x07	; 7
    3e3a:	9f 93       	push	r25
    3e3c:	8f 93       	push	r24
    3e3e:	82 e4       	ldi	r24, 0x42	; 66
    3e40:	9b e0       	ldi	r25, 0x0B	; 11
    3e42:	9f 93       	push	r25
    3e44:	8f 93       	push	r24
    3e46:	0e 94 ad 2b 	call	0x575a	; 0x575a <sprintf>
    3e4a:	60 e0       	ldi	r22, 0x00	; 0
    3e4c:	70 e0       	ldi	r23, 0x00	; 0
    3e4e:	82 e4       	ldi	r24, 0x42	; 66
    3e50:	9b e0       	ldi	r25, 0x0B	; 11
    3e52:	b9 de       	rcall	.-654    	; 0x3bc6 <_upload_message_rc>
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	8e 30       	cpi	r24, 0x0E	; 14
    3e60:	51 f5       	brne	.+84     	; 0x3eb6 <lora_driver_sent_upload_message+0x128>
    3e62:	87 e0       	ldi	r24, 0x07	; 7
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	be 01       	movw	r22, r28
    3e68:	6f 5f       	subi	r22, 0xFF	; 255
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6c:	8f e6       	ldi	r24, 0x6F	; 111
    3e6e:	9b e0       	ldi	r25, 0x0B	; 11
    3e70:	3c d1       	rcall	.+632    	; 0x40ea <decode_port_no>
    3e72:	80 93 ea 0a 	sts	0x0AEA, r24	; 0x800aea <_downlink_payload>
    3e76:	e9 81       	ldd	r30, Y+1	; 0x01
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	e1 59       	subi	r30, 0x91	; 145
    3e7c:	f4 4f       	sbci	r31, 0xF4	; 244
    3e7e:	df 01       	movw	r26, r30
    3e80:	0d 90       	ld	r0, X+
    3e82:	00 20       	and	r0, r0
    3e84:	e9 f7       	brne	.-6      	; 0x3e80 <lora_driver_sent_upload_message+0xf2>
    3e86:	11 97       	sbiw	r26, 0x01	; 1
    3e88:	ae 1b       	sub	r26, r30
    3e8a:	bf 0b       	sbc	r27, r31
    3e8c:	aa 23       	and	r26, r26
    3e8e:	81 f0       	breq	.+32     	; 0x3eb0 <lora_driver_sent_upload_message+0x122>
    3e90:	bb 27       	eor	r27, r27
    3e92:	11 97       	sbiw	r26, 0x01	; 1
    3e94:	cd 01       	movw	r24, r26
    3e96:	0a f4       	brpl	.+2      	; 0x3e9a <lora_driver_sent_upload_message+0x10c>
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	95 95       	asr	r25
    3e9c:	87 95       	ror	r24
    3e9e:	80 93 eb 0a 	sts	0x0AEB, r24	; 0x800aeb <_downlink_payload+0x1>
    3ea2:	af 01       	movw	r20, r30
    3ea4:	4f 5f       	subi	r20, 0xFF	; 255
    3ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea8:	64 e1       	ldi	r22, 0x14	; 20
    3eaa:	8c ee       	ldi	r24, 0xEC	; 236
    3eac:	9a e0       	ldi	r25, 0x0A	; 10
    3eae:	49 d1       	rcall	.+658    	; 0x4142 <decode_hexadecimal_string_bytes>
    3eb0:	8e e0       	ldi	r24, 0x0E	; 14
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <lora_driver_sent_upload_message+0x128>
    3eb4:	84 e1       	ldi	r24, 0x14	; 20
    3eb6:	0f 90       	pop	r0
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	08 95       	ret

00003ebe <lora_driver_set_adaptive_data_rate>:
    3ebe:	81 30       	cpi	r24, 0x01	; 1
    3ec0:	19 f0       	breq	.+6      	; 0x3ec8 <lora_driver_set_adaptive_data_rate+0xa>
    3ec2:	62 e9       	ldi	r22, 0x92	; 146
    3ec4:	77 e0       	ldi	r23, 0x07	; 7
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <lora_driver_set_adaptive_data_rate+0xe>
    3ec8:	62 e5       	ldi	r22, 0x52	; 82
    3eca:	78 e0       	ldi	r23, 0x08	; 8
    3ecc:	86 e9       	ldi	r24, 0x96	; 150
    3ece:	97 e0       	ldi	r25, 0x07	; 7
    3ed0:	7a ce       	rjmp	.-780    	; 0x3bc6 <_upload_message_rc>
    3ed2:	08 95       	ret

00003ed4 <lora_driver_configure_to_eu868>:
    3ed4:	2f 92       	push	r2
    3ed6:	3f 92       	push	r3
    3ed8:	4f 92       	push	r4
    3eda:	5f 92       	push	r5
    3edc:	6f 92       	push	r6
    3ede:	7f 92       	push	r7
    3ee0:	8f 92       	push	r8
    3ee2:	9f 92       	push	r9
    3ee4:	af 92       	push	r10
    3ee6:	bf 92       	push	r11
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	a0 97       	sbiw	r28, 0x20	; 32
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	f8 94       	cli
    3f02:	de bf       	out	0x3e, r29	; 62
    3f04:	0f be       	out	0x3f, r0	; 63
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	6b ed       	ldi	r22, 0xDB	; 219
    3f0a:	77 e0       	ldi	r23, 0x07	; 7
    3f0c:	87 ee       	ldi	r24, 0xE7	; 231
    3f0e:	97 e0       	ldi	r25, 0x07	; 7
    3f10:	c7 dd       	rcall	.-1138   	; 0x3aa0 <_upload_message>
    3f12:	1e de       	rcall	.-964    	; 0x3b50 <_reply2return_code>
    3f14:	81 11       	cpse	r24, r1
    3f16:	a3 c0       	rjmp	.+326    	; 0x405e <lora_driver_configure_to_eu868+0x18a>
    3f18:	80 e2       	ldi	r24, 0x20	; 32
    3f1a:	e5 e2       	ldi	r30, 0x25	; 37
    3f1c:	f2 e0       	ldi	r31, 0x02	; 2
    3f1e:	de 01       	movw	r26, r28
    3f20:	11 96       	adiw	r26, 0x01	; 1
    3f22:	01 90       	ld	r0, Z+
    3f24:	0d 92       	st	X+, r0
    3f26:	8a 95       	dec	r24
    3f28:	e1 f7       	brne	.-8      	; 0x3f22 <lora_driver_configure_to_eu868+0x4e>
    3f2a:	9e 01       	movw	r18, r28
    3f2c:	2f 5f       	subi	r18, 0xFF	; 255
    3f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f30:	69 01       	movw	r12, r18
    3f32:	e1 2c       	mov	r14, r1
    3f34:	f1 2c       	mov	r15, r1
    3f36:	0f 2e       	mov	r0, r31
    3f38:	f3 ef       	ldi	r31, 0xF3	; 243
    3f3a:	af 2e       	mov	r10, r31
    3f3c:	f7 e0       	ldi	r31, 0x07	; 7
    3f3e:	bf 2e       	mov	r11, r31
    3f40:	f0 2d       	mov	r31, r0
    3f42:	02 e4       	ldi	r16, 0x42	; 66
    3f44:	1b e0       	ldi	r17, 0x0B	; 11
    3f46:	0f 2e       	mov	r0, r31
    3f48:	fc e0       	ldi	r31, 0x0C	; 12
    3f4a:	4f 2e       	mov	r4, r31
    3f4c:	f8 e0       	ldi	r31, 0x08	; 8
    3f4e:	5f 2e       	mov	r5, r31
    3f50:	f0 2d       	mov	r31, r0
    3f52:	0f 2e       	mov	r0, r31
    3f54:	f3 e2       	ldi	r31, 0x23	; 35
    3f56:	8f 2e       	mov	r8, r31
    3f58:	f8 e0       	ldi	r31, 0x08	; 8
    3f5a:	9f 2e       	mov	r9, r31
    3f5c:	f0 2d       	mov	r31, r0
    3f5e:	0f 2e       	mov	r0, r31
    3f60:	fd e3       	ldi	r31, 0x3D	; 61
    3f62:	6f 2e       	mov	r6, r31
    3f64:	f8 e0       	ldi	r31, 0x08	; 8
    3f66:	7f 2e       	mov	r7, r31
    3f68:	f0 2d       	mov	r31, r0
    3f6a:	3e 2c       	mov	r3, r14
    3f6c:	2f 2c       	mov	r2, r15
    3f6e:	ff 92       	push	r15
    3f70:	ef 92       	push	r14
    3f72:	bf 92       	push	r11
    3f74:	af 92       	push	r10
    3f76:	1f 93       	push	r17
    3f78:	0f 93       	push	r16
    3f7a:	0e 94 ad 2b 	call	0x575a	; 0x575a <sprintf>
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	c8 01       	movw	r24, r16
    3f84:	8d dd       	rcall	.-1254   	; 0x3aa0 <_upload_message>
    3f86:	e4 dd       	rcall	.-1080   	; 0x3b50 <_reply2return_code>
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	81 11       	cpse	r24, r1
    3f96:	63 c0       	rjmp	.+198    	; 0x405e <lora_driver_configure_to_eu868+0x18a>
    3f98:	32 e0       	ldi	r19, 0x02	; 2
    3f9a:	3e 15       	cp	r19, r14
    3f9c:	e8 f4       	brcc	.+58     	; 0x3fd8 <lora_driver_configure_to_eu868+0x104>
    3f9e:	f6 01       	movw	r30, r12
    3fa0:	83 81       	ldd	r24, Z+3	; 0x03
    3fa2:	8f 93       	push	r24
    3fa4:	82 81       	ldd	r24, Z+2	; 0x02
    3fa6:	8f 93       	push	r24
    3fa8:	81 81       	ldd	r24, Z+1	; 0x01
    3faa:	8f 93       	push	r24
    3fac:	80 81       	ld	r24, Z
    3fae:	8f 93       	push	r24
    3fb0:	ff 92       	push	r15
    3fb2:	ef 92       	push	r14
    3fb4:	5f 92       	push	r5
    3fb6:	4f 92       	push	r4
    3fb8:	1f 93       	push	r17
    3fba:	0f 93       	push	r16
    3fbc:	0e 94 ad 2b 	call	0x575a	; 0x575a <sprintf>
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	70 e0       	ldi	r23, 0x00	; 0
    3fc4:	c8 01       	movw	r24, r16
    3fc6:	6c dd       	rcall	.-1320   	; 0x3aa0 <_upload_message>
    3fc8:	c3 dd       	rcall	.-1146   	; 0x3b50 <_reply2return_code>
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	f8 94       	cli
    3fce:	de bf       	out	0x3e, r29	; 62
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	cd bf       	out	0x3d, r28	; 61
    3fd4:	81 11       	cpse	r24, r1
    3fd6:	43 c0       	rjmp	.+134    	; 0x405e <lora_driver_configure_to_eu868+0x18a>
    3fd8:	2f 92       	push	r2
    3fda:	3f 92       	push	r3
    3fdc:	9f 92       	push	r9
    3fde:	8f 92       	push	r8
    3fe0:	1f 93       	push	r17
    3fe2:	0f 93       	push	r16
    3fe4:	0e 94 ad 2b 	call	0x575a	; 0x575a <sprintf>
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	c8 01       	movw	r24, r16
    3fee:	58 dd       	rcall	.-1360   	; 0x3aa0 <_upload_message>
    3ff0:	af dd       	rcall	.-1186   	; 0x3b50 <_reply2return_code>
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	0f 90       	pop	r0
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	81 11       	cpse	r24, r1
    4000:	2e c0       	rjmp	.+92     	; 0x405e <lora_driver_configure_to_eu868+0x18a>
    4002:	2f 92       	push	r2
    4004:	3f 92       	push	r3
    4006:	7f 92       	push	r7
    4008:	6f 92       	push	r6
    400a:	1f 93       	push	r17
    400c:	0f 93       	push	r16
    400e:	0e 94 ad 2b 	call	0x575a	; 0x575a <sprintf>
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	c8 01       	movw	r24, r16
    4018:	43 dd       	rcall	.-1402   	; 0x3aa0 <_upload_message>
    401a:	9a dd       	rcall	.-1228   	; 0x3b50 <_reply2return_code>
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	81 11       	cpse	r24, r1
    402a:	19 c0       	rjmp	.+50     	; 0x405e <lora_driver_configure_to_eu868+0x18a>
    402c:	3f ef       	ldi	r19, 0xFF	; 255
    402e:	e3 1a       	sub	r14, r19
    4030:	f3 0a       	sbc	r15, r19
    4032:	84 e0       	ldi	r24, 0x04	; 4
    4034:	c8 0e       	add	r12, r24
    4036:	d1 1c       	adc	r13, r1
    4038:	98 e0       	ldi	r25, 0x08	; 8
    403a:	e9 16       	cp	r14, r25
    403c:	f1 04       	cpc	r15, r1
    403e:	09 f0       	breq	.+2      	; 0x4042 <lora_driver_configure_to_eu868+0x16e>
    4040:	94 cf       	rjmp	.-216    	; 0x3f6a <lora_driver_configure_to_eu868+0x96>
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	70 e0       	ldi	r23, 0x00	; 0
    4046:	85 e5       	ldi	r24, 0x55	; 85
    4048:	98 e0       	ldi	r25, 0x08	; 8
    404a:	2a dd       	rcall	.-1452   	; 0x3aa0 <_upload_message>
    404c:	81 dd       	rcall	.-1278   	; 0x3b50 <_reply2return_code>
    404e:	81 11       	cpse	r24, r1
    4050:	06 c0       	rjmp	.+12     	; 0x405e <lora_driver_configure_to_eu868+0x18a>
    4052:	60 e0       	ldi	r22, 0x00	; 0
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	86 e6       	ldi	r24, 0x66	; 102
    4058:	98 e0       	ldi	r25, 0x08	; 8
    405a:	22 dd       	rcall	.-1468   	; 0x3aa0 <_upload_message>
    405c:	79 dd       	rcall	.-1294   	; 0x3b50 <_reply2return_code>
    405e:	a0 96       	adiw	r28, 0x20	; 32
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	1f 91       	pop	r17
    4070:	0f 91       	pop	r16
    4072:	ff 90       	pop	r15
    4074:	ef 90       	pop	r14
    4076:	df 90       	pop	r13
    4078:	cf 90       	pop	r12
    407a:	bf 90       	pop	r11
    407c:	af 90       	pop	r10
    407e:	9f 90       	pop	r9
    4080:	8f 90       	pop	r8
    4082:	7f 90       	pop	r7
    4084:	6f 90       	pop	r6
    4086:	5f 90       	pop	r5
    4088:	4f 90       	pop	r4
    408a:	3f 90       	pop	r3
    408c:	2f 90       	pop	r2
    408e:	08 95       	ret

00004090 <lora_driver_set_otaa_identity>:
    4090:	ef 92       	push	r14
    4092:	ff 92       	push	r15
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	ec 01       	movw	r28, r24
    409e:	8b 01       	movw	r16, r22
    40a0:	7a 01       	movw	r14, r20
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	0c df       	rcall	.-488    	; 0x3ebe <lora_driver_set_adaptive_data_rate>
    40a6:	81 11       	cpse	r24, r1
    40a8:	0d c0       	rjmp	.+26     	; 0x40c4 <lora_driver_set_otaa_identity+0x34>
    40aa:	ce 01       	movw	r24, r28
    40ac:	25 de       	rcall	.-950    	; 0x3cf8 <lora_driver_set_application_identifier>
    40ae:	81 11       	cpse	r24, r1
    40b0:	09 c0       	rjmp	.+18     	; 0x40c4 <lora_driver_set_otaa_identity+0x34>
    40b2:	c8 01       	movw	r24, r16
    40b4:	32 de       	rcall	.-924    	; 0x3d1a <lora_driver_set_application_key>
    40b6:	81 11       	cpse	r24, r1
    40b8:	05 c0       	rjmp	.+10     	; 0x40c4 <lora_driver_set_otaa_identity+0x34>
    40ba:	c7 01       	movw	r24, r14
    40bc:	0c de       	rcall	.-1000   	; 0x3cd6 <lora_driver_set_device_identifier>
    40be:	81 11       	cpse	r24, r1
    40c0:	01 c0       	rjmp	.+2      	; 0x40c4 <lora_driver_set_otaa_identity+0x34>
    40c2:	3c de       	rcall	.-904    	; 0x3d3c <lora_driver_save_mac>
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	1f 91       	pop	r17
    40ca:	0f 91       	pop	r16
    40cc:	ff 90       	pop	r15
    40ce:	ef 90       	pop	r14
    40d0:	08 95       	ret

000040d2 <lora_driver_map_return_code_to_text>:
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	fc 01       	movw	r30, r24
    40d6:	ee 0f       	add	r30, r30
    40d8:	ff 1f       	adc	r31, r31
    40da:	8e 0f       	add	r24, r30
    40dc:	9f 1f       	adc	r25, r31
    40de:	fc 01       	movw	r30, r24
    40e0:	ee 5c       	subi	r30, 0xCE	; 206
    40e2:	f6 4f       	sbci	r31, 0xF6	; 246
    40e4:	81 81       	ldd	r24, Z+1	; 0x01
    40e6:	92 81       	ldd	r25, Z+2	; 0x02
    40e8:	08 95       	ret

000040ea <decode_port_no>:
    40ea:	dc 01       	movw	r26, r24
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	29 f1       	breq	.+74     	; 0x413a <decode_port_no+0x50>
    40f0:	fb 01       	movw	r30, r22
    40f2:	20 81       	ld	r18, Z
    40f4:	fc 01       	movw	r30, r24
    40f6:	01 90       	ld	r0, Z+
    40f8:	00 20       	and	r0, r0
    40fa:	e9 f7       	brne	.-6      	; 0x40f6 <decode_port_no+0xc>
    40fc:	31 97       	sbiw	r30, 0x01	; 1
    40fe:	e8 1b       	sub	r30, r24
    4100:	f9 0b       	sbc	r31, r25
    4102:	82 2f       	mov	r24, r18
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	e8 17       	cp	r30, r24
    4108:	f9 07       	cpc	r31, r25
    410a:	c8 f0       	brcs	.+50     	; 0x413e <decode_port_no+0x54>
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	08 c0       	rjmp	.+16     	; 0x4120 <decode_port_no+0x36>
    4110:	88 0f       	add	r24, r24
    4112:	38 2f       	mov	r19, r24
    4114:	33 0f       	add	r19, r19
    4116:	33 0f       	add	r19, r19
    4118:	83 0f       	add	r24, r19
    411a:	80 53       	subi	r24, 0x30	; 48
    411c:	89 0f       	add	r24, r25
    411e:	2f 5f       	subi	r18, 0xFF	; 255
    4120:	fd 01       	movw	r30, r26
    4122:	e2 0f       	add	r30, r18
    4124:	f1 1d       	adc	r31, r1
    4126:	90 81       	ld	r25, Z
    4128:	30 ed       	ldi	r19, 0xD0	; 208
    412a:	39 0f       	add	r19, r25
    412c:	3a 30       	cpi	r19, 0x0A	; 10
    412e:	10 f4       	brcc	.+4      	; 0x4134 <decode_port_no+0x4a>
    4130:	91 11       	cpse	r25, r1
    4132:	ee cf       	rjmp	.-36     	; 0x4110 <decode_port_no+0x26>
    4134:	fb 01       	movw	r30, r22
    4136:	20 83       	st	Z, r18
    4138:	08 95       	ret
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	08 95       	ret
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	08 95       	ret

00004142 <decode_hexadecimal_string_bytes>:
    4142:	0f 93       	push	r16
    4144:	1f 93       	push	r17
    4146:	cf 93       	push	r28
    4148:	df 93       	push	r29
    414a:	dc 01       	movw	r26, r24
    414c:	ea 01       	movw	r28, r20
    414e:	20 97       	sbiw	r28, 0x00	; 0
    4150:	e1 f1       	breq	.+120    	; 0x41ca <decode_hexadecimal_string_bytes+0x88>
    4152:	fa 01       	movw	r30, r20
    4154:	01 90       	ld	r0, Z+
    4156:	00 20       	and	r0, r0
    4158:	e9 f7       	brne	.-6      	; 0x4154 <decode_hexadecimal_string_bytes+0x12>
    415a:	31 97       	sbiw	r30, 0x01	; 1
    415c:	e4 1b       	sub	r30, r20
    415e:	f5 0b       	sbc	r31, r21
    4160:	32 97       	sbiw	r30, 0x02	; 2
    4162:	10 f5       	brcc	.+68     	; 0x41a8 <decode_hexadecimal_string_bytes+0x66>
    4164:	32 c0       	rjmp	.+100    	; 0x41ca <decode_hexadecimal_string_bytes+0x88>
    4166:	8d 01       	movw	r16, r26
    4168:	04 0f       	add	r16, r20
    416a:	15 1f       	adc	r17, r21
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	ae 01       	movw	r20, r28
    4170:	42 0f       	add	r20, r18
    4172:	53 1f       	adc	r21, r19
    4174:	fa 01       	movw	r30, r20
    4176:	90 81       	ld	r25, Z
    4178:	91 34       	cpi	r25, 0x41	; 65
    417a:	28 f0       	brcs	.+10     	; 0x4186 <decode_hexadecimal_string_bytes+0x44>
    417c:	97 53       	subi	r25, 0x37	; 55
    417e:	59 2f       	mov	r21, r25
    4180:	52 95       	swap	r21
    4182:	50 7f       	andi	r21, 0xF0	; 240
    4184:	03 c0       	rjmp	.+6      	; 0x418c <decode_hexadecimal_string_bytes+0x4a>
    4186:	59 2f       	mov	r21, r25
    4188:	52 95       	swap	r21
    418a:	50 7f       	andi	r21, 0xF0	; 240
    418c:	2c 0f       	add	r18, r28
    418e:	3d 1f       	adc	r19, r29
    4190:	f9 01       	movw	r30, r18
    4192:	91 81       	ldd	r25, Z+1	; 0x01
    4194:	91 34       	cpi	r25, 0x41	; 65
    4196:	10 f0       	brcs	.+4      	; 0x419c <decode_hexadecimal_string_bytes+0x5a>
    4198:	97 53       	subi	r25, 0x37	; 55
    419a:	01 c0       	rjmp	.+2      	; 0x419e <decode_hexadecimal_string_bytes+0x5c>
    419c:	90 53       	subi	r25, 0x30	; 48
    419e:	95 0f       	add	r25, r21
    41a0:	f8 01       	movw	r30, r16
    41a2:	90 83       	st	Z, r25
    41a4:	8f 5f       	subi	r24, 0xFF	; 255
    41a6:	01 c0       	rjmp	.+2      	; 0x41aa <decode_hexadecimal_string_bytes+0x68>
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	28 2f       	mov	r18, r24
    41ac:	22 0f       	add	r18, r18
    41ae:	48 2f       	mov	r20, r24
    41b0:	50 e0       	ldi	r21, 0x00	; 0
    41b2:	fe 01       	movw	r30, r28
    41b4:	01 90       	ld	r0, Z+
    41b6:	00 20       	and	r0, r0
    41b8:	e9 f7       	brne	.-6      	; 0x41b4 <decode_hexadecimal_string_bytes+0x72>
    41ba:	31 97       	sbiw	r30, 0x01	; 1
    41bc:	ec 1b       	sub	r30, r28
    41be:	fd 0b       	sbc	r31, r29
    41c0:	4e 17       	cp	r20, r30
    41c2:	5f 07       	cpc	r21, r31
    41c4:	10 f4       	brcc	.+4      	; 0x41ca <decode_hexadecimal_string_bytes+0x88>
    41c6:	86 13       	cpse	r24, r22
    41c8:	ce cf       	rjmp	.-100    	; 0x4166 <decode_hexadecimal_string_bytes+0x24>
    41ca:	df 91       	pop	r29
    41cc:	cf 91       	pop	r28
    41ce:	1f 91       	pop	r17
    41d0:	0f 91       	pop	r16
    41d2:	08 95       	ret

000041d4 <reg_read_register>:
    41d4:	fc 01       	movw	r30, r24
    41d6:	80 81       	ld	r24, Z
    41d8:	08 95       	ret

000041da <reg_read_bit>:
    41da:	fc 01       	movw	r30, r24
    41dc:	20 81       	ld	r18, Z
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	02 c0       	rjmp	.+4      	; 0x41e8 <reg_read_bit+0xe>
    41e4:	88 0f       	add	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	6a 95       	dec	r22
    41ea:	e2 f7       	brpl	.-8      	; 0x41e4 <reg_read_bit+0xa>
    41ec:	82 23       	and	r24, r18
    41ee:	08 95       	ret

000041f0 <reg_read_bits>:
    41f0:	fc 01       	movw	r30, r24
    41f2:	80 81       	ld	r24, Z
    41f4:	86 23       	and	r24, r22
    41f6:	08 95       	ret

000041f8 <reg_set_register>:
    41f8:	fc 01       	movw	r30, r24
    41fa:	60 83       	st	Z, r22
    41fc:	08 95       	ret

000041fe <reg_clear_register>:
    41fe:	fc 01       	movw	r30, r24
    4200:	10 82       	st	Z, r1
    4202:	08 95       	ret

00004204 <reg_set_bit>:
    4204:	fc 01       	movw	r30, r24
    4206:	40 81       	ld	r20, Z
    4208:	21 e0       	ldi	r18, 0x01	; 1
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	02 c0       	rjmp	.+4      	; 0x4212 <reg_set_bit+0xe>
    420e:	22 0f       	add	r18, r18
    4210:	33 1f       	adc	r19, r19
    4212:	6a 95       	dec	r22
    4214:	e2 f7       	brpl	.-8      	; 0x420e <reg_set_bit+0xa>
    4216:	24 2b       	or	r18, r20
    4218:	20 83       	st	Z, r18
    421a:	08 95       	ret

0000421c <reg_set_bits>:
    421c:	fc 01       	movw	r30, r24
    421e:	20 81       	ld	r18, Z
    4220:	62 2b       	or	r22, r18
    4222:	60 83       	st	Z, r22
    4224:	08 95       	ret

00004226 <reg_toggle_bit>:
    4226:	fc 01       	movw	r30, r24
    4228:	40 81       	ld	r20, Z
    422a:	21 e0       	ldi	r18, 0x01	; 1
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	02 c0       	rjmp	.+4      	; 0x4234 <reg_toggle_bit+0xe>
    4230:	22 0f       	add	r18, r18
    4232:	33 1f       	adc	r19, r19
    4234:	6a 95       	dec	r22
    4236:	e2 f7       	brpl	.-8      	; 0x4230 <reg_toggle_bit+0xa>
    4238:	24 27       	eor	r18, r20
    423a:	20 83       	st	Z, r18
    423c:	08 95       	ret

0000423e <reg_toggle_bits>:
    423e:	fc 01       	movw	r30, r24
    4240:	20 81       	ld	r18, Z
    4242:	62 27       	eor	r22, r18
    4244:	60 83       	st	Z, r22
    4246:	08 95       	ret

00004248 <reg_clear_bit>:
    4248:	fc 01       	movw	r30, r24
    424a:	90 81       	ld	r25, Z
    424c:	21 e0       	ldi	r18, 0x01	; 1
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	02 c0       	rjmp	.+4      	; 0x4256 <reg_clear_bit+0xe>
    4252:	22 0f       	add	r18, r18
    4254:	33 1f       	adc	r19, r19
    4256:	6a 95       	dec	r22
    4258:	e2 f7       	brpl	.-8      	; 0x4252 <reg_clear_bit+0xa>
    425a:	20 95       	com	r18
    425c:	29 23       	and	r18, r25
    425e:	20 83       	st	Z, r18
    4260:	08 95       	ret

00004262 <reg_clear_bits>:
    4262:	fc 01       	movw	r30, r24
    4264:	90 81       	ld	r25, Z
    4266:	60 95       	com	r22
    4268:	69 23       	and	r22, r25
    426a:	60 83       	st	Z, r22
    426c:	08 95       	ret

0000426e <_serial_call_back>:
    426e:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <crc_sum.1941>
    4272:	86 0f       	add	r24, r22
    4274:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <crc_sum.1941>
    4278:	90 91 a2 0b 	lds	r25, 0x0BA2	; 0x800ba2 <_mh_state>
    427c:	91 30       	cpi	r25, 0x01	; 1
    427e:	79 f0       	breq	.+30     	; 0x429e <_serial_call_back+0x30>
    4280:	28 f0       	brcs	.+10     	; 0x428c <_serial_call_back+0x1e>
    4282:	92 30       	cpi	r25, 0x02	; 2
    4284:	a9 f0       	breq	.+42     	; 0x42b0 <_serial_call_back+0x42>
    4286:	93 30       	cpi	r25, 0x03	; 3
    4288:	19 f1       	breq	.+70     	; 0x42d0 <_serial_call_back+0x62>
    428a:	08 95       	ret
    428c:	6f 3f       	cpi	r22, 0xFF	; 255
    428e:	09 f0       	breq	.+2      	; 0x4292 <_serial_call_back+0x24>
    4290:	48 c0       	rjmp	.+144    	; 0x4322 <_serial_call_back+0xb4>
    4292:	10 92 9f 0b 	sts	0x0B9F, r1	; 0x800b9f <crc_sum.1941>
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <_mh_state>
    429c:	08 95       	ret
    429e:	66 38       	cpi	r22, 0x86	; 134
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <_serial_call_back+0x36>
    42a2:	3f c0       	rjmp	.+126    	; 0x4322 <_serial_call_back+0xb4>
    42a4:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <inDex.1939>
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <_mh_state>
    42ae:	08 95       	ret
    42b0:	e0 91 9e 0b 	lds	r30, 0x0B9E	; 0x800b9e <inDex.1939>
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	8e 0f       	add	r24, r30
    42b8:	80 93 9e 0b 	sts	0x0B9E, r24	; 0x800b9e <inDex.1939>
    42bc:	f0 e0       	ldi	r31, 0x00	; 0
    42be:	e4 56       	subi	r30, 0x64	; 100
    42c0:	f4 4f       	sbci	r31, 0xF4	; 244
    42c2:	60 83       	st	Z, r22
    42c4:	82 30       	cpi	r24, 0x02	; 2
    42c6:	69 f5       	brne	.+90     	; 0x4322 <_serial_call_back+0xb4>
    42c8:	83 e0       	ldi	r24, 0x03	; 3
    42ca:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <_mh_state>
    42ce:	08 95       	ret
    42d0:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <inDex.1939>
    42d4:	21 e0       	ldi	r18, 0x01	; 1
    42d6:	29 0f       	add	r18, r25
    42d8:	20 93 9e 0b 	sts	0x0B9E, r18	; 0x800b9e <inDex.1939>
    42dc:	96 30       	cpi	r25, 0x06	; 6
    42de:	09 f5       	brne	.+66     	; 0x4322 <_serial_call_back+0xb4>
    42e0:	81 11       	cpse	r24, r1
    42e2:	0e c0       	rjmp	.+28     	; 0x4300 <_serial_call_back+0x92>
    42e4:	ec e9       	ldi	r30, 0x9C	; 156
    42e6:	fb e0       	ldi	r31, 0x0B	; 11
    42e8:	80 81       	ld	r24, Z
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	98 2f       	mov	r25, r24
    42ee:	88 27       	eor	r24, r24
    42f0:	21 81       	ldd	r18, Z+1	; 0x01
    42f2:	82 0f       	add	r24, r18
    42f4:	91 1d       	adc	r25, r1
    42f6:	90 93 a4 0b 	sts	0x0BA4, r25	; 0x800ba4 <_ppm+0x1>
    42fa:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <_ppm>
    42fe:	04 c0       	rjmp	.+8      	; 0x4308 <_serial_call_back+0x9a>
    4300:	10 92 a4 0b 	sts	0x0BA4, r1	; 0x800ba4 <_ppm+0x1>
    4304:	10 92 a3 0b 	sts	0x0BA3, r1	; 0x800ba3 <_ppm>
    4308:	10 92 a2 0b 	sts	0x0BA2, r1	; 0x800ba2 <_mh_state>
    430c:	e0 91 a0 0b 	lds	r30, 0x0BA0	; 0x800ba0 <_app_call_back>
    4310:	f0 91 a1 0b 	lds	r31, 0x0BA1	; 0x800ba1 <_app_call_back+0x1>
    4314:	30 97       	sbiw	r30, 0x00	; 0
    4316:	29 f0       	breq	.+10     	; 0x4322 <_serial_call_back+0xb4>
    4318:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <_ppm>
    431c:	90 91 a4 0b 	lds	r25, 0x0BA4	; 0x800ba4 <_ppm+0x1>
    4320:	19 95       	eicall
    4322:	08 95       	ret

00004324 <mh_z19_create>:
    4324:	8f 92       	push	r8
    4326:	9f 92       	push	r9
    4328:	af 92       	push	r10
    432a:	cf 92       	push	r12
    432c:	ef 92       	push	r14
    432e:	0f 93       	push	r16
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	eb 01       	movw	r28, r22
    4336:	0f 2e       	mov	r0, r31
    4338:	f7 e3       	ldi	r31, 0x37	; 55
    433a:	8f 2e       	mov	r8, r31
    433c:	f1 e2       	ldi	r31, 0x21	; 33
    433e:	9f 2e       	mov	r9, r31
    4340:	f0 2d       	mov	r31, r0
    4342:	68 94       	set
    4344:	aa 24       	eor	r10, r10
    4346:	a4 f8       	bld	r10, 4
    4348:	68 94       	set
    434a:	cc 24       	eor	r12, r12
    434c:	c4 f8       	bld	r12, 4
    434e:	e1 2c       	mov	r14, r1
    4350:	00 e0       	ldi	r16, 0x00	; 0
    4352:	23 e0       	ldi	r18, 0x03	; 3
    4354:	40 e8       	ldi	r20, 0x80	; 128
    4356:	55 e2       	ldi	r21, 0x25	; 37
    4358:	60 e0       	ldi	r22, 0x00	; 0
    435a:	70 e0       	ldi	r23, 0x00	; 0
    435c:	51 d0       	rcall	.+162    	; 0x4400 <serial_new_instance>
    435e:	90 93 a6 0b 	sts	0x0BA6, r25	; 0x800ba6 <_serial+0x1>
    4362:	80 93 a5 0b 	sts	0x0BA5, r24	; 0x800ba5 <_serial>
    4366:	d0 93 a1 0b 	sts	0x0BA1, r29	; 0x800ba1 <_app_call_back+0x1>
    436a:	c0 93 a0 0b 	sts	0x0BA0, r28	; 0x800ba0 <_app_call_back>
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	0f 91       	pop	r16
    4374:	ef 90       	pop	r14
    4376:	cf 90       	pop	r12
    4378:	af 90       	pop	r10
    437a:	9f 90       	pop	r9
    437c:	8f 90       	pop	r8
    437e:	08 95       	ret

00004380 <mh_z19_take_meassuring>:
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    4388:	29 97       	sbiw	r28, 0x09	; 9
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	f8 94       	cli
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	cd bf       	out	0x3d, r28	; 61
    4394:	89 e0       	ldi	r24, 0x09	; 9
    4396:	e5 e4       	ldi	r30, 0x45	; 69
    4398:	f2 e0       	ldi	r31, 0x02	; 2
    439a:	9e 01       	movw	r18, r28
    439c:	2f 5f       	subi	r18, 0xFF	; 255
    439e:	3f 4f       	sbci	r19, 0xFF	; 255
    43a0:	d9 01       	movw	r26, r18
    43a2:	01 90       	ld	r0, Z+
    43a4:	0d 92       	st	X+, r0
    43a6:	8a 95       	dec	r24
    43a8:	e1 f7       	brne	.-8      	; 0x43a2 <mh_z19_take_meassuring+0x22>
    43aa:	10 92 a4 0b 	sts	0x0BA4, r1	; 0x800ba4 <_ppm+0x1>
    43ae:	10 92 a3 0b 	sts	0x0BA3, r1	; 0x800ba3 <_ppm>
    43b2:	80 91 a5 0b 	lds	r24, 0x0BA5	; 0x800ba5 <_serial>
    43b6:	90 91 a6 0b 	lds	r25, 0x0BA6	; 0x800ba6 <_serial+0x1>
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	31 f0       	breq	.+12     	; 0x43ca <mh_z19_take_meassuring+0x4a>
    43be:	42 2f       	mov	r20, r18
    43c0:	53 2f       	mov	r21, r19
    43c2:	69 e0       	ldi	r22, 0x09	; 9
    43c4:	da d0       	rcall	.+436    	; 0x457a <serial_send_bytes>
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	01 c0       	rjmp	.+2      	; 0x43cc <mh_z19_take_meassuring+0x4c>
    43ca:	82 e0       	ldi	r24, 0x02	; 2
    43cc:	29 96       	adiw	r28, 0x09	; 9
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	df 91       	pop	r29
    43da:	cf 91       	pop	r28
    43dc:	08 95       	ret

000043de <mh_z19_get_co2_ppm>:
    43de:	20 91 a3 0b 	lds	r18, 0x0BA3	; 0x800ba3 <_ppm>
    43e2:	30 91 a4 0b 	lds	r19, 0x0BA4	; 0x800ba4 <_ppm+0x1>
    43e6:	21 15       	cp	r18, r1
    43e8:	31 05       	cpc	r19, r1
    43ea:	29 f4       	brne	.+10     	; 0x43f6 <mh_z19_get_co2_ppm+0x18>
    43ec:	fc 01       	movw	r30, r24
    43ee:	11 82       	std	Z+1, r1	; 0x01
    43f0:	10 82       	st	Z, r1
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	08 95       	ret
    43f6:	fc 01       	movw	r30, r24
    43f8:	31 83       	std	Z+1, r19	; 0x01
    43fa:	20 83       	st	Z, r18
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	08 95       	ret

00004400 <serial_new_instance>:
    4400:	2f 92       	push	r2
    4402:	3f 92       	push	r3
    4404:	4f 92       	push	r4
    4406:	5f 92       	push	r5
    4408:	6f 92       	push	r6
    440a:	7f 92       	push	r7
    440c:	8f 92       	push	r8
    440e:	9f 92       	push	r9
    4410:	af 92       	push	r10
    4412:	cf 92       	push	r12
    4414:	ef 92       	push	r14
    4416:	ff 92       	push	r15
    4418:	0f 93       	push	r16
    441a:	1f 93       	push	r17
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
    4424:	f8 2e       	mov	r15, r24
    4426:	2a 01       	movw	r4, r20
    4428:	3b 01       	movw	r6, r22
    442a:	88 e0       	ldi	r24, 0x08	; 8
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	c8 d6       	rcall	.+3472   	; 0x51c0 <malloc>
    4430:	8c 01       	movw	r16, r24
    4432:	8f 2d       	mov	r24, r15
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	fc 01       	movw	r30, r24
    443c:	e9 55       	subi	r30, 0x59	; 89
    443e:	f4 4f       	sbci	r31, 0xF4	; 244
    4440:	11 83       	std	Z+1, r17	; 0x01
    4442:	00 83       	st	Z, r16
    4444:	fc 01       	movw	r30, r24
    4446:	e2 5f       	subi	r30, 0xF2	; 242
    4448:	fd 4f       	sbci	r31, 0xFD	; 253
    444a:	80 81       	ld	r24, Z
    444c:	91 81       	ldd	r25, Z+1	; 0x01
    444e:	d8 01       	movw	r26, r16
    4450:	8d 93       	st	X+, r24
    4452:	9c 93       	st	X, r25
    4454:	6c 2d       	mov	r22, r12
    4456:	70 e0       	ldi	r23, 0x00	; 0
    4458:	84 e0       	ldi	r24, 0x04	; 4
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	97 d6       	rcall	.+3374   	; 0x518c <calloc>
    445e:	1c 01       	movw	r2, r24
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	70 e0       	ldi	r23, 0x00	; 0
    4464:	86 e0       	ldi	r24, 0x06	; 6
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	91 d6       	rcall	.+3362   	; 0x518c <calloc>
    446a:	7c 01       	movw	r14, r24
    446c:	4c 2d       	mov	r20, r12
    446e:	b1 01       	movw	r22, r2
    4470:	2d d5       	rcall	.+2650   	; 0x4ecc <fifo_init>
    4472:	f8 01       	movw	r30, r16
    4474:	f5 82       	std	Z+5, r15	; 0x05
    4476:	e4 82       	std	Z+4, r14	; 0x04
    4478:	6a 2d       	mov	r22, r10
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	84 e0       	ldi	r24, 0x04	; 4
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	85 d6       	rcall	.+3338   	; 0x518c <calloc>
    4482:	1c 01       	movw	r2, r24
    4484:	61 e0       	ldi	r22, 0x01	; 1
    4486:	70 e0       	ldi	r23, 0x00	; 0
    4488:	86 e0       	ldi	r24, 0x06	; 6
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	7f d6       	rcall	.+3326   	; 0x518c <calloc>
    448e:	7c 01       	movw	r14, r24
    4490:	4a 2d       	mov	r20, r10
    4492:	b1 01       	movw	r22, r2
    4494:	1b d5       	rcall	.+2614   	; 0x4ecc <fifo_init>
    4496:	d8 01       	movw	r26, r16
    4498:	13 96       	adiw	r26, 0x03	; 3
    449a:	fc 92       	st	X, r15
    449c:	ee 92       	st	-X, r14
    449e:	12 97       	sbiw	r26, 0x02	; 2
    44a0:	17 96       	adiw	r26, 0x07	; 7
    44a2:	9c 92       	st	X, r9
    44a4:	8e 92       	st	-X, r8
    44a6:	16 97       	sbiw	r26, 0x06	; 6
    44a8:	ff b6       	in	r15, 0x3f	; 63
    44aa:	f8 94       	cli
    44ac:	ed 91       	ld	r30, X+
    44ae:	fc 91       	ld	r31, X
    44b0:	11 97       	sbiw	r26, 0x01	; 1
    44b2:	36 97       	sbiw	r30, 0x06	; 6
    44b4:	80 81       	ld	r24, Z
    44b6:	82 60       	ori	r24, 0x02	; 2
    44b8:	80 83       	st	Z, r24
    44ba:	8d 90       	ld	r8, X+
    44bc:	9c 90       	ld	r9, X
    44be:	c3 01       	movw	r24, r6
    44c0:	b2 01       	movw	r22, r4
    44c2:	fd d5       	rcall	.+3066   	; 0x50be <__floatunsisf>
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	51 e4       	ldi	r21, 0x41	; 65
    44cc:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    44d0:	9b 01       	movw	r18, r22
    44d2:	ac 01       	movw	r20, r24
    44d4:	60 e0       	ldi	r22, 0x00	; 0
    44d6:	74 e2       	ldi	r23, 0x24	; 36
    44d8:	84 e7       	ldi	r24, 0x74	; 116
    44da:	9b e4       	ldi	r25, 0x4B	; 75
    44dc:	7f d5       	rcall	.+2814   	; 0x4fdc <__divsf3>
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	40 e8       	ldi	r20, 0x80	; 128
    44e4:	5f e3       	ldi	r21, 0x3F	; 63
    44e6:	0e d5       	rcall	.+2588   	; 0x4f04 <__subsf3>
    44e8:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__fixunssfsi>
    44ec:	f4 01       	movw	r30, r8
    44ee:	32 97       	sbiw	r30, 0x02	; 2
    44f0:	60 83       	st	Z, r22
    44f2:	d8 01       	movw	r26, r16
    44f4:	ed 91       	ld	r30, X+
    44f6:	fc 91       	ld	r31, X
    44f8:	11 97       	sbiw	r26, 0x01	; 1
    44fa:	35 97       	sbiw	r30, 0x05	; 5
    44fc:	88 e9       	ldi	r24, 0x98	; 152
    44fe:	80 83       	st	Z, r24
    4500:	ed 91       	ld	r30, X+
    4502:	fc 91       	ld	r31, X
    4504:	34 97       	sbiw	r30, 0x04	; 4
    4506:	86 e0       	ldi	r24, 0x06	; 6
    4508:	80 83       	st	Z, r24
    450a:	ff be       	out	0x3f, r15	; 63
    450c:	c8 01       	movw	r24, r16
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	ff 90       	pop	r15
    4518:	ef 90       	pop	r14
    451a:	cf 90       	pop	r12
    451c:	af 90       	pop	r10
    451e:	9f 90       	pop	r9
    4520:	8f 90       	pop	r8
    4522:	7f 90       	pop	r7
    4524:	6f 90       	pop	r6
    4526:	5f 90       	pop	r5
    4528:	4f 90       	pop	r4
    452a:	3f 90       	pop	r3
    452c:	2f 90       	pop	r2
    452e:	08 95       	ret

00004530 <serial_send_byte>:
    4530:	cf 93       	push	r28
    4532:	df 93       	push	r29
    4534:	ec 01       	movw	r28, r24
    4536:	ea 81       	ldd	r30, Y+2	; 0x02
    4538:	fb 81       	ldd	r31, Y+3	; 0x03
    453a:	93 81       	ldd	r25, Z+3	; 0x03
    453c:	82 81       	ldd	r24, Z+2	; 0x02
    453e:	25 81       	ldd	r18, Z+5	; 0x05
    4540:	98 1b       	sub	r25, r24
    4542:	92 23       	and	r25, r18
    4544:	84 81       	ldd	r24, Z+4	; 0x04
    4546:	98 17       	cp	r25, r24
    4548:	a1 f0       	breq	.+40     	; 0x4572 <serial_send_byte+0x42>
    454a:	93 81       	ldd	r25, Z+3	; 0x03
    454c:	26 95       	lsr	r18
    454e:	29 23       	and	r18, r25
    4550:	a0 81       	ld	r26, Z
    4552:	b1 81       	ldd	r27, Z+1	; 0x01
    4554:	a2 0f       	add	r26, r18
    4556:	b1 1d       	adc	r27, r1
    4558:	6c 93       	st	X, r22
    455a:	9f 5f       	subi	r25, 0xFF	; 255
    455c:	25 81       	ldd	r18, Z+5	; 0x05
    455e:	92 23       	and	r25, r18
    4560:	93 83       	std	Z+3, r25	; 0x03
    4562:	e8 81       	ld	r30, Y
    4564:	f9 81       	ldd	r31, Y+1	; 0x01
    4566:	35 97       	sbiw	r30, 0x05	; 5
    4568:	80 81       	ld	r24, Z
    456a:	80 62       	ori	r24, 0x20	; 32
    456c:	80 83       	st	Z, r24
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	01 c0       	rjmp	.+2      	; 0x4574 <serial_send_byte+0x44>
    4572:	82 e0       	ldi	r24, 0x02	; 2
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <serial_send_bytes>:
    457a:	ef 92       	push	r14
    457c:	ff 92       	push	r15
    457e:	0f 93       	push	r16
    4580:	1f 93       	push	r17
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	7c 01       	movw	r14, r24
    4588:	dc 01       	movw	r26, r24
    458a:	12 96       	adiw	r26, 0x02	; 2
    458c:	ed 91       	ld	r30, X+
    458e:	fc 91       	ld	r31, X
    4590:	13 97       	sbiw	r26, 0x03	; 3
    4592:	93 81       	ldd	r25, Z+3	; 0x03
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	98 1b       	sub	r25, r24
    4598:	85 81       	ldd	r24, Z+5	; 0x05
    459a:	98 23       	and	r25, r24
    459c:	84 81       	ldd	r24, Z+4	; 0x04
    459e:	89 1b       	sub	r24, r25
    45a0:	86 17       	cp	r24, r22
    45a2:	98 f1       	brcs	.+102    	; 0x460a <serial_send_bytes+0x90>
    45a4:	66 23       	and	r22, r22
    45a6:	41 f1       	breq	.+80     	; 0x45f8 <serial_send_bytes+0x7e>
    45a8:	84 2f       	mov	r24, r20
    45aa:	95 2f       	mov	r25, r21
    45ac:	dc 01       	movw	r26, r24
    45ae:	61 50       	subi	r22, 0x01	; 1
    45b0:	46 2f       	mov	r20, r22
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	4f 5f       	subi	r20, 0xFF	; 255
    45b6:	5f 4f       	sbci	r21, 0xFF	; 255
    45b8:	48 0f       	add	r20, r24
    45ba:	59 1f       	adc	r21, r25
    45bc:	e7 01       	movw	r28, r14
    45be:	ea 81       	ldd	r30, Y+2	; 0x02
    45c0:	fb 81       	ldd	r31, Y+3	; 0x03
    45c2:	93 81       	ldd	r25, Z+3	; 0x03
    45c4:	82 81       	ldd	r24, Z+2	; 0x02
    45c6:	25 81       	ldd	r18, Z+5	; 0x05
    45c8:	98 1b       	sub	r25, r24
    45ca:	92 23       	and	r25, r18
    45cc:	84 81       	ldd	r24, Z+4	; 0x04
    45ce:	98 17       	cp	r25, r24
    45d0:	79 f0       	breq	.+30     	; 0x45f0 <serial_send_bytes+0x76>
    45d2:	8c 91       	ld	r24, X
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	26 95       	lsr	r18
    45d8:	29 23       	and	r18, r25
    45da:	60 81       	ld	r22, Z
    45dc:	71 81       	ldd	r23, Z+1	; 0x01
    45de:	8b 01       	movw	r16, r22
    45e0:	02 0f       	add	r16, r18
    45e2:	11 1d       	adc	r17, r1
    45e4:	e8 01       	movw	r28, r16
    45e6:	88 83       	st	Y, r24
    45e8:	9f 5f       	subi	r25, 0xFF	; 255
    45ea:	85 81       	ldd	r24, Z+5	; 0x05
    45ec:	98 23       	and	r25, r24
    45ee:	93 83       	std	Z+3, r25	; 0x03
    45f0:	11 96       	adiw	r26, 0x01	; 1
    45f2:	a4 17       	cp	r26, r20
    45f4:	b5 07       	cpc	r27, r21
    45f6:	11 f7       	brne	.-60     	; 0x45bc <serial_send_bytes+0x42>
    45f8:	d7 01       	movw	r26, r14
    45fa:	ed 91       	ld	r30, X+
    45fc:	fc 91       	ld	r31, X
    45fe:	35 97       	sbiw	r30, 0x05	; 5
    4600:	80 81       	ld	r24, Z
    4602:	80 62       	ori	r24, 0x20	; 32
    4604:	80 83       	st	Z, r24
    4606:	80 e0       	ldi	r24, 0x00	; 0
    4608:	01 c0       	rjmp	.+2      	; 0x460c <serial_send_bytes+0x92>
    460a:	82 e0       	ldi	r24, 0x02	; 2
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	ff 90       	pop	r15
    4616:	ef 90       	pop	r14
    4618:	08 95       	ret

0000461a <serial_get_byte>:
    461a:	dc 01       	movw	r26, r24
    461c:	14 96       	adiw	r26, 0x04	; 4
    461e:	ed 91       	ld	r30, X+
    4620:	fc 91       	ld	r31, X
    4622:	15 97       	sbiw	r26, 0x05	; 5
    4624:	93 81       	ldd	r25, Z+3	; 0x03
    4626:	82 81       	ldd	r24, Z+2	; 0x02
    4628:	98 17       	cp	r25, r24
    462a:	89 f0       	breq	.+34     	; 0x464e <serial_get_byte+0x34>
    462c:	92 81       	ldd	r25, Z+2	; 0x02
    462e:	85 81       	ldd	r24, Z+5	; 0x05
    4630:	86 95       	lsr	r24
    4632:	89 23       	and	r24, r25
    4634:	a0 81       	ld	r26, Z
    4636:	b1 81       	ldd	r27, Z+1	; 0x01
    4638:	a8 0f       	add	r26, r24
    463a:	b1 1d       	adc	r27, r1
    463c:	8c 91       	ld	r24, X
    463e:	db 01       	movw	r26, r22
    4640:	8c 93       	st	X, r24
    4642:	9f 5f       	subi	r25, 0xFF	; 255
    4644:	85 81       	ldd	r24, Z+5	; 0x05
    4646:	98 23       	and	r25, r24
    4648:	92 83       	std	Z+2, r25	; 0x02
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	08 95       	ret
    464e:	83 e0       	ldi	r24, 0x03	; 3
    4650:	08 95       	ret

00004652 <__vector_25>:
    4652:	1f 92       	push	r1
    4654:	0f 92       	push	r0
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	0f 92       	push	r0
    465a:	11 24       	eor	r1, r1
    465c:	0b b6       	in	r0, 0x3b	; 59
    465e:	0f 92       	push	r0
    4660:	2f 93       	push	r18
    4662:	3f 93       	push	r19
    4664:	4f 93       	push	r20
    4666:	5f 93       	push	r21
    4668:	6f 93       	push	r22
    466a:	7f 93       	push	r23
    466c:	8f 93       	push	r24
    466e:	9f 93       	push	r25
    4670:	af 93       	push	r26
    4672:	bf 93       	push	r27
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	ef 93       	push	r30
    467a:	ff 93       	push	r31
    467c:	a0 91 a7 0b 	lds	r26, 0x0BA7	; 0x800ba7 <_ser_handle>
    4680:	b0 91 a8 0b 	lds	r27, 0x0BA8	; 0x800ba8 <_ser_handle+0x1>
    4684:	10 97       	sbiw	r26, 0x00	; 0
    4686:	11 f1       	breq	.+68     	; 0x46cc <__vector_25+0x7a>
    4688:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    468c:	14 96       	adiw	r26, 0x04	; 4
    468e:	ed 91       	ld	r30, X+
    4690:	fc 91       	ld	r31, X
    4692:	15 97       	sbiw	r26, 0x05	; 5
    4694:	93 81       	ldd	r25, Z+3	; 0x03
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	25 81       	ldd	r18, Z+5	; 0x05
    469a:	98 1b       	sub	r25, r24
    469c:	92 23       	and	r25, r18
    469e:	84 81       	ldd	r24, Z+4	; 0x04
    46a0:	98 17       	cp	r25, r24
    46a2:	61 f0       	breq	.+24     	; 0x46bc <__vector_25+0x6a>
    46a4:	83 81       	ldd	r24, Z+3	; 0x03
    46a6:	26 95       	lsr	r18
    46a8:	28 23       	and	r18, r24
    46aa:	c0 81       	ld	r28, Z
    46ac:	d1 81       	ldd	r29, Z+1	; 0x01
    46ae:	c2 0f       	add	r28, r18
    46b0:	d1 1d       	adc	r29, r1
    46b2:	68 83       	st	Y, r22
    46b4:	8f 5f       	subi	r24, 0xFF	; 255
    46b6:	95 81       	ldd	r25, Z+5	; 0x05
    46b8:	89 23       	and	r24, r25
    46ba:	83 83       	std	Z+3, r24	; 0x03
    46bc:	16 96       	adiw	r26, 0x06	; 6
    46be:	ed 91       	ld	r30, X+
    46c0:	fc 91       	ld	r31, X
    46c2:	17 97       	sbiw	r26, 0x07	; 7
    46c4:	30 97       	sbiw	r30, 0x00	; 0
    46c6:	11 f0       	breq	.+4      	; 0x46cc <__vector_25+0x7a>
    46c8:	cd 01       	movw	r24, r26
    46ca:	19 95       	eicall
    46cc:	ff 91       	pop	r31
    46ce:	ef 91       	pop	r30
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	bf 91       	pop	r27
    46d6:	af 91       	pop	r26
    46d8:	9f 91       	pop	r25
    46da:	8f 91       	pop	r24
    46dc:	7f 91       	pop	r23
    46de:	6f 91       	pop	r22
    46e0:	5f 91       	pop	r21
    46e2:	4f 91       	pop	r20
    46e4:	3f 91       	pop	r19
    46e6:	2f 91       	pop	r18
    46e8:	0f 90       	pop	r0
    46ea:	0b be       	out	0x3b, r0	; 59
    46ec:	0f 90       	pop	r0
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	0f 90       	pop	r0
    46f2:	1f 90       	pop	r1
    46f4:	18 95       	reti

000046f6 <__vector_26>:
    46f6:	1f 92       	push	r1
    46f8:	0f 92       	push	r0
    46fa:	0f b6       	in	r0, 0x3f	; 63
    46fc:	0f 92       	push	r0
    46fe:	11 24       	eor	r1, r1
    4700:	0b b6       	in	r0, 0x3b	; 59
    4702:	0f 92       	push	r0
    4704:	2f 93       	push	r18
    4706:	8f 93       	push	r24
    4708:	9f 93       	push	r25
    470a:	af 93       	push	r26
    470c:	bf 93       	push	r27
    470e:	ef 93       	push	r30
    4710:	ff 93       	push	r31
    4712:	e0 91 a7 0b 	lds	r30, 0x0BA7	; 0x800ba7 <_ser_handle>
    4716:	f0 91 a8 0b 	lds	r31, 0x0BA8	; 0x800ba8 <_ser_handle+0x1>
    471a:	30 97       	sbiw	r30, 0x00	; 0
    471c:	b9 f0       	breq	.+46     	; 0x474c <__vector_26+0x56>
    471e:	02 80       	ldd	r0, Z+2	; 0x02
    4720:	f3 81       	ldd	r31, Z+3	; 0x03
    4722:	e0 2d       	mov	r30, r0
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	82 81       	ldd	r24, Z+2	; 0x02
    4728:	98 17       	cp	r25, r24
    472a:	b1 f0       	breq	.+44     	; 0x4758 <__vector_26+0x62>
    472c:	92 81       	ldd	r25, Z+2	; 0x02
    472e:	85 81       	ldd	r24, Z+5	; 0x05
    4730:	28 2f       	mov	r18, r24
    4732:	26 95       	lsr	r18
    4734:	29 23       	and	r18, r25
    4736:	a0 81       	ld	r26, Z
    4738:	b1 81       	ldd	r27, Z+1	; 0x01
    473a:	a2 0f       	add	r26, r18
    473c:	b1 1d       	adc	r27, r1
    473e:	2c 91       	ld	r18, X
    4740:	9f 5f       	subi	r25, 0xFF	; 255
    4742:	89 23       	and	r24, r25
    4744:	82 83       	std	Z+2, r24	; 0x02
    4746:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    474a:	0b c0       	rjmp	.+22     	; 0x4762 <__vector_26+0x6c>
    474c:	e1 ec       	ldi	r30, 0xC1	; 193
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	80 81       	ld	r24, Z
    4752:	8f 7d       	andi	r24, 0xDF	; 223
    4754:	80 83       	st	Z, r24
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <__vector_26+0x6c>
    4758:	e1 ec       	ldi	r30, 0xC1	; 193
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	80 81       	ld	r24, Z
    475e:	8f 7d       	andi	r24, 0xDF	; 223
    4760:	80 83       	st	Z, r24
    4762:	ff 91       	pop	r31
    4764:	ef 91       	pop	r30
    4766:	bf 91       	pop	r27
    4768:	af 91       	pop	r26
    476a:	9f 91       	pop	r25
    476c:	8f 91       	pop	r24
    476e:	2f 91       	pop	r18
    4770:	0f 90       	pop	r0
    4772:	0b be       	out	0x3b, r0	; 59
    4774:	0f 90       	pop	r0
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	0f 90       	pop	r0
    477a:	1f 90       	pop	r1
    477c:	18 95       	reti

0000477e <__vector_36>:
    477e:	1f 92       	push	r1
    4780:	0f 92       	push	r0
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	0f 92       	push	r0
    4786:	11 24       	eor	r1, r1
    4788:	0b b6       	in	r0, 0x3b	; 59
    478a:	0f 92       	push	r0
    478c:	2f 93       	push	r18
    478e:	3f 93       	push	r19
    4790:	4f 93       	push	r20
    4792:	5f 93       	push	r21
    4794:	6f 93       	push	r22
    4796:	7f 93       	push	r23
    4798:	8f 93       	push	r24
    479a:	9f 93       	push	r25
    479c:	af 93       	push	r26
    479e:	bf 93       	push	r27
    47a0:	cf 93       	push	r28
    47a2:	df 93       	push	r29
    47a4:	ef 93       	push	r30
    47a6:	ff 93       	push	r31
    47a8:	a0 91 a9 0b 	lds	r26, 0x0BA9	; 0x800ba9 <_ser_handle+0x2>
    47ac:	b0 91 aa 0b 	lds	r27, 0x0BAA	; 0x800baa <_ser_handle+0x3>
    47b0:	10 97       	sbiw	r26, 0x00	; 0
    47b2:	11 f1       	breq	.+68     	; 0x47f8 <__vector_36+0x7a>
    47b4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    47b8:	14 96       	adiw	r26, 0x04	; 4
    47ba:	ed 91       	ld	r30, X+
    47bc:	fc 91       	ld	r31, X
    47be:	15 97       	sbiw	r26, 0x05	; 5
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	82 81       	ldd	r24, Z+2	; 0x02
    47c4:	25 81       	ldd	r18, Z+5	; 0x05
    47c6:	98 1b       	sub	r25, r24
    47c8:	92 23       	and	r25, r18
    47ca:	84 81       	ldd	r24, Z+4	; 0x04
    47cc:	98 17       	cp	r25, r24
    47ce:	61 f0       	breq	.+24     	; 0x47e8 <__vector_36+0x6a>
    47d0:	83 81       	ldd	r24, Z+3	; 0x03
    47d2:	26 95       	lsr	r18
    47d4:	28 23       	and	r18, r24
    47d6:	c0 81       	ld	r28, Z
    47d8:	d1 81       	ldd	r29, Z+1	; 0x01
    47da:	c2 0f       	add	r28, r18
    47dc:	d1 1d       	adc	r29, r1
    47de:	68 83       	st	Y, r22
    47e0:	8f 5f       	subi	r24, 0xFF	; 255
    47e2:	95 81       	ldd	r25, Z+5	; 0x05
    47e4:	89 23       	and	r24, r25
    47e6:	83 83       	std	Z+3, r24	; 0x03
    47e8:	16 96       	adiw	r26, 0x06	; 6
    47ea:	ed 91       	ld	r30, X+
    47ec:	fc 91       	ld	r31, X
    47ee:	17 97       	sbiw	r26, 0x07	; 7
    47f0:	30 97       	sbiw	r30, 0x00	; 0
    47f2:	11 f0       	breq	.+4      	; 0x47f8 <__vector_36+0x7a>
    47f4:	cd 01       	movw	r24, r26
    47f6:	19 95       	eicall
    47f8:	ff 91       	pop	r31
    47fa:	ef 91       	pop	r30
    47fc:	df 91       	pop	r29
    47fe:	cf 91       	pop	r28
    4800:	bf 91       	pop	r27
    4802:	af 91       	pop	r26
    4804:	9f 91       	pop	r25
    4806:	8f 91       	pop	r24
    4808:	7f 91       	pop	r23
    480a:	6f 91       	pop	r22
    480c:	5f 91       	pop	r21
    480e:	4f 91       	pop	r20
    4810:	3f 91       	pop	r19
    4812:	2f 91       	pop	r18
    4814:	0f 90       	pop	r0
    4816:	0b be       	out	0x3b, r0	; 59
    4818:	0f 90       	pop	r0
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	0f 90       	pop	r0
    481e:	1f 90       	pop	r1
    4820:	18 95       	reti

00004822 <__vector_37>:
    4822:	1f 92       	push	r1
    4824:	0f 92       	push	r0
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	0f 92       	push	r0
    482a:	11 24       	eor	r1, r1
    482c:	0b b6       	in	r0, 0x3b	; 59
    482e:	0f 92       	push	r0
    4830:	2f 93       	push	r18
    4832:	8f 93       	push	r24
    4834:	9f 93       	push	r25
    4836:	af 93       	push	r26
    4838:	bf 93       	push	r27
    483a:	ef 93       	push	r30
    483c:	ff 93       	push	r31
    483e:	e0 91 a9 0b 	lds	r30, 0x0BA9	; 0x800ba9 <_ser_handle+0x2>
    4842:	f0 91 aa 0b 	lds	r31, 0x0BAA	; 0x800baa <_ser_handle+0x3>
    4846:	30 97       	sbiw	r30, 0x00	; 0
    4848:	b9 f0       	breq	.+46     	; 0x4878 <__vector_37+0x56>
    484a:	02 80       	ldd	r0, Z+2	; 0x02
    484c:	f3 81       	ldd	r31, Z+3	; 0x03
    484e:	e0 2d       	mov	r30, r0
    4850:	93 81       	ldd	r25, Z+3	; 0x03
    4852:	82 81       	ldd	r24, Z+2	; 0x02
    4854:	98 17       	cp	r25, r24
    4856:	b1 f0       	breq	.+44     	; 0x4884 <__vector_37+0x62>
    4858:	92 81       	ldd	r25, Z+2	; 0x02
    485a:	85 81       	ldd	r24, Z+5	; 0x05
    485c:	28 2f       	mov	r18, r24
    485e:	26 95       	lsr	r18
    4860:	29 23       	and	r18, r25
    4862:	a0 81       	ld	r26, Z
    4864:	b1 81       	ldd	r27, Z+1	; 0x01
    4866:	a2 0f       	add	r26, r18
    4868:	b1 1d       	adc	r27, r1
    486a:	2c 91       	ld	r18, X
    486c:	9f 5f       	subi	r25, 0xFF	; 255
    486e:	89 23       	and	r24, r25
    4870:	82 83       	std	Z+2, r24	; 0x02
    4872:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4876:	0b c0       	rjmp	.+22     	; 0x488e <__vector_37+0x6c>
    4878:	e9 ec       	ldi	r30, 0xC9	; 201
    487a:	f0 e0       	ldi	r31, 0x00	; 0
    487c:	80 81       	ld	r24, Z
    487e:	8f 7d       	andi	r24, 0xDF	; 223
    4880:	80 83       	st	Z, r24
    4882:	05 c0       	rjmp	.+10     	; 0x488e <__vector_37+0x6c>
    4884:	e9 ec       	ldi	r30, 0xC9	; 201
    4886:	f0 e0       	ldi	r31, 0x00	; 0
    4888:	80 81       	ld	r24, Z
    488a:	8f 7d       	andi	r24, 0xDF	; 223
    488c:	80 83       	st	Z, r24
    488e:	ff 91       	pop	r31
    4890:	ef 91       	pop	r30
    4892:	bf 91       	pop	r27
    4894:	af 91       	pop	r26
    4896:	9f 91       	pop	r25
    4898:	8f 91       	pop	r24
    489a:	2f 91       	pop	r18
    489c:	0f 90       	pop	r0
    489e:	0b be       	out	0x3b, r0	; 59
    48a0:	0f 90       	pop	r0
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	0f 90       	pop	r0
    48a6:	1f 90       	pop	r1
    48a8:	18 95       	reti

000048aa <__vector_51>:
    48aa:	1f 92       	push	r1
    48ac:	0f 92       	push	r0
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	0f 92       	push	r0
    48b2:	11 24       	eor	r1, r1
    48b4:	0b b6       	in	r0, 0x3b	; 59
    48b6:	0f 92       	push	r0
    48b8:	2f 93       	push	r18
    48ba:	3f 93       	push	r19
    48bc:	4f 93       	push	r20
    48be:	5f 93       	push	r21
    48c0:	6f 93       	push	r22
    48c2:	7f 93       	push	r23
    48c4:	8f 93       	push	r24
    48c6:	9f 93       	push	r25
    48c8:	af 93       	push	r26
    48ca:	bf 93       	push	r27
    48cc:	cf 93       	push	r28
    48ce:	df 93       	push	r29
    48d0:	ef 93       	push	r30
    48d2:	ff 93       	push	r31
    48d4:	a0 91 ab 0b 	lds	r26, 0x0BAB	; 0x800bab <_ser_handle+0x4>
    48d8:	b0 91 ac 0b 	lds	r27, 0x0BAC	; 0x800bac <_ser_handle+0x5>
    48dc:	10 97       	sbiw	r26, 0x00	; 0
    48de:	11 f1       	breq	.+68     	; 0x4924 <__vector_51+0x7a>
    48e0:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    48e4:	14 96       	adiw	r26, 0x04	; 4
    48e6:	ed 91       	ld	r30, X+
    48e8:	fc 91       	ld	r31, X
    48ea:	15 97       	sbiw	r26, 0x05	; 5
    48ec:	93 81       	ldd	r25, Z+3	; 0x03
    48ee:	82 81       	ldd	r24, Z+2	; 0x02
    48f0:	25 81       	ldd	r18, Z+5	; 0x05
    48f2:	98 1b       	sub	r25, r24
    48f4:	92 23       	and	r25, r18
    48f6:	84 81       	ldd	r24, Z+4	; 0x04
    48f8:	98 17       	cp	r25, r24
    48fa:	61 f0       	breq	.+24     	; 0x4914 <__vector_51+0x6a>
    48fc:	83 81       	ldd	r24, Z+3	; 0x03
    48fe:	26 95       	lsr	r18
    4900:	28 23       	and	r18, r24
    4902:	c0 81       	ld	r28, Z
    4904:	d1 81       	ldd	r29, Z+1	; 0x01
    4906:	c2 0f       	add	r28, r18
    4908:	d1 1d       	adc	r29, r1
    490a:	68 83       	st	Y, r22
    490c:	8f 5f       	subi	r24, 0xFF	; 255
    490e:	95 81       	ldd	r25, Z+5	; 0x05
    4910:	89 23       	and	r24, r25
    4912:	83 83       	std	Z+3, r24	; 0x03
    4914:	16 96       	adiw	r26, 0x06	; 6
    4916:	ed 91       	ld	r30, X+
    4918:	fc 91       	ld	r31, X
    491a:	17 97       	sbiw	r26, 0x07	; 7
    491c:	30 97       	sbiw	r30, 0x00	; 0
    491e:	11 f0       	breq	.+4      	; 0x4924 <__vector_51+0x7a>
    4920:	cd 01       	movw	r24, r26
    4922:	19 95       	eicall
    4924:	ff 91       	pop	r31
    4926:	ef 91       	pop	r30
    4928:	df 91       	pop	r29
    492a:	cf 91       	pop	r28
    492c:	bf 91       	pop	r27
    492e:	af 91       	pop	r26
    4930:	9f 91       	pop	r25
    4932:	8f 91       	pop	r24
    4934:	7f 91       	pop	r23
    4936:	6f 91       	pop	r22
    4938:	5f 91       	pop	r21
    493a:	4f 91       	pop	r20
    493c:	3f 91       	pop	r19
    493e:	2f 91       	pop	r18
    4940:	0f 90       	pop	r0
    4942:	0b be       	out	0x3b, r0	; 59
    4944:	0f 90       	pop	r0
    4946:	0f be       	out	0x3f, r0	; 63
    4948:	0f 90       	pop	r0
    494a:	1f 90       	pop	r1
    494c:	18 95       	reti

0000494e <__vector_52>:
    494e:	1f 92       	push	r1
    4950:	0f 92       	push	r0
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	0f 92       	push	r0
    4956:	11 24       	eor	r1, r1
    4958:	0b b6       	in	r0, 0x3b	; 59
    495a:	0f 92       	push	r0
    495c:	2f 93       	push	r18
    495e:	8f 93       	push	r24
    4960:	9f 93       	push	r25
    4962:	af 93       	push	r26
    4964:	bf 93       	push	r27
    4966:	ef 93       	push	r30
    4968:	ff 93       	push	r31
    496a:	e0 91 ab 0b 	lds	r30, 0x0BAB	; 0x800bab <_ser_handle+0x4>
    496e:	f0 91 ac 0b 	lds	r31, 0x0BAC	; 0x800bac <_ser_handle+0x5>
    4972:	30 97       	sbiw	r30, 0x00	; 0
    4974:	b9 f0       	breq	.+46     	; 0x49a4 <__vector_52+0x56>
    4976:	02 80       	ldd	r0, Z+2	; 0x02
    4978:	f3 81       	ldd	r31, Z+3	; 0x03
    497a:	e0 2d       	mov	r30, r0
    497c:	93 81       	ldd	r25, Z+3	; 0x03
    497e:	82 81       	ldd	r24, Z+2	; 0x02
    4980:	98 17       	cp	r25, r24
    4982:	b1 f0       	breq	.+44     	; 0x49b0 <__vector_52+0x62>
    4984:	92 81       	ldd	r25, Z+2	; 0x02
    4986:	85 81       	ldd	r24, Z+5	; 0x05
    4988:	28 2f       	mov	r18, r24
    498a:	26 95       	lsr	r18
    498c:	29 23       	and	r18, r25
    498e:	a0 81       	ld	r26, Z
    4990:	b1 81       	ldd	r27, Z+1	; 0x01
    4992:	a2 0f       	add	r26, r18
    4994:	b1 1d       	adc	r27, r1
    4996:	2c 91       	ld	r18, X
    4998:	9f 5f       	subi	r25, 0xFF	; 255
    499a:	89 23       	and	r24, r25
    499c:	82 83       	std	Z+2, r24	; 0x02
    499e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    49a2:	0b c0       	rjmp	.+22     	; 0x49ba <__vector_52+0x6c>
    49a4:	e1 ed       	ldi	r30, 0xD1	; 209
    49a6:	f0 e0       	ldi	r31, 0x00	; 0
    49a8:	80 81       	ld	r24, Z
    49aa:	8f 7d       	andi	r24, 0xDF	; 223
    49ac:	80 83       	st	Z, r24
    49ae:	05 c0       	rjmp	.+10     	; 0x49ba <__vector_52+0x6c>
    49b0:	e1 ed       	ldi	r30, 0xD1	; 209
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z
    49b6:	8f 7d       	andi	r24, 0xDF	; 223
    49b8:	80 83       	st	Z, r24
    49ba:	ff 91       	pop	r31
    49bc:	ef 91       	pop	r30
    49be:	bf 91       	pop	r27
    49c0:	af 91       	pop	r26
    49c2:	9f 91       	pop	r25
    49c4:	8f 91       	pop	r24
    49c6:	2f 91       	pop	r18
    49c8:	0f 90       	pop	r0
    49ca:	0b be       	out	0x3b, r0	; 59
    49cc:	0f 90       	pop	r0
    49ce:	0f be       	out	0x3f, r0	; 63
    49d0:	0f 90       	pop	r0
    49d2:	1f 90       	pop	r1
    49d4:	18 95       	reti

000049d6 <__vector_54>:
    49d6:	1f 92       	push	r1
    49d8:	0f 92       	push	r0
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	0f 92       	push	r0
    49de:	11 24       	eor	r1, r1
    49e0:	0b b6       	in	r0, 0x3b	; 59
    49e2:	0f 92       	push	r0
    49e4:	2f 93       	push	r18
    49e6:	3f 93       	push	r19
    49e8:	4f 93       	push	r20
    49ea:	5f 93       	push	r21
    49ec:	6f 93       	push	r22
    49ee:	7f 93       	push	r23
    49f0:	8f 93       	push	r24
    49f2:	9f 93       	push	r25
    49f4:	af 93       	push	r26
    49f6:	bf 93       	push	r27
    49f8:	cf 93       	push	r28
    49fa:	df 93       	push	r29
    49fc:	ef 93       	push	r30
    49fe:	ff 93       	push	r31
    4a00:	a0 91 ad 0b 	lds	r26, 0x0BAD	; 0x800bad <_ser_handle+0x6>
    4a04:	b0 91 ae 0b 	lds	r27, 0x0BAE	; 0x800bae <_ser_handle+0x7>
    4a08:	10 97       	sbiw	r26, 0x00	; 0
    4a0a:	11 f1       	breq	.+68     	; 0x4a50 <__vector_54+0x7a>
    4a0c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4a10:	14 96       	adiw	r26, 0x04	; 4
    4a12:	ed 91       	ld	r30, X+
    4a14:	fc 91       	ld	r31, X
    4a16:	15 97       	sbiw	r26, 0x05	; 5
    4a18:	93 81       	ldd	r25, Z+3	; 0x03
    4a1a:	82 81       	ldd	r24, Z+2	; 0x02
    4a1c:	25 81       	ldd	r18, Z+5	; 0x05
    4a1e:	98 1b       	sub	r25, r24
    4a20:	92 23       	and	r25, r18
    4a22:	84 81       	ldd	r24, Z+4	; 0x04
    4a24:	98 17       	cp	r25, r24
    4a26:	61 f0       	breq	.+24     	; 0x4a40 <__vector_54+0x6a>
    4a28:	83 81       	ldd	r24, Z+3	; 0x03
    4a2a:	26 95       	lsr	r18
    4a2c:	28 23       	and	r18, r24
    4a2e:	c0 81       	ld	r28, Z
    4a30:	d1 81       	ldd	r29, Z+1	; 0x01
    4a32:	c2 0f       	add	r28, r18
    4a34:	d1 1d       	adc	r29, r1
    4a36:	68 83       	st	Y, r22
    4a38:	8f 5f       	subi	r24, 0xFF	; 255
    4a3a:	95 81       	ldd	r25, Z+5	; 0x05
    4a3c:	89 23       	and	r24, r25
    4a3e:	83 83       	std	Z+3, r24	; 0x03
    4a40:	16 96       	adiw	r26, 0x06	; 6
    4a42:	ed 91       	ld	r30, X+
    4a44:	fc 91       	ld	r31, X
    4a46:	17 97       	sbiw	r26, 0x07	; 7
    4a48:	30 97       	sbiw	r30, 0x00	; 0
    4a4a:	11 f0       	breq	.+4      	; 0x4a50 <__vector_54+0x7a>
    4a4c:	cd 01       	movw	r24, r26
    4a4e:	19 95       	eicall
    4a50:	ff 91       	pop	r31
    4a52:	ef 91       	pop	r30
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	bf 91       	pop	r27
    4a5a:	af 91       	pop	r26
    4a5c:	9f 91       	pop	r25
    4a5e:	8f 91       	pop	r24
    4a60:	7f 91       	pop	r23
    4a62:	6f 91       	pop	r22
    4a64:	5f 91       	pop	r21
    4a66:	4f 91       	pop	r20
    4a68:	3f 91       	pop	r19
    4a6a:	2f 91       	pop	r18
    4a6c:	0f 90       	pop	r0
    4a6e:	0b be       	out	0x3b, r0	; 59
    4a70:	0f 90       	pop	r0
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	0f 90       	pop	r0
    4a76:	1f 90       	pop	r1
    4a78:	18 95       	reti

00004a7a <__vector_55>:
    4a7a:	1f 92       	push	r1
    4a7c:	0f 92       	push	r0
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	0f 92       	push	r0
    4a82:	11 24       	eor	r1, r1
    4a84:	0b b6       	in	r0, 0x3b	; 59
    4a86:	0f 92       	push	r0
    4a88:	2f 93       	push	r18
    4a8a:	8f 93       	push	r24
    4a8c:	9f 93       	push	r25
    4a8e:	af 93       	push	r26
    4a90:	bf 93       	push	r27
    4a92:	ef 93       	push	r30
    4a94:	ff 93       	push	r31
    4a96:	e0 91 ad 0b 	lds	r30, 0x0BAD	; 0x800bad <_ser_handle+0x6>
    4a9a:	f0 91 ae 0b 	lds	r31, 0x0BAE	; 0x800bae <_ser_handle+0x7>
    4a9e:	30 97       	sbiw	r30, 0x00	; 0
    4aa0:	b9 f0       	breq	.+46     	; 0x4ad0 <__vector_55+0x56>
    4aa2:	02 80       	ldd	r0, Z+2	; 0x02
    4aa4:	f3 81       	ldd	r31, Z+3	; 0x03
    4aa6:	e0 2d       	mov	r30, r0
    4aa8:	93 81       	ldd	r25, Z+3	; 0x03
    4aaa:	82 81       	ldd	r24, Z+2	; 0x02
    4aac:	98 17       	cp	r25, r24
    4aae:	b1 f0       	breq	.+44     	; 0x4adc <__vector_55+0x62>
    4ab0:	92 81       	ldd	r25, Z+2	; 0x02
    4ab2:	85 81       	ldd	r24, Z+5	; 0x05
    4ab4:	28 2f       	mov	r18, r24
    4ab6:	26 95       	lsr	r18
    4ab8:	29 23       	and	r18, r25
    4aba:	a0 81       	ld	r26, Z
    4abc:	b1 81       	ldd	r27, Z+1	; 0x01
    4abe:	a2 0f       	add	r26, r18
    4ac0:	b1 1d       	adc	r27, r1
    4ac2:	2c 91       	ld	r18, X
    4ac4:	9f 5f       	subi	r25, 0xFF	; 255
    4ac6:	89 23       	and	r24, r25
    4ac8:	82 83       	std	Z+2, r24	; 0x02
    4aca:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4ace:	0b c0       	rjmp	.+22     	; 0x4ae6 <__vector_55+0x6c>
    4ad0:	e1 e3       	ldi	r30, 0x31	; 49
    4ad2:	f1 e0       	ldi	r31, 0x01	; 1
    4ad4:	80 81       	ld	r24, Z
    4ad6:	8f 7d       	andi	r24, 0xDF	; 223
    4ad8:	80 83       	st	Z, r24
    4ada:	05 c0       	rjmp	.+10     	; 0x4ae6 <__vector_55+0x6c>
    4adc:	e1 e3       	ldi	r30, 0x31	; 49
    4ade:	f1 e0       	ldi	r31, 0x01	; 1
    4ae0:	80 81       	ld	r24, Z
    4ae2:	8f 7d       	andi	r24, 0xDF	; 223
    4ae4:	80 83       	st	Z, r24
    4ae6:	ff 91       	pop	r31
    4ae8:	ef 91       	pop	r30
    4aea:	bf 91       	pop	r27
    4aec:	af 91       	pop	r26
    4aee:	9f 91       	pop	r25
    4af0:	8f 91       	pop	r24
    4af2:	2f 91       	pop	r18
    4af4:	0f 90       	pop	r0
    4af6:	0b be       	out	0x3b, r0	; 59
    4af8:	0f 90       	pop	r0
    4afa:	0f be       	out	0x3f, r0	; 63
    4afc:	0f 90       	pop	r0
    4afe:	1f 90       	pop	r1
    4b00:	18 95       	reti

00004b02 <usart_getchar>:
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	1f 92       	push	r1
    4b08:	cd b7       	in	r28, 0x3d	; 61
    4b0a:	de b7       	in	r29, 0x3e	; 62
    4b0c:	be 01       	movw	r22, r28
    4b0e:	6f 5f       	subi	r22, 0xFF	; 255
    4b10:	7f 4f       	sbci	r23, 0xFF	; 255
    4b12:	80 91 af 0b 	lds	r24, 0x0BAF	; 0x800baf <_com_serial_instance>
    4b16:	90 91 b0 0b 	lds	r25, 0x0BB0	; 0x800bb0 <_com_serial_instance+0x1>
    4b1a:	7f dd       	rcall	.-1282   	; 0x461a <serial_get_byte>
    4b1c:	81 11       	cpse	r24, r1
    4b1e:	f6 cf       	rjmp	.-20     	; 0x4b0c <usart_getchar+0xa>
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	0f 90       	pop	r0
    4b26:	df 91       	pop	r29
    4b28:	cf 91       	pop	r28
    4b2a:	08 95       	ret

00004b2c <usart_putchar>:
    4b2c:	68 2f       	mov	r22, r24
    4b2e:	80 91 af 0b 	lds	r24, 0x0BAF	; 0x800baf <_com_serial_instance>
    4b32:	90 91 b0 0b 	lds	r25, 0x0BB0	; 0x800bb0 <_com_serial_instance+0x1>
    4b36:	fc dc       	rcall	.-1544   	; 0x4530 <serial_send_byte>
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	08 95       	ret

00004b3e <stdioCreate>:
    4b3e:	8f 92       	push	r8
    4b40:	9f 92       	push	r9
    4b42:	af 92       	push	r10
    4b44:	cf 92       	push	r12
    4b46:	ef 92       	push	r14
    4b48:	0f 93       	push	r16
    4b4a:	81 2c       	mov	r8, r1
    4b4c:	91 2c       	mov	r9, r1
    4b4e:	68 94       	set
    4b50:	aa 24       	eor	r10, r10
    4b52:	a7 f8       	bld	r10, 7
    4b54:	68 94       	set
    4b56:	cc 24       	eor	r12, r12
    4b58:	c7 f8       	bld	r12, 7
    4b5a:	e1 2c       	mov	r14, r1
    4b5c:	00 e0       	ldi	r16, 0x00	; 0
    4b5e:	23 e0       	ldi	r18, 0x03	; 3
    4b60:	40 e0       	ldi	r20, 0x00	; 0
    4b62:	51 ee       	ldi	r21, 0xE1	; 225
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	70 e0       	ldi	r23, 0x00	; 0
    4b68:	4b dc       	rcall	.-1898   	; 0x4400 <serial_new_instance>
    4b6a:	90 93 b0 0b 	sts	0x0BB0, r25	; 0x800bb0 <_com_serial_instance+0x1>
    4b6e:	80 93 af 0b 	sts	0x0BAF, r24	; 0x800baf <_com_serial_instance>
    4b72:	ed ee       	ldi	r30, 0xED	; 237
    4b74:	fb e0       	ldi	r31, 0x0B	; 11
    4b76:	86 e1       	ldi	r24, 0x16	; 22
    4b78:	92 e0       	ldi	r25, 0x02	; 2
    4b7a:	91 83       	std	Z+1, r25	; 0x01
    4b7c:	80 83       	st	Z, r24
    4b7e:	93 83       	std	Z+3, r25	; 0x03
    4b80:	82 83       	std	Z+2, r24	; 0x02
    4b82:	0f 91       	pop	r16
    4b84:	ef 90       	pop	r14
    4b86:	cf 90       	pop	r12
    4b88:	af 90       	pop	r10
    4b8a:	9f 90       	pop	r9
    4b8c:	8f 90       	pop	r8
    4b8e:	08 95       	ret

00004b90 <_initTwiInterface>:
    4b90:	80 91 bf 0b 	lds	r24, 0x0BBF	; 0x800bbf <_twiIsInitiated>
    4b94:	81 11       	cpse	r24, r1
    4b96:	0c c0       	rjmp	.+24     	; 0x4bb0 <_initTwiInterface+0x20>
    4b98:	8c e0       	ldi	r24, 0x0C	; 12
    4b9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4b9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ba0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4ba4:	84 e0       	ldi	r24, 0x04	; 4
    4ba6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <_twiIsInitiated>
    4bb0:	08 95       	ret

00004bb2 <twiCreate>:
    4bb2:	af 92       	push	r10
    4bb4:	bf 92       	push	r11
    4bb6:	cf 92       	push	r12
    4bb8:	df 92       	push	r13
    4bba:	ef 92       	push	r14
    4bbc:	ff 92       	push	r15
    4bbe:	0f 93       	push	r16
    4bc0:	1f 93       	push	r17
    4bc2:	cf 93       	push	r28
    4bc4:	df 93       	push	r29
    4bc6:	a8 2e       	mov	r10, r24
    4bc8:	b6 2e       	mov	r11, r22
    4bca:	69 01       	movw	r12, r18
    4bcc:	7a 01       	movw	r14, r20
    4bce:	84 e0       	ldi	r24, 0x04	; 4
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	f6 d2       	rcall	.+1516   	; 0x51c0 <malloc>
    4bd4:	ec 01       	movw	r28, r24
    4bd6:	89 2b       	or	r24, r25
    4bd8:	61 f1       	breq	.+88     	; 0x4c32 <twiCreate+0x80>
    4bda:	a8 82       	st	Y, r10
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	b8 12       	cpse	r11, r24
    4be0:	12 c0       	rjmp	.+36     	; 0x4c06 <twiCreate+0x54>
    4be2:	c7 01       	movw	r24, r14
    4be4:	b6 01       	movw	r22, r12
    4be6:	20 ea       	ldi	r18, 0xA0	; 160
    4be8:	36 e8       	ldi	r19, 0x86	; 134
    4bea:	41 e0       	ldi	r20, 0x01	; 1
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	a4 d2       	rcall	.+1352   	; 0x5138 <__udivmodsi4>
    4bf0:	da 01       	movw	r26, r20
    4bf2:	c9 01       	movw	r24, r18
    4bf4:	40 97       	sbiw	r24, 0x10	; 16
    4bf6:	a1 09       	sbc	r26, r1
    4bf8:	b1 09       	sbc	r27, r1
    4bfa:	b6 95       	lsr	r27
    4bfc:	a7 95       	ror	r26
    4bfe:	97 95       	ror	r25
    4c00:	87 95       	ror	r24
    4c02:	89 83       	std	Y+1, r24	; 0x01
    4c04:	11 c0       	rjmp	.+34     	; 0x4c28 <twiCreate+0x76>
    4c06:	c7 01       	movw	r24, r14
    4c08:	b6 01       	movw	r22, r12
    4c0a:	20 e8       	ldi	r18, 0x80	; 128
    4c0c:	3a e1       	ldi	r19, 0x1A	; 26
    4c0e:	46 e0       	ldi	r20, 0x06	; 6
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	92 d2       	rcall	.+1316   	; 0x5138 <__udivmodsi4>
    4c14:	da 01       	movw	r26, r20
    4c16:	c9 01       	movw	r24, r18
    4c18:	40 97       	sbiw	r24, 0x10	; 16
    4c1a:	a1 09       	sbc	r26, r1
    4c1c:	b1 09       	sbc	r27, r1
    4c1e:	b6 95       	lsr	r27
    4c20:	a7 95       	ror	r26
    4c22:	97 95       	ror	r25
    4c24:	87 95       	ror	r24
    4c26:	89 83       	std	Y+1, r24	; 0x01
    4c28:	1b 83       	std	Y+3, r17	; 0x03
    4c2a:	0a 83       	std	Y+2, r16	; 0x02
    4c2c:	8c 2f       	mov	r24, r28
    4c2e:	9d 2f       	mov	r25, r29
    4c30:	02 c0       	rjmp	.+4      	; 0x4c36 <twiCreate+0x84>
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	1f 91       	pop	r17
    4c3c:	0f 91       	pop	r16
    4c3e:	ff 90       	pop	r15
    4c40:	ef 90       	pop	r14
    4c42:	df 90       	pop	r13
    4c44:	cf 90       	pop	r12
    4c46:	bf 90       	pop	r11
    4c48:	af 90       	pop	r10
    4c4a:	08 95       	ret

00004c4c <twiIsBusy>:
    4c4c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c50:	81 70       	andi	r24, 0x01	; 1
    4c52:	08 95       	ret

00004c54 <twiTransmit>:
    4c54:	ff 92       	push	r15
    4c56:	0f 93       	push	r16
    4c58:	1f 93       	push	r17
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	00 97       	sbiw	r24, 0x00	; 0
    4c60:	d1 f1       	breq	.+116    	; 0x4cd6 <twiTransmit+0x82>
    4c62:	4a 30       	cpi	r20, 0x0A	; 10
    4c64:	d0 f5       	brcc	.+116    	; 0x4cda <twiTransmit+0x86>
    4c66:	f4 2e       	mov	r15, r20
    4c68:	8b 01       	movw	r16, r22
    4c6a:	ec 01       	movw	r28, r24
    4c6c:	ef df       	rcall	.-34     	; 0x4c4c <twiIsBusy>
    4c6e:	81 11       	cpse	r24, r1
    4c70:	36 c0       	rjmp	.+108    	; 0x4cde <twiTransmit+0x8a>
    4c72:	80 91 b2 0b 	lds	r24, 0x0BB2	; 0x800bb2 <_twiCurrentHandler>
    4c76:	90 91 b3 0b 	lds	r25, 0x0BB3	; 0x800bb3 <_twiCurrentHandler+0x1>
    4c7a:	c8 17       	cp	r28, r24
    4c7c:	d9 07       	cpc	r29, r25
    4c7e:	41 f0       	breq	.+16     	; 0x4c90 <twiTransmit+0x3c>
    4c80:	87 df       	rcall	.-242    	; 0x4b90 <_initTwiInterface>
    4c82:	89 81       	ldd	r24, Y+1	; 0x01
    4c84:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4c88:	d0 93 b3 0b 	sts	0x0BB3, r29	; 0x800bb3 <_twiCurrentHandler+0x1>
    4c8c:	c0 93 b2 0b 	sts	0x0BB2, r28	; 0x800bb2 <_twiCurrentHandler>
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	8f 0d       	add	r24, r15
    4c94:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <_twiMessageLen>
    4c98:	88 81       	ld	r24, Y
    4c9a:	88 0f       	add	r24, r24
    4c9c:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <_twiMessageBuffer>
    4ca0:	ff 20       	and	r15, r15
    4ca2:	89 f0       	breq	.+34     	; 0x4cc6 <twiTransmit+0x72>
    4ca4:	f8 01       	movw	r30, r16
    4ca6:	a6 eb       	ldi	r26, 0xB6	; 182
    4ca8:	bb e0       	ldi	r27, 0x0B	; 11
    4caa:	4f ef       	ldi	r20, 0xFF	; 255
    4cac:	4f 0d       	add	r20, r15
    4cae:	64 2f       	mov	r22, r20
    4cb0:	70 e0       	ldi	r23, 0x00	; 0
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	01 96       	adiw	r24, 0x01	; 1
    4cb6:	b8 01       	movw	r22, r16
    4cb8:	68 0f       	add	r22, r24
    4cba:	79 1f       	adc	r23, r25
    4cbc:	81 91       	ld	r24, Z+
    4cbe:	8d 93       	st	X+, r24
    4cc0:	e6 17       	cp	r30, r22
    4cc2:	f7 07       	cpc	r31, r23
    4cc4:	d9 f7       	brne	.-10     	; 0x4cbc <twiTransmit+0x68>
    4cc6:	88 ef       	ldi	r24, 0xF8	; 248
    4cc8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    4ccc:	85 ea       	ldi	r24, 0xA5	; 165
    4cce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4cd2:	84 e0       	ldi	r24, 0x04	; 4
    4cd4:	05 c0       	rjmp	.+10     	; 0x4ce0 <twiTransmit+0x8c>
    4cd6:	86 e0       	ldi	r24, 0x06	; 6
    4cd8:	03 c0       	rjmp	.+6      	; 0x4ce0 <twiTransmit+0x8c>
    4cda:	87 e0       	ldi	r24, 0x07	; 7
    4cdc:	01 c0       	rjmp	.+2      	; 0x4ce0 <twiTransmit+0x8c>
    4cde:	82 e0       	ldi	r24, 0x02	; 2
    4ce0:	df 91       	pop	r29
    4ce2:	cf 91       	pop	r28
    4ce4:	1f 91       	pop	r17
    4ce6:	0f 91       	pop	r16
    4ce8:	ff 90       	pop	r15
    4cea:	08 95       	ret

00004cec <twiReceive>:
    4cec:	1f 93       	push	r17
    4cee:	cf 93       	push	r28
    4cf0:	df 93       	push	r29
    4cf2:	00 97       	sbiw	r24, 0x00	; 0
    4cf4:	29 f1       	breq	.+74     	; 0x4d40 <twiReceive+0x54>
    4cf6:	6b 30       	cpi	r22, 0x0B	; 11
    4cf8:	28 f5       	brcc	.+74     	; 0x4d44 <twiReceive+0x58>
    4cfa:	16 2f       	mov	r17, r22
    4cfc:	ec 01       	movw	r28, r24
    4cfe:	a6 df       	rcall	.-180    	; 0x4c4c <twiIsBusy>
    4d00:	81 11       	cpse	r24, r1
    4d02:	22 c0       	rjmp	.+68     	; 0x4d48 <twiReceive+0x5c>
    4d04:	80 91 b2 0b 	lds	r24, 0x0BB2	; 0x800bb2 <_twiCurrentHandler>
    4d08:	90 91 b3 0b 	lds	r25, 0x0BB3	; 0x800bb3 <_twiCurrentHandler+0x1>
    4d0c:	c8 17       	cp	r28, r24
    4d0e:	d9 07       	cpc	r29, r25
    4d10:	41 f0       	breq	.+16     	; 0x4d22 <twiReceive+0x36>
    4d12:	3e df       	rcall	.-388    	; 0x4b90 <_initTwiInterface>
    4d14:	89 81       	ldd	r24, Y+1	; 0x01
    4d16:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d1a:	d0 93 b3 0b 	sts	0x0BB3, r29	; 0x800bb3 <_twiCurrentHandler+0x1>
    4d1e:	c0 93 b2 0b 	sts	0x0BB2, r28	; 0x800bb2 <_twiCurrentHandler>
    4d22:	10 93 b4 0b 	sts	0x0BB4, r17	; 0x800bb4 <_twiMessageLen>
    4d26:	88 81       	ld	r24, Y
    4d28:	88 0f       	add	r24, r24
    4d2a:	81 60       	ori	r24, 0x01	; 1
    4d2c:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <_twiMessageBuffer>
    4d30:	88 ef       	ldi	r24, 0xF8	; 248
    4d32:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    4d36:	85 ea       	ldi	r24, 0xA5	; 165
    4d38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d3c:	85 e0       	ldi	r24, 0x05	; 5
    4d3e:	05 c0       	rjmp	.+10     	; 0x4d4a <twiReceive+0x5e>
    4d40:	86 e0       	ldi	r24, 0x06	; 6
    4d42:	03 c0       	rjmp	.+6      	; 0x4d4a <twiReceive+0x5e>
    4d44:	87 e0       	ldi	r24, 0x07	; 7
    4d46:	01 c0       	rjmp	.+2      	; 0x4d4a <twiReceive+0x5e>
    4d48:	82 e0       	ldi	r24, 0x02	; 2
    4d4a:	df 91       	pop	r29
    4d4c:	cf 91       	pop	r28
    4d4e:	1f 91       	pop	r17
    4d50:	08 95       	ret

00004d52 <__vector_39>:
    4d52:	1f 92       	push	r1
    4d54:	0f 92       	push	r0
    4d56:	0f b6       	in	r0, 0x3f	; 63
    4d58:	0f 92       	push	r0
    4d5a:	11 24       	eor	r1, r1
    4d5c:	0b b6       	in	r0, 0x3b	; 59
    4d5e:	0f 92       	push	r0
    4d60:	2f 93       	push	r18
    4d62:	3f 93       	push	r19
    4d64:	4f 93       	push	r20
    4d66:	5f 93       	push	r21
    4d68:	6f 93       	push	r22
    4d6a:	7f 93       	push	r23
    4d6c:	8f 93       	push	r24
    4d6e:	9f 93       	push	r25
    4d70:	af 93       	push	r26
    4d72:	bf 93       	push	r27
    4d74:	ef 93       	push	r30
    4d76:	ff 93       	push	r31
    4d78:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4d7c:	8e 2f       	mov	r24, r30
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	fc 01       	movw	r30, r24
    4d82:	38 97       	sbiw	r30, 0x08	; 8
    4d84:	e1 35       	cpi	r30, 0x51	; 81
    4d86:	f1 05       	cpc	r31, r1
    4d88:	08 f0       	brcs	.+2      	; 0x4d8c <__vector_39+0x3a>
    4d8a:	75 c0       	rjmp	.+234    	; 0x4e76 <__vector_39+0x124>
    4d8c:	88 27       	eor	r24, r24
    4d8e:	e4 58       	subi	r30, 0x84	; 132
    4d90:	ff 4f       	sbci	r31, 0xFF	; 255
    4d92:	8f 4f       	sbci	r24, 0xFF	; 255
    4d94:	f3 c1       	rjmp	.+998    	; 0x517c <__tablejump2__>
    4d96:	10 92 b1 0b 	sts	0x0BB1, r1	; 0x800bb1 <_index.1885>
    4d9a:	e0 91 b1 0b 	lds	r30, 0x0BB1	; 0x800bb1 <_index.1885>
    4d9e:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <_twiMessageLen>
    4da2:	e8 17       	cp	r30, r24
    4da4:	70 f4       	brcc	.+28     	; 0x4dc2 <__vector_39+0x70>
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	8e 0f       	add	r24, r30
    4daa:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <_index.1885>
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	eb 54       	subi	r30, 0x4B	; 75
    4db2:	f4 4f       	sbci	r31, 0xF4	; 244
    4db4:	80 81       	ld	r24, Z
    4db6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4dba:	85 e8       	ldi	r24, 0x85	; 133
    4dbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dc0:	72 c0       	rjmp	.+228    	; 0x4ea6 <__vector_39+0x154>
    4dc2:	84 e9       	ldi	r24, 0x94	; 148
    4dc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dc8:	80 91 b2 0b 	lds	r24, 0x0BB2	; 0x800bb2 <_twiCurrentHandler>
    4dcc:	90 91 b3 0b 	lds	r25, 0x0BB3	; 0x800bb3 <_twiCurrentHandler+0x1>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	12 96       	adiw	r26, 0x02	; 2
    4dd4:	ed 91       	ld	r30, X+
    4dd6:	fc 91       	ld	r31, X
    4dd8:	13 97       	sbiw	r26, 0x03	; 3
    4dda:	30 97       	sbiw	r30, 0x00	; 0
    4ddc:	09 f4       	brne	.+2      	; 0x4de0 <__vector_39+0x8e>
    4dde:	63 c0       	rjmp	.+198    	; 0x4ea6 <__vector_39+0x154>
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	40 e0       	ldi	r20, 0x00	; 0
    4de4:	50 e0       	ldi	r21, 0x00	; 0
    4de6:	64 e0       	ldi	r22, 0x04	; 4
    4de8:	19 95       	eicall
    4dea:	5d c0       	rjmp	.+186    	; 0x4ea6 <__vector_39+0x154>
    4dec:	e0 91 b1 0b 	lds	r30, 0x0BB1	; 0x800bb1 <_index.1885>
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	8e 0f       	add	r24, r30
    4df4:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <_index.1885>
    4df8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4dfc:	f0 e0       	ldi	r31, 0x00	; 0
    4dfe:	eb 54       	subi	r30, 0x4B	; 75
    4e00:	f4 4f       	sbci	r31, 0xF4	; 244
    4e02:	80 83       	st	Z, r24
    4e04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e08:	80 34       	cpi	r24, 0x40	; 64
    4e0a:	11 f4       	brne	.+4      	; 0x4e10 <__vector_39+0xbe>
    4e0c:	10 92 b1 0b 	sts	0x0BB1, r1	; 0x800bb1 <_index.1885>
    4e10:	20 91 b1 0b 	lds	r18, 0x0BB1	; 0x800bb1 <_index.1885>
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <_twiMessageLen>
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	01 97       	sbiw	r24, 0x01	; 1
    4e1e:	28 17       	cp	r18, r24
    4e20:	39 07       	cpc	r19, r25
    4e22:	24 f4       	brge	.+8      	; 0x4e2c <__vector_39+0xda>
    4e24:	85 ec       	ldi	r24, 0xC5	; 197
    4e26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e2a:	3d c0       	rjmp	.+122    	; 0x4ea6 <__vector_39+0x154>
    4e2c:	85 e8       	ldi	r24, 0x85	; 133
    4e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e32:	39 c0       	rjmp	.+114    	; 0x4ea6 <__vector_39+0x154>
    4e34:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4e38:	e0 91 b1 0b 	lds	r30, 0x0BB1	; 0x800bb1 <_index.1885>
    4e3c:	f0 e0       	ldi	r31, 0x00	; 0
    4e3e:	eb 54       	subi	r30, 0x4B	; 75
    4e40:	f4 4f       	sbci	r31, 0xF4	; 244
    4e42:	80 83       	st	Z, r24
    4e44:	84 e9       	ldi	r24, 0x94	; 148
    4e46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e4a:	80 91 b2 0b 	lds	r24, 0x0BB2	; 0x800bb2 <_twiCurrentHandler>
    4e4e:	90 91 b3 0b 	lds	r25, 0x0BB3	; 0x800bb3 <_twiCurrentHandler+0x1>
    4e52:	dc 01       	movw	r26, r24
    4e54:	12 96       	adiw	r26, 0x02	; 2
    4e56:	ed 91       	ld	r30, X+
    4e58:	fc 91       	ld	r31, X
    4e5a:	13 97       	sbiw	r26, 0x03	; 3
    4e5c:	30 97       	sbiw	r30, 0x00	; 0
    4e5e:	19 f1       	breq	.+70     	; 0x4ea6 <__vector_39+0x154>
    4e60:	20 91 b4 0b 	lds	r18, 0x0BB4	; 0x800bb4 <_twiMessageLen>
    4e64:	45 eb       	ldi	r20, 0xB5	; 181
    4e66:	5b e0       	ldi	r21, 0x0B	; 11
    4e68:	65 e0       	ldi	r22, 0x05	; 5
    4e6a:	19 95       	eicall
    4e6c:	1c c0       	rjmp	.+56     	; 0x4ea6 <__vector_39+0x154>
    4e6e:	85 ea       	ldi	r24, 0xA5	; 165
    4e70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e74:	18 c0       	rjmp	.+48     	; 0x4ea6 <__vector_39+0x154>
    4e76:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e7a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    4e7e:	84 e0       	ldi	r24, 0x04	; 4
    4e80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e84:	80 91 b2 0b 	lds	r24, 0x0BB2	; 0x800bb2 <_twiCurrentHandler>
    4e88:	90 91 b3 0b 	lds	r25, 0x0BB3	; 0x800bb3 <_twiCurrentHandler+0x1>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	12 96       	adiw	r26, 0x02	; 2
    4e90:	ed 91       	ld	r30, X+
    4e92:	fc 91       	ld	r31, X
    4e94:	13 97       	sbiw	r26, 0x03	; 3
    4e96:	30 97       	sbiw	r30, 0x00	; 0
    4e98:	31 f0       	breq	.+12     	; 0x4ea6 <__vector_39+0x154>
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	40 e0       	ldi	r20, 0x00	; 0
    4e9e:	50 e0       	ldi	r21, 0x00	; 0
    4ea0:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    4ea4:	19 95       	eicall
    4ea6:	ff 91       	pop	r31
    4ea8:	ef 91       	pop	r30
    4eaa:	bf 91       	pop	r27
    4eac:	af 91       	pop	r26
    4eae:	9f 91       	pop	r25
    4eb0:	8f 91       	pop	r24
    4eb2:	7f 91       	pop	r23
    4eb4:	6f 91       	pop	r22
    4eb6:	5f 91       	pop	r21
    4eb8:	4f 91       	pop	r20
    4eba:	3f 91       	pop	r19
    4ebc:	2f 91       	pop	r18
    4ebe:	0f 90       	pop	r0
    4ec0:	0b be       	out	0x3b, r0	; 59
    4ec2:	0f 90       	pop	r0
    4ec4:	0f be       	out	0x3f, r0	; 63
    4ec6:	0f 90       	pop	r0
    4ec8:	1f 90       	pop	r1
    4eca:	18 95       	reti

00004ecc <fifo_init>:
    4ecc:	fc 01       	movw	r30, r24
    4ece:	41 11       	cpse	r20, r1
    4ed0:	01 c0       	rjmp	.+2      	; 0x4ed4 <fifo_init+0x8>
    4ed2:	97 d2       	rcall	.+1326   	; 0x5402 <abort>
    4ed4:	84 2f       	mov	r24, r20
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	9c 01       	movw	r18, r24
    4eda:	21 50       	subi	r18, 0x01	; 1
    4edc:	31 09       	sbc	r19, r1
    4ede:	82 23       	and	r24, r18
    4ee0:	93 23       	and	r25, r19
    4ee2:	89 2b       	or	r24, r25
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <fifo_init+0x1c>
    4ee6:	8d d2       	rcall	.+1306   	; 0x5402 <abort>
    4ee8:	41 38       	cpi	r20, 0x81	; 129
    4eea:	08 f0       	brcs	.+2      	; 0x4eee <fifo_init+0x22>
    4eec:	8a d2       	rcall	.+1300   	; 0x5402 <abort>
    4eee:	12 82       	std	Z+2, r1	; 0x02
    4ef0:	13 82       	std	Z+3, r1	; 0x03
    4ef2:	44 83       	std	Z+4, r20	; 0x04
    4ef4:	44 0f       	add	r20, r20
    4ef6:	41 50       	subi	r20, 0x01	; 1
    4ef8:	45 83       	std	Z+5, r20	; 0x05
    4efa:	71 83       	std	Z+1, r23	; 0x01
    4efc:	60 83       	st	Z, r22
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	08 95       	ret

00004f04 <__subsf3>:
    4f04:	50 58       	subi	r21, 0x80	; 128

00004f06 <__addsf3>:
    4f06:	bb 27       	eor	r27, r27
    4f08:	aa 27       	eor	r26, r26
    4f0a:	13 d0       	rcall	.+38     	; 0x4f32 <__addsf3x>
    4f0c:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_round>
    4f10:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__fp_pscA>
    4f14:	38 f0       	brcs	.+14     	; 0x4f24 <__addsf3+0x1e>
    4f16:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__fp_pscB>
    4f1a:	20 f0       	brcs	.+8      	; 0x4f24 <__addsf3+0x1e>
    4f1c:	39 f4       	brne	.+14     	; 0x4f2c <__addsf3+0x26>
    4f1e:	9f 3f       	cpi	r25, 0xFF	; 255
    4f20:	19 f4       	brne	.+6      	; 0x4f28 <__addsf3+0x22>
    4f22:	26 f4       	brtc	.+8      	; 0x4f2c <__addsf3+0x26>
    4f24:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__fp_nan>
    4f28:	0e f4       	brtc	.+2      	; 0x4f2c <__addsf3+0x26>
    4f2a:	e0 95       	com	r30
    4f2c:	e7 fb       	bst	r30, 7
    4f2e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__fp_inf>

00004f32 <__addsf3x>:
    4f32:	e9 2f       	mov	r30, r25
    4f34:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__fp_split3>
    4f38:	58 f3       	brcs	.-42     	; 0x4f10 <__addsf3+0xa>
    4f3a:	ba 17       	cp	r27, r26
    4f3c:	62 07       	cpc	r22, r18
    4f3e:	73 07       	cpc	r23, r19
    4f40:	84 07       	cpc	r24, r20
    4f42:	95 07       	cpc	r25, r21
    4f44:	20 f0       	brcs	.+8      	; 0x4f4e <__addsf3x+0x1c>
    4f46:	79 f4       	brne	.+30     	; 0x4f66 <__addsf3x+0x34>
    4f48:	a6 f5       	brtc	.+104    	; 0x4fb2 <__addsf3x+0x80>
    4f4a:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__fp_zero>
    4f4e:	0e f4       	brtc	.+2      	; 0x4f52 <__addsf3x+0x20>
    4f50:	e0 95       	com	r30
    4f52:	0b 2e       	mov	r0, r27
    4f54:	ba 2f       	mov	r27, r26
    4f56:	a0 2d       	mov	r26, r0
    4f58:	0b 01       	movw	r0, r22
    4f5a:	b9 01       	movw	r22, r18
    4f5c:	90 01       	movw	r18, r0
    4f5e:	0c 01       	movw	r0, r24
    4f60:	ca 01       	movw	r24, r20
    4f62:	a0 01       	movw	r20, r0
    4f64:	11 24       	eor	r1, r1
    4f66:	ff 27       	eor	r31, r31
    4f68:	59 1b       	sub	r21, r25
    4f6a:	99 f0       	breq	.+38     	; 0x4f92 <__addsf3x+0x60>
    4f6c:	59 3f       	cpi	r21, 0xF9	; 249
    4f6e:	50 f4       	brcc	.+20     	; 0x4f84 <__addsf3x+0x52>
    4f70:	50 3e       	cpi	r21, 0xE0	; 224
    4f72:	68 f1       	brcs	.+90     	; 0x4fce <__addsf3x+0x9c>
    4f74:	1a 16       	cp	r1, r26
    4f76:	f0 40       	sbci	r31, 0x00	; 0
    4f78:	a2 2f       	mov	r26, r18
    4f7a:	23 2f       	mov	r18, r19
    4f7c:	34 2f       	mov	r19, r20
    4f7e:	44 27       	eor	r20, r20
    4f80:	58 5f       	subi	r21, 0xF8	; 248
    4f82:	f3 cf       	rjmp	.-26     	; 0x4f6a <__addsf3x+0x38>
    4f84:	46 95       	lsr	r20
    4f86:	37 95       	ror	r19
    4f88:	27 95       	ror	r18
    4f8a:	a7 95       	ror	r26
    4f8c:	f0 40       	sbci	r31, 0x00	; 0
    4f8e:	53 95       	inc	r21
    4f90:	c9 f7       	brne	.-14     	; 0x4f84 <__addsf3x+0x52>
    4f92:	7e f4       	brtc	.+30     	; 0x4fb2 <__addsf3x+0x80>
    4f94:	1f 16       	cp	r1, r31
    4f96:	ba 0b       	sbc	r27, r26
    4f98:	62 0b       	sbc	r22, r18
    4f9a:	73 0b       	sbc	r23, r19
    4f9c:	84 0b       	sbc	r24, r20
    4f9e:	ba f0       	brmi	.+46     	; 0x4fce <__addsf3x+0x9c>
    4fa0:	91 50       	subi	r25, 0x01	; 1
    4fa2:	a1 f0       	breq	.+40     	; 0x4fcc <__addsf3x+0x9a>
    4fa4:	ff 0f       	add	r31, r31
    4fa6:	bb 1f       	adc	r27, r27
    4fa8:	66 1f       	adc	r22, r22
    4faa:	77 1f       	adc	r23, r23
    4fac:	88 1f       	adc	r24, r24
    4fae:	c2 f7       	brpl	.-16     	; 0x4fa0 <__addsf3x+0x6e>
    4fb0:	0e c0       	rjmp	.+28     	; 0x4fce <__addsf3x+0x9c>
    4fb2:	ba 0f       	add	r27, r26
    4fb4:	62 1f       	adc	r22, r18
    4fb6:	73 1f       	adc	r23, r19
    4fb8:	84 1f       	adc	r24, r20
    4fba:	48 f4       	brcc	.+18     	; 0x4fce <__addsf3x+0x9c>
    4fbc:	87 95       	ror	r24
    4fbe:	77 95       	ror	r23
    4fc0:	67 95       	ror	r22
    4fc2:	b7 95       	ror	r27
    4fc4:	f7 95       	ror	r31
    4fc6:	9e 3f       	cpi	r25, 0xFE	; 254
    4fc8:	08 f0       	brcs	.+2      	; 0x4fcc <__addsf3x+0x9a>
    4fca:	b0 cf       	rjmp	.-160    	; 0x4f2c <__addsf3+0x26>
    4fcc:	93 95       	inc	r25
    4fce:	88 0f       	add	r24, r24
    4fd0:	08 f0       	brcs	.+2      	; 0x4fd4 <__addsf3x+0xa2>
    4fd2:	99 27       	eor	r25, r25
    4fd4:	ee 0f       	add	r30, r30
    4fd6:	97 95       	ror	r25
    4fd8:	87 95       	ror	r24
    4fda:	08 95       	ret

00004fdc <__divsf3>:
    4fdc:	12 d0       	rcall	.+36     	; 0x5002 <__divsf3x>
    4fde:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__fp_round>
    4fe2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__fp_pscB>
    4fe6:	58 f0       	brcs	.+22     	; 0x4ffe <__divsf3+0x22>
    4fe8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__fp_pscA>
    4fec:	40 f0       	brcs	.+16     	; 0x4ffe <__divsf3+0x22>
    4fee:	29 f4       	brne	.+10     	; 0x4ffa <__divsf3+0x1e>
    4ff0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ff2:	29 f0       	breq	.+10     	; 0x4ffe <__divsf3+0x22>
    4ff4:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__fp_inf>
    4ff8:	51 11       	cpse	r21, r1
    4ffa:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__fp_szero>
    4ffe:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__fp_nan>

00005002 <__divsf3x>:
    5002:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__fp_split3>
    5006:	68 f3       	brcs	.-38     	; 0x4fe2 <__divsf3+0x6>

00005008 <__divsf3_pse>:
    5008:	99 23       	and	r25, r25
    500a:	b1 f3       	breq	.-20     	; 0x4ff8 <__divsf3+0x1c>
    500c:	55 23       	and	r21, r21
    500e:	91 f3       	breq	.-28     	; 0x4ff4 <__divsf3+0x18>
    5010:	95 1b       	sub	r25, r21
    5012:	55 0b       	sbc	r21, r21
    5014:	bb 27       	eor	r27, r27
    5016:	aa 27       	eor	r26, r26
    5018:	62 17       	cp	r22, r18
    501a:	73 07       	cpc	r23, r19
    501c:	84 07       	cpc	r24, r20
    501e:	38 f0       	brcs	.+14     	; 0x502e <__divsf3_pse+0x26>
    5020:	9f 5f       	subi	r25, 0xFF	; 255
    5022:	5f 4f       	sbci	r21, 0xFF	; 255
    5024:	22 0f       	add	r18, r18
    5026:	33 1f       	adc	r19, r19
    5028:	44 1f       	adc	r20, r20
    502a:	aa 1f       	adc	r26, r26
    502c:	a9 f3       	breq	.-22     	; 0x5018 <__divsf3_pse+0x10>
    502e:	35 d0       	rcall	.+106    	; 0x509a <__divsf3_pse+0x92>
    5030:	0e 2e       	mov	r0, r30
    5032:	3a f0       	brmi	.+14     	; 0x5042 <__divsf3_pse+0x3a>
    5034:	e0 e8       	ldi	r30, 0x80	; 128
    5036:	32 d0       	rcall	.+100    	; 0x509c <__divsf3_pse+0x94>
    5038:	91 50       	subi	r25, 0x01	; 1
    503a:	50 40       	sbci	r21, 0x00	; 0
    503c:	e6 95       	lsr	r30
    503e:	00 1c       	adc	r0, r0
    5040:	ca f7       	brpl	.-14     	; 0x5034 <__divsf3_pse+0x2c>
    5042:	2b d0       	rcall	.+86     	; 0x509a <__divsf3_pse+0x92>
    5044:	fe 2f       	mov	r31, r30
    5046:	29 d0       	rcall	.+82     	; 0x509a <__divsf3_pse+0x92>
    5048:	66 0f       	add	r22, r22
    504a:	77 1f       	adc	r23, r23
    504c:	88 1f       	adc	r24, r24
    504e:	bb 1f       	adc	r27, r27
    5050:	26 17       	cp	r18, r22
    5052:	37 07       	cpc	r19, r23
    5054:	48 07       	cpc	r20, r24
    5056:	ab 07       	cpc	r26, r27
    5058:	b0 e8       	ldi	r27, 0x80	; 128
    505a:	09 f0       	breq	.+2      	; 0x505e <__divsf3_pse+0x56>
    505c:	bb 0b       	sbc	r27, r27
    505e:	80 2d       	mov	r24, r0
    5060:	bf 01       	movw	r22, r30
    5062:	ff 27       	eor	r31, r31
    5064:	93 58       	subi	r25, 0x83	; 131
    5066:	5f 4f       	sbci	r21, 0xFF	; 255
    5068:	3a f0       	brmi	.+14     	; 0x5078 <__divsf3_pse+0x70>
    506a:	9e 3f       	cpi	r25, 0xFE	; 254
    506c:	51 05       	cpc	r21, r1
    506e:	78 f0       	brcs	.+30     	; 0x508e <__divsf3_pse+0x86>
    5070:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__fp_inf>
    5074:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__fp_szero>
    5078:	5f 3f       	cpi	r21, 0xFF	; 255
    507a:	e4 f3       	brlt	.-8      	; 0x5074 <__divsf3_pse+0x6c>
    507c:	98 3e       	cpi	r25, 0xE8	; 232
    507e:	d4 f3       	brlt	.-12     	; 0x5074 <__divsf3_pse+0x6c>
    5080:	86 95       	lsr	r24
    5082:	77 95       	ror	r23
    5084:	67 95       	ror	r22
    5086:	b7 95       	ror	r27
    5088:	f7 95       	ror	r31
    508a:	9f 5f       	subi	r25, 0xFF	; 255
    508c:	c9 f7       	brne	.-14     	; 0x5080 <__divsf3_pse+0x78>
    508e:	88 0f       	add	r24, r24
    5090:	91 1d       	adc	r25, r1
    5092:	96 95       	lsr	r25
    5094:	87 95       	ror	r24
    5096:	97 f9       	bld	r25, 7
    5098:	08 95       	ret
    509a:	e1 e0       	ldi	r30, 0x01	; 1
    509c:	66 0f       	add	r22, r22
    509e:	77 1f       	adc	r23, r23
    50a0:	88 1f       	adc	r24, r24
    50a2:	bb 1f       	adc	r27, r27
    50a4:	62 17       	cp	r22, r18
    50a6:	73 07       	cpc	r23, r19
    50a8:	84 07       	cpc	r24, r20
    50aa:	ba 07       	cpc	r27, r26
    50ac:	20 f0       	brcs	.+8      	; 0x50b6 <__divsf3_pse+0xae>
    50ae:	62 1b       	sub	r22, r18
    50b0:	73 0b       	sbc	r23, r19
    50b2:	84 0b       	sbc	r24, r20
    50b4:	ba 0b       	sbc	r27, r26
    50b6:	ee 1f       	adc	r30, r30
    50b8:	88 f7       	brcc	.-30     	; 0x509c <__divsf3_pse+0x94>
    50ba:	e0 95       	com	r30
    50bc:	08 95       	ret

000050be <__floatunsisf>:
    50be:	e8 94       	clt
    50c0:	09 c0       	rjmp	.+18     	; 0x50d4 <__floatsisf+0x12>

000050c2 <__floatsisf>:
    50c2:	97 fb       	bst	r25, 7
    50c4:	3e f4       	brtc	.+14     	; 0x50d4 <__floatsisf+0x12>
    50c6:	90 95       	com	r25
    50c8:	80 95       	com	r24
    50ca:	70 95       	com	r23
    50cc:	61 95       	neg	r22
    50ce:	7f 4f       	sbci	r23, 0xFF	; 255
    50d0:	8f 4f       	sbci	r24, 0xFF	; 255
    50d2:	9f 4f       	sbci	r25, 0xFF	; 255
    50d4:	99 23       	and	r25, r25
    50d6:	a9 f0       	breq	.+42     	; 0x5102 <__floatsisf+0x40>
    50d8:	f9 2f       	mov	r31, r25
    50da:	96 e9       	ldi	r25, 0x96	; 150
    50dc:	bb 27       	eor	r27, r27
    50de:	93 95       	inc	r25
    50e0:	f6 95       	lsr	r31
    50e2:	87 95       	ror	r24
    50e4:	77 95       	ror	r23
    50e6:	67 95       	ror	r22
    50e8:	b7 95       	ror	r27
    50ea:	f1 11       	cpse	r31, r1
    50ec:	f8 cf       	rjmp	.-16     	; 0x50de <__floatsisf+0x1c>
    50ee:	fa f4       	brpl	.+62     	; 0x512e <__floatsisf+0x6c>
    50f0:	bb 0f       	add	r27, r27
    50f2:	11 f4       	brne	.+4      	; 0x50f8 <__floatsisf+0x36>
    50f4:	60 ff       	sbrs	r22, 0
    50f6:	1b c0       	rjmp	.+54     	; 0x512e <__floatsisf+0x6c>
    50f8:	6f 5f       	subi	r22, 0xFF	; 255
    50fa:	7f 4f       	sbci	r23, 0xFF	; 255
    50fc:	8f 4f       	sbci	r24, 0xFF	; 255
    50fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5100:	16 c0       	rjmp	.+44     	; 0x512e <__floatsisf+0x6c>
    5102:	88 23       	and	r24, r24
    5104:	11 f0       	breq	.+4      	; 0x510a <__floatsisf+0x48>
    5106:	96 e9       	ldi	r25, 0x96	; 150
    5108:	11 c0       	rjmp	.+34     	; 0x512c <__floatsisf+0x6a>
    510a:	77 23       	and	r23, r23
    510c:	21 f0       	breq	.+8      	; 0x5116 <__floatsisf+0x54>
    510e:	9e e8       	ldi	r25, 0x8E	; 142
    5110:	87 2f       	mov	r24, r23
    5112:	76 2f       	mov	r23, r22
    5114:	05 c0       	rjmp	.+10     	; 0x5120 <__floatsisf+0x5e>
    5116:	66 23       	and	r22, r22
    5118:	71 f0       	breq	.+28     	; 0x5136 <__floatsisf+0x74>
    511a:	96 e8       	ldi	r25, 0x86	; 134
    511c:	86 2f       	mov	r24, r22
    511e:	70 e0       	ldi	r23, 0x00	; 0
    5120:	60 e0       	ldi	r22, 0x00	; 0
    5122:	2a f0       	brmi	.+10     	; 0x512e <__floatsisf+0x6c>
    5124:	9a 95       	dec	r25
    5126:	66 0f       	add	r22, r22
    5128:	77 1f       	adc	r23, r23
    512a:	88 1f       	adc	r24, r24
    512c:	da f7       	brpl	.-10     	; 0x5124 <__floatsisf+0x62>
    512e:	88 0f       	add	r24, r24
    5130:	96 95       	lsr	r25
    5132:	87 95       	ror	r24
    5134:	97 f9       	bld	r25, 7
    5136:	08 95       	ret

00005138 <__udivmodsi4>:
    5138:	a1 e2       	ldi	r26, 0x21	; 33
    513a:	1a 2e       	mov	r1, r26
    513c:	aa 1b       	sub	r26, r26
    513e:	bb 1b       	sub	r27, r27
    5140:	fd 01       	movw	r30, r26
    5142:	0d c0       	rjmp	.+26     	; 0x515e <__udivmodsi4_ep>

00005144 <__udivmodsi4_loop>:
    5144:	aa 1f       	adc	r26, r26
    5146:	bb 1f       	adc	r27, r27
    5148:	ee 1f       	adc	r30, r30
    514a:	ff 1f       	adc	r31, r31
    514c:	a2 17       	cp	r26, r18
    514e:	b3 07       	cpc	r27, r19
    5150:	e4 07       	cpc	r30, r20
    5152:	f5 07       	cpc	r31, r21
    5154:	20 f0       	brcs	.+8      	; 0x515e <__udivmodsi4_ep>
    5156:	a2 1b       	sub	r26, r18
    5158:	b3 0b       	sbc	r27, r19
    515a:	e4 0b       	sbc	r30, r20
    515c:	f5 0b       	sbc	r31, r21

0000515e <__udivmodsi4_ep>:
    515e:	66 1f       	adc	r22, r22
    5160:	77 1f       	adc	r23, r23
    5162:	88 1f       	adc	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	1a 94       	dec	r1
    5168:	69 f7       	brne	.-38     	; 0x5144 <__udivmodsi4_loop>
    516a:	60 95       	com	r22
    516c:	70 95       	com	r23
    516e:	80 95       	com	r24
    5170:	90 95       	com	r25
    5172:	9b 01       	movw	r18, r22
    5174:	ac 01       	movw	r20, r24
    5176:	bd 01       	movw	r22, r26
    5178:	cf 01       	movw	r24, r30
    517a:	08 95       	ret

0000517c <__tablejump2__>:
    517c:	ee 0f       	add	r30, r30
    517e:	ff 1f       	adc	r31, r31
    5180:	88 1f       	adc	r24, r24
    5182:	8b bf       	out	0x3b, r24	; 59
    5184:	07 90       	elpm	r0, Z+
    5186:	f6 91       	elpm	r31, Z
    5188:	e0 2d       	mov	r30, r0
    518a:	19 94       	eijmp

0000518c <calloc>:
    518c:	0f 93       	push	r16
    518e:	1f 93       	push	r17
    5190:	cf 93       	push	r28
    5192:	df 93       	push	r29
    5194:	86 9f       	mul	r24, r22
    5196:	80 01       	movw	r16, r0
    5198:	87 9f       	mul	r24, r23
    519a:	10 0d       	add	r17, r0
    519c:	96 9f       	mul	r25, r22
    519e:	10 0d       	add	r17, r0
    51a0:	11 24       	eor	r1, r1
    51a2:	c8 01       	movw	r24, r16
    51a4:	0d d0       	rcall	.+26     	; 0x51c0 <malloc>
    51a6:	ec 01       	movw	r28, r24
    51a8:	00 97       	sbiw	r24, 0x00	; 0
    51aa:	21 f0       	breq	.+8      	; 0x51b4 <calloc+0x28>
    51ac:	a8 01       	movw	r20, r16
    51ae:	60 e0       	ldi	r22, 0x00	; 0
    51b0:	70 e0       	ldi	r23, 0x00	; 0
    51b2:	17 d2       	rcall	.+1070   	; 0x55e2 <memset>
    51b4:	ce 01       	movw	r24, r28
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	08 95       	ret

000051c0 <malloc>:
    51c0:	0f 93       	push	r16
    51c2:	1f 93       	push	r17
    51c4:	cf 93       	push	r28
    51c6:	df 93       	push	r29
    51c8:	82 30       	cpi	r24, 0x02	; 2
    51ca:	91 05       	cpc	r25, r1
    51cc:	10 f4       	brcc	.+4      	; 0x51d2 <malloc+0x12>
    51ce:	82 e0       	ldi	r24, 0x02	; 2
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	e0 91 eb 0b 	lds	r30, 0x0BEB	; 0x800beb <__flp>
    51d6:	f0 91 ec 0b 	lds	r31, 0x0BEC	; 0x800bec <__flp+0x1>
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	a0 e0       	ldi	r26, 0x00	; 0
    51e0:	b0 e0       	ldi	r27, 0x00	; 0
    51e2:	30 97       	sbiw	r30, 0x00	; 0
    51e4:	19 f1       	breq	.+70     	; 0x522c <malloc+0x6c>
    51e6:	40 81       	ld	r20, Z
    51e8:	51 81       	ldd	r21, Z+1	; 0x01
    51ea:	02 81       	ldd	r16, Z+2	; 0x02
    51ec:	13 81       	ldd	r17, Z+3	; 0x03
    51ee:	48 17       	cp	r20, r24
    51f0:	59 07       	cpc	r21, r25
    51f2:	c8 f0       	brcs	.+50     	; 0x5226 <malloc+0x66>
    51f4:	84 17       	cp	r24, r20
    51f6:	95 07       	cpc	r25, r21
    51f8:	69 f4       	brne	.+26     	; 0x5214 <malloc+0x54>
    51fa:	10 97       	sbiw	r26, 0x00	; 0
    51fc:	31 f0       	breq	.+12     	; 0x520a <malloc+0x4a>
    51fe:	12 96       	adiw	r26, 0x02	; 2
    5200:	0c 93       	st	X, r16
    5202:	12 97       	sbiw	r26, 0x02	; 2
    5204:	13 96       	adiw	r26, 0x03	; 3
    5206:	1c 93       	st	X, r17
    5208:	27 c0       	rjmp	.+78     	; 0x5258 <malloc+0x98>
    520a:	00 93 eb 0b 	sts	0x0BEB, r16	; 0x800beb <__flp>
    520e:	10 93 ec 0b 	sts	0x0BEC, r17	; 0x800bec <__flp+0x1>
    5212:	22 c0       	rjmp	.+68     	; 0x5258 <malloc+0x98>
    5214:	21 15       	cp	r18, r1
    5216:	31 05       	cpc	r19, r1
    5218:	19 f0       	breq	.+6      	; 0x5220 <malloc+0x60>
    521a:	42 17       	cp	r20, r18
    521c:	53 07       	cpc	r21, r19
    521e:	18 f4       	brcc	.+6      	; 0x5226 <malloc+0x66>
    5220:	9a 01       	movw	r18, r20
    5222:	bd 01       	movw	r22, r26
    5224:	ef 01       	movw	r28, r30
    5226:	df 01       	movw	r26, r30
    5228:	f8 01       	movw	r30, r16
    522a:	db cf       	rjmp	.-74     	; 0x51e2 <malloc+0x22>
    522c:	21 15       	cp	r18, r1
    522e:	31 05       	cpc	r19, r1
    5230:	f9 f0       	breq	.+62     	; 0x5270 <malloc+0xb0>
    5232:	28 1b       	sub	r18, r24
    5234:	39 0b       	sbc	r19, r25
    5236:	24 30       	cpi	r18, 0x04	; 4
    5238:	31 05       	cpc	r19, r1
    523a:	80 f4       	brcc	.+32     	; 0x525c <malloc+0x9c>
    523c:	8a 81       	ldd	r24, Y+2	; 0x02
    523e:	9b 81       	ldd	r25, Y+3	; 0x03
    5240:	61 15       	cp	r22, r1
    5242:	71 05       	cpc	r23, r1
    5244:	21 f0       	breq	.+8      	; 0x524e <malloc+0x8e>
    5246:	fb 01       	movw	r30, r22
    5248:	93 83       	std	Z+3, r25	; 0x03
    524a:	82 83       	std	Z+2, r24	; 0x02
    524c:	04 c0       	rjmp	.+8      	; 0x5256 <malloc+0x96>
    524e:	90 93 ec 0b 	sts	0x0BEC, r25	; 0x800bec <__flp+0x1>
    5252:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <__flp>
    5256:	fe 01       	movw	r30, r28
    5258:	32 96       	adiw	r30, 0x02	; 2
    525a:	44 c0       	rjmp	.+136    	; 0x52e4 <malloc+0x124>
    525c:	fe 01       	movw	r30, r28
    525e:	e2 0f       	add	r30, r18
    5260:	f3 1f       	adc	r31, r19
    5262:	81 93       	st	Z+, r24
    5264:	91 93       	st	Z+, r25
    5266:	22 50       	subi	r18, 0x02	; 2
    5268:	31 09       	sbc	r19, r1
    526a:	39 83       	std	Y+1, r19	; 0x01
    526c:	28 83       	st	Y, r18
    526e:	3a c0       	rjmp	.+116    	; 0x52e4 <malloc+0x124>
    5270:	20 91 e9 0b 	lds	r18, 0x0BE9	; 0x800be9 <__brkval>
    5274:	30 91 ea 0b 	lds	r19, 0x0BEA	; 0x800bea <__brkval+0x1>
    5278:	23 2b       	or	r18, r19
    527a:	41 f4       	brne	.+16     	; 0x528c <malloc+0xcc>
    527c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5280:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5284:	30 93 ea 0b 	sts	0x0BEA, r19	; 0x800bea <__brkval+0x1>
    5288:	20 93 e9 0b 	sts	0x0BE9, r18	; 0x800be9 <__brkval>
    528c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5290:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5294:	21 15       	cp	r18, r1
    5296:	31 05       	cpc	r19, r1
    5298:	41 f4       	brne	.+16     	; 0x52aa <malloc+0xea>
    529a:	2d b7       	in	r18, 0x3d	; 61
    529c:	3e b7       	in	r19, 0x3e	; 62
    529e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    52a2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    52a6:	24 1b       	sub	r18, r20
    52a8:	35 0b       	sbc	r19, r21
    52aa:	e0 91 e9 0b 	lds	r30, 0x0BE9	; 0x800be9 <__brkval>
    52ae:	f0 91 ea 0b 	lds	r31, 0x0BEA	; 0x800bea <__brkval+0x1>
    52b2:	e2 17       	cp	r30, r18
    52b4:	f3 07       	cpc	r31, r19
    52b6:	a0 f4       	brcc	.+40     	; 0x52e0 <malloc+0x120>
    52b8:	2e 1b       	sub	r18, r30
    52ba:	3f 0b       	sbc	r19, r31
    52bc:	28 17       	cp	r18, r24
    52be:	39 07       	cpc	r19, r25
    52c0:	78 f0       	brcs	.+30     	; 0x52e0 <malloc+0x120>
    52c2:	ac 01       	movw	r20, r24
    52c4:	4e 5f       	subi	r20, 0xFE	; 254
    52c6:	5f 4f       	sbci	r21, 0xFF	; 255
    52c8:	24 17       	cp	r18, r20
    52ca:	35 07       	cpc	r19, r21
    52cc:	48 f0       	brcs	.+18     	; 0x52e0 <malloc+0x120>
    52ce:	4e 0f       	add	r20, r30
    52d0:	5f 1f       	adc	r21, r31
    52d2:	50 93 ea 0b 	sts	0x0BEA, r21	; 0x800bea <__brkval+0x1>
    52d6:	40 93 e9 0b 	sts	0x0BE9, r20	; 0x800be9 <__brkval>
    52da:	81 93       	st	Z+, r24
    52dc:	91 93       	st	Z+, r25
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <malloc+0x124>
    52e0:	e0 e0       	ldi	r30, 0x00	; 0
    52e2:	f0 e0       	ldi	r31, 0x00	; 0
    52e4:	cf 01       	movw	r24, r30
    52e6:	df 91       	pop	r29
    52e8:	cf 91       	pop	r28
    52ea:	1f 91       	pop	r17
    52ec:	0f 91       	pop	r16
    52ee:	08 95       	ret

000052f0 <free>:
    52f0:	cf 93       	push	r28
    52f2:	df 93       	push	r29
    52f4:	00 97       	sbiw	r24, 0x00	; 0
    52f6:	09 f4       	brne	.+2      	; 0x52fa <free+0xa>
    52f8:	81 c0       	rjmp	.+258    	; 0x53fc <free+0x10c>
    52fa:	fc 01       	movw	r30, r24
    52fc:	32 97       	sbiw	r30, 0x02	; 2
    52fe:	13 82       	std	Z+3, r1	; 0x03
    5300:	12 82       	std	Z+2, r1	; 0x02
    5302:	a0 91 eb 0b 	lds	r26, 0x0BEB	; 0x800beb <__flp>
    5306:	b0 91 ec 0b 	lds	r27, 0x0BEC	; 0x800bec <__flp+0x1>
    530a:	10 97       	sbiw	r26, 0x00	; 0
    530c:	81 f4       	brne	.+32     	; 0x532e <free+0x3e>
    530e:	20 81       	ld	r18, Z
    5310:	31 81       	ldd	r19, Z+1	; 0x01
    5312:	82 0f       	add	r24, r18
    5314:	93 1f       	adc	r25, r19
    5316:	20 91 e9 0b 	lds	r18, 0x0BE9	; 0x800be9 <__brkval>
    531a:	30 91 ea 0b 	lds	r19, 0x0BEA	; 0x800bea <__brkval+0x1>
    531e:	28 17       	cp	r18, r24
    5320:	39 07       	cpc	r19, r25
    5322:	51 f5       	brne	.+84     	; 0x5378 <free+0x88>
    5324:	f0 93 ea 0b 	sts	0x0BEA, r31	; 0x800bea <__brkval+0x1>
    5328:	e0 93 e9 0b 	sts	0x0BE9, r30	; 0x800be9 <__brkval>
    532c:	67 c0       	rjmp	.+206    	; 0x53fc <free+0x10c>
    532e:	ed 01       	movw	r28, r26
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	30 e0       	ldi	r19, 0x00	; 0
    5334:	ce 17       	cp	r28, r30
    5336:	df 07       	cpc	r29, r31
    5338:	40 f4       	brcc	.+16     	; 0x534a <free+0x5a>
    533a:	4a 81       	ldd	r20, Y+2	; 0x02
    533c:	5b 81       	ldd	r21, Y+3	; 0x03
    533e:	9e 01       	movw	r18, r28
    5340:	41 15       	cp	r20, r1
    5342:	51 05       	cpc	r21, r1
    5344:	f1 f0       	breq	.+60     	; 0x5382 <free+0x92>
    5346:	ea 01       	movw	r28, r20
    5348:	f5 cf       	rjmp	.-22     	; 0x5334 <free+0x44>
    534a:	d3 83       	std	Z+3, r29	; 0x03
    534c:	c2 83       	std	Z+2, r28	; 0x02
    534e:	40 81       	ld	r20, Z
    5350:	51 81       	ldd	r21, Z+1	; 0x01
    5352:	84 0f       	add	r24, r20
    5354:	95 1f       	adc	r25, r21
    5356:	c8 17       	cp	r28, r24
    5358:	d9 07       	cpc	r29, r25
    535a:	59 f4       	brne	.+22     	; 0x5372 <free+0x82>
    535c:	88 81       	ld	r24, Y
    535e:	99 81       	ldd	r25, Y+1	; 0x01
    5360:	84 0f       	add	r24, r20
    5362:	95 1f       	adc	r25, r21
    5364:	02 96       	adiw	r24, 0x02	; 2
    5366:	91 83       	std	Z+1, r25	; 0x01
    5368:	80 83       	st	Z, r24
    536a:	8a 81       	ldd	r24, Y+2	; 0x02
    536c:	9b 81       	ldd	r25, Y+3	; 0x03
    536e:	93 83       	std	Z+3, r25	; 0x03
    5370:	82 83       	std	Z+2, r24	; 0x02
    5372:	21 15       	cp	r18, r1
    5374:	31 05       	cpc	r19, r1
    5376:	29 f4       	brne	.+10     	; 0x5382 <free+0x92>
    5378:	f0 93 ec 0b 	sts	0x0BEC, r31	; 0x800bec <__flp+0x1>
    537c:	e0 93 eb 0b 	sts	0x0BEB, r30	; 0x800beb <__flp>
    5380:	3d c0       	rjmp	.+122    	; 0x53fc <free+0x10c>
    5382:	e9 01       	movw	r28, r18
    5384:	fb 83       	std	Y+3, r31	; 0x03
    5386:	ea 83       	std	Y+2, r30	; 0x02
    5388:	49 91       	ld	r20, Y+
    538a:	59 91       	ld	r21, Y+
    538c:	c4 0f       	add	r28, r20
    538e:	d5 1f       	adc	r29, r21
    5390:	ec 17       	cp	r30, r28
    5392:	fd 07       	cpc	r31, r29
    5394:	61 f4       	brne	.+24     	; 0x53ae <free+0xbe>
    5396:	80 81       	ld	r24, Z
    5398:	91 81       	ldd	r25, Z+1	; 0x01
    539a:	84 0f       	add	r24, r20
    539c:	95 1f       	adc	r25, r21
    539e:	02 96       	adiw	r24, 0x02	; 2
    53a0:	e9 01       	movw	r28, r18
    53a2:	99 83       	std	Y+1, r25	; 0x01
    53a4:	88 83       	st	Y, r24
    53a6:	82 81       	ldd	r24, Z+2	; 0x02
    53a8:	93 81       	ldd	r25, Z+3	; 0x03
    53aa:	9b 83       	std	Y+3, r25	; 0x03
    53ac:	8a 83       	std	Y+2, r24	; 0x02
    53ae:	e0 e0       	ldi	r30, 0x00	; 0
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	12 96       	adiw	r26, 0x02	; 2
    53b4:	8d 91       	ld	r24, X+
    53b6:	9c 91       	ld	r25, X
    53b8:	13 97       	sbiw	r26, 0x03	; 3
    53ba:	00 97       	sbiw	r24, 0x00	; 0
    53bc:	19 f0       	breq	.+6      	; 0x53c4 <free+0xd4>
    53be:	fd 01       	movw	r30, r26
    53c0:	dc 01       	movw	r26, r24
    53c2:	f7 cf       	rjmp	.-18     	; 0x53b2 <free+0xc2>
    53c4:	8d 91       	ld	r24, X+
    53c6:	9c 91       	ld	r25, X
    53c8:	11 97       	sbiw	r26, 0x01	; 1
    53ca:	9d 01       	movw	r18, r26
    53cc:	2e 5f       	subi	r18, 0xFE	; 254
    53ce:	3f 4f       	sbci	r19, 0xFF	; 255
    53d0:	82 0f       	add	r24, r18
    53d2:	93 1f       	adc	r25, r19
    53d4:	20 91 e9 0b 	lds	r18, 0x0BE9	; 0x800be9 <__brkval>
    53d8:	30 91 ea 0b 	lds	r19, 0x0BEA	; 0x800bea <__brkval+0x1>
    53dc:	28 17       	cp	r18, r24
    53de:	39 07       	cpc	r19, r25
    53e0:	69 f4       	brne	.+26     	; 0x53fc <free+0x10c>
    53e2:	30 97       	sbiw	r30, 0x00	; 0
    53e4:	29 f4       	brne	.+10     	; 0x53f0 <free+0x100>
    53e6:	10 92 ec 0b 	sts	0x0BEC, r1	; 0x800bec <__flp+0x1>
    53ea:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <__flp>
    53ee:	02 c0       	rjmp	.+4      	; 0x53f4 <free+0x104>
    53f0:	13 82       	std	Z+3, r1	; 0x03
    53f2:	12 82       	std	Z+2, r1	; 0x02
    53f4:	b0 93 ea 0b 	sts	0x0BEA, r27	; 0x800bea <__brkval+0x1>
    53f8:	a0 93 e9 0b 	sts	0x0BE9, r26	; 0x800be9 <__brkval>
    53fc:	df 91       	pop	r29
    53fe:	cf 91       	pop	r28
    5400:	08 95       	ret

00005402 <abort>:
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	f8 94       	cli
    5408:	35 c2       	rjmp	.+1130   	; 0x5874 <_exit>

0000540a <__ftoa_engine>:
    540a:	28 30       	cpi	r18, 0x08	; 8
    540c:	08 f0       	brcs	.+2      	; 0x5410 <__ftoa_engine+0x6>
    540e:	27 e0       	ldi	r18, 0x07	; 7
    5410:	33 27       	eor	r19, r19
    5412:	da 01       	movw	r26, r20
    5414:	99 0f       	add	r25, r25
    5416:	31 1d       	adc	r19, r1
    5418:	87 fd       	sbrc	r24, 7
    541a:	91 60       	ori	r25, 0x01	; 1
    541c:	00 96       	adiw	r24, 0x00	; 0
    541e:	61 05       	cpc	r22, r1
    5420:	71 05       	cpc	r23, r1
    5422:	39 f4       	brne	.+14     	; 0x5432 <__ftoa_engine+0x28>
    5424:	32 60       	ori	r19, 0x02	; 2
    5426:	2e 5f       	subi	r18, 0xFE	; 254
    5428:	3d 93       	st	X+, r19
    542a:	30 e3       	ldi	r19, 0x30	; 48
    542c:	2a 95       	dec	r18
    542e:	e1 f7       	brne	.-8      	; 0x5428 <__ftoa_engine+0x1e>
    5430:	08 95       	ret
    5432:	9f 3f       	cpi	r25, 0xFF	; 255
    5434:	30 f0       	brcs	.+12     	; 0x5442 <__ftoa_engine+0x38>
    5436:	80 38       	cpi	r24, 0x80	; 128
    5438:	71 05       	cpc	r23, r1
    543a:	61 05       	cpc	r22, r1
    543c:	09 f0       	breq	.+2      	; 0x5440 <__ftoa_engine+0x36>
    543e:	3c 5f       	subi	r19, 0xFC	; 252
    5440:	3c 5f       	subi	r19, 0xFC	; 252
    5442:	3d 93       	st	X+, r19
    5444:	91 30       	cpi	r25, 0x01	; 1
    5446:	08 f0       	brcs	.+2      	; 0x544a <__ftoa_engine+0x40>
    5448:	80 68       	ori	r24, 0x80	; 128
    544a:	91 1d       	adc	r25, r1
    544c:	df 93       	push	r29
    544e:	cf 93       	push	r28
    5450:	1f 93       	push	r17
    5452:	0f 93       	push	r16
    5454:	ff 92       	push	r15
    5456:	ef 92       	push	r14
    5458:	19 2f       	mov	r17, r25
    545a:	98 7f       	andi	r25, 0xF8	; 248
    545c:	96 95       	lsr	r25
    545e:	e9 2f       	mov	r30, r25
    5460:	96 95       	lsr	r25
    5462:	96 95       	lsr	r25
    5464:	e9 0f       	add	r30, r25
    5466:	ff 27       	eor	r31, r31
    5468:	e4 50       	subi	r30, 0x04	; 4
    546a:	fe 4f       	sbci	r31, 0xFE	; 254
    546c:	99 27       	eor	r25, r25
    546e:	33 27       	eor	r19, r19
    5470:	ee 24       	eor	r14, r14
    5472:	ff 24       	eor	r15, r15
    5474:	a7 01       	movw	r20, r14
    5476:	e7 01       	movw	r28, r14
    5478:	05 90       	lpm	r0, Z+
    547a:	08 94       	sec
    547c:	07 94       	ror	r0
    547e:	28 f4       	brcc	.+10     	; 0x548a <__ftoa_engine+0x80>
    5480:	36 0f       	add	r19, r22
    5482:	e7 1e       	adc	r14, r23
    5484:	f8 1e       	adc	r15, r24
    5486:	49 1f       	adc	r20, r25
    5488:	51 1d       	adc	r21, r1
    548a:	66 0f       	add	r22, r22
    548c:	77 1f       	adc	r23, r23
    548e:	88 1f       	adc	r24, r24
    5490:	99 1f       	adc	r25, r25
    5492:	06 94       	lsr	r0
    5494:	a1 f7       	brne	.-24     	; 0x547e <__ftoa_engine+0x74>
    5496:	05 90       	lpm	r0, Z+
    5498:	07 94       	ror	r0
    549a:	28 f4       	brcc	.+10     	; 0x54a6 <__ftoa_engine+0x9c>
    549c:	e7 0e       	add	r14, r23
    549e:	f8 1e       	adc	r15, r24
    54a0:	49 1f       	adc	r20, r25
    54a2:	56 1f       	adc	r21, r22
    54a4:	c1 1d       	adc	r28, r1
    54a6:	77 0f       	add	r23, r23
    54a8:	88 1f       	adc	r24, r24
    54aa:	99 1f       	adc	r25, r25
    54ac:	66 1f       	adc	r22, r22
    54ae:	06 94       	lsr	r0
    54b0:	a1 f7       	brne	.-24     	; 0x549a <__ftoa_engine+0x90>
    54b2:	05 90       	lpm	r0, Z+
    54b4:	07 94       	ror	r0
    54b6:	28 f4       	brcc	.+10     	; 0x54c2 <__ftoa_engine+0xb8>
    54b8:	f8 0e       	add	r15, r24
    54ba:	49 1f       	adc	r20, r25
    54bc:	56 1f       	adc	r21, r22
    54be:	c7 1f       	adc	r28, r23
    54c0:	d1 1d       	adc	r29, r1
    54c2:	88 0f       	add	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	66 1f       	adc	r22, r22
    54c8:	77 1f       	adc	r23, r23
    54ca:	06 94       	lsr	r0
    54cc:	a1 f7       	brne	.-24     	; 0x54b6 <__ftoa_engine+0xac>
    54ce:	05 90       	lpm	r0, Z+
    54d0:	07 94       	ror	r0
    54d2:	20 f4       	brcc	.+8      	; 0x54dc <__ftoa_engine+0xd2>
    54d4:	49 0f       	add	r20, r25
    54d6:	56 1f       	adc	r21, r22
    54d8:	c7 1f       	adc	r28, r23
    54da:	d8 1f       	adc	r29, r24
    54dc:	99 0f       	add	r25, r25
    54de:	66 1f       	adc	r22, r22
    54e0:	77 1f       	adc	r23, r23
    54e2:	88 1f       	adc	r24, r24
    54e4:	06 94       	lsr	r0
    54e6:	a9 f7       	brne	.-22     	; 0x54d2 <__ftoa_engine+0xc8>
    54e8:	84 91       	lpm	r24, Z
    54ea:	10 95       	com	r17
    54ec:	17 70       	andi	r17, 0x07	; 7
    54ee:	41 f0       	breq	.+16     	; 0x5500 <__ftoa_engine+0xf6>
    54f0:	d6 95       	lsr	r29
    54f2:	c7 95       	ror	r28
    54f4:	57 95       	ror	r21
    54f6:	47 95       	ror	r20
    54f8:	f7 94       	ror	r15
    54fa:	e7 94       	ror	r14
    54fc:	1a 95       	dec	r17
    54fe:	c1 f7       	brne	.-16     	; 0x54f0 <__ftoa_engine+0xe6>
    5500:	e2 ea       	ldi	r30, 0xA2	; 162
    5502:	f1 e0       	ldi	r31, 0x01	; 1
    5504:	68 94       	set
    5506:	15 90       	lpm	r1, Z+
    5508:	15 91       	lpm	r17, Z+
    550a:	35 91       	lpm	r19, Z+
    550c:	65 91       	lpm	r22, Z+
    550e:	95 91       	lpm	r25, Z+
    5510:	05 90       	lpm	r0, Z+
    5512:	7f e2       	ldi	r23, 0x2F	; 47
    5514:	73 95       	inc	r23
    5516:	e1 18       	sub	r14, r1
    5518:	f1 0a       	sbc	r15, r17
    551a:	43 0b       	sbc	r20, r19
    551c:	56 0b       	sbc	r21, r22
    551e:	c9 0b       	sbc	r28, r25
    5520:	d0 09       	sbc	r29, r0
    5522:	c0 f7       	brcc	.-16     	; 0x5514 <__ftoa_engine+0x10a>
    5524:	e1 0c       	add	r14, r1
    5526:	f1 1e       	adc	r15, r17
    5528:	43 1f       	adc	r20, r19
    552a:	56 1f       	adc	r21, r22
    552c:	c9 1f       	adc	r28, r25
    552e:	d0 1d       	adc	r29, r0
    5530:	7e f4       	brtc	.+30     	; 0x5550 <__ftoa_engine+0x146>
    5532:	70 33       	cpi	r23, 0x30	; 48
    5534:	11 f4       	brne	.+4      	; 0x553a <__ftoa_engine+0x130>
    5536:	8a 95       	dec	r24
    5538:	e6 cf       	rjmp	.-52     	; 0x5506 <__ftoa_engine+0xfc>
    553a:	e8 94       	clt
    553c:	01 50       	subi	r16, 0x01	; 1
    553e:	30 f0       	brcs	.+12     	; 0x554c <__ftoa_engine+0x142>
    5540:	08 0f       	add	r16, r24
    5542:	0a f4       	brpl	.+2      	; 0x5546 <__ftoa_engine+0x13c>
    5544:	00 27       	eor	r16, r16
    5546:	02 17       	cp	r16, r18
    5548:	08 f4       	brcc	.+2      	; 0x554c <__ftoa_engine+0x142>
    554a:	20 2f       	mov	r18, r16
    554c:	23 95       	inc	r18
    554e:	02 2f       	mov	r16, r18
    5550:	7a 33       	cpi	r23, 0x3A	; 58
    5552:	28 f0       	brcs	.+10     	; 0x555e <__ftoa_engine+0x154>
    5554:	79 e3       	ldi	r23, 0x39	; 57
    5556:	7d 93       	st	X+, r23
    5558:	2a 95       	dec	r18
    555a:	e9 f7       	brne	.-6      	; 0x5556 <__ftoa_engine+0x14c>
    555c:	10 c0       	rjmp	.+32     	; 0x557e <__ftoa_engine+0x174>
    555e:	7d 93       	st	X+, r23
    5560:	2a 95       	dec	r18
    5562:	89 f6       	brne	.-94     	; 0x5506 <__ftoa_engine+0xfc>
    5564:	06 94       	lsr	r0
    5566:	97 95       	ror	r25
    5568:	67 95       	ror	r22
    556a:	37 95       	ror	r19
    556c:	17 95       	ror	r17
    556e:	17 94       	ror	r1
    5570:	e1 18       	sub	r14, r1
    5572:	f1 0a       	sbc	r15, r17
    5574:	43 0b       	sbc	r20, r19
    5576:	56 0b       	sbc	r21, r22
    5578:	c9 0b       	sbc	r28, r25
    557a:	d0 09       	sbc	r29, r0
    557c:	98 f0       	brcs	.+38     	; 0x55a4 <__ftoa_engine+0x19a>
    557e:	23 95       	inc	r18
    5580:	7e 91       	ld	r23, -X
    5582:	73 95       	inc	r23
    5584:	7a 33       	cpi	r23, 0x3A	; 58
    5586:	08 f0       	brcs	.+2      	; 0x558a <__ftoa_engine+0x180>
    5588:	70 e3       	ldi	r23, 0x30	; 48
    558a:	7c 93       	st	X, r23
    558c:	20 13       	cpse	r18, r16
    558e:	b8 f7       	brcc	.-18     	; 0x557e <__ftoa_engine+0x174>
    5590:	7e 91       	ld	r23, -X
    5592:	70 61       	ori	r23, 0x10	; 16
    5594:	7d 93       	st	X+, r23
    5596:	30 f0       	brcs	.+12     	; 0x55a4 <__ftoa_engine+0x19a>
    5598:	83 95       	inc	r24
    559a:	71 e3       	ldi	r23, 0x31	; 49
    559c:	7d 93       	st	X+, r23
    559e:	70 e3       	ldi	r23, 0x30	; 48
    55a0:	2a 95       	dec	r18
    55a2:	e1 f7       	brne	.-8      	; 0x559c <__ftoa_engine+0x192>
    55a4:	11 24       	eor	r1, r1
    55a6:	ef 90       	pop	r14
    55a8:	ff 90       	pop	r15
    55aa:	0f 91       	pop	r16
    55ac:	1f 91       	pop	r17
    55ae:	cf 91       	pop	r28
    55b0:	df 91       	pop	r29
    55b2:	99 27       	eor	r25, r25
    55b4:	87 fd       	sbrc	r24, 7
    55b6:	90 95       	com	r25
    55b8:	08 95       	ret

000055ba <strnlen_P>:
    55ba:	fc 01       	movw	r30, r24
    55bc:	05 90       	lpm	r0, Z+
    55be:	61 50       	subi	r22, 0x01	; 1
    55c0:	70 40       	sbci	r23, 0x00	; 0
    55c2:	01 10       	cpse	r0, r1
    55c4:	d8 f7       	brcc	.-10     	; 0x55bc <strnlen_P+0x2>
    55c6:	80 95       	com	r24
    55c8:	90 95       	com	r25
    55ca:	8e 0f       	add	r24, r30
    55cc:	9f 1f       	adc	r25, r31
    55ce:	08 95       	ret

000055d0 <memcpy>:
    55d0:	fb 01       	movw	r30, r22
    55d2:	dc 01       	movw	r26, r24
    55d4:	02 c0       	rjmp	.+4      	; 0x55da <memcpy+0xa>
    55d6:	01 90       	ld	r0, Z+
    55d8:	0d 92       	st	X+, r0
    55da:	41 50       	subi	r20, 0x01	; 1
    55dc:	50 40       	sbci	r21, 0x00	; 0
    55de:	d8 f7       	brcc	.-10     	; 0x55d6 <memcpy+0x6>
    55e0:	08 95       	ret

000055e2 <memset>:
    55e2:	dc 01       	movw	r26, r24
    55e4:	01 c0       	rjmp	.+2      	; 0x55e8 <memset+0x6>
    55e6:	6d 93       	st	X+, r22
    55e8:	41 50       	subi	r20, 0x01	; 1
    55ea:	50 40       	sbci	r21, 0x00	; 0
    55ec:	e0 f7       	brcc	.-8      	; 0x55e6 <memset+0x4>
    55ee:	08 95       	ret

000055f0 <strcat>:
    55f0:	fb 01       	movw	r30, r22
    55f2:	dc 01       	movw	r26, r24
    55f4:	0d 90       	ld	r0, X+
    55f6:	00 20       	and	r0, r0
    55f8:	e9 f7       	brne	.-6      	; 0x55f4 <strcat+0x4>
    55fa:	11 97       	sbiw	r26, 0x01	; 1
    55fc:	01 90       	ld	r0, Z+
    55fe:	0d 92       	st	X+, r0
    5600:	00 20       	and	r0, r0
    5602:	e1 f7       	brne	.-8      	; 0x55fc <strcat+0xc>
    5604:	08 95       	ret

00005606 <strcpy>:
    5606:	fb 01       	movw	r30, r22
    5608:	dc 01       	movw	r26, r24
    560a:	01 90       	ld	r0, Z+
    560c:	0d 92       	st	X+, r0
    560e:	00 20       	and	r0, r0
    5610:	e1 f7       	brne	.-8      	; 0x560a <strcpy+0x4>
    5612:	08 95       	ret

00005614 <strncasecmp>:
    5614:	fb 01       	movw	r30, r22
    5616:	dc 01       	movw	r26, r24
    5618:	41 50       	subi	r20, 0x01	; 1
    561a:	50 40       	sbci	r21, 0x00	; 0
    561c:	88 f0       	brcs	.+34     	; 0x5640 <strncasecmp+0x2c>
    561e:	8d 91       	ld	r24, X+
    5620:	81 34       	cpi	r24, 0x41	; 65
    5622:	1c f0       	brlt	.+6      	; 0x562a <strncasecmp+0x16>
    5624:	8b 35       	cpi	r24, 0x5B	; 91
    5626:	0c f4       	brge	.+2      	; 0x562a <strncasecmp+0x16>
    5628:	80 5e       	subi	r24, 0xE0	; 224
    562a:	61 91       	ld	r22, Z+
    562c:	61 34       	cpi	r22, 0x41	; 65
    562e:	1c f0       	brlt	.+6      	; 0x5636 <strncasecmp+0x22>
    5630:	6b 35       	cpi	r22, 0x5B	; 91
    5632:	0c f4       	brge	.+2      	; 0x5636 <strncasecmp+0x22>
    5634:	60 5e       	subi	r22, 0xE0	; 224
    5636:	86 1b       	sub	r24, r22
    5638:	61 11       	cpse	r22, r1
    563a:	71 f3       	breq	.-36     	; 0x5618 <strncasecmp+0x4>
    563c:	99 0b       	sbc	r25, r25
    563e:	08 95       	ret
    5640:	88 1b       	sub	r24, r24
    5642:	fc cf       	rjmp	.-8      	; 0x563c <strncasecmp+0x28>

00005644 <strnlen>:
    5644:	fc 01       	movw	r30, r24
    5646:	61 50       	subi	r22, 0x01	; 1
    5648:	70 40       	sbci	r23, 0x00	; 0
    564a:	01 90       	ld	r0, Z+
    564c:	01 10       	cpse	r0, r1
    564e:	d8 f7       	brcc	.-10     	; 0x5646 <strnlen+0x2>
    5650:	80 95       	com	r24
    5652:	90 95       	com	r25
    5654:	8e 0f       	add	r24, r30
    5656:	9f 1f       	adc	r25, r31
    5658:	08 95       	ret

0000565a <fputc>:
    565a:	0f 93       	push	r16
    565c:	1f 93       	push	r17
    565e:	cf 93       	push	r28
    5660:	df 93       	push	r29
    5662:	fb 01       	movw	r30, r22
    5664:	23 81       	ldd	r18, Z+3	; 0x03
    5666:	21 fd       	sbrc	r18, 1
    5668:	03 c0       	rjmp	.+6      	; 0x5670 <fputc+0x16>
    566a:	8f ef       	ldi	r24, 0xFF	; 255
    566c:	9f ef       	ldi	r25, 0xFF	; 255
    566e:	2c c0       	rjmp	.+88     	; 0x56c8 <fputc+0x6e>
    5670:	22 ff       	sbrs	r18, 2
    5672:	16 c0       	rjmp	.+44     	; 0x56a0 <fputc+0x46>
    5674:	46 81       	ldd	r20, Z+6	; 0x06
    5676:	57 81       	ldd	r21, Z+7	; 0x07
    5678:	24 81       	ldd	r18, Z+4	; 0x04
    567a:	35 81       	ldd	r19, Z+5	; 0x05
    567c:	42 17       	cp	r20, r18
    567e:	53 07       	cpc	r21, r19
    5680:	44 f4       	brge	.+16     	; 0x5692 <fputc+0x38>
    5682:	a0 81       	ld	r26, Z
    5684:	b1 81       	ldd	r27, Z+1	; 0x01
    5686:	9d 01       	movw	r18, r26
    5688:	2f 5f       	subi	r18, 0xFF	; 255
    568a:	3f 4f       	sbci	r19, 0xFF	; 255
    568c:	31 83       	std	Z+1, r19	; 0x01
    568e:	20 83       	st	Z, r18
    5690:	8c 93       	st	X, r24
    5692:	26 81       	ldd	r18, Z+6	; 0x06
    5694:	37 81       	ldd	r19, Z+7	; 0x07
    5696:	2f 5f       	subi	r18, 0xFF	; 255
    5698:	3f 4f       	sbci	r19, 0xFF	; 255
    569a:	37 83       	std	Z+7, r19	; 0x07
    569c:	26 83       	std	Z+6, r18	; 0x06
    569e:	14 c0       	rjmp	.+40     	; 0x56c8 <fputc+0x6e>
    56a0:	8b 01       	movw	r16, r22
    56a2:	ec 01       	movw	r28, r24
    56a4:	fb 01       	movw	r30, r22
    56a6:	00 84       	ldd	r0, Z+8	; 0x08
    56a8:	f1 85       	ldd	r31, Z+9	; 0x09
    56aa:	e0 2d       	mov	r30, r0
    56ac:	19 95       	eicall
    56ae:	89 2b       	or	r24, r25
    56b0:	e1 f6       	brne	.-72     	; 0x566a <fputc+0x10>
    56b2:	d8 01       	movw	r26, r16
    56b4:	16 96       	adiw	r26, 0x06	; 6
    56b6:	8d 91       	ld	r24, X+
    56b8:	9c 91       	ld	r25, X
    56ba:	17 97       	sbiw	r26, 0x07	; 7
    56bc:	01 96       	adiw	r24, 0x01	; 1
    56be:	17 96       	adiw	r26, 0x07	; 7
    56c0:	9c 93       	st	X, r25
    56c2:	8e 93       	st	-X, r24
    56c4:	16 97       	sbiw	r26, 0x06	; 6
    56c6:	ce 01       	movw	r24, r28
    56c8:	df 91       	pop	r29
    56ca:	cf 91       	pop	r28
    56cc:	1f 91       	pop	r17
    56ce:	0f 91       	pop	r16
    56d0:	08 95       	ret

000056d2 <printf>:
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
    56d6:	cd b7       	in	r28, 0x3d	; 61
    56d8:	de b7       	in	r29, 0x3e	; 62
    56da:	ae 01       	movw	r20, r28
    56dc:	4a 5f       	subi	r20, 0xFA	; 250
    56de:	5f 4f       	sbci	r21, 0xFF	; 255
    56e0:	fa 01       	movw	r30, r20
    56e2:	61 91       	ld	r22, Z+
    56e4:	71 91       	ld	r23, Z+
    56e6:	af 01       	movw	r20, r30
    56e8:	80 91 ef 0b 	lds	r24, 0x0BEF	; 0x800bef <__iob+0x2>
    56ec:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <__iob+0x3>
    56f0:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <vfprintf>
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	08 95       	ret

000056fa <puts>:
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	e0 91 ef 0b 	lds	r30, 0x0BEF	; 0x800bef <__iob+0x2>
    5706:	f0 91 f0 0b 	lds	r31, 0x0BF0	; 0x800bf0 <__iob+0x3>
    570a:	23 81       	ldd	r18, Z+3	; 0x03
    570c:	21 ff       	sbrs	r18, 1
    570e:	1b c0       	rjmp	.+54     	; 0x5746 <puts+0x4c>
    5710:	8c 01       	movw	r16, r24
    5712:	d0 e0       	ldi	r29, 0x00	; 0
    5714:	c0 e0       	ldi	r28, 0x00	; 0
    5716:	f8 01       	movw	r30, r16
    5718:	81 91       	ld	r24, Z+
    571a:	8f 01       	movw	r16, r30
    571c:	60 91 ef 0b 	lds	r22, 0x0BEF	; 0x800bef <__iob+0x2>
    5720:	70 91 f0 0b 	lds	r23, 0x0BF0	; 0x800bf0 <__iob+0x3>
    5724:	db 01       	movw	r26, r22
    5726:	18 96       	adiw	r26, 0x08	; 8
    5728:	ed 91       	ld	r30, X+
    572a:	fc 91       	ld	r31, X
    572c:	19 97       	sbiw	r26, 0x09	; 9
    572e:	88 23       	and	r24, r24
    5730:	31 f0       	breq	.+12     	; 0x573e <puts+0x44>
    5732:	19 95       	eicall
    5734:	89 2b       	or	r24, r25
    5736:	79 f3       	breq	.-34     	; 0x5716 <puts+0x1c>
    5738:	df ef       	ldi	r29, 0xFF	; 255
    573a:	cf ef       	ldi	r28, 0xFF	; 255
    573c:	ec cf       	rjmp	.-40     	; 0x5716 <puts+0x1c>
    573e:	8a e0       	ldi	r24, 0x0A	; 10
    5740:	19 95       	eicall
    5742:	89 2b       	or	r24, r25
    5744:	19 f0       	breq	.+6      	; 0x574c <puts+0x52>
    5746:	8f ef       	ldi	r24, 0xFF	; 255
    5748:	9f ef       	ldi	r25, 0xFF	; 255
    574a:	02 c0       	rjmp	.+4      	; 0x5750 <puts+0x56>
    574c:	8d 2f       	mov	r24, r29
    574e:	9c 2f       	mov	r25, r28
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	1f 91       	pop	r17
    5756:	0f 91       	pop	r16
    5758:	08 95       	ret

0000575a <sprintf>:
    575a:	0f 93       	push	r16
    575c:	1f 93       	push	r17
    575e:	cf 93       	push	r28
    5760:	df 93       	push	r29
    5762:	cd b7       	in	r28, 0x3d	; 61
    5764:	de b7       	in	r29, 0x3e	; 62
    5766:	2e 97       	sbiw	r28, 0x0e	; 14
    5768:	0f b6       	in	r0, 0x3f	; 63
    576a:	f8 94       	cli
    576c:	de bf       	out	0x3e, r29	; 62
    576e:	0f be       	out	0x3f, r0	; 63
    5770:	cd bf       	out	0x3d, r28	; 61
    5772:	0e 89       	ldd	r16, Y+22	; 0x16
    5774:	1f 89       	ldd	r17, Y+23	; 0x17
    5776:	86 e0       	ldi	r24, 0x06	; 6
    5778:	8c 83       	std	Y+4, r24	; 0x04
    577a:	1a 83       	std	Y+2, r17	; 0x02
    577c:	09 83       	std	Y+1, r16	; 0x01
    577e:	8f ef       	ldi	r24, 0xFF	; 255
    5780:	9f e7       	ldi	r25, 0x7F	; 127
    5782:	9e 83       	std	Y+6, r25	; 0x06
    5784:	8d 83       	std	Y+5, r24	; 0x05
    5786:	ae 01       	movw	r20, r28
    5788:	46 5e       	subi	r20, 0xE6	; 230
    578a:	5f 4f       	sbci	r21, 0xFF	; 255
    578c:	68 8d       	ldd	r22, Y+24	; 0x18
    578e:	79 8d       	ldd	r23, Y+25	; 0x19
    5790:	ce 01       	movw	r24, r28
    5792:	01 96       	adiw	r24, 0x01	; 1
    5794:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <vfprintf>
    5798:	ef 81       	ldd	r30, Y+7	; 0x07
    579a:	f8 85       	ldd	r31, Y+8	; 0x08
    579c:	e0 0f       	add	r30, r16
    579e:	f1 1f       	adc	r31, r17
    57a0:	10 82       	st	Z, r1
    57a2:	2e 96       	adiw	r28, 0x0e	; 14
    57a4:	0f b6       	in	r0, 0x3f	; 63
    57a6:	f8 94       	cli
    57a8:	de bf       	out	0x3e, r29	; 62
    57aa:	0f be       	out	0x3f, r0	; 63
    57ac:	cd bf       	out	0x3d, r28	; 61
    57ae:	df 91       	pop	r29
    57b0:	cf 91       	pop	r28
    57b2:	1f 91       	pop	r17
    57b4:	0f 91       	pop	r16
    57b6:	08 95       	ret

000057b8 <__ultoa_invert>:
    57b8:	fa 01       	movw	r30, r20
    57ba:	aa 27       	eor	r26, r26
    57bc:	28 30       	cpi	r18, 0x08	; 8
    57be:	51 f1       	breq	.+84     	; 0x5814 <__ultoa_invert+0x5c>
    57c0:	20 31       	cpi	r18, 0x10	; 16
    57c2:	81 f1       	breq	.+96     	; 0x5824 <__ultoa_invert+0x6c>
    57c4:	e8 94       	clt
    57c6:	6f 93       	push	r22
    57c8:	6e 7f       	andi	r22, 0xFE	; 254
    57ca:	6e 5f       	subi	r22, 0xFE	; 254
    57cc:	7f 4f       	sbci	r23, 0xFF	; 255
    57ce:	8f 4f       	sbci	r24, 0xFF	; 255
    57d0:	9f 4f       	sbci	r25, 0xFF	; 255
    57d2:	af 4f       	sbci	r26, 0xFF	; 255
    57d4:	b1 e0       	ldi	r27, 0x01	; 1
    57d6:	3e d0       	rcall	.+124    	; 0x5854 <__ultoa_invert+0x9c>
    57d8:	b4 e0       	ldi	r27, 0x04	; 4
    57da:	3c d0       	rcall	.+120    	; 0x5854 <__ultoa_invert+0x9c>
    57dc:	67 0f       	add	r22, r23
    57de:	78 1f       	adc	r23, r24
    57e0:	89 1f       	adc	r24, r25
    57e2:	9a 1f       	adc	r25, r26
    57e4:	a1 1d       	adc	r26, r1
    57e6:	68 0f       	add	r22, r24
    57e8:	79 1f       	adc	r23, r25
    57ea:	8a 1f       	adc	r24, r26
    57ec:	91 1d       	adc	r25, r1
    57ee:	a1 1d       	adc	r26, r1
    57f0:	6a 0f       	add	r22, r26
    57f2:	71 1d       	adc	r23, r1
    57f4:	81 1d       	adc	r24, r1
    57f6:	91 1d       	adc	r25, r1
    57f8:	a1 1d       	adc	r26, r1
    57fa:	20 d0       	rcall	.+64     	; 0x583c <__ultoa_invert+0x84>
    57fc:	09 f4       	brne	.+2      	; 0x5800 <__ultoa_invert+0x48>
    57fe:	68 94       	set
    5800:	3f 91       	pop	r19
    5802:	2a e0       	ldi	r18, 0x0A	; 10
    5804:	26 9f       	mul	r18, r22
    5806:	11 24       	eor	r1, r1
    5808:	30 19       	sub	r19, r0
    580a:	30 5d       	subi	r19, 0xD0	; 208
    580c:	31 93       	st	Z+, r19
    580e:	de f6       	brtc	.-74     	; 0x57c6 <__ultoa_invert+0xe>
    5810:	cf 01       	movw	r24, r30
    5812:	08 95       	ret
    5814:	46 2f       	mov	r20, r22
    5816:	47 70       	andi	r20, 0x07	; 7
    5818:	40 5d       	subi	r20, 0xD0	; 208
    581a:	41 93       	st	Z+, r20
    581c:	b3 e0       	ldi	r27, 0x03	; 3
    581e:	0f d0       	rcall	.+30     	; 0x583e <__ultoa_invert+0x86>
    5820:	c9 f7       	brne	.-14     	; 0x5814 <__ultoa_invert+0x5c>
    5822:	f6 cf       	rjmp	.-20     	; 0x5810 <__ultoa_invert+0x58>
    5824:	46 2f       	mov	r20, r22
    5826:	4f 70       	andi	r20, 0x0F	; 15
    5828:	40 5d       	subi	r20, 0xD0	; 208
    582a:	4a 33       	cpi	r20, 0x3A	; 58
    582c:	18 f0       	brcs	.+6      	; 0x5834 <__ultoa_invert+0x7c>
    582e:	49 5d       	subi	r20, 0xD9	; 217
    5830:	31 fd       	sbrc	r19, 1
    5832:	40 52       	subi	r20, 0x20	; 32
    5834:	41 93       	st	Z+, r20
    5836:	02 d0       	rcall	.+4      	; 0x583c <__ultoa_invert+0x84>
    5838:	a9 f7       	brne	.-22     	; 0x5824 <__ultoa_invert+0x6c>
    583a:	ea cf       	rjmp	.-44     	; 0x5810 <__ultoa_invert+0x58>
    583c:	b4 e0       	ldi	r27, 0x04	; 4
    583e:	a6 95       	lsr	r26
    5840:	97 95       	ror	r25
    5842:	87 95       	ror	r24
    5844:	77 95       	ror	r23
    5846:	67 95       	ror	r22
    5848:	ba 95       	dec	r27
    584a:	c9 f7       	brne	.-14     	; 0x583e <__ultoa_invert+0x86>
    584c:	00 97       	sbiw	r24, 0x00	; 0
    584e:	61 05       	cpc	r22, r1
    5850:	71 05       	cpc	r23, r1
    5852:	08 95       	ret
    5854:	9b 01       	movw	r18, r22
    5856:	ac 01       	movw	r20, r24
    5858:	0a 2e       	mov	r0, r26
    585a:	06 94       	lsr	r0
    585c:	57 95       	ror	r21
    585e:	47 95       	ror	r20
    5860:	37 95       	ror	r19
    5862:	27 95       	ror	r18
    5864:	ba 95       	dec	r27
    5866:	c9 f7       	brne	.-14     	; 0x585a <__ultoa_invert+0xa2>
    5868:	62 0f       	add	r22, r18
    586a:	73 1f       	adc	r23, r19
    586c:	84 1f       	adc	r24, r20
    586e:	95 1f       	adc	r25, r21
    5870:	a0 1d       	adc	r26, r0
    5872:	08 95       	ret

00005874 <_exit>:
    5874:	f8 94       	cli

00005876 <__stop_program>:
    5876:	ff cf       	rjmp	.-2      	; 0x5876 <__stop_program>
